
TrustZone_challengeResponse_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df78  0c000238  0c000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0c00e1b0  0c00e1b0  0000f1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000394  0c00e5a0  0c00e5a0  0000f5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0c00e934  0c00e934  0000f934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0c00e93c  0c00e93c  0000f93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000004  0c00e940  0c00e940  0000f940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00000009  30000000  0c00e944  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .gnu.sgstubs  00000020  0c0fe000  0c0fe000  00011000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .bss          00000928  3000000c  3000000c  0001200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  30000934  30000934  0001200c  2**0
                  ALLOC
 11 .ARM.attributes 0000003a  00000000  00000000  00011020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212ac  00000000  00000000  0001105a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd6  00000000  00000000  00032306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  000362e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014bd  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b555  00000000  00000000  00039245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025e7c  00000000  00000000  0007479a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001696e4  00000000  00000000  0009a616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00203cfa  2**0
                  CONTENTS, READONLY
 20 .iar_vfe_header 0000002c  00000000  00000000  00203d40  2**2
                  CONTENTS, READONLY
 21 .debug_frame  000072a4  00000000  00000000  00203d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0020b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000238 <__do_global_dtors_aux>:
 c000238:	b510      	push	{r4, lr}
 c00023a:	4c05      	ldr	r4, [pc, #20]	@ (c000250 <__do_global_dtors_aux+0x18>)
 c00023c:	7823      	ldrb	r3, [r4, #0]
 c00023e:	b933      	cbnz	r3, c00024e <__do_global_dtors_aux+0x16>
 c000240:	4b04      	ldr	r3, [pc, #16]	@ (c000254 <__do_global_dtors_aux+0x1c>)
 c000242:	b113      	cbz	r3, c00024a <__do_global_dtors_aux+0x12>
 c000244:	4804      	ldr	r0, [pc, #16]	@ (c000258 <__do_global_dtors_aux+0x20>)
 c000246:	f3af 8000 	nop.w
 c00024a:	2301      	movs	r3, #1
 c00024c:	7023      	strb	r3, [r4, #0]
 c00024e:	bd10      	pop	{r4, pc}
 c000250:	3000000c 	.word	0x3000000c
 c000254:	00000000 	.word	0x00000000
 c000258:	0c00e198 	.word	0x0c00e198

0c00025c <frame_dummy>:
 c00025c:	b508      	push	{r3, lr}
 c00025e:	4b03      	ldr	r3, [pc, #12]	@ (c00026c <frame_dummy+0x10>)
 c000260:	b11b      	cbz	r3, c00026a <frame_dummy+0xe>
 c000262:	4903      	ldr	r1, [pc, #12]	@ (c000270 <frame_dummy+0x14>)
 c000264:	4803      	ldr	r0, [pc, #12]	@ (c000274 <frame_dummy+0x18>)
 c000266:	f3af 8000 	nop.w
 c00026a:	bd08      	pop	{r3, pc}
 c00026c:	00000000 	.word	0x00000000
 c000270:	30000010 	.word	0x30000010
 c000274:	0c00e198 	.word	0x0c00e198

0c000278 <cmox_ecdsa_sign>:
 c000278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00027c:	461c      	mov	r4, r3
 c00027e:	b08f      	sub	sp, #60	@ 0x3c
 c000280:	2300      	movs	r3, #0
 c000282:	460e      	mov	r6, r1
 c000284:	9305      	str	r3, [sp, #20]
 c000286:	9301      	str	r3, [sp, #4]
 c000288:	9302      	str	r3, [sp, #8]
 c00028a:	f44f 28c0 	mov.w	r8, #393216	@ 0x60000
 c00028e:	9303      	str	r3, [sp, #12]
 c000290:	b3be      	cbz	r6, c000302 <cmox_ecdsa_sign+0x8a>
 c000292:	0011      	movs	r1, r2
 c000294:	9200      	str	r2, [sp, #0]
 c000296:	bf1c      	itt	ne
 c000298:	9918      	ldrne	r1, [sp, #96]	@ 0x60
 c00029a:	2900      	cmpne	r1, #0
 c00029c:	d031      	beq.n	c000302 <cmox_ecdsa_sign+0x8a>
 c00029e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 c0002a0:	2900      	cmp	r1, #0
 c0002a2:	bf1c      	itt	ne
 c0002a4:	f8dd 9070 	ldrne.w	r9, [sp, #112]	@ 0x70
 c0002a8:	f1b9 0f00 	cmpne.w	r9, #0
 c0002ac:	d029      	beq.n	c000302 <cmox_ecdsa_sign+0x8a>
 c0002ae:	0005      	movs	r5, r0
 c0002b0:	d027      	beq.n	c000302 <cmox_ecdsa_sign+0x8a>
 c0002b2:	6968      	ldr	r0, [r5, #20]
 c0002b4:	4992      	ldr	r1, [pc, #584]	@ (c000500 <cmox_ecdsa_sign+0x288>)
 c0002b6:	4288      	cmp	r0, r1
 c0002b8:	d123      	bne.n	c000302 <cmox_ecdsa_sign+0x8a>
 c0002ba:	6928      	ldr	r0, [r5, #16]
 c0002bc:	69c1      	ldr	r1, [r0, #28]
 c0002be:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 c0002c0:	4201      	tst	r1, r0
 c0002c2:	bf08      	it	eq
 c0002c4:	f8df 823c 	ldreq.w	r8, [pc, #572]	@ c000504 <cmox_ecdsa_sign+0x28c>
 c0002c8:	d01d      	beq.n	c000306 <cmox_ecdsa_sign+0x8e>
 c0002ca:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 c0002ce:	07c1      	lsls	r1, r0, #31
 c0002d0:	bf58      	it	pl
 c0002d2:	f8df 8234 	ldrpl.w	r8, [pc, #564]	@ c000508 <cmox_ecdsa_sign+0x290>
 c0002d6:	d516      	bpl.n	c000306 <cmox_ecdsa_sign+0x8e>
 c0002d8:	6830      	ldr	r0, [r6, #0]
 c0002da:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 c0002de:	6880      	ldr	r0, [r0, #8]
 c0002e0:	6801      	ldr	r1, [r0, #0]
 c0002e2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 c0002e6:	f000 fc59 	bl	c000b9c <cmox_mathUtils_bitLength>
 c0002ea:	6831      	ldr	r1, [r6, #0]
 c0002ec:	4683      	mov	fp, r0
 c0002ee:	6888      	ldr	r0, [r1, #8]
 c0002f0:	6802      	ldr	r2, [r0, #0]
 c0002f2:	1e51      	subs	r1, r2, #1
 c0002f4:	eb0b 1341 	add.w	r3, fp, r1, lsl #5
 c0002f8:	1ddf      	adds	r7, r3, #7
 c0002fa:	08ff      	lsrs	r7, r7, #3
 c0002fc:	9304      	str	r3, [sp, #16]
 c0002fe:	45ba      	cmp	sl, r7
 c000300:	d002      	beq.n	c000308 <cmox_ecdsa_sign+0x90>
 c000302:	f8df 8208 	ldr.w	r8, [pc, #520]	@ c00050c <cmox_ecdsa_sign+0x294>
 c000306:	e0f6      	b.n	c0004f6 <cmox_ecdsa_sign+0x27e>
 c000308:	4620      	mov	r0, r4
 c00030a:	00c0      	lsls	r0, r0, #3
 c00030c:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 c00030e:	4298      	cmp	r0, r3
 c000310:	d204      	bcs.n	c00031c <cmox_ecdsa_sign+0xa4>
 c000312:	b104      	cbz	r4, c000316 <cmox_ecdsa_sign+0x9e>
 c000314:	6027      	str	r7, [r4, #0]
 c000316:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ c000510 <cmox_ecdsa_sign+0x298>
 c00031a:	e0ec      	b.n	c0004f6 <cmox_ecdsa_sign+0x27e>
 c00031c:	a905      	add	r1, sp, #20
 c00031e:	4628      	mov	r0, r5
 c000320:	f8df a1f0 	ldr.w	sl, [pc, #496]	@ c000514 <cmox_ecdsa_sign+0x29c>
 c000324:	f001 fcdd 	bl	c001ce2 <cmox_bn_alloc>
 c000328:	b108      	cbz	r0, c00032e <cmox_ecdsa_sign+0xb6>
 c00032a:	46d0      	mov	r8, sl
 c00032c:	e0e3      	b.n	c0004f6 <cmox_ecdsa_sign+0x27e>
 c00032e:	6830      	ldr	r0, [r6, #0]
 c000330:	6881      	ldr	r1, [r0, #8]
 c000332:	4628      	mov	r0, r5
 c000334:	680a      	ldr	r2, [r1, #0]
 c000336:	a901      	add	r1, sp, #4
 c000338:	f001 fcd3 	bl	c001ce2 <cmox_bn_alloc>
 c00033c:	b108      	cbz	r0, c000342 <cmox_ecdsa_sign+0xca>
 c00033e:	46d0      	mov	r8, sl
 c000340:	e0d5      	b.n	c0004ee <cmox_ecdsa_sign+0x276>
 c000342:	6830      	ldr	r0, [r6, #0]
 c000344:	6881      	ldr	r1, [r0, #8]
 c000346:	4628      	mov	r0, r5
 c000348:	680a      	ldr	r2, [r1, #0]
 c00034a:	a902      	add	r1, sp, #8
 c00034c:	f001 fcc9 	bl	c001ce2 <cmox_bn_alloc>
 c000350:	b108      	cbz	r0, c000356 <cmox_ecdsa_sign+0xde>
 c000352:	46d0      	mov	r8, sl
 c000354:	e0c7      	b.n	c0004e6 <cmox_ecdsa_sign+0x26e>
 c000356:	9a02      	ldr	r2, [sp, #8]
 c000358:	9800      	ldr	r0, [sp, #0]
 c00035a:	4639      	mov	r1, r7
 c00035c:	f1cb 0b20 	rsb	fp, fp, #32
 c000360:	f001 fe21 	bl	c001fa6 <cmox_bn_fromU8BE>
 c000364:	9a02      	ldr	r2, [sp, #8]
 c000366:	f00b 0107 	and.w	r1, fp, #7
 c00036a:	f8df b1a4 	ldr.w	fp, [pc, #420]	@ c000510 <cmox_ecdsa_sign+0x298>
 c00036e:	4610      	mov	r0, r2
 c000370:	f000 f900 	bl	c000574 <cmox_RightShiftBN>
 c000374:	6830      	ldr	r0, [r6, #0]
 c000376:	9a01      	ldr	r2, [sp, #4]
 c000378:	f06f 0101 	mvn.w	r1, #1
 c00037c:	6880      	ldr	r0, [r0, #8]
 c00037e:	f000 fa68 	bl	c000852 <cmox_AddBN_Int>
 c000382:	9901      	ldr	r1, [sp, #4]
 c000384:	9802      	ldr	r0, [sp, #8]
 c000386:	f001 fd2f 	bl	c001de8 <cmox_bn_cmp>
 c00038a:	2801      	cmp	r0, #1
 c00038c:	bfa8      	it	ge
 c00038e:	46d8      	movge	r8, fp
 c000390:	da10      	bge.n	c0003b4 <cmox_ecdsa_sign+0x13c>
 c000392:	9a02      	ldr	r2, [sp, #8]
 c000394:	2101      	movs	r1, #1
 c000396:	4610      	mov	r0, r2
 c000398:	f000 fa5b 	bl	c000852 <cmox_AddBN_Int>
 c00039c:	692b      	ldr	r3, [r5, #16]
 c00039e:	462a      	mov	r2, r5
 c0003a0:	4631      	mov	r1, r6
 c0003a2:	a806      	add	r0, sp, #24
 c0003a4:	f001 fef7 	bl	c002196 <cmox_ECC_InitCurve>
 c0003a8:	a903      	add	r1, sp, #12
 c0003aa:	a806      	add	r0, sp, #24
 c0003ac:	f001 ff14 	bl	c0021d8 <cmox_ECC_AllocPoint>
 c0003b0:	b108      	cbz	r0, c0003b6 <cmox_ecdsa_sign+0x13e>
 c0003b2:	46d0      	mov	r8, sl
 c0003b4:	e093      	b.n	c0004de <cmox_ecdsa_sign+0x266>
 c0003b6:	a806      	add	r0, sp, #24
 c0003b8:	f001 fefb 	bl	c0021b2 <cmox_ECC_InitCurveModDomainP>
 c0003bc:	b108      	cbz	r0, c0003c2 <cmox_ecdsa_sign+0x14a>
 c0003be:	46d0      	mov	r8, sl
 c0003c0:	e089      	b.n	c0004d6 <cmox_ecdsa_sign+0x25e>
 c0003c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 c0003c4:	9a03      	ldr	r2, [sp, #12]
 c0003c6:	9902      	ldr	r1, [sp, #8]
 c0003c8:	691e      	ldr	r6, [r3, #16]
 c0003ca:	a806      	add	r0, sp, #24
 c0003cc:	f8d6 c000 	ldr.w	ip, [r6]
 c0003d0:	47e0      	blx	ip
 c0003d2:	b9b0      	cbnz	r0, c000402 <cmox_ecdsa_sign+0x18a>
 c0003d4:	9903      	ldr	r1, [sp, #12]
 c0003d6:	a806      	add	r0, sp, #24
 c0003d8:	f002 f9ae 	bl	c002738 <cmox_ECC_PointToAffine>
 c0003dc:	b988      	cbnz	r0, c000402 <cmox_ecdsa_sign+0x18a>
 c0003de:	a806      	add	r0, sp, #24
 c0003e0:	f001 fef7 	bl	c0021d2 <cmox_ECC_DeInitCurveModDomain>
 c0003e4:	a806      	add	r0, sp, #24
 c0003e6:	f001 feec 	bl	c0021c2 <cmox_ECC_InitCurveModDomainN>
 c0003ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 c0003ec:	9802      	ldr	r0, [sp, #8]
 c0003ee:	a906      	add	r1, sp, #24
 c0003f0:	f000 fb46 	bl	c000a80 <cmox_ModularBN_Enter>
 c0003f4:	9b01      	ldr	r3, [sp, #4]
 c0003f6:	9a05      	ldr	r2, [sp, #20]
 c0003f8:	9902      	ldr	r1, [sp, #8]
 c0003fa:	a806      	add	r0, sp, #24
 c0003fc:	f001 fe9d 	bl	c00213a <cmox_ECC_InvertModN>
 c000400:	b108      	cbz	r0, c000406 <cmox_ecdsa_sign+0x18e>
 c000402:	46d0      	mov	r8, sl
 c000404:	e064      	b.n	c0004d0 <cmox_ecdsa_sign+0x258>
 c000406:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c000408:	9b02      	ldr	r3, [sp, #8]
 c00040a:	6801      	ldr	r1, [r0, #0]
 c00040c:	9803      	ldr	r0, [sp, #12]
 c00040e:	6889      	ldr	r1, [r1, #8]
 c000410:	6800      	ldr	r0, [r0, #0]
 c000412:	460a      	mov	r2, r1
 c000414:	f000 f96a 	bl	c0006ec <cmox_ModSubBN>
 c000418:	9802      	ldr	r0, [sp, #8]
 c00041a:	2100      	movs	r1, #0
 c00041c:	f001 fd25 	bl	c001e6a <cmox_bn_cmpUint>
 c000420:	2801      	cmp	r0, #1
 c000422:	d04a      	beq.n	c0004ba <cmox_ecdsa_sign+0x242>
 c000424:	9802      	ldr	r0, [sp, #8]
 c000426:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 c000428:	463a      	mov	r2, r7
 c00042a:	4649      	mov	r1, r9
 c00042c:	f001 fdfe 	bl	c00202c <cmox_bn_toU8BE>
 c000430:	9a01      	ldr	r2, [sp, #4]
 c000432:	9818      	ldr	r0, [sp, #96]	@ 0x60
 c000434:	4639      	mov	r1, r7
 c000436:	f001 fdb6 	bl	c001fa6 <cmox_bn_fromU8BE>
 c00043a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 c00043c:	9802      	ldr	r0, [sp, #8]
 c00043e:	a906      	add	r1, sp, #24
 c000440:	f000 fb1e 	bl	c000a80 <cmox_ModularBN_Enter>
 c000444:	980e      	ldr	r0, [sp, #56]	@ 0x38
 c000446:	9a02      	ldr	r2, [sp, #8]
 c000448:	9901      	ldr	r1, [sp, #4]
 c00044a:	9000      	str	r0, [sp, #0]
 c00044c:	ab06      	add	r3, sp, #24
 c00044e:	4610      	mov	r0, r2
 c000450:	f000 fb40 	bl	c000ad4 <cmox_ModularBN_Mul>
 c000454:	9804      	ldr	r0, [sp, #16]
 c000456:	9a01      	ldr	r2, [sp, #4]
 c000458:	ebb0 0fc6 	cmp.w	r0, r6, lsl #3
 c00045c:	d20b      	bcs.n	c000476 <cmox_ecdsa_sign+0x1fe>
 c00045e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 c000460:	4639      	mov	r1, r7
 c000462:	f001 fda0 	bl	c001fa6 <cmox_bn_fromU8BE>
 c000466:	9a01      	ldr	r2, [sp, #4]
 c000468:	9904      	ldr	r1, [sp, #16]
 c00046a:	ebc1 01c7 	rsb	r1, r1, r7, lsl #3
 c00046e:	4610      	mov	r0, r2
 c000470:	f000 f880 	bl	c000574 <cmox_RightShiftBN>
 c000474:	e003      	b.n	c00047e <cmox_ecdsa_sign+0x206>
 c000476:	981a      	ldr	r0, [sp, #104]	@ 0x68
 c000478:	4631      	mov	r1, r6
 c00047a:	f001 fd94 	bl	c001fa6 <cmox_bn_fromU8BE>
 c00047e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c000480:	9b01      	ldr	r3, [sp, #4]
 c000482:	6801      	ldr	r1, [r0, #0]
 c000484:	6889      	ldr	r1, [r1, #8]
 c000486:	4618      	mov	r0, r3
 c000488:	460a      	mov	r2, r1
 c00048a:	f000 f92f 	bl	c0006ec <cmox_ModSubBN>
 c00048e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c000490:	9b01      	ldr	r3, [sp, #4]
 c000492:	6801      	ldr	r1, [r0, #0]
 c000494:	688a      	ldr	r2, [r1, #8]
 c000496:	9902      	ldr	r1, [sp, #8]
 c000498:	4618      	mov	r0, r3
 c00049a:	f000 f896 	bl	c0005ca <cmox_ModAddBN>
 c00049e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 c0004a0:	9a01      	ldr	r2, [sp, #4]
 c0004a2:	ab06      	add	r3, sp, #24
 c0004a4:	9000      	str	r0, [sp, #0]
 c0004a6:	9805      	ldr	r0, [sp, #20]
 c0004a8:	4611      	mov	r1, r2
 c0004aa:	f000 fb13 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0004ae:	9801      	ldr	r0, [sp, #4]
 c0004b0:	2100      	movs	r1, #0
 c0004b2:	f001 fcda 	bl	c001e6a <cmox_bn_cmpUint>
 c0004b6:	2801      	cmp	r0, #1
 c0004b8:	d101      	bne.n	c0004be <cmox_ecdsa_sign+0x246>
 c0004ba:	46d8      	mov	r8, fp
 c0004bc:	e008      	b.n	c0004d0 <cmox_ecdsa_sign+0x258>
 c0004be:	9801      	ldr	r0, [sp, #4]
 c0004c0:	463a      	mov	r2, r7
 c0004c2:	eb09 0107 	add.w	r1, r9, r7
 c0004c6:	f001 fdb1 	bl	c00202c <cmox_bn_toU8BE>
 c0004ca:	b10c      	cbz	r4, c0004d0 <cmox_ecdsa_sign+0x258>
 c0004cc:	007f      	lsls	r7, r7, #1
 c0004ce:	6027      	str	r7, [r4, #0]
 c0004d0:	a806      	add	r0, sp, #24
 c0004d2:	f001 fe7e 	bl	c0021d2 <cmox_ECC_DeInitCurveModDomain>
 c0004d6:	a903      	add	r1, sp, #12
 c0004d8:	a806      	add	r0, sp, #24
 c0004da:	f001 fed9 	bl	c002290 <cmox_ECC_FreePoint>
 c0004de:	a902      	add	r1, sp, #8
 c0004e0:	4628      	mov	r0, r5
 c0004e2:	f001 fc09 	bl	c001cf8 <cmox_bn_free>
 c0004e6:	a901      	add	r1, sp, #4
 c0004e8:	4628      	mov	r0, r5
 c0004ea:	f001 fc05 	bl	c001cf8 <cmox_bn_free>
 c0004ee:	a905      	add	r1, sp, #20
 c0004f0:	4628      	mov	r0, r5
 c0004f2:	f001 fc01 	bl	c001cf8 <cmox_bn_free>
 c0004f6:	4640      	mov	r0, r8
 c0004f8:	b00f      	add	sp, #60	@ 0x3c
 c0004fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0004fe:	bf00      	nop
 c000500:	5e1caffe 	.word	0x5e1caffe
 c000504:	0006000e 	.word	0x0006000e
 c000508:	0006000f 	.word	0x0006000f
 c00050c:	00060003 	.word	0x00060003
 c000510:	0006000b 	.word	0x0006000b
 c000514:	0006000c 	.word	0x0006000c

0c000518 <cmox_initialize>:
 c000518:	b140      	cbz	r0, c00052c <cmox_initialize+0x14>
 c00051a:	6801      	ldr	r1, [r0, #0]
 c00051c:	b129      	cbz	r1, c00052a <cmox_initialize+0x12>
 c00051e:	4a04      	ldr	r2, [pc, #16]	@ (c000530 <cmox_initialize+0x18>)
 c000520:	4291      	cmp	r1, r2
 c000522:	d102      	bne.n	c00052a <cmox_initialize+0x12>
 c000524:	2101      	movs	r1, #1
 c000526:	4b03      	ldr	r3, [pc, #12]	@ (c000534 <cmox_initialize+0x1c>)
 c000528:	7019      	strb	r1, [r3, #0]
 c00052a:	6840      	ldr	r0, [r0, #4]
 c00052c:	f003 bf40 	b.w	c0043b0 <cmox_ll_init>
 c000530:	48370000 	.word	0x48370000
 c000534:	30000028 	.word	0x30000028

0c000538 <cmox_finalize>:
 c000538:	f003 bf5c 	b.w	c0043f4 <cmox_ll_deInit>

0c00053c <basic_type_modinv>:
 c00053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 c00053e:	4603      	mov	r3, r0
 c000540:	460e      	mov	r6, r1
 c000542:	2701      	movs	r7, #1
 c000544:	f04f 0c03 	mov.w	ip, #3
 c000548:	2402      	movs	r4, #2
 c00054a:	221f      	movs	r2, #31
 c00054c:	2500      	movs	r5, #0
 c00054e:	fb07 f003 	mul.w	r0, r7, r3
 c000552:	2100      	movs	r1, #0
 c000554:	ea0c 0000 	and.w	r0, ip, r0
 c000558:	1b00      	subs	r0, r0, r4
 c00055a:	41a9      	sbcs	r1, r5
 c00055c:	ea24 0101 	bic.w	r1, r4, r1
 c000560:	19cf      	adds	r7, r1, r7
 c000562:	0064      	lsls	r4, r4, #1
 c000564:	ea4f 004c 	mov.w	r0, ip, lsl #1
 c000568:	f080 0c01 	eor.w	ip, r0, #1
 c00056c:	1e52      	subs	r2, r2, #1
 c00056e:	d1ee      	bne.n	c00054e <basic_type_modinv+0x12>
 c000570:	6037      	str	r7, [r6, #0]
 c000572:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c000574 <cmox_RightShiftBN>:
 c000574:	2300      	movs	r3, #0
 c000576:	2920      	cmp	r1, #32
 c000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 c00057a:	bf28      	it	cs
 c00057c:	2301      	movcs	r3, #1
 c00057e:	d222      	bcs.n	c0005c6 <cmox_RightShiftBN+0x52>
 c000580:	6814      	ldr	r4, [r2, #0]
 c000582:	6805      	ldr	r5, [r0, #0]
 c000584:	42ac      	cmp	r4, r5
 c000586:	bf38      	it	cc
 c000588:	2303      	movcc	r3, #3
 c00058a:	d31c      	bcc.n	c0005c6 <cmox_RightShiftBN+0x52>
 c00058c:	2401      	movs	r4, #1
 c00058e:	e00a      	b.n	c0005a6 <cmox_RightShiftBN+0x32>
 c000590:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 c000594:	687f      	ldr	r7, [r7, #4]
 c000596:	f1c1 0e20 	rsb	lr, r1, #32
 c00059a:	fa07 f70e 	lsl.w	r7, r7, lr
 c00059e:	433e      	orrs	r6, r7
 c0005a0:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
 c0005a4:	462c      	mov	r4, r5
 c0005a6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 c0005aa:	6807      	ldr	r7, [r0, #0]
 c0005ac:	1c65      	adds	r5, r4, #1
 c0005ae:	40ce      	lsrs	r6, r1
 c0005b0:	42bc      	cmp	r4, r7
 c0005b2:	d3ed      	bcc.n	c000590 <cmox_RightShiftBN+0x1c>
 c0005b4:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
 c0005b8:	e002      	b.n	c0005c0 <cmox_RightShiftBN+0x4c>
 c0005ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 c0005be:	1c6d      	adds	r5, r5, #1
 c0005c0:	6810      	ldr	r0, [r2, #0]
 c0005c2:	42a8      	cmp	r0, r5
 c0005c4:	d2f9      	bcs.n	c0005ba <cmox_RightShiftBN+0x46>
 c0005c6:	4618      	mov	r0, r3
 c0005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c0005ca <cmox_ModAddBN>:
 c0005ca:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
 c0005ce:	4682      	mov	sl, r0
 c0005d0:	2000      	movs	r0, #0
 c0005d2:	4617      	mov	r7, r2
 c0005d4:	469c      	mov	ip, r3
 c0005d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
 c0005da:	683a      	ldr	r2, [r7, #0]
 c0005dc:	f8dc 3000 	ldr.w	r3, [ip]
 c0005e0:	460e      	mov	r6, r1
 c0005e2:	2100      	movs	r1, #0
 c0005e4:	4293      	cmp	r3, r2
 c0005e6:	bf21      	itttt	cs
 c0005e8:	f8da b000 	ldrcs.w	fp, [sl]
 c0005ec:	4593      	cmpcs	fp, r2
 c0005ee:	6835      	ldrcs	r5, [r6, #0]
 c0005f0:	4295      	cmpcs	r5, r2
 c0005f2:	d201      	bcs.n	c0005f8 <cmox_ModAddBN+0x2e>
 c0005f4:	2003      	movs	r0, #3
 c0005f6:	e076      	b.n	c0006e6 <cmox_ModAddBN+0x11c>
 c0005f8:	45ab      	cmp	fp, r5
 c0005fa:	d303      	bcc.n	c000604 <cmox_ModAddBN+0x3a>
 c0005fc:	f8cd a004 	str.w	sl, [sp, #4]
 c000600:	9500      	str	r5, [sp, #0]
 c000602:	e003      	b.n	c00060c <cmox_ModAddBN+0x42>
 c000604:	f8cd b000 	str.w	fp, [sp]
 c000608:	9601      	str	r6, [sp, #4]
 c00060a:	46ab      	mov	fp, r5
 c00060c:	455b      	cmp	r3, fp
 c00060e:	f04f 0e01 	mov.w	lr, #1
 c000612:	bf38      	it	cc
 c000614:	469b      	movcc	fp, r3
 c000616:	2500      	movs	r5, #0
 c000618:	e015      	b.n	c000646 <cmox_ModAddBN+0x7c>
 c00061a:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 c00061e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 c000622:	1880      	adds	r0, r0, r2
 c000624:	eb41 0905 	adc.w	r9, r1, r5
 c000628:	1902      	adds	r2, r0, r4
 c00062a:	f857 002e 	ldr.w	r0, [r7, lr, lsl #2]
 c00062e:	eb49 0305 	adc.w	r3, r9, r5
 c000632:	2100      	movs	r1, #0
 c000634:	1a10      	subs	r0, r2, r0
 c000636:	eb63 0101 	sbc.w	r1, r3, r1
 c00063a:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 c00063e:	4608      	mov	r0, r1
 c000640:	17c9      	asrs	r1, r1, #31
 c000642:	f10e 0e01 	add.w	lr, lr, #1
 c000646:	683a      	ldr	r2, [r7, #0]
 c000648:	4572      	cmp	r2, lr
 c00064a:	d2e6      	bcs.n	c00061a <cmox_ModAddBN+0x50>
 c00064c:	9c00      	ldr	r4, [sp, #0]
 c00064e:	4574      	cmp	r4, lr
 c000650:	d31c      	bcc.n	c00068c <cmox_ModAddBN+0xc2>
 c000652:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 c000656:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 c00065a:	2300      	movs	r3, #0
 c00065c:	2500      	movs	r5, #0
 c00065e:	1914      	adds	r4, r2, r4
 c000660:	415d      	adcs	r5, r3
 c000662:	1900      	adds	r0, r0, r4
 c000664:	4169      	adcs	r1, r5
 c000666:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 c00066a:	4608      	mov	r0, r1
 c00066c:	17c9      	asrs	r1, r1, #31
 c00066e:	f10e 0e01 	add.w	lr, lr, #1
 c000672:	e7eb      	b.n	c00064c <cmox_ModAddBN+0x82>
 c000674:	9c01      	ldr	r4, [sp, #4]
 c000676:	2300      	movs	r3, #0
 c000678:	f854 202e 	ldr.w	r2, [r4, lr, lsl #2]
 c00067c:	1880      	adds	r0, r0, r2
 c00067e:	4159      	adcs	r1, r3
 c000680:	f84c 002e 	str.w	r0, [ip, lr, lsl #2]
 c000684:	4608      	mov	r0, r1
 c000686:	17c9      	asrs	r1, r1, #31
 c000688:	f10e 0e01 	add.w	lr, lr, #1
 c00068c:	45f3      	cmp	fp, lr
 c00068e:	d2f1      	bcs.n	c000674 <cmox_ModAddBN+0xaa>
 c000690:	4666      	mov	r6, ip
 c000692:	4686      	mov	lr, r0
 c000694:	f04f 0c01 	mov.w	ip, #1
 c000698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c00069c:	2500      	movs	r5, #0
 c00069e:	e010      	b.n	c0006c2 <cmox_ModAddBN+0xf8>
 c0006a0:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 c0006a4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 c0006a8:	2300      	movs	r3, #0
 c0006aa:	ea02 020e 	and.w	r2, r2, lr
 c0006ae:	18a2      	adds	r2, r4, r2
 c0006b0:	416b      	adcs	r3, r5
 c0006b2:	1880      	adds	r0, r0, r2
 c0006b4:	4159      	adcs	r1, r3
 c0006b6:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 c0006ba:	4608      	mov	r0, r1
 c0006bc:	2100      	movs	r1, #0
 c0006be:	f10c 0c01 	add.w	ip, ip, #1
 c0006c2:	683a      	ldr	r2, [r7, #0]
 c0006c4:	4562      	cmp	r2, ip
 c0006c6:	d2eb      	bcs.n	c0006a0 <cmox_ModAddBN+0xd6>
 c0006c8:	6834      	ldr	r4, [r6, #0]
 c0006ca:	4564      	cmp	r4, ip
 c0006cc:	d30a      	bcc.n	c0006e4 <cmox_ModAddBN+0x11a>
 c0006ce:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 c0006d2:	1880      	adds	r0, r0, r2
 c0006d4:	4169      	adcs	r1, r5
 c0006d6:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 c0006da:	4608      	mov	r0, r1
 c0006dc:	2100      	movs	r1, #0
 c0006de:	f10c 0c01 	add.w	ip, ip, #1
 c0006e2:	e7f1      	b.n	c0006c8 <cmox_ModAddBN+0xfe>
 c0006e4:	2000      	movs	r0, #0
 c0006e6:	b004      	add	sp, #16
 c0006e8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0c0006ec <cmox_ModSubBN>:
 c0006ec:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0006f0:	468e      	mov	lr, r1
 c0006f2:	b084      	sub	sp, #16
 c0006f4:	9a04      	ldr	r2, [sp, #16]
 c0006f6:	2100      	movs	r1, #0
 c0006f8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 c0006fc:	681c      	ldr	r4, [r3, #0]
 c0006fe:	6815      	ldr	r5, [r2, #0]
 c000700:	4683      	mov	fp, r0
 c000702:	42ac      	cmp	r4, r5
 c000704:	bf38      	it	cc
 c000706:	2003      	movcc	r0, #3
 c000708:	d36c      	bcc.n	c0007e4 <cmox_ModSubBN+0xf8>
 c00070a:	f8de 5000 	ldr.w	r5, [lr]
 c00070e:	f8db 9000 	ldr.w	r9, [fp]
 c000712:	45a9      	cmp	r9, r5
 c000714:	d306      	bcc.n	c000724 <cmox_ModSubBN+0x38>
 c000716:	f8cd 9000 	str.w	r9, [sp]
 c00071a:	f8cd b004 	str.w	fp, [sp, #4]
 c00071e:	46a9      	mov	r9, r5
 c000720:	468c      	mov	ip, r1
 c000722:	e004      	b.n	c00072e <cmox_ModSubBN+0x42>
 c000724:	f8cd e004 	str.w	lr, [sp, #4]
 c000728:	9500      	str	r5, [sp, #0]
 c00072a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 c00072e:	9d00      	ldr	r5, [sp, #0]
 c000730:	4698      	mov	r8, r3
 c000732:	f04f 0a01 	mov.w	sl, #1
 c000736:	42ac      	cmp	r4, r5
 c000738:	bf38      	it	cc
 c00073a:	9400      	strcc	r4, [sp, #0]
 c00073c:	2200      	movs	r2, #0
 c00073e:	2300      	movs	r3, #0
 c000740:	2500      	movs	r5, #0
 c000742:	e00f      	b.n	c000764 <cmox_ModSubBN+0x78>
 c000744:	f85b 002a 	ldr.w	r0, [fp, sl, lsl #2]
 c000748:	f85e 402a 	ldr.w	r4, [lr, sl, lsl #2]
 c00074c:	1816      	adds	r6, r2, r0
 c00074e:	eb43 0701 	adc.w	r7, r3, r1
 c000752:	1b32      	subs	r2, r6, r4
 c000754:	eb67 0305 	sbc.w	r3, r7, r5
 c000758:	f848 202a 	str.w	r2, [r8, sl, lsl #2]
 c00075c:	461a      	mov	r2, r3
 c00075e:	17db      	asrs	r3, r3, #31
 c000760:	f10a 0a01 	add.w	sl, sl, #1
 c000764:	45d1      	cmp	r9, sl
 c000766:	d2ed      	bcs.n	c000744 <cmox_ModSubBN+0x58>
 c000768:	9800      	ldr	r0, [sp, #0]
 c00076a:	4550      	cmp	r0, sl
 c00076c:	d311      	bcc.n	c000792 <cmox_ModSubBN+0xa6>
 c00076e:	9e01      	ldr	r6, [sp, #4]
 c000770:	f856 002a 	ldr.w	r0, [r6, sl, lsl #2]
 c000774:	ea20 040c 	bic.w	r4, r0, ip
 c000778:	1912      	adds	r2, r2, r4
 c00077a:	416b      	adcs	r3, r5
 c00077c:	ea00 000c 	and.w	r0, r0, ip
 c000780:	1a12      	subs	r2, r2, r0
 c000782:	418b      	sbcs	r3, r1
 c000784:	f848 202a 	str.w	r2, [r8, sl, lsl #2]
 c000788:	461a      	mov	r2, r3
 c00078a:	17db      	asrs	r3, r3, #31
 c00078c:	f10a 0a01 	add.w	sl, sl, #1
 c000790:	e7ea      	b.n	c000768 <cmox_ModSubBN+0x7c>
 c000792:	4616      	mov	r6, r2
 c000794:	2701      	movs	r7, #1
 c000796:	f8dd c010 	ldr.w	ip, [sp, #16]
 c00079a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 c00079e:	e00e      	b.n	c0007be <cmox_ModSubBN+0xd2>
 c0007a0:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 c0007a4:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 c0007a8:	2300      	movs	r3, #0
 c0007aa:	4032      	ands	r2, r6
 c0007ac:	18a2      	adds	r2, r4, r2
 c0007ae:	416b      	adcs	r3, r5
 c0007b0:	1880      	adds	r0, r0, r2
 c0007b2:	4159      	adcs	r1, r3
 c0007b4:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
 c0007b8:	4608      	mov	r0, r1
 c0007ba:	2100      	movs	r1, #0
 c0007bc:	1c7f      	adds	r7, r7, #1
 c0007be:	f8dc 2000 	ldr.w	r2, [ip]
 c0007c2:	42ba      	cmp	r2, r7
 c0007c4:	d2ec      	bcs.n	c0007a0 <cmox_ModSubBN+0xb4>
 c0007c6:	f8d8 4000 	ldr.w	r4, [r8]
 c0007ca:	42bc      	cmp	r4, r7
 c0007cc:	d309      	bcc.n	c0007e2 <cmox_ModSubBN+0xf6>
 c0007ce:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 c0007d2:	1880      	adds	r0, r0, r2
 c0007d4:	4169      	adcs	r1, r5
 c0007d6:	f848 0027 	str.w	r0, [r8, r7, lsl #2]
 c0007da:	4608      	mov	r0, r1
 c0007dc:	2100      	movs	r1, #0
 c0007de:	1c7f      	adds	r7, r7, #1
 c0007e0:	e7f1      	b.n	c0007c6 <cmox_ModSubBN+0xda>
 c0007e2:	2000      	movs	r0, #0
 c0007e4:	b005      	add	sp, #20
 c0007e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c0007ea <cmox_SubBN>:
 c0007ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0007ec:	6813      	ldr	r3, [r2, #0]
 c0007ee:	6806      	ldr	r6, [r0, #0]
 c0007f0:	2400      	movs	r4, #0
 c0007f2:	2500      	movs	r5, #0
 c0007f4:	42b3      	cmp	r3, r6
 c0007f6:	d201      	bcs.n	c0007fc <cmox_SubBN+0x12>
 c0007f8:	2003      	movs	r0, #3
 c0007fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c0007fc:	468e      	mov	lr, r1
 c0007fe:	f04f 0c01 	mov.w	ip, #1
 c000802:	4606      	mov	r6, r0
 c000804:	4617      	mov	r7, r2
 c000806:	2100      	movs	r1, #0
 c000808:	e00f      	b.n	c00082a <cmox_SubBN+0x40>
 c00080a:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 c00080e:	2300      	movs	r3, #0
 c000810:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
 c000814:	18a2      	adds	r2, r4, r2
 c000816:	416b      	adcs	r3, r5
 c000818:	1a14      	subs	r4, r2, r0
 c00081a:	eb63 0501 	sbc.w	r5, r3, r1
 c00081e:	f847 402c 	str.w	r4, [r7, ip, lsl #2]
 c000822:	462c      	mov	r4, r5
 c000824:	17ed      	asrs	r5, r5, #31
 c000826:	f10c 0c01 	add.w	ip, ip, #1
 c00082a:	f8de 0000 	ldr.w	r0, [lr]
 c00082e:	4560      	cmp	r0, ip
 c000830:	d2eb      	bcs.n	c00080a <cmox_SubBN+0x20>
 c000832:	6832      	ldr	r2, [r6, #0]
 c000834:	4562      	cmp	r2, ip
 c000836:	d30a      	bcc.n	c00084e <cmox_SubBN+0x64>
 c000838:	f856 002c 	ldr.w	r0, [r6, ip, lsl #2]
 c00083c:	1824      	adds	r4, r4, r0
 c00083e:	414d      	adcs	r5, r1
 c000840:	f847 402c 	str.w	r4, [r7, ip, lsl #2]
 c000844:	462c      	mov	r4, r5
 c000846:	17ed      	asrs	r5, r5, #31
 c000848:	f10c 0c01 	add.w	ip, ip, #1
 c00084c:	e7f1      	b.n	c000832 <cmox_SubBN+0x48>
 c00084e:	2000      	movs	r0, #0
 c000850:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c000852 <cmox_AddBN_Int>:
 c000852:	b5f0      	push	{r4, r5, r6, r7, lr}
 c000854:	4604      	mov	r4, r0
 c000856:	6866      	ldr	r6, [r4, #4]
 c000858:	4615      	mov	r5, r2
 c00085a:	2700      	movs	r7, #0
 c00085c:	1872      	adds	r2, r6, r1
 c00085e:	eb47 73e1 	adc.w	r3, r7, r1, asr #31
 c000862:	606a      	str	r2, [r5, #4]
 c000864:	2602      	movs	r6, #2
 c000866:	461a      	mov	r2, r3
 c000868:	17db      	asrs	r3, r3, #31
 c00086a:	e008      	b.n	c00087e <cmox_AddBN_Int+0x2c>
 c00086c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 c000870:	1812      	adds	r2, r2, r0
 c000872:	417b      	adcs	r3, r7
 c000874:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
 c000878:	461a      	mov	r2, r3
 c00087a:	17db      	asrs	r3, r3, #31
 c00087c:	1c76      	adds	r6, r6, #1
 c00087e:	6820      	ldr	r0, [r4, #0]
 c000880:	42b0      	cmp	r0, r6
 c000882:	d2f3      	bcs.n	c00086c <cmox_AddBN_Int+0x1a>
 c000884:	4610      	mov	r0, r2
 c000886:	4252      	negs	r2, r2
 c000888:	ea22 0000 	bic.w	r0, r2, r0
 c00088c:	0fc0      	lsrs	r0, r0, #31
 c00088e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0c000890 <cmox_FieldBN_Div2>:
 c000890:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 c000894:	4615      	mov	r5, r2
 c000896:	6842      	ldr	r2, [r0, #4]
 c000898:	468e      	mov	lr, r1
 c00089a:	6801      	ldr	r1, [r0, #0]
 c00089c:	f8de 3000 	ldr.w	r3, [lr]
 c0008a0:	f002 0601 	and.w	r6, r2, #1
 c0008a4:	4276      	negs	r6, r6
 c0008a6:	4299      	cmp	r1, r3
 c0008a8:	d102      	bne.n	c0008b0 <cmox_FieldBN_Div2+0x20>
 c0008aa:	682c      	ldr	r4, [r5, #0]
 c0008ac:	428c      	cmp	r4, r1
 c0008ae:	d201      	bcs.n	c0008b4 <cmox_FieldBN_Div2+0x24>
 c0008b0:	2001      	movs	r0, #1
 c0008b2:	e03d      	b.n	c000930 <cmox_FieldBN_Div2+0xa0>
 c0008b4:	f8de 7004 	ldr.w	r7, [lr, #4]
 c0008b8:	2300      	movs	r3, #0
 c0008ba:	2400      	movs	r4, #0
 c0008bc:	4037      	ands	r7, r6
 c0008be:	19d2      	adds	r2, r2, r7
 c0008c0:	4163      	adcs	r3, r4
 c0008c2:	4604      	mov	r4, r0
 c0008c4:	606a      	str	r2, [r5, #4]
 c0008c6:	2100      	movs	r1, #0
 c0008c8:	f04f 0802 	mov.w	r8, #2
 c0008cc:	4618      	mov	r0, r3
 c0008ce:	e018      	b.n	c000902 <cmox_FieldBN_Div2+0x72>
 c0008d0:	4607      	mov	r7, r0
 c0008d2:	f85e 0028 	ldr.w	r0, [lr, r8, lsl #2]
 c0008d6:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
 c0008da:	2300      	movs	r3, #0
 c0008dc:	4030      	ands	r0, r6
 c0008de:	1810      	adds	r0, r2, r0
 c0008e0:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 c0008e4:	4159      	adcs	r1, r3
 c0008e6:	1838      	adds	r0, r7, r0
 c0008e8:	4159      	adcs	r1, r3
 c0008ea:	f845 0028 	str.w	r0, [r5, r8, lsl #2]
 c0008ee:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 c0008f2:	4608      	mov	r0, r1
 c0008f4:	2100      	movs	r1, #0
 c0008f6:	07db      	lsls	r3, r3, #31
 c0008f8:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 c0008fc:	46d0      	mov	r8, sl
 c0008fe:	f84c 3c04 	str.w	r3, [ip, #-4]
 c000902:	6822      	ldr	r2, [r4, #0]
 c000904:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
 c000908:	f108 0a01 	add.w	sl, r8, #1
 c00090c:	4542      	cmp	r2, r8
 c00090e:	d2df      	bcs.n	c0008d0 <cmox_FieldBN_Div2+0x40>
 c000910:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 c000914:	07c0      	lsls	r0, r0, #31
 c000916:	ea40 0053 	orr.w	r0, r0, r3, lsr #1
 c00091a:	f84c 0c04 	str.w	r0, [ip, #-4]
 c00091e:	e003      	b.n	c000928 <cmox_FieldBN_Div2+0x98>
 c000920:	f845 102a 	str.w	r1, [r5, sl, lsl #2]
 c000924:	f10a 0a01 	add.w	sl, sl, #1
 c000928:	6828      	ldr	r0, [r5, #0]
 c00092a:	4550      	cmp	r0, sl
 c00092c:	d2f8      	bcs.n	c000920 <cmox_FieldBN_Div2+0x90>
 c00092e:	2000      	movs	r0, #0
 c000930:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}

0c000934 <cmox_FieldBN_Mul2>:
 c000934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c000938:	4690      	mov	r8, r2
 c00093a:	6802      	ldr	r2, [r0, #0]
 c00093c:	680b      	ldr	r3, [r1, #0]
 c00093e:	429a      	cmp	r2, r3
 c000940:	d103      	bne.n	c00094a <cmox_FieldBN_Mul2+0x16>
 c000942:	f8d8 4000 	ldr.w	r4, [r8]
 c000946:	4294      	cmp	r4, r2
 c000948:	d201      	bcs.n	c00094e <cmox_FieldBN_Mul2+0x1a>
 c00094a:	2001      	movs	r0, #1
 c00094c:	e04f      	b.n	c0009ee <cmox_FieldBN_Mul2+0xba>
 c00094e:	6844      	ldr	r4, [r0, #4]
 c000950:	684a      	ldr	r2, [r1, #4]
 c000952:	2300      	movs	r3, #0
 c000954:	0064      	lsls	r4, r4, #1
 c000956:	f04f 0900 	mov.w	r9, #0
 c00095a:	1aa2      	subs	r2, r4, r2
 c00095c:	eb69 0303 	sbc.w	r3, r9, r3
 c000960:	4615      	mov	r5, r2
 c000962:	461a      	mov	r2, r3
 c000964:	17db      	asrs	r3, r3, #31
 c000966:	2702      	movs	r7, #2
 c000968:	4684      	mov	ip, r0
 c00096a:	468e      	mov	lr, r1
 c00096c:	e018      	b.n	c0009a0 <cmox_FieldBN_Mul2+0x6c>
 c00096e:	eb0c 0487 	add.w	r4, ip, r7, lsl #2
 c000972:	f854 0c04 	ldr.w	r0, [r4, #-4]
 c000976:	f85c 1027 	ldr.w	r1, [ip, r7, lsl #2]
 c00097a:	f85e 4027 	ldr.w	r4, [lr, r7, lsl #2]
 c00097e:	0fc0      	lsrs	r0, r0, #31
 c000980:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 c000984:	1816      	adds	r6, r2, r0
 c000986:	eb43 0a09 	adc.w	sl, r3, r9
 c00098a:	eb08 0087 	add.w	r0, r8, r7, lsl #2
 c00098e:	1b32      	subs	r2, r6, r4
 c000990:	f840 5c04 	str.w	r5, [r0, #-4]
 c000994:	eb6a 0309 	sbc.w	r3, sl, r9
 c000998:	4615      	mov	r5, r2
 c00099a:	461a      	mov	r2, r3
 c00099c:	17db      	asrs	r3, r3, #31
 c00099e:	1c7f      	adds	r7, r7, #1
 c0009a0:	f8dc 0000 	ldr.w	r0, [ip]
 c0009a4:	42b8      	cmp	r0, r7
 c0009a6:	d2e2      	bcs.n	c00096e <cmox_FieldBN_Mul2+0x3a>
 c0009a8:	4664      	mov	r4, ip
 c0009aa:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 c0009ae:	4646      	mov	r6, r8
 c0009b0:	f846 5020 	str.w	r5, [r6, r0, lsl #2]
 c0009b4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 c0009b8:	46c8      	mov	r8, r9
 c0009ba:	2500      	movs	r5, #0
 c0009bc:	f04f 0c01 	mov.w	ip, #1
 c0009c0:	e011      	b.n	c0009e6 <cmox_FieldBN_Mul2+0xb2>
 c0009c2:	f85e 002c 	ldr.w	r0, [lr, ip, lsl #2]
 c0009c6:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 c0009ca:	2100      	movs	r1, #0
 c0009cc:	4018      	ands	r0, r3
 c0009ce:	1810      	adds	r0, r2, r0
 c0009d0:	eb49 0101 	adc.w	r1, r9, r1
 c0009d4:	eb18 0000 	adds.w	r0, r8, r0
 c0009d8:	414d      	adcs	r5, r1
 c0009da:	f846 002c 	str.w	r0, [r6, ip, lsl #2]
 c0009de:	46a8      	mov	r8, r5
 c0009e0:	17ed      	asrs	r5, r5, #31
 c0009e2:	f10c 0c01 	add.w	ip, ip, #1
 c0009e6:	6820      	ldr	r0, [r4, #0]
 c0009e8:	4560      	cmp	r0, ip
 c0009ea:	d2ea      	bcs.n	c0009c2 <cmox_FieldBN_Mul2+0x8e>
 c0009ec:	2000      	movs	r0, #0
 c0009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0c0009f2 <cmox_FieldBN_CondNegate>:
 c0009f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0009f6:	2400      	movs	r4, #0
 c0009f8:	2500      	movs	r5, #0
 c0009fa:	2900      	cmp	r1, #0
 c0009fc:	bf18      	it	ne
 c0009fe:	2a00      	cmpne	r2, #0
 c000a00:	d003      	beq.n	c000a0a <cmox_FieldBN_CondNegate+0x18>
 c000a02:	680b      	ldr	r3, [r1, #0]
 c000a04:	6816      	ldr	r6, [r2, #0]
 c000a06:	42b3      	cmp	r3, r6
 c000a08:	d201      	bcs.n	c000a0e <cmox_FieldBN_CondNegate+0x1c>
 c000a0a:	2001      	movs	r0, #1
 c000a0c:	e01d      	b.n	c000a4a <cmox_FieldBN_CondNegate+0x58>
 c000a0e:	2701      	movs	r7, #1
 c000a10:	4681      	mov	r9, r0
 c000a12:	460e      	mov	r6, r1
 c000a14:	4690      	mov	r8, r2
 c000a16:	e013      	b.n	c000a40 <cmox_FieldBN_CondNegate+0x4e>
 c000a18:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 c000a1c:	2100      	movs	r1, #0
 c000a1e:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 c000a22:	1820      	adds	r0, r4, r0
 c000a24:	4169      	adcs	r1, r5
 c000a26:	2300      	movs	r3, #0
 c000a28:	1a84      	subs	r4, r0, r2
 c000a2a:	eb61 0503 	sbc.w	r5, r1, r3
 c000a2e:	4621      	mov	r1, r4
 c000a30:	4648      	mov	r0, r9
 c000a32:	f000 f89f 	bl	c000b74 <cmox_mathUtils_mux>
 c000a36:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
 c000a3a:	462c      	mov	r4, r5
 c000a3c:	17ed      	asrs	r5, r5, #31
 c000a3e:	1c7f      	adds	r7, r7, #1
 c000a40:	f8d8 0000 	ldr.w	r0, [r8]
 c000a44:	42b8      	cmp	r0, r7
 c000a46:	d2e7      	bcs.n	c000a18 <cmox_FieldBN_CondNegate+0x26>
 c000a48:	2000      	movs	r0, #0
 c000a4a:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

0c000a4e <cmox_ModularBN_InitWithR2>:
 c000a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c000a50:	4617      	mov	r7, r2
 c000a52:	4605      	mov	r5, r0
 c000a54:	682a      	ldr	r2, [r5, #0]
 c000a56:	460e      	mov	r6, r1
 c000a58:	4618      	mov	r0, r3
 c000a5a:	0052      	lsls	r2, r2, #1
 c000a5c:	f107 0108 	add.w	r1, r7, #8
 c000a60:	f001 f93f 	bl	c001ce2 <cmox_bn_alloc>
 c000a64:	0004      	movs	r4, r0
 c000a66:	d109      	bne.n	c000a7c <cmox_ModularBN_InitWithR2+0x2e>
 c000a68:	607e      	str	r6, [r7, #4]
 c000a6a:	603d      	str	r5, [r7, #0]
 c000a6c:	6868      	ldr	r0, [r5, #4]
 c000a6e:	f107 010c 	add.w	r1, r7, #12
 c000a72:	f7ff fd63 	bl	c00053c <basic_type_modinv>
 c000a76:	68f8      	ldr	r0, [r7, #12]
 c000a78:	4240      	negs	r0, r0
 c000a7a:	60f8      	str	r0, [r7, #12]
 c000a7c:	4620      	mov	r0, r4
 c000a7e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0c000a80 <cmox_ModularBN_Enter>:
 c000a80:	460b      	mov	r3, r1
 c000a82:	b580      	push	{r7, lr}
 c000a84:	9200      	str	r2, [sp, #0]
 c000a86:	6859      	ldr	r1, [r3, #4]
 c000a88:	4602      	mov	r2, r0
 c000a8a:	f000 f823 	bl	c000ad4 <cmox_ModularBN_Mul>
 c000a8e:	bd02      	pop	{r1, pc}

0c000a90 <cmox_ModularBN_Exit>:
 c000a90:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 c000a94:	461f      	mov	r7, r3
 c000a96:	2300      	movs	r3, #0
 c000a98:	4605      	mov	r5, r0
 c000a9a:	4690      	mov	r8, r2
 c000a9c:	9301      	str	r3, [sp, #4]
 c000a9e:	682a      	ldr	r2, [r5, #0]
 c000aa0:	460e      	mov	r6, r1
 c000aa2:	a901      	add	r1, sp, #4
 c000aa4:	4640      	mov	r0, r8
 c000aa6:	f001 f91c 	bl	c001ce2 <cmox_bn_alloc>
 c000aaa:	0004      	movs	r4, r0
 c000aac:	d10f      	bne.n	c000ace <cmox_ModularBN_Exit+0x3e>
 c000aae:	9801      	ldr	r0, [sp, #4]
 c000ab0:	2101      	movs	r1, #1
 c000ab2:	f001 f94d 	bl	c001d50 <cmox_bn_init>
 c000ab6:	9700      	str	r7, [sp, #0]
 c000ab8:	9901      	ldr	r1, [sp, #4]
 c000aba:	4633      	mov	r3, r6
 c000abc:	462a      	mov	r2, r5
 c000abe:	4628      	mov	r0, r5
 c000ac0:	f000 f808 	bl	c000ad4 <cmox_ModularBN_Mul>
 c000ac4:	4604      	mov	r4, r0
 c000ac6:	a901      	add	r1, sp, #4
 c000ac8:	4640      	mov	r0, r8
 c000aca:	f001 f915 	bl	c001cf8 <cmox_bn_free>
 c000ace:	4620      	mov	r0, r4
 c000ad0:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

0c000ad4 <cmox_ModularBN_Mul>:
 c000ad4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 c000ad6:	4614      	mov	r4, r2
 c000ad8:	461d      	mov	r5, r3
 c000ada:	682a      	ldr	r2, [r5, #0]
 c000adc:	6823      	ldr	r3, [r4, #0]
 c000ade:	6816      	ldr	r6, [r2, #0]
 c000ae0:	42b3      	cmp	r3, r6
 c000ae2:	d201      	bcs.n	c000ae8 <cmox_ModularBN_Mul+0x14>
 c000ae4:	2003      	movs	r0, #3
 c000ae6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 c000ae8:	68eb      	ldr	r3, [r5, #12]
 c000aea:	9f08      	ldr	r7, [sp, #32]
 c000aec:	1d12      	adds	r2, r2, #4
 c000aee:	9301      	str	r3, [sp, #4]
 c000af0:	9200      	str	r2, [sp, #0]
 c000af2:	68aa      	ldr	r2, [r5, #8]
 c000af4:	f8d7 c000 	ldr.w	ip, [r7]
 c000af8:	1d09      	adds	r1, r1, #4
 c000afa:	1d13      	adds	r3, r2, #4
 c000afc:	4632      	mov	r2, r6
 c000afe:	1d00      	adds	r0, r0, #4
 c000b00:	47e0      	blx	ip
 c000b02:	68e8      	ldr	r0, [r5, #12]
 c000b04:	1d23      	adds	r3, r4, #4
 c000b06:	9000      	str	r0, [sp, #0]
 c000b08:	6829      	ldr	r1, [r5, #0]
 c000b0a:	68a8      	ldr	r0, [r5, #8]
 c000b0c:	687c      	ldr	r4, [r7, #4]
 c000b0e:	1d0a      	adds	r2, r1, #4
 c000b10:	4631      	mov	r1, r6
 c000b12:	1d00      	adds	r0, r0, #4
 c000b14:	47a0      	blx	r4
 c000b16:	2000      	movs	r0, #0
 c000b18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0c000b1a <cmox_ModularBN_Sqr>:
 c000b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c000b1c:	460c      	mov	r4, r1
 c000b1e:	4615      	mov	r5, r2
 c000b20:	6829      	ldr	r1, [r5, #0]
 c000b22:	6822      	ldr	r2, [r4, #0]
 c000b24:	461f      	mov	r7, r3
 c000b26:	680e      	ldr	r6, [r1, #0]
 c000b28:	42b2      	cmp	r2, r6
 c000b2a:	d201      	bcs.n	c000b30 <cmox_ModularBN_Sqr+0x16>
 c000b2c:	2003      	movs	r0, #3
 c000b2e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 c000b30:	68ea      	ldr	r2, [r5, #12]
 c000b32:	1d0b      	adds	r3, r1, #4
 c000b34:	1d00      	adds	r0, r0, #4
 c000b36:	9200      	str	r2, [sp, #0]
 c000b38:	68a9      	ldr	r1, [r5, #8]
 c000b3a:	f8d7 c008 	ldr.w	ip, [r7, #8]
 c000b3e:	1d0a      	adds	r2, r1, #4
 c000b40:	4631      	mov	r1, r6
 c000b42:	47e0      	blx	ip
 c000b44:	68e8      	ldr	r0, [r5, #12]
 c000b46:	1d23      	adds	r3, r4, #4
 c000b48:	9000      	str	r0, [sp, #0]
 c000b4a:	6829      	ldr	r1, [r5, #0]
 c000b4c:	68a8      	ldr	r0, [r5, #8]
 c000b4e:	68fc      	ldr	r4, [r7, #12]
 c000b50:	1d0a      	adds	r2, r1, #4
 c000b52:	4631      	mov	r1, r6
 c000b54:	1d00      	adds	r0, r0, #4
 c000b56:	47a0      	blx	r4
 c000b58:	2000      	movs	r0, #0
 c000b5a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0c000b5c <cmox_ModularBN_DeinitWithR2>:
 c000b5c:	460a      	mov	r2, r1
 c000b5e:	2100      	movs	r1, #0
 c000b60:	6001      	str	r1, [r0, #0]
 c000b62:	60c1      	str	r1, [r0, #12]
 c000b64:	6881      	ldr	r1, [r0, #8]
 c000b66:	b121      	cbz	r1, c000b72 <cmox_ModularBN_DeinitWithR2+0x16>
 c000b68:	f100 0108 	add.w	r1, r0, #8
 c000b6c:	4610      	mov	r0, r2
 c000b6e:	f001 b8c3 	b.w	c001cf8 <cmox_bn_free>
 c000b72:	4770      	bx	lr

0c000b74 <cmox_mathUtils_mux>:
 c000b74:	4240      	negs	r0, r0
 c000b76:	4051      	eors	r1, r2
 c000b78:	4008      	ands	r0, r1
 c000b7a:	4050      	eors	r0, r2
 c000b7c:	4770      	bx	lr

0c000b7e <cmox_mathUtils_not>:
 c000b7e:	f080 0001 	eor.w	r0, r0, #1
 c000b82:	4770      	bx	lr

0c000b84 <cmox_mathUtils_neq>:
 c000b84:	4048      	eors	r0, r1
 c000b86:	4241      	negs	r1, r0
 c000b88:	4308      	orrs	r0, r1
 c000b8a:	0fc0      	lsrs	r0, r0, #31
 c000b8c:	4770      	bx	lr

0c000b8e <cmox_mathUtils_gt>:
 c000b8e:	1a0a      	subs	r2, r1, r0
 c000b90:	4041      	eors	r1, r0
 c000b92:	4050      	eors	r0, r2
 c000b94:	4008      	ands	r0, r1
 c000b96:	4050      	eors	r0, r2
 c000b98:	0fc0      	lsrs	r0, r0, #31
 c000b9a:	4770      	bx	lr

0c000b9c <cmox_mathUtils_bitLength>:
 c000b9c:	4601      	mov	r1, r0
 c000b9e:	b510      	push	{r4, lr}
 c000ba0:	2020      	movs	r0, #32
 c000ba2:	2201      	movs	r2, #1
 c000ba4:	231f      	movs	r3, #31
 c000ba6:	fa21 f403 	lsr.w	r4, r1, r3
 c000baa:	f004 0401 	and.w	r4, r4, #1
 c000bae:	f084 0401 	eor.w	r4, r4, #1
 c000bb2:	4022      	ands	r2, r4
 c000bb4:	1a80      	subs	r0, r0, r2
 c000bb6:	1e5b      	subs	r3, r3, #1
 c000bb8:	f113 0f01 	cmn.w	r3, #1
 c000bbc:	d1f3      	bne.n	c000ba6 <cmox_mathUtils_bitLength+0xa>
 c000bbe:	bd10      	pop	{r4, pc}

0c000bc0 <cmox_mathUtils_abs>:
 c000bc0:	4601      	mov	r1, r0
 c000bc2:	4248      	negs	r0, r1
 c000bc4:	ea01 72e0 	and.w	r2, r1, r0, asr #31
 c000bc8:	ea00 70e1 	and.w	r0, r0, r1, asr #31
 c000bcc:	4310      	orrs	r0, r2
 c000bce:	4770      	bx	lr
 c000bd0:	0101b004 	.word	0x0101b004
 c000bd4:	45011700 	.word	0x45011700

0c000bd8 <.text_19>:
	...

0c000be0 <cmox_ModExpBN_SW>:
 c000be0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c000be4:	4683      	mov	fp, r0
 c000be6:	b08a      	sub	sp, #40	@ 0x28
 c000be8:	2001      	movs	r0, #1
 c000bea:	f88d 0008 	strb.w	r0, [sp, #8]
 c000bee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c000bf0:	2400      	movs	r4, #0
 c000bf2:	2601      	movs	r6, #1
 c000bf4:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 c000bf8:	4617      	mov	r7, r2
 c000bfa:	2500      	movs	r5, #0
 c000bfc:	9507      	str	r5, [sp, #28]
 c000bfe:	9501      	str	r5, [sp, #4]
 c000c00:	6801      	ldr	r1, [r0, #0]
 c000c02:	46aa      	mov	sl, r5
 c000c04:	2901      	cmp	r1, #1
 c000c06:	bf88      	it	hi
 c000c08:	b2de      	uxtbhi	r6, r3
 c000c0a:	2101      	movs	r1, #1
 c000c0c:	1e70      	subs	r0, r6, #1
 c000c0e:	4081      	lsls	r1, r0
 c000c10:	0089      	lsls	r1, r1, #2
 c000c12:	9109      	str	r1, [sp, #36]	@ 0x24
 c000c14:	460a      	mov	r2, r1
 c000c16:	a901      	add	r1, sp, #4
 c000c18:	4648      	mov	r0, r9
 c000c1a:	f003 f95b 	bl	c003ed4 <cmox_membuf_alloc>
 c000c1e:	9004      	str	r0, [sp, #16]
 c000c20:	2800      	cmp	r0, #0
 c000c22:	f040 80ef 	bne.w	c000e04 <cmox_ModExpBN_SW+0x224>
 c000c26:	46a8      	mov	r8, r5
 c000c28:	e00c      	b.n	c000c44 <cmox_ModExpBN_SW+0x64>
 c000c2a:	6838      	ldr	r0, [r7, #0]
 c000c2c:	9901      	ldr	r1, [sp, #4]
 c000c2e:	6802      	ldr	r2, [r0, #0]
 c000c30:	4648      	mov	r0, r9
 c000c32:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 c000c36:	f001 f854 	bl	c001ce2 <cmox_bn_alloc>
 c000c3a:	9004      	str	r0, [sp, #16]
 c000c3c:	2800      	cmp	r0, #0
 c000c3e:	d175      	bne.n	c000d2c <cmox_ModExpBN_SW+0x14c>
 c000c40:	f108 0801 	add.w	r8, r8, #1
 c000c44:	2001      	movs	r0, #1
 c000c46:	1e72      	subs	r2, r6, #1
 c000c48:	4090      	lsls	r0, r2
 c000c4a:	9006      	str	r0, [sp, #24]
 c000c4c:	4580      	cmp	r8, r0
 c000c4e:	d3ec      	bcc.n	c000c2a <cmox_ModExpBN_SW+0x4a>
 c000c50:	9801      	ldr	r0, [sp, #4]
 c000c52:	f8cd b00c 	str.w	fp, [sp, #12]
 c000c56:	2100      	movs	r1, #0
 c000c58:	6800      	ldr	r0, [r0, #0]
 c000c5a:	f001 f879 	bl	c001d50 <cmox_bn_init>
 c000c5e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 c000c60:	2100      	movs	r1, #0
 c000c62:	f001 f875 	bl	c001d50 <cmox_bn_init>
 c000c66:	9801      	ldr	r0, [sp, #4]
 c000c68:	9903      	ldr	r1, [sp, #12]
 c000c6a:	6802      	ldr	r2, [r0, #0]
 c000c6c:	2001      	movs	r0, #1
 c000c6e:	f001 f87e 	bl	c001d6e <cmox_bn_cCopy>
 c000c72:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
 c000c76:	9700      	str	r7, [sp, #0]
 c000c78:	2700      	movs	r7, #0
 c000c7a:	e007      	b.n	c000c8c <cmox_ModExpBN_SW+0xac>
 c000c7c:	9801      	ldr	r0, [sp, #4]
 c000c7e:	9a00      	ldr	r2, [sp, #0]
 c000c80:	465b      	mov	r3, fp
 c000c82:	6800      	ldr	r0, [r0, #0]
 c000c84:	1c7f      	adds	r7, r7, #1
 c000c86:	4601      	mov	r1, r0
 c000c88:	f7ff ff47 	bl	c000b1a <cmox_ModularBN_Sqr>
 c000c8c:	1e70      	subs	r0, r6, #1
 c000c8e:	4287      	cmp	r7, r0
 c000c90:	d3f4      	bcc.n	c000c7c <cmox_ModExpBN_SW+0x9c>
 c000c92:	9900      	ldr	r1, [sp, #0]
 c000c94:	4658      	mov	r0, fp
 c000c96:	9605      	str	r6, [sp, #20]
 c000c98:	1e73      	subs	r3, r6, #1
 c000c9a:	2701      	movs	r7, #1
 c000c9c:	f88d 3009 	strb.w	r3, [sp, #9]
 c000ca0:	468b      	mov	fp, r1
 c000ca2:	4606      	mov	r6, r0
 c000ca4:	e00c      	b.n	c000cc0 <cmox_ModExpBN_SW+0xe0>
 c000ca6:	9600      	str	r6, [sp, #0]
 c000ca8:	9801      	ldr	r0, [sp, #4]
 c000caa:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 c000cae:	9903      	ldr	r1, [sp, #12]
 c000cb0:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 c000cb4:	f85c 0c04 	ldr.w	r0, [ip, #-4]
 c000cb8:	465b      	mov	r3, fp
 c000cba:	1c7f      	adds	r7, r7, #1
 c000cbc:	f7ff ff0a 	bl	c000ad4 <cmox_ModularBN_Mul>
 c000cc0:	9806      	ldr	r0, [sp, #24]
 c000cc2:	4287      	cmp	r7, r0
 c000cc4:	d3ef      	bcc.n	c000ca6 <cmox_ModExpBN_SW+0xc6>
 c000cc6:	9616      	str	r6, [sp, #88]	@ 0x58
 c000cc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c000cca:	6801      	ldr	r1, [r0, #0]
 c000ccc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 c000cce:	9106      	str	r1, [sp, #24]
 c000cd0:	2100      	movs	r1, #0
 c000cd2:	f001 f83d 	bl	c001d50 <cmox_bn_init>
 c000cd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 c000cd8:	9903      	ldr	r1, [sp, #12]
 c000cda:	2001      	movs	r0, #1
 c000cdc:	f001 f847 	bl	c001d6e <cmox_bn_cCopy>
 c000ce0:	2001      	movs	r0, #1
 c000ce2:	9008      	str	r0, [sp, #32]
 c000ce4:	e015      	b.n	c000d12 <cmox_ModExpBN_SW+0x132>
 c000ce6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c000ce8:	9906      	ldr	r1, [sp, #24]
 c000cea:	2220      	movs	r2, #32
 c000cec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 c000cf0:	9906      	ldr	r1, [sp, #24]
 c000cf2:	f88d 2008 	strb.w	r2, [sp, #8]
 c000cf6:	9007      	str	r0, [sp, #28]
 c000cf8:	1e49      	subs	r1, r1, #1
 c000cfa:	9106      	str	r1, [sp, #24]
 c000cfc:	9807      	ldr	r0, [sp, #28]
 c000cfe:	9907      	ldr	r1, [sp, #28]
 c000d00:	0fc0      	lsrs	r0, r0, #31
 c000d02:	0049      	lsls	r1, r1, #1
 c000d04:	9107      	str	r1, [sp, #28]
 c000d06:	002a      	movs	r2, r5
 c000d08:	d13b      	bne.n	c000d82 <cmox_ModExpBN_SW+0x1a2>
 c000d0a:	2800      	cmp	r0, #0
 c000d0c:	d001      	beq.n	c000d12 <cmox_ModExpBN_SW+0x132>
 c000d0e:	d043      	beq.n	c000d98 <cmox_ModExpBN_SW+0x1b8>
 c000d10:	2501      	movs	r5, #1
 c000d12:	f89d 0008 	ldrb.w	r0, [sp, #8]
 c000d16:	1e41      	subs	r1, r0, #1
 c000d18:	f88d 1008 	strb.w	r1, [sp, #8]
 c000d1c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 c000d20:	2800      	cmp	r0, #0
 c000d22:	d1eb      	bne.n	c000cfc <cmox_ModExpBN_SW+0x11c>
 c000d24:	9806      	ldr	r0, [sp, #24]
 c000d26:	2800      	cmp	r0, #0
 c000d28:	d1dd      	bne.n	c000ce6 <cmox_ModExpBN_SW+0x106>
 c000d2a:	2d02      	cmp	r5, #2
 c000d2c:	d11c      	bne.n	c000d68 <cmox_ModExpBN_SW+0x188>
 c000d2e:	b2e0      	uxtb	r0, r4
 c000d30:	b1d0      	cbz	r0, c000d68 <cmox_ModExpBN_SW+0x188>
 c000d32:	b2e5      	uxtb	r5, r4
 c000d34:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 c000d36:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 c000d38:	9f05      	ldr	r7, [sp, #20]
 c000d3a:	4633      	mov	r3, r6
 c000d3c:	465a      	mov	r2, fp
 c000d3e:	4621      	mov	r1, r4
 c000d40:	4620      	mov	r0, r4
 c000d42:	f7ff feea 	bl	c000b1a <cmox_ModularBN_Sqr>
 c000d46:	9908      	ldr	r1, [sp, #32]
 c000d48:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 c000d4c:	fa5f f08a 	uxtb.w	r0, sl
 c000d50:	40b9      	lsls	r1, r7
 c000d52:	4208      	tst	r0, r1
 c000d54:	d006      	beq.n	c000d64 <cmox_ModExpBN_SW+0x184>
 c000d56:	9600      	str	r6, [sp, #0]
 c000d58:	9903      	ldr	r1, [sp, #12]
 c000d5a:	465b      	mov	r3, fp
 c000d5c:	4622      	mov	r2, r4
 c000d5e:	4620      	mov	r0, r4
 c000d60:	f7ff feb8 	bl	c000ad4 <cmox_ModularBN_Mul>
 c000d64:	1e6d      	subs	r5, r5, #1
 c000d66:	d1e8      	bne.n	c000d3a <cmox_ModExpBN_SW+0x15a>
 c000d68:	f1b8 0f00 	cmp.w	r8, #0
 c000d6c:	d045      	beq.n	c000dfa <cmox_ModExpBN_SW+0x21a>
 c000d6e:	9801      	ldr	r0, [sp, #4]
 c000d70:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 c000d74:	1f09      	subs	r1, r1, #4
 c000d76:	4648      	mov	r0, r9
 c000d78:	f000 ffbe 	bl	c001cf8 <cmox_bn_free>
 c000d7c:	f1a8 0801 	sub.w	r8, r8, #1
 c000d80:	e7f2      	b.n	c000d68 <cmox_ModExpBN_SW+0x188>
 c000d82:	2d01      	cmp	r5, #1
 c000d84:	bf08      	it	eq
 c000d86:	2800      	cmpeq	r0, #0
 c000d88:	d106      	bne.n	c000d98 <cmox_ModExpBN_SW+0x1b8>
 c000d8a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 c000d8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 c000d8e:	465a      	mov	r2, fp
 c000d90:	4608      	mov	r0, r1
 c000d92:	f7ff fec2 	bl	c000b1a <cmox_ModularBN_Sqr>
 c000d96:	e7bc      	b.n	c000d12 <cmox_ModExpBN_SW+0x132>
 c000d98:	9905      	ldr	r1, [sp, #20]
 c000d9a:	1c64      	adds	r4, r4, #1
 c000d9c:	9a05      	ldr	r2, [sp, #20]
 c000d9e:	1b09      	subs	r1, r1, r4
 c000da0:	4088      	lsls	r0, r1
 c000da2:	ea40 0a0a 	orr.w	sl, r0, sl
 c000da6:	2502      	movs	r5, #2
 c000da8:	b2e0      	uxtb	r0, r4
 c000daa:	4290      	cmp	r0, r2
 c000dac:	d1b1      	bne.n	c000d12 <cmox_ModExpBN_SW+0x132>
 c000dae:	2700      	movs	r7, #0
 c000db0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 c000db2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 c000db4:	4616      	mov	r6, r2
 c000db6:	e006      	b.n	c000dc6 <cmox_ModExpBN_SW+0x1e6>
 c000db8:	4623      	mov	r3, r4
 c000dba:	465a      	mov	r2, fp
 c000dbc:	4629      	mov	r1, r5
 c000dbe:	4628      	mov	r0, r5
 c000dc0:	f7ff feab 	bl	c000b1a <cmox_ModularBN_Sqr>
 c000dc4:	1c7f      	adds	r7, r7, #1
 c000dc6:	42b7      	cmp	r7, r6
 c000dc8:	d3f6      	bcc.n	c000db8 <cmox_ModExpBN_SW+0x1d8>
 c000dca:	9514      	str	r5, [sp, #80]	@ 0x50
 c000dcc:	9416      	str	r4, [sp, #88]	@ 0x58
 c000dce:	9605      	str	r6, [sp, #20]
 c000dd0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 c000dd2:	9d08      	ldr	r5, [sp, #32]
 c000dd4:	f99d 0009 	ldrsb.w	r0, [sp, #9]
 c000dd8:	9901      	ldr	r1, [sp, #4]
 c000dda:	9200      	str	r2, [sp, #0]
 c000ddc:	fa5f f48a 	uxtb.w	r4, sl
 c000de0:	4085      	lsls	r5, r0
 c000de2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 c000de4:	ea24 0a05 	bic.w	sl, r4, r5
 c000de8:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 c000dec:	465b      	mov	r3, fp
 c000dee:	4610      	mov	r0, r2
 c000df0:	2400      	movs	r4, #0
 c000df2:	f7ff fe6f 	bl	c000ad4 <cmox_ModularBN_Mul>
 c000df6:	46a2      	mov	sl, r4
 c000df8:	e78a      	b.n	c000d10 <cmox_ModExpBN_SW+0x130>
 c000dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 c000dfc:	a901      	add	r1, sp, #4
 c000dfe:	4648      	mov	r0, r9
 c000e00:	f003 f887 	bl	c003f12 <cmox_membuf_free>
 c000e04:	9804      	ldr	r0, [sp, #16]
 c000e06:	b00b      	add	sp, #44	@ 0x2c
 c000e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c000e0c <cmox_ScalarMul_FW>:
 c000e0c:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c000e10:	4607      	mov	r7, r0
 c000e12:	b08c      	sub	sp, #48	@ 0x30
 c000e14:	2001      	movs	r0, #1
 c000e16:	468b      	mov	fp, r1
 c000e18:	9009      	str	r0, [sp, #36]	@ 0x24
 c000e1a:	69b9      	ldr	r1, [r7, #24]
 c000e1c:	2200      	movs	r2, #0
 c000e1e:	461c      	mov	r4, r3
 c000e20:	6988      	ldr	r0, [r1, #24]
 c000e22:	2100      	movs	r1, #0
 c000e24:	6846      	ldr	r6, [r0, #4]
 c000e26:	9204      	str	r2, [sp, #16]
 c000e28:	4658      	mov	r0, fp
 c000e2a:	f001 f81e 	bl	c001e6a <cmox_bn_cmpUint>
 c000e2e:	b950      	cbnz	r0, c000e46 <cmox_ScalarMul_FW+0x3a>
 c000e30:	69b8      	ldr	r0, [r7, #24]
 c000e32:	6800      	ldr	r0, [r0, #0]
 c000e34:	69c1      	ldr	r1, [r0, #28]
 c000e36:	2901      	cmp	r1, #1
 c000e38:	d008      	beq.n	c000e4c <cmox_ScalarMul_FW+0x40>
 c000e3a:	6881      	ldr	r1, [r0, #8]
 c000e3c:	4658      	mov	r0, fp
 c000e3e:	f000 ffd3 	bl	c001de8 <cmox_bn_cmp>
 c000e42:	2800      	cmp	r0, #0
 c000e44:	d402      	bmi.n	c000e4c <cmox_ScalarMul_FW+0x40>
 c000e46:	f04f 0801 	mov.w	r8, #1
 c000e4a:	e1d7      	b.n	c0011fc <cmox_ScalarMul_FW+0x3f0>
 c000e4c:	69b8      	ldr	r0, [r7, #24]
 c000e4e:	6841      	ldr	r1, [r0, #4]
 c000e50:	69f8      	ldr	r0, [r7, #28]
 c000e52:	698a      	ldr	r2, [r1, #24]
 c000e54:	f107 0114 	add.w	r1, r7, #20
 c000e58:	0092      	lsls	r2, r2, #2
 c000e5a:	f003 f83b 	bl	c003ed4 <cmox_membuf_alloc>
 c000e5e:	ea5f 0800 	movs.w	r8, r0
 c000e62:	d1f2      	bne.n	c000e4a <cmox_ScalarMul_FW+0x3e>
 c000e64:	2500      	movs	r5, #0
 c000e66:	e00c      	b.n	c000e82 <cmox_ScalarMul_FW+0x76>
 c000e68:	6809      	ldr	r1, [r1, #0]
 c000e6a:	680a      	ldr	r2, [r1, #0]
 c000e6c:	6979      	ldr	r1, [r7, #20]
 c000e6e:	6812      	ldr	r2, [r2, #0]
 c000e70:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 c000e74:	f000 ff35 	bl	c001ce2 <cmox_bn_alloc>
 c000e78:	ea5f 0800 	movs.w	r8, r0
 c000e7c:	f040 81b3 	bne.w	c0011e6 <cmox_ScalarMul_FW+0x3da>
 c000e80:	1c6d      	adds	r5, r5, #1
 c000e82:	69b9      	ldr	r1, [r7, #24]
 c000e84:	69f8      	ldr	r0, [r7, #28]
 c000e86:	684a      	ldr	r2, [r1, #4]
 c000e88:	6993      	ldr	r3, [r2, #24]
 c000e8a:	429d      	cmp	r5, r3
 c000e8c:	d3ec      	bcc.n	c000e68 <cmox_ScalarMul_FW+0x5c>
 c000e8e:	f04f 0901 	mov.w	r9, #1
 c000e92:	1e72      	subs	r2, r6, #1
 c000e94:	fa09 f202 	lsl.w	r2, r9, r2
 c000e98:	0092      	lsls	r2, r2, #2
 c000e9a:	9208      	str	r2, [sp, #32]
 c000e9c:	a901      	add	r1, sp, #4
 c000e9e:	f003 f819 	bl	c003ed4 <cmox_membuf_alloc>
 c000ea2:	46aa      	mov	sl, r5
 c000ea4:	ea5f 0800 	movs.w	r8, r0
 c000ea8:	f040 8194 	bne.w	c0011d4 <cmox_ScalarMul_FW+0x3c8>
 c000eac:	2500      	movs	r5, #0
 c000eae:	e010      	b.n	c000ed2 <cmox_ScalarMul_FW+0xc6>
 c000eb0:	9801      	ldr	r0, [sp, #4]
 c000eb2:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 c000eb6:	4638      	mov	r0, r7
 c000eb8:	f001 f98e 	bl	c0021d8 <cmox_ECC_AllocPoint>
 c000ebc:	ea5f 0800 	movs.w	r8, r0
 c000ec0:	f040 8181 	bne.w	c0011c6 <cmox_ScalarMul_FW+0x3ba>
 c000ec4:	9801      	ldr	r0, [sp, #4]
 c000ec6:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
 c000eca:	4638      	mov	r0, r7
 c000ecc:	1c6d      	adds	r5, r5, #1
 c000ece:	f001 fa69 	bl	c0023a4 <cmox_ECC_SetPointAtInfinity>
 c000ed2:	1e71      	subs	r1, r6, #1
 c000ed4:	fa09 f101 	lsl.w	r1, r9, r1
 c000ed8:	428d      	cmp	r5, r1
 c000eda:	d3e9      	bcc.n	c000eb0 <cmox_ScalarMul_FW+0xa4>
 c000edc:	9702      	str	r7, [sp, #8]
 c000ede:	950b      	str	r5, [sp, #44]	@ 0x2c
 c000ee0:	9403      	str	r4, [sp, #12]
 c000ee2:	9802      	ldr	r0, [sp, #8]
 c000ee4:	4621      	mov	r1, r4
 c000ee6:	f04f 0800 	mov.w	r8, #0
 c000eea:	f001 fa5b 	bl	c0023a4 <cmox_ECC_SetPointAtInfinity>
 c000eee:	f89b 0004 	ldrb.w	r0, [fp, #4]
 c000ef2:	4634      	mov	r4, r6
 c000ef4:	f000 0001 	and.w	r0, r0, #1
 c000ef8:	9007      	str	r0, [sp, #28]
 c000efa:	9802      	ldr	r0, [sp, #8]
 c000efc:	6981      	ldr	r1, [r0, #24]
 c000efe:	9807      	ldr	r0, [sp, #28]
 c000f00:	680a      	ldr	r2, [r1, #0]
 c000f02:	4659      	mov	r1, fp
 c000f04:	f1c0 0001 	rsb	r0, r0, #1
 c000f08:	6892      	ldr	r2, [r2, #8]
 c000f0a:	f7ff fd72 	bl	c0009f2 <cmox_FieldBN_CondNegate>
 c000f0e:	f8db 0000 	ldr.w	r0, [fp]
 c000f12:	ebc6 1540 	rsb	r5, r6, r0, lsl #5
 c000f16:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 c000f1a:	f7ff fe3f 	bl	c000b9c <cmox_mathUtils_bitLength>
 c000f1e:	f8db 1000 	ldr.w	r1, [fp]
 c000f22:	fa09 f206 	lsl.w	r2, r9, r6
 c000f26:	1e49      	subs	r1, r1, #1
 c000f28:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 c000f2c:	1e71      	subs	r1, r6, #1
 c000f2e:	fa09 f101 	lsl.w	r1, r9, r1
 c000f32:	1e49      	subs	r1, r1, #1
 c000f34:	9105      	str	r1, [sp, #20]
 c000f36:	9206      	str	r2, [sp, #24]
 c000f38:	900a      	str	r0, [sp, #40]	@ 0x28
 c000f3a:	e02d      	b.n	c000f98 <cmox_ScalarMul_FW+0x18c>
 c000f3c:	4642      	mov	r2, r8
 c000f3e:	1c61      	adds	r1, r4, #1
 c000f40:	4658      	mov	r0, fp
 c000f42:	f000 ffc1 	bl	c001ec8 <cmox_bn_getBits>
 c000f46:	4606      	mov	r6, r0
 c000f48:	9806      	ldr	r0, [sp, #24]
 c000f4a:	1a30      	subs	r0, r6, r0
 c000f4c:	f7ff fe38 	bl	c000bc0 <cmox_mathUtils_abs>
 c000f50:	4607      	mov	r7, r0
 c000f52:	eb04 0008 	add.w	r0, r4, r8
 c000f56:	9000      	str	r0, [sp, #0]
 c000f58:	4601      	mov	r1, r0
 c000f5a:	4628      	mov	r0, r5
 c000f5c:	f7ff fe17 	bl	c000b8e <cmox_mathUtils_gt>
 c000f60:	9906      	ldr	r1, [sp, #24]
 c000f62:	2200      	movs	r2, #0
 c000f64:	40e6      	lsrs	r6, r4
 c000f66:	f7ff fe05 	bl	c000b74 <cmox_mathUtils_mux>
 c000f6a:	ea40 0757 	orr.w	r7, r0, r7, lsr #1
 c000f6e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c000f70:	4641      	mov	r1, r8
 c000f72:	f006 0601 	and.w	r6, r6, #1
 c000f76:	f7ff fe0a 	bl	c000b8e <cmox_mathUtils_gt>
 c000f7a:	9a05      	ldr	r2, [sp, #20]
 c000f7c:	1e63      	subs	r3, r4, #1
 c000f7e:	409e      	lsls	r6, r3
 c000f80:	ea46 0107 	orr.w	r1, r6, r7
 c000f84:	f7ff fdf6 	bl	c000b74 <cmox_mathUtils_mux>
 c000f88:	4603      	mov	r3, r0
 c000f8a:	4642      	mov	r2, r8
 c000f8c:	1c61      	adds	r1, r4, #1
 c000f8e:	4658      	mov	r0, fp
 c000f90:	f000 ffbe 	bl	c001f10 <cmox_bn_setBits>
 c000f94:	f8dd 8000 	ldr.w	r8, [sp]
 c000f98:	45a8      	cmp	r8, r5
 c000f9a:	d3cf      	bcc.n	c000f3c <cmox_ScalarMul_FW+0x130>
 c000f9c:	1c65      	adds	r5, r4, #1
 c000f9e:	4642      	mov	r2, r8
 c000fa0:	4629      	mov	r1, r5
 c000fa2:	4658      	mov	r0, fp
 c000fa4:	f000 ff90 	bl	c001ec8 <cmox_bn_getBits>
 c000fa8:	0843      	lsrs	r3, r0, #1
 c000faa:	4642      	mov	r2, r8
 c000fac:	4629      	mov	r1, r5
 c000fae:	4658      	mov	r0, fp
 c000fb0:	f000 ffae 	bl	c001f10 <cmox_bn_setBits>
 c000fb4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c000fb6:	2100      	movs	r1, #0
 c000fb8:	7c00      	ldrb	r0, [r0, #16]
 c000fba:	f000 0004 	and.w	r0, r0, #4
 c000fbe:	f7ff fde1 	bl	c000b84 <cmox_mathUtils_neq>
 c000fc2:	b920      	cbnz	r0, c000fce <cmox_ScalarMul_FW+0x1c2>
 c000fc4:	9009      	str	r0, [sp, #36]	@ 0x24
 c000fc6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 c000fc8:	9802      	ldr	r0, [sp, #8]
 c000fca:	f001 faa9 	bl	c002520 <cmox_ECC_PointToModularDomain>
 c000fce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 c000fd0:	9802      	ldr	r0, [sp, #8]
 c000fd2:	f001 fafd 	bl	c0025d0 <cmox_ECC_PointValidation>
 c000fd6:	ea5f 0800 	movs.w	r8, r0
 c000fda:	f040 80e9 	bne.w	c0011b0 <cmox_ScalarMul_FW+0x3a4>
 c000fde:	9801      	ldr	r0, [sp, #4]
 c000fe0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 c000fe2:	2301      	movs	r3, #1
 c000fe4:	6802      	ldr	r2, [r0, #0]
 c000fe6:	9802      	ldr	r0, [sp, #8]
 c000fe8:	6986      	ldr	r6, [r0, #24]
 c000fea:	6875      	ldr	r5, [r6, #4]
 c000fec:	682e      	ldr	r6, [r5, #0]
 c000fee:	47b0      	blx	r6
 c000ff0:	9901      	ldr	r1, [sp, #4]
 c000ff2:	2000      	movs	r0, #0
 c000ff4:	9000      	str	r0, [sp, #0]
 c000ff6:	9802      	ldr	r0, [sp, #8]
 c000ff8:	684b      	ldr	r3, [r1, #4]
 c000ffa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 c000ffc:	6986      	ldr	r6, [r0, #24]
 c000ffe:	6809      	ldr	r1, [r1, #0]
 c001000:	6875      	ldr	r5, [r6, #4]
 c001002:	f8d5 c004 	ldr.w	ip, [r5, #4]
 c001006:	2502      	movs	r5, #2
 c001008:	47e0      	blx	ip
 c00100a:	1e61      	subs	r1, r4, #1
 c00100c:	f88d 1000 	strb.w	r1, [sp]
 c001010:	f89d 0000 	ldrb.w	r0, [sp]
 c001014:	9f02      	ldr	r7, [sp, #8]
 c001016:	fa09 f600 	lsl.w	r6, r9, r0
 c00101a:	e00e      	b.n	c00103a <cmox_ScalarMul_FW+0x22e>
 c00101c:	f8d7 c018 	ldr.w	ip, [r7, #24]
 c001020:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 c001024:	f851 1c04 	ldr.w	r1, [r1, #-4]
 c001028:	f8dc e004 	ldr.w	lr, [ip, #4]
 c00102c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 c001030:	4638      	mov	r0, r7
 c001032:	f8de c008 	ldr.w	ip, [lr, #8]
 c001036:	1c6d      	adds	r5, r5, #1
 c001038:	47e0      	blx	ip
 c00103a:	9801      	ldr	r0, [sp, #4]
 c00103c:	42b5      	cmp	r5, r6
 c00103e:	6802      	ldr	r2, [r0, #0]
 c001040:	d3ec      	bcc.n	c00101c <cmox_ScalarMul_FW+0x210>
 c001042:	990c      	ldr	r1, [sp, #48]	@ 0x30
 c001044:	2001      	movs	r0, #1
 c001046:	f001 f953 	bl	c0022f0 <cmox_ECC_CondCopyPoint>
 c00104a:	f8db 5000 	ldr.w	r5, [fp]
 c00104e:	1e61      	subs	r1, r4, #1
 c001050:	4658      	mov	r0, fp
 c001052:	016d      	lsls	r5, r5, #5
 c001054:	1b2a      	subs	r2, r5, r4
 c001056:	f000 ff37 	bl	c001ec8 <cmox_bn_getBits>
 c00105a:	9901      	ldr	r1, [sp, #4]
 c00105c:	9a03      	ldr	r2, [sp, #12]
 c00105e:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 c001062:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 c001066:	2001      	movs	r0, #1
 c001068:	f001 f942 	bl	c0022f0 <cmox_ECC_CondCopyPoint>
 c00106c:	9502      	str	r5, [sp, #8]
 c00106e:	e02e      	b.n	c0010ce <cmox_ScalarMul_FW+0x2c2>
 c001070:	f8d7 c018 	ldr.w	ip, [r7, #24]
 c001074:	2301      	movs	r3, #1
 c001076:	464a      	mov	r2, r9
 c001078:	f8dc e004 	ldr.w	lr, [ip, #4]
 c00107c:	4649      	mov	r1, r9
 c00107e:	4638      	mov	r0, r7
 c001080:	f8de c000 	ldr.w	ip, [lr]
 c001084:	47e0      	blx	ip
 c001086:	1e6d      	subs	r5, r5, #1
 c001088:	d1f2      	bne.n	c001070 <cmox_ScalarMul_FW+0x264>
 c00108a:	9d04      	ldr	r5, [sp, #16]
 c00108c:	9806      	ldr	r0, [sp, #24]
 c00108e:	9901      	ldr	r1, [sp, #4]
 c001090:	40f5      	lsrs	r5, r6
 c001092:	f005 0501 	and.w	r5, r5, #1
 c001096:	f8cd 900c 	str.w	r9, [sp, #12]
 c00109a:	4045      	eors	r5, r0
 c00109c:	f085 0501 	eor.w	r5, r5, #1
 c0010a0:	f851 2026 	ldr.w	r2, [r1, r6, lsl #2]
 c0010a4:	4639      	mov	r1, r7
 c0010a6:	4628      	mov	r0, r5
 c0010a8:	f001 f955 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c0010ac:	9804      	ldr	r0, [sp, #16]
 c0010ae:	40b5      	lsls	r5, r6
 c0010b0:	9b03      	ldr	r3, [sp, #12]
 c0010b2:	4045      	eors	r5, r0
 c0010b4:	9801      	ldr	r0, [sp, #4]
 c0010b6:	9504      	str	r5, [sp, #16]
 c0010b8:	69bd      	ldr	r5, [r7, #24]
 c0010ba:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 c0010be:	4619      	mov	r1, r3
 c0010c0:	686e      	ldr	r6, [r5, #4]
 c0010c2:	4638      	mov	r0, r7
 c0010c4:	68b5      	ldr	r5, [r6, #8]
 c0010c6:	47a8      	blx	r5
 c0010c8:	9802      	ldr	r0, [sp, #8]
 c0010ca:	1b00      	subs	r0, r0, r4
 c0010cc:	9002      	str	r0, [sp, #8]
 c0010ce:	9802      	ldr	r0, [sp, #8]
 c0010d0:	42a0      	cmp	r0, r4
 c0010d2:	d310      	bcc.n	c0010f6 <cmox_ScalarMul_FW+0x2ea>
 c0010d4:	4602      	mov	r2, r0
 c0010d6:	4621      	mov	r1, r4
 c0010d8:	4658      	mov	r0, fp
 c0010da:	f000 fef5 	bl	c001ec8 <cmox_bn_getBits>
 c0010de:	f89d 2000 	ldrb.w	r2, [sp]
 c0010e2:	9905      	ldr	r1, [sp, #20]
 c0010e4:	0025      	movs	r5, r4
 c0010e6:	fa20 f302 	lsr.w	r3, r0, r2
 c0010ea:	9306      	str	r3, [sp, #24]
 c0010ec:	ea01 0600 	and.w	r6, r1, r0
 c0010f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 c0010f4:	e7c8      	b.n	c001088 <cmox_ScalarMul_FW+0x27c>
 c0010f6:	2200      	movs	r2, #0
 c0010f8:	4621      	mov	r1, r4
 c0010fa:	4658      	mov	r0, fp
 c0010fc:	f000 fee4 	bl	c001ec8 <cmox_bn_getBits>
 c001100:	f89d 2000 	ldrb.w	r2, [sp]
 c001104:	9905      	ldr	r1, [sp, #20]
 c001106:	fa20 f302 	lsr.w	r3, r0, r2
 c00110a:	4625      	mov	r5, r4
 c00110c:	ea01 0b00 	and.w	fp, r1, r0
 c001110:	9801      	ldr	r0, [sp, #4]
 c001112:	4639      	mov	r1, r7
 c001114:	f850 202b 	ldr.w	r2, [r0, fp, lsl #2]
 c001118:	9804      	ldr	r0, [sp, #16]
 c00111a:	fa20 f00b 	lsr.w	r0, r0, fp
 c00111e:	f000 0001 	and.w	r0, r0, #1
 c001122:	4043      	eors	r3, r0
 c001124:	f083 0001 	eor.w	r0, r3, #1
 c001128:	f001 f915 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c00112c:	9c03      	ldr	r4, [sp, #12]
 c00112e:	e007      	b.n	c001140 <cmox_ScalarMul_FW+0x334>
 c001130:	f8d6 c000 	ldr.w	ip, [r6]
 c001134:	2301      	movs	r3, #1
 c001136:	4622      	mov	r2, r4
 c001138:	4621      	mov	r1, r4
 c00113a:	4638      	mov	r0, r7
 c00113c:	47e0      	blx	ip
 c00113e:	1e6d      	subs	r5, r5, #1
 c001140:	69b8      	ldr	r0, [r7, #24]
 c001142:	2d00      	cmp	r5, #0
 c001144:	6846      	ldr	r6, [r0, #4]
 c001146:	d1f3      	bne.n	c001130 <cmox_ScalarMul_FW+0x324>
 c001148:	9702      	str	r7, [sp, #8]
 c00114a:	9801      	ldr	r0, [sp, #4]
 c00114c:	68b5      	ldr	r5, [r6, #8]
 c00114e:	6803      	ldr	r3, [r0, #0]
 c001150:	f850 202b 	ldr.w	r2, [r0, fp, lsl #2]
 c001154:	4621      	mov	r1, r4
 c001156:	4638      	mov	r0, r7
 c001158:	47a8      	blx	r5
 c00115a:	9801      	ldr	r0, [sp, #4]
 c00115c:	2100      	movs	r1, #0
 c00115e:	6802      	ldr	r2, [r0, #0]
 c001160:	6890      	ldr	r0, [r2, #8]
 c001162:	f000 fe82 	bl	c001e6a <cmox_bn_cmpUint>
 c001166:	4603      	mov	r3, r0
 c001168:	9801      	ldr	r0, [sp, #4]
 c00116a:	4621      	mov	r1, r4
 c00116c:	6802      	ldr	r2, [r0, #0]
 c00116e:	9802      	ldr	r0, [sp, #8]
 c001170:	6986      	ldr	r6, [r0, #24]
 c001172:	6875      	ldr	r5, [r6, #4]
 c001174:	f8d5 c000 	ldr.w	ip, [r5]
 c001178:	47e0      	blx	ip
 c00117a:	9801      	ldr	r0, [sp, #4]
 c00117c:	4622      	mov	r2, r4
 c00117e:	6801      	ldr	r1, [r0, #0]
 c001180:	2001      	movs	r0, #1
 c001182:	f001 f8b5 	bl	c0022f0 <cmox_ECC_CondCopyPoint>
 c001186:	9807      	ldr	r0, [sp, #28]
 c001188:	9902      	ldr	r1, [sp, #8]
 c00118a:	4622      	mov	r2, r4
 c00118c:	f1c0 0001 	rsb	r0, r0, #1
 c001190:	f001 f8e1 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c001194:	9809      	ldr	r0, [sp, #36]	@ 0x24
 c001196:	b958      	cbnz	r0, c0011b0 <cmox_ScalarMul_FW+0x3a4>
 c001198:	990c      	ldr	r1, [sp, #48]	@ 0x30
 c00119a:	9802      	ldr	r0, [sp, #8]
 c00119c:	f001 f9ea 	bl	c002574 <cmox_ECC_PointFromModularDomain>
 c0011a0:	4680      	mov	r8, r0
 c0011a2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c0011a4:	42a0      	cmp	r0, r4
 c0011a6:	d003      	beq.n	c0011b0 <cmox_ScalarMul_FW+0x3a4>
 c0011a8:	9802      	ldr	r0, [sp, #8]
 c0011aa:	4621      	mov	r1, r4
 c0011ac:	f001 f9e2 	bl	c002574 <cmox_ECC_PointFromModularDomain>
 c0011b0:	9f02      	ldr	r7, [sp, #8]
 c0011b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 c0011b4:	e007      	b.n	c0011c6 <cmox_ScalarMul_FW+0x3ba>
 c0011b6:	9801      	ldr	r0, [sp, #4]
 c0011b8:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 c0011bc:	1f09      	subs	r1, r1, #4
 c0011be:	4638      	mov	r0, r7
 c0011c0:	f001 f866 	bl	c002290 <cmox_ECC_FreePoint>
 c0011c4:	1e6d      	subs	r5, r5, #1
 c0011c6:	2d00      	cmp	r5, #0
 c0011c8:	d1f5      	bne.n	c0011b6 <cmox_ScalarMul_FW+0x3aa>
 c0011ca:	9a08      	ldr	r2, [sp, #32]
 c0011cc:	69f8      	ldr	r0, [r7, #28]
 c0011ce:	a901      	add	r1, sp, #4
 c0011d0:	f002 fe9f 	bl	c003f12 <cmox_membuf_free>
 c0011d4:	4655      	mov	r5, sl
 c0011d6:	e006      	b.n	c0011e6 <cmox_ScalarMul_FW+0x3da>
 c0011d8:	6979      	ldr	r1, [r7, #20]
 c0011da:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 c0011de:	1f11      	subs	r1, r2, #4
 c0011e0:	f000 fd8a 	bl	c001cf8 <cmox_bn_free>
 c0011e4:	1e6d      	subs	r5, r5, #1
 c0011e6:	69f8      	ldr	r0, [r7, #28]
 c0011e8:	2d00      	cmp	r5, #0
 c0011ea:	d1f5      	bne.n	c0011d8 <cmox_ScalarMul_FW+0x3cc>
 c0011ec:	69b9      	ldr	r1, [r7, #24]
 c0011ee:	684a      	ldr	r2, [r1, #4]
 c0011f0:	f107 0114 	add.w	r1, r7, #20
 c0011f4:	6992      	ldr	r2, [r2, #24]
 c0011f6:	0092      	lsls	r2, r2, #2
 c0011f8:	f002 fe8b 	bl	c003f12 <cmox_membuf_free>
 c0011fc:	4640      	mov	r0, r8
 c0011fe:	b00d      	add	sp, #52	@ 0x34
 c001200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c001204 <cmox_ScalarMul_SC>:
 c001204:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c001208:	b08b      	sub	sp, #44	@ 0x2c
 c00120a:	4606      	mov	r6, r0
 c00120c:	4689      	mov	r9, r1
 c00120e:	69b1      	ldr	r1, [r6, #24]
 c001210:	2700      	movs	r7, #0
 c001212:	680a      	ldr	r2, [r1, #0]
 c001214:	6890      	ldr	r0, [r2, #8]
 c001216:	f000 fe3e 	bl	c001e96 <cmox_bn_countBits>
 c00121a:	69b1      	ldr	r1, [r6, #24]
 c00121c:	688a      	ldr	r2, [r1, #8]
 c00121e:	6813      	ldr	r3, [r2, #0]
 c001220:	fbb0 f8f3 	udiv	r8, r0, r3
 c001224:	461d      	mov	r5, r3
 c001226:	1e5a      	subs	r2, r3, #1
 c001228:	fb05 0518 	mls	r5, r5, r8, r0
 c00122c:	f88d 2010 	strb.w	r2, [sp, #16]
 c001230:	f89d 0010 	ldrb.w	r0, [sp, #16]
 c001234:	9300      	str	r3, [sp, #0]
 c001236:	2301      	movs	r3, #1
 c001238:	4083      	lsls	r3, r0
 c00123a:	1e5b      	subs	r3, r3, #1
 c00123c:	9309      	str	r3, [sp, #36]	@ 0x24
 c00123e:	680a      	ldr	r2, [r1, #0]
 c001240:	6813      	ldr	r3, [r2, #0]
 c001242:	681c      	ldr	r4, [r3, #0]
 c001244:	2302      	movs	r3, #2
 c001246:	9702      	str	r7, [sp, #8]
 c001248:	9405      	str	r4, [sp, #20]
 c00124a:	9307      	str	r3, [sp, #28]
 c00124c:	688a      	ldr	r2, [r1, #8]
 c00124e:	9206      	str	r2, [sp, #24]
 c001250:	6848      	ldr	r0, [r1, #4]
 c001252:	69c1      	ldr	r1, [r0, #28]
 c001254:	2902      	cmp	r1, #2
 c001256:	bf04      	itt	eq
 c001258:	2003      	moveq	r0, #3
 c00125a:	9007      	streq	r0, [sp, #28]
 c00125c:	2100      	movs	r1, #0
 c00125e:	4648      	mov	r0, r9
 c001260:	f000 fe03 	bl	c001e6a <cmox_bn_cmpUint>
 c001264:	b950      	cbnz	r0, c00127c <cmox_ScalarMul_SC+0x78>
 c001266:	69b0      	ldr	r0, [r6, #24]
 c001268:	6800      	ldr	r0, [r0, #0]
 c00126a:	69c1      	ldr	r1, [r0, #28]
 c00126c:	2901      	cmp	r1, #1
 c00126e:	d007      	beq.n	c001280 <cmox_ScalarMul_SC+0x7c>
 c001270:	6881      	ldr	r1, [r0, #8]
 c001272:	4648      	mov	r0, r9
 c001274:	f000 fdb8 	bl	c001de8 <cmox_bn_cmp>
 c001278:	2800      	cmp	r0, #0
 c00127a:	d401      	bmi.n	c001280 <cmox_ScalarMul_SC+0x7c>
 c00127c:	2401      	movs	r4, #1
 c00127e:	e193      	b.n	c0015a8 <cmox_ScalarMul_SC+0x3a4>
 c001280:	69b0      	ldr	r0, [r6, #24]
 c001282:	6841      	ldr	r1, [r0, #4]
 c001284:	69f0      	ldr	r0, [r6, #28]
 c001286:	698a      	ldr	r2, [r1, #24]
 c001288:	f106 0114 	add.w	r1, r6, #20
 c00128c:	0092      	lsls	r2, r2, #2
 c00128e:	f002 fe21 	bl	c003ed4 <cmox_membuf_alloc>
 c001292:	0004      	movs	r4, r0
 c001294:	d1f3      	bne.n	c00127e <cmox_ScalarMul_SC+0x7a>
 c001296:	46ba      	mov	sl, r7
 c001298:	e00d      	b.n	c0012b6 <cmox_ScalarMul_SC+0xb2>
 c00129a:	6800      	ldr	r0, [r0, #0]
 c00129c:	6801      	ldr	r1, [r0, #0]
 c00129e:	6970      	ldr	r0, [r6, #20]
 c0012a0:	680a      	ldr	r2, [r1, #0]
 c0012a2:	eb00 018a 	add.w	r1, r0, sl, lsl #2
 c0012a6:	69f0      	ldr	r0, [r6, #28]
 c0012a8:	f000 fd1b 	bl	c001ce2 <cmox_bn_alloc>
 c0012ac:	0004      	movs	r4, r0
 c0012ae:	f040 816f 	bne.w	c001590 <cmox_ScalarMul_SC+0x38c>
 c0012b2:	f10a 0a01 	add.w	sl, sl, #1
 c0012b6:	69b0      	ldr	r0, [r6, #24]
 c0012b8:	6841      	ldr	r1, [r0, #4]
 c0012ba:	698a      	ldr	r2, [r1, #24]
 c0012bc:	4592      	cmp	sl, r2
 c0012be:	dbec      	blt.n	c00129a <cmox_ScalarMul_SC+0x96>
 c0012c0:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 c0012c4:	a902      	add	r1, sp, #8
 c0012c6:	4630      	mov	r0, r6
 c0012c8:	f000 ff86 	bl	c0021d8 <cmox_ECC_AllocPoint>
 c0012cc:	0004      	movs	r4, r0
 c0012ce:	f040 8154 	bne.w	c00157a <cmox_ScalarMul_SC+0x376>
 c0012d2:	9902      	ldr	r1, [sp, #8]
 c0012d4:	4630      	mov	r0, r6
 c0012d6:	4644      	mov	r4, r8
 c0012d8:	f001 f864 	bl	c0023a4 <cmox_ECC_SetPointAtInfinity>
 c0012dc:	f899 0004 	ldrb.w	r0, [r9, #4]
 c0012e0:	46b8      	mov	r8, r7
 c0012e2:	f000 0001 	and.w	r0, r0, #1
 c0012e6:	9008      	str	r0, [sp, #32]
 c0012e8:	69b1      	ldr	r1, [r6, #24]
 c0012ea:	6808      	ldr	r0, [r1, #0]
 c0012ec:	4649      	mov	r1, r9
 c0012ee:	6882      	ldr	r2, [r0, #8]
 c0012f0:	9808      	ldr	r0, [sp, #32]
 c0012f2:	f1c0 0001 	rsb	r0, r0, #1
 c0012f6:	f7ff fb7c 	bl	c0009f2 <cmox_FieldBN_CondNegate>
 c0012fa:	f8dd a000 	ldr.w	sl, [sp]
 c0012fe:	e00b      	b.n	c001318 <cmox_ScalarMul_SC+0x114>
 c001300:	f108 0b01 	add.w	fp, r8, #1
 c001304:	fb04 520b 	mla	r2, r4, fp, r5
 c001308:	2101      	movs	r1, #1
 c00130a:	4648      	mov	r0, r9
 c00130c:	f000 fddc 	bl	c001ec8 <cmox_bn_getBits>
 c001310:	fa00 f008 	lsl.w	r0, r0, r8
 c001314:	4307      	orrs	r7, r0
 c001316:	46d8      	mov	r8, fp
 c001318:	f1aa 0001 	sub.w	r0, sl, #1
 c00131c:	4580      	cmp	r8, r0
 c00131e:	d3ef      	bcc.n	c001300 <cmox_ScalarMul_SC+0xfc>
 c001320:	990c      	ldr	r1, [sp, #48]	@ 0x30
 c001322:	4630      	mov	r0, r6
 c001324:	1c7f      	adds	r7, r7, #1
 c001326:	f001 f83d 	bl	c0023a4 <cmox_ECC_SetPointAtInfinity>
 c00132a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c00132c:	9a06      	ldr	r2, [sp, #24]
 c00132e:	2106      	movs	r1, #6
 c001330:	9001      	str	r0, [sp, #4]
 c001332:	9807      	ldr	r0, [sp, #28]
 c001334:	9100      	str	r1, [sp, #0]
 c001336:	1d13      	adds	r3, r2, #4
 c001338:	1d11      	adds	r1, r2, #4
 c00133a:	4347      	muls	r7, r0
 c00133c:	9a05      	ldr	r2, [sp, #20]
 c00133e:	2001      	movs	r0, #1
 c001340:	1c7f      	adds	r7, r7, #1
 c001342:	4357      	muls	r7, r2
 c001344:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 c001348:	9905      	ldr	r1, [sp, #20]
 c00134a:	1ea7      	subs	r7, r4, #2
 c00134c:	f001 f86b 	bl	c002426 <cmox_ECC_CondImportPoint>
 c001350:	e052      	b.n	c0013f8 <cmox_ScalarMul_SC+0x1f4>
 c001352:	197a      	adds	r2, r7, r5
 c001354:	fb04 220b 	mla	r2, r4, fp, r2
 c001358:	2101      	movs	r1, #1
 c00135a:	4648      	mov	r0, r9
 c00135c:	1c52      	adds	r2, r2, #1
 c00135e:	f000 fdb3 	bl	c001ec8 <cmox_bn_getBits>
 c001362:	fa00 f00b 	lsl.w	r0, r0, fp
 c001366:	ea40 0808 	orr.w	r8, r0, r8
 c00136a:	f10b 0b01 	add.w	fp, fp, #1
 c00136e:	45d3      	cmp	fp, sl
 c001370:	d3ef      	bcc.n	c001352 <cmox_ScalarMul_SC+0x14e>
 c001372:	f8d6 e018 	ldr.w	lr, [r6, #24]
 c001376:	f89d 0010 	ldrb.w	r0, [sp, #16]
 c00137a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 c00137c:	f8de c004 	ldr.w	ip, [lr, #4]
 c001380:	fa28 f000 	lsr.w	r0, r8, r0
 c001384:	f000 0b01 	and.w	fp, r0, #1
 c001388:	f8dc c000 	ldr.w	ip, [ip]
 c00138c:	2301      	movs	r3, #1
 c00138e:	4611      	mov	r1, r2
 c001390:	4630      	mov	r0, r6
 c001392:	47e0      	blx	ip
 c001394:	9802      	ldr	r0, [sp, #8]
 c001396:	2106      	movs	r1, #6
 c001398:	9100      	str	r1, [sp, #0]
 c00139a:	9001      	str	r0, [sp, #4]
 c00139c:	9806      	ldr	r0, [sp, #24]
 c00139e:	f1ab 0101 	sub.w	r1, fp, #1
 c0013a2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 c0013a6:	1d02      	adds	r2, r0, #4
 c0013a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 c0013aa:	ea81 0108 	eor.w	r1, r1, r8
 c0013ae:	f8dd c014 	ldr.w	ip, [sp, #20]
 c0013b2:	4008      	ands	r0, r1
 c0013b4:	1c40      	adds	r0, r0, #1
 c0013b6:	fb00 f00e 	mul.w	r0, r0, lr
 c0013ba:	2300      	movs	r3, #0
 c0013bc:	4661      	mov	r1, ip
 c0013be:	1c40      	adds	r0, r0, #1
 c0013c0:	fb00 f00c 	mul.w	r0, r0, ip
 c0013c4:	f1cb 0b01 	rsb	fp, fp, #1
 c0013c8:	1e7f      	subs	r7, r7, #1
 c0013ca:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 c0013ce:	2001      	movs	r0, #1
 c0013d0:	f001 f829 	bl	c002426 <cmox_ECC_CondImportPoint>
 c0013d4:	9a02      	ldr	r2, [sp, #8]
 c0013d6:	4631      	mov	r1, r6
 c0013d8:	4658      	mov	r0, fp
 c0013da:	f000 ffbc 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c0013de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 c0013e0:	2000      	movs	r0, #0
 c0013e2:	9a02      	ldr	r2, [sp, #8]
 c0013e4:	9000      	str	r0, [sp, #0]
 c0013e6:	f8d6 c018 	ldr.w	ip, [r6, #24]
 c0013ea:	4619      	mov	r1, r3
 c0013ec:	4630      	mov	r0, r6
 c0013ee:	f8dc e004 	ldr.w	lr, [ip, #4]
 c0013f2:	f8de c004 	ldr.w	ip, [lr, #4]
 c0013f6:	47e0      	blx	ip
 c0013f8:	1e68      	subs	r0, r5, #1
 c0013fa:	4180      	sbcs	r0, r0
 c0013fc:	ebb7 7fd0 	cmp.w	r7, r0, lsr #31
 c001400:	db03      	blt.n	c00140a <cmox_ScalarMul_SC+0x206>
 c001402:	f04f 0800 	mov.w	r8, #0
 c001406:	46c3      	mov	fp, r8
 c001408:	e7b1      	b.n	c00136e <cmox_ScalarMul_SC+0x16a>
 c00140a:	bb9d      	cbnz	r5, c001474 <cmox_ScalarMul_SC+0x270>
 c00140c:	2700      	movs	r7, #0
 c00140e:	e009      	b.n	c001424 <cmox_ScalarMul_SC+0x220>
 c001410:	fb04 f207 	mul.w	r2, r4, r7
 c001414:	2101      	movs	r1, #1
 c001416:	4648      	mov	r0, r9
 c001418:	1c52      	adds	r2, r2, #1
 c00141a:	f000 fd55 	bl	c001ec8 <cmox_bn_getBits>
 c00141e:	40b8      	lsls	r0, r7
 c001420:	4305      	orrs	r5, r0
 c001422:	1c7f      	adds	r7, r7, #1
 c001424:	4557      	cmp	r7, sl
 c001426:	d3f3      	bcc.n	c001410 <cmox_ScalarMul_SC+0x20c>
 c001428:	69b4      	ldr	r4, [r6, #24]
 c00142a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 c00142c:	2301      	movs	r3, #1
 c00142e:	6864      	ldr	r4, [r4, #4]
 c001430:	4611      	mov	r1, r2
 c001432:	f89d 0010 	ldrb.w	r0, [sp, #16]
 c001436:	f8d4 c000 	ldr.w	ip, [r4]
 c00143a:	fa25 f700 	lsr.w	r7, r5, r0
 c00143e:	4630      	mov	r0, r6
 c001440:	47e0      	blx	ip
 c001442:	9802      	ldr	r0, [sp, #8]
 c001444:	2106      	movs	r1, #6
 c001446:	f007 0701 	and.w	r7, r7, #1
 c00144a:	9001      	str	r0, [sp, #4]
 c00144c:	9806      	ldr	r0, [sp, #24]
 c00144e:	9100      	str	r1, [sp, #0]
 c001450:	1e79      	subs	r1, r7, #1
 c001452:	1d02      	adds	r2, r0, #4
 c001454:	9809      	ldr	r0, [sp, #36]	@ 0x24
 c001456:	f8dd a01c 	ldr.w	sl, [sp, #28]
 c00145a:	404d      	eors	r5, r1
 c00145c:	4005      	ands	r5, r0
 c00145e:	1c6d      	adds	r5, r5, #1
 c001460:	fb05 f50a 	mul.w	r5, r5, sl
 c001464:	9c05      	ldr	r4, [sp, #20]
 c001466:	2300      	movs	r3, #0
 c001468:	1c6d      	adds	r5, r5, #1
 c00146a:	4365      	muls	r5, r4
 c00146c:	4621      	mov	r1, r4
 c00146e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 c001472:	e04b      	b.n	c00150c <cmox_ScalarMul_SC+0x308>
 c001474:	9806      	ldr	r0, [sp, #24]
 c001476:	9a05      	ldr	r2, [sp, #20]
 c001478:	1e6f      	subs	r7, r5, #1
 c00147a:	1d01      	adds	r1, r0, #4
 c00147c:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 c001480:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 c001482:	4692      	mov	sl, r2
 c001484:	e029      	b.n	c0014da <cmox_ScalarMul_SC+0x2d6>
 c001486:	2301      	movs	r3, #1
 c001488:	462a      	mov	r2, r5
 c00148a:	4629      	mov	r1, r5
 c00148c:	4630      	mov	r0, r6
 c00148e:	47e0      	blx	ip
 c001490:	1c7a      	adds	r2, r7, #1
 c001492:	2101      	movs	r1, #1
 c001494:	4648      	mov	r0, r9
 c001496:	f000 fd17 	bl	c001ec8 <cmox_bn_getBits>
 c00149a:	4680      	mov	r8, r0
 c00149c:	9802      	ldr	r0, [sp, #8]
 c00149e:	2106      	movs	r1, #6
 c0014a0:	9100      	str	r1, [sp, #0]
 c0014a2:	9001      	str	r0, [sp, #4]
 c0014a4:	2300      	movs	r3, #0
 c0014a6:	4622      	mov	r2, r4
 c0014a8:	4651      	mov	r1, sl
 c0014aa:	2001      	movs	r0, #1
 c0014ac:	f000 ffbb 	bl	c002426 <cmox_ECC_CondImportPoint>
 c0014b0:	9a02      	ldr	r2, [sp, #8]
 c0014b2:	f1c8 0801 	rsb	r8, r8, #1
 c0014b6:	4631      	mov	r1, r6
 c0014b8:	4640      	mov	r0, r8
 c0014ba:	f000 ff4c 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c0014be:	2000      	movs	r0, #0
 c0014c0:	9a02      	ldr	r2, [sp, #8]
 c0014c2:	9000      	str	r0, [sp, #0]
 c0014c4:	f8d6 c018 	ldr.w	ip, [r6, #24]
 c0014c8:	462b      	mov	r3, r5
 c0014ca:	4629      	mov	r1, r5
 c0014cc:	f8dc e004 	ldr.w	lr, [ip, #4]
 c0014d0:	4630      	mov	r0, r6
 c0014d2:	1e7f      	subs	r7, r7, #1
 c0014d4:	f8de c004 	ldr.w	ip, [lr, #4]
 c0014d8:	47e0      	blx	ip
 c0014da:	69b0      	ldr	r0, [r6, #24]
 c0014dc:	2f00      	cmp	r7, #0
 c0014de:	6841      	ldr	r1, [r0, #4]
 c0014e0:	f8d1 c000 	ldr.w	ip, [r1]
 c0014e4:	dccf      	bgt.n	c001486 <cmox_ScalarMul_SC+0x282>
 c0014e6:	462a      	mov	r2, r5
 c0014e8:	950c      	str	r5, [sp, #48]	@ 0x30
 c0014ea:	2301      	movs	r3, #1
 c0014ec:	4611      	mov	r1, r2
 c0014ee:	4630      	mov	r0, r6
 c0014f0:	47e0      	blx	ip
 c0014f2:	2201      	movs	r2, #1
 c0014f4:	2101      	movs	r1, #1
 c0014f6:	4648      	mov	r0, r9
 c0014f8:	f000 fce6 	bl	c001ec8 <cmox_bn_getBits>
 c0014fc:	4607      	mov	r7, r0
 c0014fe:	9802      	ldr	r0, [sp, #8]
 c001500:	2106      	movs	r1, #6
 c001502:	9100      	str	r1, [sp, #0]
 c001504:	9001      	str	r0, [sp, #4]
 c001506:	2300      	movs	r3, #0
 c001508:	4622      	mov	r2, r4
 c00150a:	4651      	mov	r1, sl
 c00150c:	2001      	movs	r0, #1
 c00150e:	f000 ff8a 	bl	c002426 <cmox_ECC_CondImportPoint>
 c001512:	9a02      	ldr	r2, [sp, #8]
 c001514:	f1c7 0701 	rsb	r7, r7, #1
 c001518:	4631      	mov	r1, r6
 c00151a:	4638      	mov	r0, r7
 c00151c:	f000 ff1b 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c001520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 c001522:	a803      	add	r0, sp, #12
 c001524:	9a02      	ldr	r2, [sp, #8]
 c001526:	9000      	str	r0, [sp, #0]
 c001528:	69b4      	ldr	r4, [r6, #24]
 c00152a:	4619      	mov	r1, r3
 c00152c:	4630      	mov	r0, r6
 c00152e:	6865      	ldr	r5, [r4, #4]
 c001530:	686c      	ldr	r4, [r5, #4]
 c001532:	47a0      	blx	r4
 c001534:	69b4      	ldr	r4, [r6, #24]
 c001536:	9b03      	ldr	r3, [sp, #12]
 c001538:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 c00153a:	6865      	ldr	r5, [r4, #4]
 c00153c:	f003 0301 	and.w	r3, r3, #1
 c001540:	4611      	mov	r1, r2
 c001542:	f8d5 a000 	ldr.w	sl, [r5]
 c001546:	4630      	mov	r0, r6
 c001548:	47d0      	blx	sl
 c00154a:	69b0      	ldr	r0, [r6, #24]
 c00154c:	9c08      	ldr	r4, [sp, #32]
 c00154e:	6801      	ldr	r1, [r0, #0]
 c001550:	f1c4 0401 	rsb	r4, r4, #1
 c001554:	4620      	mov	r0, r4
 c001556:	688a      	ldr	r2, [r1, #8]
 c001558:	4649      	mov	r1, r9
 c00155a:	f7ff fa4a 	bl	c0009f2 <cmox_FieldBN_CondNegate>
 c00155e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 c001560:	4631      	mov	r1, r6
 c001562:	4620      	mov	r0, r4
 c001564:	f000 fef7 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c001568:	990c      	ldr	r1, [sp, #48]	@ 0x30
 c00156a:	4630      	mov	r0, r6
 c00156c:	f001 f802 	bl	c002574 <cmox_ECC_PointFromModularDomain>
 c001570:	4604      	mov	r4, r0
 c001572:	a902      	add	r1, sp, #8
 c001574:	4630      	mov	r0, r6
 c001576:	f000 fe8b 	bl	c002290 <cmox_ECC_FreePoint>
 c00157a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 c00157e:	e007      	b.n	c001590 <cmox_ScalarMul_SC+0x38c>
 c001580:	6971      	ldr	r1, [r6, #20]
 c001582:	eb01 028a 	add.w	r2, r1, sl, lsl #2
 c001586:	1f11      	subs	r1, r2, #4
 c001588:	f000 fbb6 	bl	c001cf8 <cmox_bn_free>
 c00158c:	f1aa 0a01 	sub.w	sl, sl, #1
 c001590:	69f0      	ldr	r0, [r6, #28]
 c001592:	f1ba 0f00 	cmp.w	sl, #0
 c001596:	dcf3      	bgt.n	c001580 <cmox_ScalarMul_SC+0x37c>
 c001598:	69b1      	ldr	r1, [r6, #24]
 c00159a:	684a      	ldr	r2, [r1, #4]
 c00159c:	f106 0114 	add.w	r1, r6, #20
 c0015a0:	6992      	ldr	r2, [r2, #24]
 c0015a2:	0092      	lsls	r2, r2, #2
 c0015a4:	f002 fcb5 	bl	c003f12 <cmox_membuf_free>
 c0015a8:	4620      	mov	r0, r4
 c0015aa:	b00d      	add	sp, #52	@ 0x34
 c0015ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c0015b0 <cmox_ScalarMul_wMOF>:
 c0015b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0015b4:	460e      	mov	r6, r1
 c0015b6:	b099      	sub	sp, #100	@ 0x64
 c0015b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c0015bc:	4617      	mov	r7, r2
 c0015be:	9112      	str	r1, [sp, #72]	@ 0x48
 c0015c0:	9111      	str	r1, [sp, #68]	@ 0x44
 c0015c2:	9110      	str	r1, [sp, #64]	@ 0x40
 c0015c4:	9101      	str	r1, [sp, #4]
 c0015c6:	2101      	movs	r1, #1
 c0015c8:	2200      	movs	r2, #0
 c0015ca:	4605      	mov	r5, r0
 c0015cc:	9117      	str	r1, [sp, #92]	@ 0x5c
 c0015ce:	9207      	str	r2, [sp, #28]
 c0015d0:	9206      	str	r2, [sp, #24]
 c0015d2:	69a9      	ldr	r1, [r5, #24]
 c0015d4:	461c      	mov	r4, r3
 c0015d6:	f04f 0902 	mov.w	r9, #2
 c0015da:	6808      	ldr	r0, [r1, #0]
 c0015dc:	6802      	ldr	r2, [r0, #0]
 c0015de:	6813      	ldr	r3, [r2, #0]
 c0015e0:	930a      	str	r3, [sp, #40]	@ 0x28
 c0015e2:	68ca      	ldr	r2, [r1, #12]
 c0015e4:	6813      	ldr	r3, [r2, #0]
 c0015e6:	9209      	str	r2, [sp, #36]	@ 0x24
 c0015e8:	f8df 263c 	ldr.w	r2, [pc, #1596]	@ c001c28 <cmox_ScalarMul_wMOF+0x678>
 c0015ec:	9304      	str	r3, [sp, #16]
 c0015ee:	9804      	ldr	r0, [sp, #16]
 c0015f0:	1e40      	subs	r0, r0, #1
 c0015f2:	0840      	lsrs	r0, r0, #1
 c0015f4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 c0015f8:	1f1a      	subs	r2, r3, #4
 c0015fa:	920c      	str	r2, [sp, #48]	@ 0x30
 c0015fc:	f8df 262c 	ldr.w	r2, [pc, #1580]	@ c001c2c <cmox_ScalarMul_wMOF+0x67c>
 c001600:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 c001604:	1f03      	subs	r3, r0, #4
 c001606:	930b      	str	r3, [sp, #44]	@ 0x2c
 c001608:	6848      	ldr	r0, [r1, #4]
 c00160a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 c00160e:	69c1      	ldr	r1, [r0, #28]
 c001610:	4628      	mov	r0, r5
 c001612:	2902      	cmp	r1, #2
 c001614:	4641      	mov	r1, r8
 c001616:	bf08      	it	eq
 c001618:	f04f 0903 	moveq.w	r9, #3
 c00161c:	f000 fec2 	bl	c0023a4 <cmox_ECC_SetPointAtInfinity>
 c001620:	4641      	mov	r1, r8
 c001622:	4628      	mov	r0, r5
 c001624:	f000 ff7c 	bl	c002520 <cmox_ECC_PointToModularDomain>
 c001628:	69a8      	ldr	r0, [r5, #24]
 c00162a:	6800      	ldr	r0, [r0, #0]
 c00162c:	9408      	str	r4, [sp, #32]
 c00162e:	69c1      	ldr	r1, [r0, #28]
 c001630:	2901      	cmp	r1, #1
 c001632:	d010      	beq.n	c001656 <cmox_ScalarMul_wMOF+0xa6>
 c001634:	6881      	ldr	r1, [r0, #8]
 c001636:	4630      	mov	r0, r6
 c001638:	f000 fbd6 	bl	c001de8 <cmox_bn_cmp>
 c00163c:	2800      	cmp	r0, #0
 c00163e:	d507      	bpl.n	c001650 <cmox_ScalarMul_wMOF+0xa0>
 c001640:	69a8      	ldr	r0, [r5, #24]
 c001642:	6801      	ldr	r1, [r0, #0]
 c001644:	9808      	ldr	r0, [sp, #32]
 c001646:	6889      	ldr	r1, [r1, #8]
 c001648:	f000 fbce 	bl	c001de8 <cmox_bn_cmp>
 c00164c:	2800      	cmp	r0, #0
 c00164e:	d402      	bmi.n	c001656 <cmox_ScalarMul_wMOF+0xa6>
 c001650:	2001      	movs	r0, #1
 c001652:	9005      	str	r0, [sp, #20]
 c001654:	e2e3      	b.n	c001c1e <cmox_ScalarMul_wMOF+0x66e>
 c001656:	69a8      	ldr	r0, [r5, #24]
 c001658:	6841      	ldr	r1, [r0, #4]
 c00165a:	69e8      	ldr	r0, [r5, #28]
 c00165c:	698a      	ldr	r2, [r1, #24]
 c00165e:	f105 0114 	add.w	r1, r5, #20
 c001662:	0092      	lsls	r2, r2, #2
 c001664:	f002 fc36 	bl	c003ed4 <cmox_membuf_alloc>
 c001668:	9005      	str	r0, [sp, #20]
 c00166a:	2800      	cmp	r0, #0
 c00166c:	d1f2      	bne.n	c001654 <cmox_ScalarMul_wMOF+0xa4>
 c00166e:	2400      	movs	r4, #0
 c001670:	e00c      	b.n	c00168c <cmox_ScalarMul_wMOF+0xdc>
 c001672:	6809      	ldr	r1, [r1, #0]
 c001674:	680a      	ldr	r2, [r1, #0]
 c001676:	6969      	ldr	r1, [r5, #20]
 c001678:	6812      	ldr	r2, [r2, #0]
 c00167a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 c00167e:	f000 fb30 	bl	c001ce2 <cmox_bn_alloc>
 c001682:	9005      	str	r0, [sp, #20]
 c001684:	2800      	cmp	r0, #0
 c001686:	f040 82bf 	bne.w	c001c08 <cmox_ScalarMul_wMOF+0x658>
 c00168a:	1c64      	adds	r4, r4, #1
 c00168c:	69a9      	ldr	r1, [r5, #24]
 c00168e:	69e8      	ldr	r0, [r5, #28]
 c001690:	684a      	ldr	r2, [r1, #4]
 c001692:	6993      	ldr	r3, [r2, #24]
 c001694:	429c      	cmp	r4, r3
 c001696:	d3ec      	bcc.n	c001672 <cmox_ScalarMul_wMOF+0xc2>
 c001698:	9b04      	ldr	r3, [sp, #16]
 c00169a:	2201      	movs	r2, #1
 c00169c:	46a3      	mov	fp, r4
 c00169e:	1e99      	subs	r1, r3, #2
 c0016a0:	408a      	lsls	r2, r1
 c0016a2:	0092      	lsls	r2, r2, #2
 c0016a4:	9215      	str	r2, [sp, #84]	@ 0x54
 c0016a6:	a902      	add	r1, sp, #8
 c0016a8:	f002 fc14 	bl	c003ed4 <cmox_membuf_alloc>
 c0016ac:	9005      	str	r0, [sp, #20]
 c0016ae:	2800      	cmp	r0, #0
 c0016b0:	f040 82a1 	bne.w	c001bf6 <cmox_ScalarMul_wMOF+0x646>
 c0016b4:	9904      	ldr	r1, [sp, #16]
 c0016b6:	2001      	movs	r0, #1
 c0016b8:	2400      	movs	r4, #0
 c0016ba:	1e89      	subs	r1, r1, #2
 c0016bc:	fa00 fa01 	lsl.w	sl, r0, r1
 c0016c0:	e010      	b.n	c0016e4 <cmox_ScalarMul_wMOF+0x134>
 c0016c2:	9802      	ldr	r0, [sp, #8]
 c0016c4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 c0016c8:	4628      	mov	r0, r5
 c0016ca:	f000 fd85 	bl	c0021d8 <cmox_ECC_AllocPoint>
 c0016ce:	9005      	str	r0, [sp, #20]
 c0016d0:	2800      	cmp	r0, #0
 c0016d2:	f040 8289 	bne.w	c001be8 <cmox_ScalarMul_wMOF+0x638>
 c0016d6:	9802      	ldr	r0, [sp, #8]
 c0016d8:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 c0016dc:	4628      	mov	r0, r5
 c0016de:	1c64      	adds	r4, r4, #1
 c0016e0:	f000 fe60 	bl	c0023a4 <cmox_ECC_SetPointAtInfinity>
 c0016e4:	4554      	cmp	r4, sl
 c0016e6:	d3ec      	bcc.n	c0016c2 <cmox_ScalarMul_wMOF+0x112>
 c0016e8:	9503      	str	r5, [sp, #12]
 c0016ea:	9418      	str	r4, [sp, #96]	@ 0x60
 c0016ec:	463c      	mov	r4, r7
 c0016ee:	7c20      	ldrb	r0, [r4, #16]
 c0016f0:	2100      	movs	r1, #0
 c0016f2:	f000 0004 	and.w	r0, r0, #4
 c0016f6:	f7ff fa45 	bl	c000b84 <cmox_mathUtils_neq>
 c0016fa:	b920      	cbnz	r0, c001706 <cmox_ScalarMul_wMOF+0x156>
 c0016fc:	9017      	str	r0, [sp, #92]	@ 0x5c
 c0016fe:	9803      	ldr	r0, [sp, #12]
 c001700:	4621      	mov	r1, r4
 c001702:	f000 ff0d 	bl	c002520 <cmox_ECC_PointToModularDomain>
 c001706:	9803      	ldr	r0, [sp, #12]
 c001708:	4621      	mov	r1, r4
 c00170a:	f000 ff61 	bl	c0025d0 <cmox_ECC_PointValidation>
 c00170e:	9005      	str	r0, [sp, #20]
 c001710:	2800      	cmp	r0, #0
 c001712:	f040 825e 	bne.w	c001bd2 <cmox_ScalarMul_wMOF+0x622>
 c001716:	9803      	ldr	r0, [sp, #12]
 c001718:	9f02      	ldr	r7, [sp, #8]
 c00171a:	2301      	movs	r3, #1
 c00171c:	6985      	ldr	r5, [r0, #24]
 c00171e:	683a      	ldr	r2, [r7, #0]
 c001720:	4621      	mov	r1, r4
 c001722:	686d      	ldr	r5, [r5, #4]
 c001724:	68ef      	ldr	r7, [r5, #12]
 c001726:	47b8      	blx	r7
 c001728:	9902      	ldr	r1, [sp, #8]
 c00172a:	2000      	movs	r0, #0
 c00172c:	9000      	str	r0, [sp, #0]
 c00172e:	9803      	ldr	r0, [sp, #12]
 c001730:	684b      	ldr	r3, [r1, #4]
 c001732:	6809      	ldr	r1, [r1, #0]
 c001734:	6985      	ldr	r5, [r0, #24]
 c001736:	4622      	mov	r2, r4
 c001738:	686d      	ldr	r5, [r5, #4]
 c00173a:	692f      	ldr	r7, [r5, #16]
 c00173c:	2502      	movs	r5, #2
 c00173e:	47b8      	blx	r7
 c001740:	9f03      	ldr	r7, [sp, #12]
 c001742:	e010      	b.n	c001766 <cmox_ScalarMul_wMOF+0x1b6>
 c001744:	f8d7 c018 	ldr.w	ip, [r7, #24]
 c001748:	9802      	ldr	r0, [sp, #8]
 c00174a:	f8dc e004 	ldr.w	lr, [ip, #4]
 c00174e:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 c001752:	6802      	ldr	r2, [r0, #0]
 c001754:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 c001758:	f8de c014 	ldr.w	ip, [lr, #20]
 c00175c:	f850 1c04 	ldr.w	r1, [r0, #-4]
 c001760:	4638      	mov	r0, r7
 c001762:	1c6d      	adds	r5, r5, #1
 c001764:	47e0      	blx	ip
 c001766:	2001      	movs	r0, #1
 c001768:	900e      	str	r0, [sp, #56]	@ 0x38
 c00176a:	4555      	cmp	r5, sl
 c00176c:	d3ea      	bcc.n	c001744 <cmox_ScalarMul_wMOF+0x194>
 c00176e:	9808      	ldr	r0, [sp, #32]
 c001770:	f000 fb91 	bl	c001e96 <cmox_bn_countBits>
 c001774:	4605      	mov	r5, r0
 c001776:	4630      	mov	r0, r6
 c001778:	f000 fb8d 	bl	c001e96 <cmox_bn_countBits>
 c00177c:	4285      	cmp	r5, r0
 c00177e:	bf2c      	ite	cs
 c001780:	9808      	ldrcs	r0, [sp, #32]
 c001782:	4630      	movcc	r0, r6
 c001784:	f000 fb87 	bl	c001e96 <cmox_bn_countBits>
 c001788:	960d      	str	r6, [sp, #52]	@ 0x34
 c00178a:	940f      	str	r4, [sp, #60]	@ 0x3c
 c00178c:	9d01      	ldr	r5, [sp, #4]
 c00178e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
 c001792:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 c001794:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 c001796:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 c00179a:	4681      	mov	r9, r0
 c00179c:	e075      	b.n	c00188a <cmox_ScalarMul_wMOF+0x2da>
 c00179e:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
 c0017a2:	9a03      	ldr	r2, [sp, #12]
 c0017a4:	9806      	ldr	r0, [sp, #24]
 c0017a6:	9101      	str	r1, [sp, #4]
 c0017a8:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 c0017aa:	1a10      	subs	r0, r2, r0
 c0017ac:	f1a0 0e01 	sub.w	lr, r0, #1
 c0017b0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 c0017b4:	1e40      	subs	r0, r0, #1
 c0017b6:	0080      	lsls	r0, r0, #2
 c0017b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 c0017ba:	f000 001c 	and.w	r0, r0, #28
 c0017be:	2106      	movs	r1, #6
 c0017c0:	9100      	str	r1, [sp, #0]
 c0017c2:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
 c0017c6:	1d13      	adds	r3, r2, #4
 c0017c8:	1d11      	adds	r1, r2, #4
 c0017ca:	fa2c f000 	lsr.w	r0, ip, r0
 c0017ce:	f000 000f 	and.w	r0, r0, #15
 c0017d2:	4346      	muls	r6, r0
 c0017d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 c0017d6:	2001      	movs	r0, #1
 c0017d8:	1c76      	adds	r6, r6, #1
 c0017da:	4372      	muls	r2, r6
 c0017dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 c0017e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 c0017e2:	f000 fe20 	bl	c002426 <cmox_ECC_CondImportPoint>
 c0017e6:	9802      	ldr	r0, [sp, #8]
 c0017e8:	4639      	mov	r1, r7
 c0017ea:	6802      	ldr	r2, [r0, #0]
 c0017ec:	2001      	movs	r0, #1
 c0017ee:	f000 fdb2 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c0017f2:	e03a      	b.n	c00186a <cmox_ScalarMul_wMOF+0x2ba>
 c0017f4:	9903      	ldr	r1, [sp, #12]
 c0017f6:	1a08      	subs	r0, r1, r0
 c0017f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 c0017fa:	1e42      	subs	r2, r0, #1
 c0017fc:	08d2      	lsrs	r2, r2, #3
 c0017fe:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 c001802:	1e40      	subs	r0, r0, #1
 c001804:	0080      	lsls	r0, r0, #2
 c001806:	f000 001c 	and.w	r0, r0, #28
 c00180a:	40c5      	lsrs	r5, r0
 c00180c:	f89d 6002 	ldrb.w	r6, [sp, #2]
 c001810:	f005 050f 	and.w	r5, r5, #15
 c001814:	1b76      	subs	r6, r6, r5
 c001816:	b276      	sxtb	r6, r6
 c001818:	bbae      	cbnz	r6, c001886 <cmox_ScalarMul_wMOF+0x2d6>
 c00181a:	9802      	ldr	r0, [sp, #8]
 c00181c:	9a06      	ldr	r2, [sp, #24]
 c00181e:	6801      	ldr	r1, [r0, #0]
 c001820:	9801      	ldr	r0, [sp, #4]
 c001822:	4282      	cmp	r2, r0
 c001824:	dabb      	bge.n	c00179e <cmox_ScalarMul_wMOF+0x1ee>
 c001826:	f8dd c018 	ldr.w	ip, [sp, #24]
 c00182a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 c00182c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 c00182e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 c001832:	9101      	str	r1, [sp, #4]
 c001834:	2106      	movs	r1, #6
 c001836:	9100      	str	r1, [sp, #0]
 c001838:	f856 602c 	ldr.w	r6, [r6, ip, lsl #2]
 c00183c:	f8dd c018 	ldr.w	ip, [sp, #24]
 c001840:	990a      	ldr	r1, [sp, #40]	@ 0x28
 c001842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 c001844:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 c001848:	f00e 0e1c 	and.w	lr, lr, #28
 c00184c:	fa26 f60e 	lsr.w	r6, r6, lr
 c001850:	f006 060f 	and.w	r6, r6, #15
 c001854:	4372      	muls	r2, r6
 c001856:	1d03      	adds	r3, r0, #4
 c001858:	1d00      	adds	r0, r0, #4
 c00185a:	1c52      	adds	r2, r2, #1
 c00185c:	4351      	muls	r1, r2
 c00185e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 c001862:	990a      	ldr	r1, [sp, #40]	@ 0x28
 c001864:	2001      	movs	r0, #1
 c001866:	f000 fdde 	bl	c002426 <cmox_ECC_CondImportPoint>
 c00186a:	9902      	ldr	r1, [sp, #8]
 c00186c:	2000      	movs	r0, #0
 c00186e:	9000      	str	r0, [sp, #0]
 c001870:	69be      	ldr	r6, [r7, #24]
 c001872:	680a      	ldr	r2, [r1, #0]
 c001874:	4643      	mov	r3, r8
 c001876:	f8d6 c004 	ldr.w	ip, [r6, #4]
 c00187a:	4641      	mov	r1, r8
 c00187c:	4638      	mov	r0, r7
 c00187e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 c001882:	47b0      	blx	r6
 c001884:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 c001886:	f1a9 0901 	sub.w	r9, r9, #1
 c00188a:	f1b9 0f00 	cmp.w	r9, #0
 c00188e:	bfd8      	it	le
 c001890:	2c00      	cmple	r4, #0
 c001892:	dc06      	bgt.n	c0018a2 <cmox_ScalarMul_wMOF+0x2f2>
 c001894:	f1ba 0f00 	cmp.w	sl, #0
 c001898:	bfdc      	itt	le
 c00189a:	2e00      	cmple	r6, #0
 c00189c:	2d00      	cmple	r5, #0
 c00189e:	f340 813c 	ble.w	c001b1a <cmox_ScalarMul_wMOF+0x56a>
 c0018a2:	f1b9 0f00 	cmp.w	r9, #0
 c0018a6:	d40a      	bmi.n	c0018be <cmox_ScalarMul_wMOF+0x30e>
 c0018a8:	f8d7 c018 	ldr.w	ip, [r7, #24]
 c0018ac:	2301      	movs	r3, #1
 c0018ae:	4642      	mov	r2, r8
 c0018b0:	f8dc e004 	ldr.w	lr, [ip, #4]
 c0018b4:	4641      	mov	r1, r8
 c0018b6:	4638      	mov	r0, r7
 c0018b8:	f8de c00c 	ldr.w	ip, [lr, #12]
 c0018bc:	47e0      	blx	ip
 c0018be:	2c00      	cmp	r4, #0
 c0018c0:	dd02      	ble.n	c0018c8 <cmox_ScalarMul_wMOF+0x318>
 c0018c2:	1e64      	subs	r4, r4, #1
 c0018c4:	b264      	sxtb	r4, r4
 c0018c6:	e006      	b.n	c0018d6 <cmox_ScalarMul_wMOF+0x326>
 c0018c8:	f1ba 0f00 	cmp.w	sl, #0
 c0018cc:	bfc4      	itt	gt
 c0018ce:	f1aa 0001 	subgt.w	r0, sl, #1
 c0018d2:	fa4f fa80 	sxtbgt.w	sl, r0
 c0018d6:	2e00      	cmp	r6, #0
 c0018d8:	dd02      	ble.n	c0018e0 <cmox_ScalarMul_wMOF+0x330>
 c0018da:	1e76      	subs	r6, r6, #1
 c0018dc:	b276      	sxtb	r6, r6
 c0018de:	e003      	b.n	c0018e8 <cmox_ScalarMul_wMOF+0x338>
 c0018e0:	2d00      	cmp	r5, #0
 c0018e2:	bfc4      	itt	gt
 c0018e4:	1e6d      	subgt	r5, r5, #1
 c0018e6:	b26d      	sxtbgt	r5, r5
 c0018e8:	9904      	ldr	r1, [sp, #16]
 c0018ea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 c0018ec:	1c49      	adds	r1, r1, #1
 c0018ee:	4088      	lsls	r0, r1
 c0018f0:	1e40      	subs	r0, r0, #1
 c0018f2:	f88d 0003 	strb.w	r0, [sp, #3]
 c0018f6:	9804      	ldr	r0, [sp, #16]
 c0018f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 c0018fa:	1e42      	subs	r2, r0, #1
 c0018fc:	9804      	ldr	r0, [sp, #16]
 c0018fe:	4091      	lsls	r1, r2
 c001900:	9101      	str	r1, [sp, #4]
 c001902:	1e41      	subs	r1, r0, #1
 c001904:	f88d 1002 	strb.w	r1, [sp, #2]
 c001908:	980e      	ldr	r0, [sp, #56]	@ 0x38
 c00190a:	9904      	ldr	r1, [sp, #16]
 c00190c:	9a04      	ldr	r2, [sp, #16]
 c00190e:	4088      	lsls	r0, r1
 c001910:	9904      	ldr	r1, [sp, #16]
 c001912:	9003      	str	r0, [sp, #12]
 c001914:	eba2 0209 	sub.w	r2, r2, r9
 c001918:	eba9 0101 	sub.w	r1, r9, r1
 c00191c:	9114      	str	r1, [sp, #80]	@ 0x50
 c00191e:	9904      	ldr	r1, [sp, #16]
 c001920:	f88d 2001 	strb.w	r2, [sp, #1]
 c001924:	9804      	ldr	r0, [sp, #16]
 c001926:	eba9 0101 	sub.w	r1, r9, r1
 c00192a:	f1c9 0201 	rsb	r2, r9, #1
 c00192e:	9112      	str	r1, [sp, #72]	@ 0x48
 c001930:	f88d 2000 	strb.w	r2, [sp]
 c001934:	1c40      	adds	r0, r0, #1
 c001936:	2c00      	cmp	r4, #0
 c001938:	f1a9 0101 	sub.w	r1, r9, #1
 c00193c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c001940:	9013      	str	r0, [sp, #76]	@ 0x4c
 c001942:	bfc8      	it	gt
 c001944:	f1ba 0f00 	cmpgt.w	sl, #0
 c001948:	9111      	str	r1, [sp, #68]	@ 0x44
 c00194a:	9210      	str	r2, [sp, #64]	@ 0x40
 c00194c:	dc56      	bgt.n	c0019fc <cmox_ScalarMul_wMOF+0x44c>
 c00194e:	f1b9 0f00 	cmp.w	r9, #0
 c001952:	dd06      	ble.n	c001962 <cmox_ScalarMul_wMOF+0x3b2>
 c001954:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 c001956:	980d      	ldr	r0, [sp, #52]	@ 0x34
 c001958:	2102      	movs	r1, #2
 c00195a:	f000 fab5 	bl	c001ec8 <cmox_bn_getBits>
 c00195e:	b2c0      	uxtb	r0, r0
 c001960:	e007      	b.n	c001972 <cmox_ScalarMul_wMOF+0x3c2>
 c001962:	980d      	ldr	r0, [sp, #52]	@ 0x34
 c001964:	6841      	ldr	r1, [r0, #4]
 c001966:	f89d 0000 	ldrb.w	r0, [sp]
 c00196a:	fa01 f000 	lsl.w	r0, r1, r0
 c00196e:	f000 0003 	and.w	r0, r0, #3
 c001972:	2c00      	cmp	r4, #0
 c001974:	d541      	bpl.n	c0019fa <cmox_ScalarMul_wMOF+0x44a>
 c001976:	f1ba 0f00 	cmp.w	sl, #0
 c00197a:	dc3f      	bgt.n	c0019fc <cmox_ScalarMul_wMOF+0x44c>
 c00197c:	f000 0101 	and.w	r1, r0, #1
 c001980:	ea91 0f60 	teq	r1, r0, asr #1
 c001984:	f000 8082 	beq.w	c001a8c <cmox_ScalarMul_wMOF+0x4dc>
 c001988:	9814      	ldr	r0, [sp, #80]	@ 0x50
 c00198a:	2800      	cmp	r0, #0
 c00198c:	d405      	bmi.n	c00199a <cmox_ScalarMul_wMOF+0x3ea>
 c00198e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 c001990:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 c001992:	980d      	ldr	r0, [sp, #52]	@ 0x34
 c001994:	f000 fa98 	bl	c001ec8 <cmox_bn_getBits>
 c001998:	e008      	b.n	c0019ac <cmox_ScalarMul_wMOF+0x3fc>
 c00199a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 c00199c:	6841      	ldr	r1, [r0, #4]
 c00199e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 c0019a2:	fa01 f000 	lsl.w	r0, r1, r0
 c0019a6:	f89d 1003 	ldrb.w	r1, [sp, #3]
 c0019aa:	4008      	ands	r0, r1
 c0019ac:	9a01      	ldr	r2, [sp, #4]
 c0019ae:	9901      	ldr	r1, [sp, #4]
 c0019b0:	1a80      	subs	r0, r0, r2
 c0019b2:	b2c0      	uxtb	r0, r0
 c0019b4:	9007      	str	r0, [sp, #28]
 c0019b6:	4288      	cmp	r0, r1
 c0019b8:	da0b      	bge.n	c0019d2 <cmox_ScalarMul_wMOF+0x422>
 c0019ba:	9907      	ldr	r1, [sp, #28]
 c0019bc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 c0019be:	08c9      	lsrs	r1, r1, #3
 c0019c0:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 c0019c4:	9807      	ldr	r0, [sp, #28]
 c0019c6:	0081      	lsls	r1, r0, #2
 c0019c8:	f001 011c 	and.w	r1, r1, #28
 c0019cc:	fa22 f001 	lsr.w	r0, r2, r1
 c0019d0:	e00c      	b.n	c0019ec <cmox_ScalarMul_wMOF+0x43c>
 c0019d2:	9903      	ldr	r1, [sp, #12]
 c0019d4:	1a08      	subs	r0, r1, r0
 c0019d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 c0019d8:	1e42      	subs	r2, r0, #1
 c0019da:	08d2      	lsrs	r2, r2, #3
 c0019dc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 c0019e0:	1e40      	subs	r0, r0, #1
 c0019e2:	0080      	lsls	r0, r0, #2
 c0019e4:	f000 001c 	and.w	r0, r0, #28
 c0019e8:	fa21 f000 	lsr.w	r0, r1, r0
 c0019ec:	f89d 4002 	ldrb.w	r4, [sp, #2]
 c0019f0:	f000 0a0f 	and.w	sl, r0, #15
 c0019f4:	eba4 040a 	sub.w	r4, r4, sl
 c0019f8:	b264      	sxtb	r4, r4
 c0019fa:	2c00      	cmp	r4, #0
 c0019fc:	d146      	bne.n	c001a8c <cmox_ScalarMul_wMOF+0x4dc>
 c0019fe:	9807      	ldr	r0, [sp, #28]
 c001a00:	9901      	ldr	r1, [sp, #4]
 c001a02:	4288      	cmp	r0, r1
 c001a04:	da18      	bge.n	c001a38 <cmox_ScalarMul_wMOF+0x488>
 c001a06:	9907      	ldr	r1, [sp, #28]
 c001a08:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c001a0a:	4643      	mov	r3, r8
 c001a0c:	08c9      	lsrs	r1, r1, #3
 c001a0e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 c001a12:	9907      	ldr	r1, [sp, #28]
 c001a14:	008a      	lsls	r2, r1, #2
 c001a16:	69b9      	ldr	r1, [r7, #24]
 c001a18:	f002 021c 	and.w	r2, r2, #28
 c001a1c:	40d0      	lsrs	r0, r2
 c001a1e:	684a      	ldr	r2, [r1, #4]
 c001a20:	f010 000f 	ands.w	r0, r0, #15
 c001a24:	6954      	ldr	r4, [r2, #20]
 c001a26:	d101      	bne.n	c001a2c <cmox_ScalarMul_wMOF+0x47c>
 c001a28:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 c001a2a:	e002      	b.n	c001a32 <cmox_ScalarMul_wMOF+0x482>
 c001a2c:	9902      	ldr	r1, [sp, #8]
 c001a2e:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 c001a32:	4641      	mov	r1, r8
 c001a34:	4638      	mov	r0, r7
 c001a36:	e027      	b.n	c001a88 <cmox_ScalarMul_wMOF+0x4d8>
 c001a38:	9803      	ldr	r0, [sp, #12]
 c001a3a:	9907      	ldr	r1, [sp, #28]
 c001a3c:	1a41      	subs	r1, r0, r1
 c001a3e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c001a40:	1e4a      	subs	r2, r1, #1
 c001a42:	08d2      	lsrs	r2, r2, #3
 c001a44:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 c001a48:	1e49      	subs	r1, r1, #1
 c001a4a:	0089      	lsls	r1, r1, #2
 c001a4c:	f001 011c 	and.w	r1, r1, #28
 c001a50:	40c8      	lsrs	r0, r1
 c001a52:	9902      	ldr	r1, [sp, #8]
 c001a54:	f010 000f 	ands.w	r0, r0, #15
 c001a58:	680a      	ldr	r2, [r1, #0]
 c001a5a:	bf0c      	ite	eq
 c001a5c:	990f      	ldreq	r1, [sp, #60]	@ 0x3c
 c001a5e:	f851 1020 	ldrne.w	r1, [r1, r0, lsl #2]
 c001a62:	2001      	movs	r0, #1
 c001a64:	f000 fc44 	bl	c0022f0 <cmox_ECC_CondCopyPoint>
 c001a68:	9802      	ldr	r0, [sp, #8]
 c001a6a:	4639      	mov	r1, r7
 c001a6c:	6802      	ldr	r2, [r0, #0]
 c001a6e:	2001      	movs	r0, #1
 c001a70:	f000 fc71 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c001a74:	69bc      	ldr	r4, [r7, #24]
 c001a76:	9802      	ldr	r0, [sp, #8]
 c001a78:	4643      	mov	r3, r8
 c001a7a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 c001a7e:	6802      	ldr	r2, [r0, #0]
 c001a80:	4641      	mov	r1, r8
 c001a82:	4638      	mov	r0, r7
 c001a84:	f8dc 4014 	ldr.w	r4, [ip, #20]
 c001a88:	47a0      	blx	r4
 c001a8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 c001a8c:	2e00      	cmp	r6, #0
 c001a8e:	bfc8      	it	gt
 c001a90:	2d00      	cmpgt	r5, #0
 c001a92:	dc15      	bgt.n	c001ac0 <cmox_ScalarMul_wMOF+0x510>
 c001a94:	f1b9 0f00 	cmp.w	r9, #0
 c001a98:	dd06      	ble.n	c001aa8 <cmox_ScalarMul_wMOF+0x4f8>
 c001a9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 c001a9c:	9808      	ldr	r0, [sp, #32]
 c001a9e:	2102      	movs	r1, #2
 c001aa0:	f000 fa12 	bl	c001ec8 <cmox_bn_getBits>
 c001aa4:	b2c0      	uxtb	r0, r0
 c001aa6:	e007      	b.n	c001ab8 <cmox_ScalarMul_wMOF+0x508>
 c001aa8:	9808      	ldr	r0, [sp, #32]
 c001aaa:	6841      	ldr	r1, [r0, #4]
 c001aac:	f89d 0000 	ldrb.w	r0, [sp]
 c001ab0:	fa01 f000 	lsl.w	r0, r1, r0
 c001ab4:	f000 0003 	and.w	r0, r0, #3
 c001ab8:	2e00      	cmp	r6, #0
 c001aba:	f57f aead 	bpl.w	c001818 <cmox_ScalarMul_wMOF+0x268>
 c001abe:	2d00      	cmp	r5, #0
 c001ac0:	f73f aee1 	bgt.w	c001886 <cmox_ScalarMul_wMOF+0x2d6>
 c001ac4:	f000 0101 	and.w	r1, r0, #1
 c001ac8:	ea91 0f60 	teq	r1, r0, asr #1
 c001acc:	f43f aedb 	beq.w	c001886 <cmox_ScalarMul_wMOF+0x2d6>
 c001ad0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 c001ad2:	2800      	cmp	r0, #0
 c001ad4:	d405      	bmi.n	c001ae2 <cmox_ScalarMul_wMOF+0x532>
 c001ad6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 c001ad8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 c001ada:	9808      	ldr	r0, [sp, #32]
 c001adc:	f000 f9f4 	bl	c001ec8 <cmox_bn_getBits>
 c001ae0:	e008      	b.n	c001af4 <cmox_ScalarMul_wMOF+0x544>
 c001ae2:	9808      	ldr	r0, [sp, #32]
 c001ae4:	6841      	ldr	r1, [r0, #4]
 c001ae6:	f89d 0001 	ldrb.w	r0, [sp, #1]
 c001aea:	fa01 f000 	lsl.w	r0, r1, r0
 c001aee:	f89d 1003 	ldrb.w	r1, [sp, #3]
 c001af2:	4008      	ands	r0, r1
 c001af4:	9a01      	ldr	r2, [sp, #4]
 c001af6:	9901      	ldr	r1, [sp, #4]
 c001af8:	1a80      	subs	r0, r0, r2
 c001afa:	b2c0      	uxtb	r0, r0
 c001afc:	9006      	str	r0, [sp, #24]
 c001afe:	4288      	cmp	r0, r1
 c001b00:	f6bf ae78 	bge.w	c0017f4 <cmox_ScalarMul_wMOF+0x244>
 c001b04:	9906      	ldr	r1, [sp, #24]
 c001b06:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 c001b08:	08c9      	lsrs	r1, r1, #3
 c001b0a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 c001b0e:	9806      	ldr	r0, [sp, #24]
 c001b10:	0081      	lsls	r1, r0, #2
 c001b12:	f001 011c 	and.w	r1, r1, #28
 c001b16:	40cd      	lsrs	r5, r1
 c001b18:	e678      	b.n	c00180c <cmox_ScalarMul_wMOF+0x25c>
 c001b1a:	9703      	str	r7, [sp, #12]
 c001b1c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 c001b1e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 c001b20:	9f08      	ldr	r7, [sp, #32]
 c001b22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 c001b26:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 c001b28:	f1b9 0f00 	cmp.w	r9, #0
 c001b2c:	d146      	bne.n	c001bbc <cmox_ScalarMul_wMOF+0x60c>
 c001b2e:	9803      	ldr	r0, [sp, #12]
 c001b30:	2301      	movs	r3, #1
 c001b32:	4642      	mov	r2, r8
 c001b34:	f8d0 e018 	ldr.w	lr, [r0, #24]
 c001b38:	4641      	mov	r1, r8
 c001b3a:	f8de 9004 	ldr.w	r9, [lr, #4]
 c001b3e:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 c001b42:	47e0      	blx	ip
 c001b44:	7920      	ldrb	r0, [r4, #4]
 c001b46:	07c1      	lsls	r1, r0, #31
 c001b48:	d517      	bpl.n	c001b7a <cmox_ScalarMul_wMOF+0x5ca>
 c001b4a:	9802      	ldr	r0, [sp, #8]
 c001b4c:	4631      	mov	r1, r6
 c001b4e:	6802      	ldr	r2, [r0, #0]
 c001b50:	2001      	movs	r0, #1
 c001b52:	f000 fbcd 	bl	c0022f0 <cmox_ECC_CondCopyPoint>
 c001b56:	9802      	ldr	r0, [sp, #8]
 c001b58:	9903      	ldr	r1, [sp, #12]
 c001b5a:	6802      	ldr	r2, [r0, #0]
 c001b5c:	2001      	movs	r0, #1
 c001b5e:	f000 fbfa 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c001b62:	9803      	ldr	r0, [sp, #12]
 c001b64:	9a02      	ldr	r2, [sp, #8]
 c001b66:	4643      	mov	r3, r8
 c001b68:	f8d0 c018 	ldr.w	ip, [r0, #24]
 c001b6c:	6812      	ldr	r2, [r2, #0]
 c001b6e:	4641      	mov	r1, r8
 c001b70:	f8dc 4004 	ldr.w	r4, [ip, #4]
 c001b74:	f8d4 c014 	ldr.w	ip, [r4, #20]
 c001b78:	47e0      	blx	ip
 c001b7a:	7938      	ldrb	r0, [r7, #4]
 c001b7c:	07c1      	lsls	r1, r0, #31
 c001b7e:	d51d      	bpl.n	c001bbc <cmox_ScalarMul_wMOF+0x60c>
 c001b80:	9802      	ldr	r0, [sp, #8]
 c001b82:	2206      	movs	r2, #6
 c001b84:	1d2b      	adds	r3, r5, #4
 c001b86:	6801      	ldr	r1, [r0, #0]
 c001b88:	9200      	str	r2, [sp, #0]
 c001b8a:	1d28      	adds	r0, r5, #4
 c001b8c:	9101      	str	r1, [sp, #4]
 c001b8e:	eb00 028a 	add.w	r2, r0, sl, lsl #2
 c001b92:	4651      	mov	r1, sl
 c001b94:	2001      	movs	r0, #1
 c001b96:	f000 fc46 	bl	c002426 <cmox_ECC_CondImportPoint>
 c001b9a:	9802      	ldr	r0, [sp, #8]
 c001b9c:	9903      	ldr	r1, [sp, #12]
 c001b9e:	6802      	ldr	r2, [r0, #0]
 c001ba0:	2001      	movs	r0, #1
 c001ba2:	f000 fbd8 	bl	c002356 <cmox_ECC_CondSymmetricPoint>
 c001ba6:	9902      	ldr	r1, [sp, #8]
 c001ba8:	2000      	movs	r0, #0
 c001baa:	9000      	str	r0, [sp, #0]
 c001bac:	9803      	ldr	r0, [sp, #12]
 c001bae:	680a      	ldr	r2, [r1, #0]
 c001bb0:	4643      	mov	r3, r8
 c001bb2:	6987      	ldr	r7, [r0, #24]
 c001bb4:	4641      	mov	r1, r8
 c001bb6:	687c      	ldr	r4, [r7, #4]
 c001bb8:	6927      	ldr	r7, [r4, #16]
 c001bba:	47b8      	blx	r7
 c001bbc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 c001bbe:	b940      	cbnz	r0, c001bd2 <cmox_ScalarMul_wMOF+0x622>
 c001bc0:	9803      	ldr	r0, [sp, #12]
 c001bc2:	4631      	mov	r1, r6
 c001bc4:	f000 fcd6 	bl	c002574 <cmox_ECC_PointFromModularDomain>
 c001bc8:	9005      	str	r0, [sp, #20]
 c001bca:	9803      	ldr	r0, [sp, #12]
 c001bcc:	4641      	mov	r1, r8
 c001bce:	f000 fcd1 	bl	c002574 <cmox_ECC_PointFromModularDomain>
 c001bd2:	9d03      	ldr	r5, [sp, #12]
 c001bd4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 c001bd6:	e007      	b.n	c001be8 <cmox_ScalarMul_wMOF+0x638>
 c001bd8:	9802      	ldr	r0, [sp, #8]
 c001bda:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 c001bde:	1f09      	subs	r1, r1, #4
 c001be0:	4628      	mov	r0, r5
 c001be2:	f000 fb55 	bl	c002290 <cmox_ECC_FreePoint>
 c001be6:	1e64      	subs	r4, r4, #1
 c001be8:	2c00      	cmp	r4, #0
 c001bea:	d1f5      	bne.n	c001bd8 <cmox_ScalarMul_wMOF+0x628>
 c001bec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 c001bee:	69e8      	ldr	r0, [r5, #28]
 c001bf0:	a902      	add	r1, sp, #8
 c001bf2:	f002 f98e 	bl	c003f12 <cmox_membuf_free>
 c001bf6:	465c      	mov	r4, fp
 c001bf8:	e006      	b.n	c001c08 <cmox_ScalarMul_wMOF+0x658>
 c001bfa:	6969      	ldr	r1, [r5, #20]
 c001bfc:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 c001c00:	1f11      	subs	r1, r2, #4
 c001c02:	f000 f879 	bl	c001cf8 <cmox_bn_free>
 c001c06:	1e64      	subs	r4, r4, #1
 c001c08:	69e8      	ldr	r0, [r5, #28]
 c001c0a:	2c00      	cmp	r4, #0
 c001c0c:	d1f5      	bne.n	c001bfa <cmox_ScalarMul_wMOF+0x64a>
 c001c0e:	69a9      	ldr	r1, [r5, #24]
 c001c10:	684a      	ldr	r2, [r1, #4]
 c001c12:	f105 0114 	add.w	r1, r5, #20
 c001c16:	6992      	ldr	r2, [r2, #24]
 c001c18:	0092      	lsls	r2, r2, #2
 c001c1a:	f002 f97a 	bl	c003f12 <cmox_membuf_free>
 c001c1e:	9805      	ldr	r0, [sp, #20]
 c001c20:	b019      	add	sp, #100	@ 0x64
 c001c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c001c26:	bf00      	nop
 c001c28:	0c001c30 	.word	0x0c001c30
 c001c2c:	0c001c3c 	.word	0x0c001c3c

0c001c30 <cmox_ScalarMul_wMOF::T_Pi>:
 c001c30:	00000110 15522440 07733661              ....@$R.a6s.

0c001c3c <cmox_ScalarMul_wMOF::T_DblAfter>:
 c001c3c:	00002001 20011003 40011002              . ..... ...@

0c001c48 <cmox_ScalarMul_wNAFRecoding>:
 c001c48:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c001c4c:	4681      	mov	r9, r0
 c001c4e:	2000      	movs	r0, #0
 c001c50:	460f      	mov	r7, r1
 c001c52:	4692      	mov	sl, r2
 c001c54:	9000      	str	r0, [sp, #0]
 c001c56:	683a      	ldr	r2, [r7, #0]
 c001c58:	461e      	mov	r6, r3
 c001c5a:	4669      	mov	r1, sp
 c001c5c:	4648      	mov	r0, r9
 c001c5e:	2500      	movs	r5, #0
 c001c60:	f000 f83f 	bl	c001ce2 <cmox_bn_alloc>
 c001c64:	ea5f 0800 	movs.w	r8, r0
 c001c68:	d138      	bne.n	c001cdc <cmox_ScalarMul_wNAFRecoding+0x94>
 c001c6a:	9800      	ldr	r0, [sp, #0]
 c001c6c:	2100      	movs	r1, #0
 c001c6e:	2401      	movs	r4, #1
 c001c70:	f000 f86e 	bl	c001d50 <cmox_bn_init>
 c001c74:	9a00      	ldr	r2, [sp, #0]
 c001c76:	4639      	mov	r1, r7
 c001c78:	2001      	movs	r0, #1
 c001c7a:	f1aa 0701 	sub.w	r7, sl, #1
 c001c7e:	f000 f876 	bl	c001d6e <cmox_bn_cCopy>
 c001c82:	fa04 f707 	lsl.w	r7, r4, r7
 c001c86:	e01c      	b.n	c001cc2 <cmox_ScalarMul_wNAFRecoding+0x7a>
 c001c88:	2100      	movs	r1, #0
 c001c8a:	5571      	strb	r1, [r6, r5]
 c001c8c:	e013      	b.n	c001cb6 <cmox_ScalarMul_wNAFRecoding+0x6e>
 c001c8e:	9800      	ldr	r0, [sp, #0]
 c001c90:	6841      	ldr	r1, [r0, #4]
 c001c92:	07c8      	lsls	r0, r1, #31
 c001c94:	d5f8      	bpl.n	c001c88 <cmox_ScalarMul_wNAFRecoding+0x40>
 c001c96:	fa04 f00a 	lsl.w	r0, r4, sl
 c001c9a:	1e42      	subs	r2, r0, #1
 c001c9c:	4011      	ands	r1, r2
 c001c9e:	b24a      	sxtb	r2, r1
 c001ca0:	b27b      	sxtb	r3, r7
 c001ca2:	429a      	cmp	r2, r3
 c001ca4:	bfa8      	it	ge
 c001ca6:	1bc9      	subge	r1, r1, r7
 c001ca8:	5571      	strb	r1, [r6, r5]
 c001caa:	9a00      	ldr	r2, [sp, #0]
 c001cac:	b249      	sxtb	r1, r1
 c001cae:	4249      	negs	r1, r1
 c001cb0:	4610      	mov	r0, r2
 c001cb2:	f7fe fdce 	bl	c000852 <cmox_AddBN_Int>
 c001cb6:	9a00      	ldr	r2, [sp, #0]
 c001cb8:	2101      	movs	r1, #1
 c001cba:	1c6d      	adds	r5, r5, #1
 c001cbc:	4610      	mov	r0, r2
 c001cbe:	f7fe fc59 	bl	c000574 <cmox_RightShiftBN>
 c001cc2:	9800      	ldr	r0, [sp, #0]
 c001cc4:	2100      	movs	r1, #0
 c001cc6:	f000 f8d0 	bl	c001e6a <cmox_bn_cmpUint>
 c001cca:	2800      	cmp	r0, #0
 c001ccc:	d0df      	beq.n	c001c8e <cmox_ScalarMul_wNAFRecoding+0x46>
 c001cce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c001cd0:	b100      	cbz	r0, c001cd4 <cmox_ScalarMul_wNAFRecoding+0x8c>
 c001cd2:	6005      	str	r5, [r0, #0]
 c001cd4:	4669      	mov	r1, sp
 c001cd6:	4648      	mov	r0, r9
 c001cd8:	f000 f80e 	bl	c001cf8 <cmox_bn_free>
 c001cdc:	4640      	mov	r0, r8
 c001cde:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

0c001ce2 <cmox_bn_alloc>:
 c001ce2:	b538      	push	{r3, r4, r5, lr}
 c001ce4:	4615      	mov	r5, r2
 c001ce6:	00aa      	lsls	r2, r5, #2
 c001ce8:	460c      	mov	r4, r1
 c001cea:	1d12      	adds	r2, r2, #4
 c001cec:	f002 f8f2 	bl	c003ed4 <cmox_membuf_alloc>
 c001cf0:	b908      	cbnz	r0, c001cf6 <cmox_bn_alloc+0x14>
 c001cf2:	6821      	ldr	r1, [r4, #0]
 c001cf4:	600d      	str	r5, [r1, #0]
 c001cf6:	bd32      	pop	{r1, r4, r5, pc}

0c001cf8 <cmox_bn_free>:
 c001cf8:	b510      	push	{r4, lr}
 c001cfa:	460c      	mov	r4, r1
 c001cfc:	6823      	ldr	r3, [r4, #0]
 c001cfe:	681a      	ldr	r2, [r3, #0]
 c001d00:	0092      	lsls	r2, r2, #2
 c001d02:	1d12      	adds	r2, r2, #4
 c001d04:	f002 f905 	bl	c003f12 <cmox_membuf_free>
 c001d08:	2300      	movs	r3, #0
 c001d0a:	6023      	str	r3, [r4, #0]
 c001d0c:	bd10      	pop	{r4, pc}

0c001d0e <cmox_bn_import>:
 c001d0e:	4603      	mov	r3, r0
 c001d10:	2000      	movs	r0, #0
 c001d12:	2b00      	cmp	r3, #0
 c001d14:	b570      	push	{r4, r5, r6, lr}
 c001d16:	bf18      	it	ne
 c001d18:	2900      	cmpne	r1, #0
 c001d1a:	d000      	beq.n	c001d1e <cmox_bn_import+0x10>
 c001d1c:	b90a      	cbnz	r2, c001d22 <cmox_bn_import+0x14>
 c001d1e:	2001      	movs	r0, #1
 c001d20:	bd70      	pop	{r4, r5, r6, pc}
 c001d22:	681c      	ldr	r4, [r3, #0]
 c001d24:	42a2      	cmp	r2, r4
 c001d26:	bf28      	it	cs
 c001d28:	4622      	movcs	r2, r4
 c001d2a:	2401      	movs	r4, #1
 c001d2c:	e006      	b.n	c001d3c <cmox_bn_import+0x2e>
 c001d2e:	eb01 0584 	add.w	r5, r1, r4, lsl #2
 c001d32:	f855 6c04 	ldr.w	r6, [r5, #-4]
 c001d36:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 c001d3a:	1c64      	adds	r4, r4, #1
 c001d3c:	42a2      	cmp	r2, r4
 c001d3e:	d2f6      	bcs.n	c001d2e <cmox_bn_import+0x20>
 c001d40:	6819      	ldr	r1, [r3, #0]
 c001d42:	42a1      	cmp	r1, r4
 c001d44:	bf24      	itt	cs
 c001d46:	f843 0024 	strcs.w	r0, [r3, r4, lsl #2]
 c001d4a:	1c64      	addcs	r4, r4, #1
 c001d4c:	d2f8      	bcs.n	c001d40 <cmox_bn_import+0x32>
 c001d4e:	bd70      	pop	{r4, r5, r6, pc}

0c001d50 <cmox_bn_init>:
 c001d50:	4602      	mov	r2, r0
 c001d52:	2000      	movs	r0, #0
 c001d54:	b90a      	cbnz	r2, c001d5a <cmox_bn_init+0xa>
 c001d56:	2001      	movs	r0, #1
 c001d58:	4770      	bx	lr
 c001d5a:	6051      	str	r1, [r2, #4]
 c001d5c:	2102      	movs	r1, #2
 c001d5e:	e002      	b.n	c001d66 <cmox_bn_init+0x16>
 c001d60:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 c001d64:	1c49      	adds	r1, r1, #1
 c001d66:	6813      	ldr	r3, [r2, #0]
 c001d68:	428b      	cmp	r3, r1
 c001d6a:	d2f9      	bcs.n	c001d60 <cmox_bn_init+0x10>
 c001d6c:	4770      	bx	lr

0c001d6e <cmox_bn_cCopy>:
 c001d6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c001d72:	4607      	mov	r7, r0
 c001d74:	4616      	mov	r6, r2
 c001d76:	6830      	ldr	r0, [r6, #0]
 c001d78:	4688      	mov	r8, r1
 c001d7a:	2500      	movs	r5, #0
 c001d7c:	1c40      	adds	r0, r0, #1
 c001d7e:	427a      	negs	r2, r7
 c001d80:	f8d8 4000 	ldr.w	r4, [r8]
 c001d84:	e004      	b.n	c001d90 <cmox_bn_cCopy+0x22>
 c001d86:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 c001d8a:	1c40      	adds	r0, r0, #1
 c001d8c:	4011      	ands	r1, r2
 c001d8e:	430d      	orrs	r5, r1
 c001d90:	4284      	cmp	r4, r0
 c001d92:	d2f8      	bcs.n	c001d86 <cmox_bn_cCopy+0x18>
 c001d94:	6830      	ldr	r0, [r6, #0]
 c001d96:	42a0      	cmp	r0, r4
 c001d98:	bf38      	it	cc
 c001d9a:	4604      	movcc	r4, r0
 c001d9c:	ea5f 0904 	movs.w	r9, r4
 c001da0:	e00a      	b.n	c001db8 <cmox_bn_cCopy+0x4a>
 c001da2:	f856 2029 	ldr.w	r2, [r6, r9, lsl #2]
 c001da6:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 c001daa:	4638      	mov	r0, r7
 c001dac:	f7fe fee2 	bl	c000b74 <cmox_mathUtils_mux>
 c001db0:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 c001db4:	f1b9 0901 	subs.w	r9, r9, #1
 c001db8:	d1f3      	bne.n	c001da2 <cmox_bn_cCopy+0x34>
 c001dba:	1c64      	adds	r4, r4, #1
 c001dbc:	1e79      	subs	r1, r7, #1
 c001dbe:	e005      	b.n	c001dcc <cmox_bn_cCopy+0x5e>
 c001dc0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 c001dc4:	4008      	ands	r0, r1
 c001dc6:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 c001dca:	1c64      	adds	r4, r4, #1
 c001dcc:	6830      	ldr	r0, [r6, #0]
 c001dce:	42a0      	cmp	r0, r4
 c001dd0:	d2f6      	bcs.n	c001dc0 <cmox_bn_cCopy+0x52>
 c001dd2:	2d00      	cmp	r5, #0
 c001dd4:	bf14      	ite	ne
 c001dd6:	2003      	movne	r0, #3
 c001dd8:	2000      	moveq	r0, #0
 c001dda:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

0c001dde <cmox_bn_mux>:
 c001dde:	4240      	negs	r0, r0
 c001de0:	4051      	eors	r1, r2
 c001de2:	4008      	ands	r0, r1
 c001de4:	4050      	eors	r0, r2
 c001de6:	4770      	bx	lr

0c001de8 <cmox_bn_cmp>:
 c001de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c001dec:	4684      	mov	ip, r0
 c001dee:	468e      	mov	lr, r1
 c001df0:	f8de 5000 	ldr.w	r5, [lr]
 c001df4:	f8dc 1000 	ldr.w	r1, [ip]
 c001df8:	2700      	movs	r7, #0
 c001dfa:	2601      	movs	r6, #1
 c001dfc:	46ba      	mov	sl, r7
 c001dfe:	42a9      	cmp	r1, r5
 c001e00:	d30f      	bcc.n	c001e22 <cmox_bn_cmp+0x3a>
 c001e02:	4608      	mov	r0, r1
 c001e04:	4664      	mov	r4, ip
 c001e06:	2101      	movs	r1, #1
 c001e08:	4285      	cmp	r5, r0
 c001e0a:	d224      	bcs.n	c001e56 <cmox_bn_cmp+0x6e>
 c001e0c:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 c001e10:	2300      	movs	r3, #0
 c001e12:	4252      	negs	r2, r2
 c001e14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 c001e18:	f003 0301 	and.w	r3, r3, #1
 c001e1c:	431f      	orrs	r7, r3
 c001e1e:	1e40      	subs	r0, r0, #1
 c001e20:	e7f2      	b.n	c001e08 <cmox_bn_cmp+0x20>
 c001e22:	4628      	mov	r0, r5
 c001e24:	460d      	mov	r5, r1
 c001e26:	4674      	mov	r4, lr
 c001e28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c001e2c:	e7ee      	b.n	c001e0c <cmox_bn_cmp+0x24>
 c001e2e:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 c001e32:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 c001e36:	2500      	movs	r5, #0
 c001e38:	2300      	movs	r3, #0
 c001e3a:	ebb4 0802 	subs.w	r8, r4, r2
 c001e3e:	eb65 0903 	sbc.w	r9, r5, r3
 c001e42:	4062      	eors	r2, r4
 c001e44:	1e52      	subs	r2, r2, #1
 c001e46:	ea06 0509 	and.w	r5, r6, r9
 c001e4a:	f163 0300 	sbc.w	r3, r3, #0
 c001e4e:	ea45 0a0a 	orr.w	sl, r5, sl
 c001e52:	401e      	ands	r6, r3
 c001e54:	1e40      	subs	r0, r0, #1
 c001e56:	2800      	cmp	r0, #0
 c001e58:	d1e9      	bne.n	c001e2e <cmox_bn_cmp+0x46>
 c001e5a:	eb06 024a 	add.w	r2, r6, sl, lsl #1
 c001e5e:	4638      	mov	r0, r7
 c001e60:	1e52      	subs	r2, r2, #1
 c001e62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c001e66:	f7fe be85 	b.w	c000b74 <cmox_mathUtils_mux>

0c001e6a <cmox_bn_cmpUint>:
 c001e6a:	b510      	push	{r4, lr}
 c001e6c:	460a      	mov	r2, r1
 c001e6e:	2300      	movs	r3, #0
 c001e70:	6801      	ldr	r1, [r0, #0]
 c001e72:	e003      	b.n	c001e7c <cmox_bn_cmpUint+0x12>
 c001e74:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 c001e78:	1e49      	subs	r1, r1, #1
 c001e7a:	4323      	orrs	r3, r4
 c001e7c:	2902      	cmp	r1, #2
 c001e7e:	d2f9      	bcs.n	c001e74 <cmox_bn_cmpUint+0xa>
 c001e80:	6840      	ldr	r0, [r0, #4]
 c001e82:	2100      	movs	r1, #0
 c001e84:	4042      	eors	r2, r0
 c001e86:	ea42 0003 	orr.w	r0, r2, r3
 c001e8a:	f7fe fe7b 	bl	c000b84 <cmox_mathUtils_neq>
 c001e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c001e92:	f7fe be74 	b.w	c000b7e <cmox_mathUtils_not>

0c001e96 <cmox_bn_countBits>:
 c001e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001e98:	4605      	mov	r5, r0
 c001e9a:	682e      	ldr	r6, [r5, #0]
 c001e9c:	2200      	movs	r2, #0
 c001e9e:	0034      	movs	r4, r6
 c001ea0:	e00b      	b.n	c001eba <cmox_bn_countBits+0x24>
 c001ea2:	4257      	negs	r7, r2
 c001ea4:	4317      	orrs	r7, r2
 c001ea6:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 c001eaa:	43ff      	mvns	r7, r7
 c001eac:	0ff8      	lsrs	r0, r7, #31
 c001eae:	f7fe fe61 	bl	c000b74 <cmox_mathUtils_mux>
 c001eb2:	4602      	mov	r2, r0
 c001eb4:	eba6 76d7 	sub.w	r6, r6, r7, lsr #31
 c001eb8:	1e64      	subs	r4, r4, #1
 c001eba:	d1f2      	bne.n	c001ea2 <cmox_bn_countBits+0xc>
 c001ebc:	4610      	mov	r0, r2
 c001ebe:	f7fe fe6d 	bl	c000b9c <cmox_mathUtils_bitLength>
 c001ec2:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 c001ec6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0c001ec8 <cmox_bn_getBits>:
 c001ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001eca:	4606      	mov	r6, r0
 c001ecc:	6830      	ldr	r0, [r6, #0]
 c001ece:	460c      	mov	r4, r1
 c001ed0:	0957      	lsrs	r7, r2, #5
 c001ed2:	f002 051f 	and.w	r5, r2, #31
 c001ed6:	1c79      	adds	r1, r7, #1
 c001ed8:	f7fe fe59 	bl	c000b8e <cmox_mathUtils_gt>
 c001edc:	1cbb      	adds	r3, r7, #2
 c001ede:	4241      	negs	r1, r0
 c001ee0:	400b      	ands	r3, r1
 c001ee2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 c001ee6:	2200      	movs	r2, #0
 c001ee8:	f004 041f 	and.w	r4, r4, #31
 c001eec:	f7fe fe42 	bl	c000b74 <cmox_mathUtils_mux>
 c001ef0:	eb06 0187 	add.w	r1, r6, r7, lsl #2
 c001ef4:	684a      	ldr	r2, [r1, #4]
 c001ef6:	40ea      	lsrs	r2, r5
 c001ef8:	f1c5 0520 	rsb	r5, r5, #32
 c001efc:	fa00 f505 	lsl.w	r5, r0, r5
 c001f00:	2001      	movs	r0, #1
 c001f02:	fa00 f404 	lsl.w	r4, r0, r4
 c001f06:	4315      	orrs	r5, r2
 c001f08:	1e64      	subs	r4, r4, #1
 c001f0a:	ea04 0005 	and.w	r0, r4, r5
 c001f0e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0c001f10 <cmox_bn_setBits>:
 c001f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c001f14:	4680      	mov	r8, r0
 c001f16:	2001      	movs	r0, #1
 c001f18:	f001 061f 	and.w	r6, r1, #31
 c001f1c:	fa00 f606 	lsl.w	r6, r0, r6
 c001f20:	0955      	lsrs	r5, r2, #5
 c001f22:	f8d8 0000 	ldr.w	r0, [r8]
 c001f26:	1e76      	subs	r6, r6, #1
 c001f28:	1c6d      	adds	r5, r5, #1
 c001f2a:	ea06 0903 	and.w	r9, r6, r3
 c001f2e:	f002 0a1f 	and.w	sl, r2, #31
 c001f32:	f001 071f 	and.w	r7, r1, #31
 c001f36:	4629      	mov	r1, r5
 c001f38:	4457      	add	r7, sl
 c001f3a:	f7fe fe28 	bl	c000b8e <cmox_mathUtils_gt>
 c001f3e:	3f20      	subs	r7, #32
 c001f40:	4604      	mov	r4, r0
 c001f42:	43f8      	mvns	r0, r7
 c001f44:	f3c0 70c0 	ubfx	r0, r0, #31, #1
 c001f48:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 c001f4c:	4004      	ands	r4, r0
 c001f4e:	4278      	negs	r0, r7
 c001f50:	fa06 f60a 	lsl.w	r6, r6, sl
 c001f54:	ea04 74d0 	and.w	r4, r4, r0, lsr #31
 c001f58:	ea21 0606 	bic.w	r6, r1, r6
 c001f5c:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
 c001f60:	fa09 f00a 	lsl.w	r0, r9, sl
 c001f64:	4306      	orrs	r6, r0
 c001f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c001f6a:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
 c001f6e:	fa02 f107 	lsl.w	r1, r2, r7
 c001f72:	4620      	mov	r0, r4
 c001f74:	f7fe fdfe 	bl	c000b74 <cmox_mathUtils_mux>
 c001f78:	1c6d      	adds	r5, r5, #1
 c001f7a:	4261      	negs	r1, r4
 c001f7c:	400d      	ands	r5, r1
 c001f7e:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 c001f82:	f1ca 0a20 	rsb	sl, sl, #32
 c001f86:	fa29 f10a 	lsr.w	r1, r9, sl
 c001f8a:	4010      	ands	r0, r2
 c001f8c:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 c001f90:	2200      	movs	r2, #0
 c001f92:	4620      	mov	r0, r4
 c001f94:	f7fe fdee 	bl	c000b74 <cmox_mathUtils_mux>
 c001f98:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 c001f9c:	4308      	orrs	r0, r1
 c001f9e:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 c001fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0c001fa6 <cmox_bn_fromU8BE>:
 c001fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001fa8:	b10a      	cbz	r2, c001fae <cmox_bn_fromU8BE+0x8>
 c001faa:	b910      	cbnz	r0, c001fb2 <cmox_bn_fromU8BE+0xc>
 c001fac:	b109      	cbz	r1, c001fb2 <cmox_bn_fromU8BE+0xc>
 c001fae:	2001      	movs	r0, #1
 c001fb0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 c001fb2:	6813      	ldr	r3, [r2, #0]
 c001fb4:	1ccc      	adds	r4, r1, #3
 c001fb6:	ebb3 0f94 	cmp.w	r3, r4, lsr #2
 c001fba:	d201      	bcs.n	c001fc0 <cmox_bn_fromU8BE+0x1a>
 c001fbc:	2003      	movs	r0, #3
 c001fbe:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 c001fc0:	b379      	cbz	r1, c002022 <cmox_bn_fromU8BE+0x7c>
 c001fc2:	088b      	lsrs	r3, r1, #2
 c001fc4:	1c5b      	adds	r3, r3, #1
 c001fc6:	2401      	movs	r4, #1
 c001fc8:	e00f      	b.n	c001fea <cmox_bn_fromU8BE+0x44>
 c001fca:	eba1 0584 	sub.w	r5, r1, r4, lsl #2
 c001fce:	4405      	add	r5, r0
 c001fd0:	786f      	ldrb	r7, [r5, #1]
 c001fd2:	782e      	ldrb	r6, [r5, #0]
 c001fd4:	043f      	lsls	r7, r7, #16
 c001fd6:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 c001fda:	78ae      	ldrb	r6, [r5, #2]
 c001fdc:	78ed      	ldrb	r5, [r5, #3]
 c001fde:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 c001fe2:	432f      	orrs	r7, r5
 c001fe4:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
 c001fe8:	1c64      	adds	r4, r4, #1
 c001fea:	429c      	cmp	r4, r3
 c001fec:	d3ed      	bcc.n	c001fca <cmox_bn_fromU8BE+0x24>
 c001fee:	6815      	ldr	r5, [r2, #0]
 c001ff0:	42a5      	cmp	r5, r4
 c001ff2:	bf22      	ittt	cs
 c001ff4:	2600      	movcs	r6, #0
 c001ff6:	f842 6024 	strcs.w	r6, [r2, r4, lsl #2]
 c001ffa:	1c64      	addcs	r4, r4, #1
 c001ffc:	d2f7      	bcs.n	c001fee <cmox_bn_fromU8BE+0x48>
 c001ffe:	f011 0103 	ands.w	r1, r1, #3
 c002002:	d011      	beq.n	c002028 <cmox_bn_fromU8BE+0x82>
 c002004:	7804      	ldrb	r4, [r0, #0]
 c002006:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 c00200a:	2401      	movs	r4, #1
 c00200c:	428c      	cmp	r4, r1
 c00200e:	d20b      	bcs.n	c002028 <cmox_bn_fromU8BE+0x82>
 c002010:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 c002014:	5d06      	ldrb	r6, [r0, r4]
 c002016:	1c64      	adds	r4, r4, #1
 c002018:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 c00201c:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 c002020:	e7f4      	b.n	c00200c <cmox_bn_fromU8BE+0x66>
 c002022:	4610      	mov	r0, r2
 c002024:	f7ff fe94 	bl	c001d50 <cmox_bn_init>
 c002028:	2000      	movs	r0, #0
 c00202a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0c00202c <cmox_bn_toU8BE>:
 c00202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c002030:	4605      	mov	r5, r0
 c002032:	6828      	ldr	r0, [r5, #0]
 c002034:	4617      	mov	r7, r2
 c002036:	463c      	mov	r4, r7
 c002038:	0080      	lsls	r0, r0, #2
 c00203a:	1a3e      	subs	r6, r7, r0
 c00203c:	4688      	mov	r8, r1
 c00203e:	42a0      	cmp	r0, r4
 c002040:	d206      	bcs.n	c002050 <cmox_bn_toU8BE+0x24>
 c002042:	1e64      	subs	r4, r4, #1
 c002044:	4631      	mov	r1, r6
 c002046:	4640      	mov	r0, r8
 c002048:	1ba4      	subs	r4, r4, r6
 c00204a:	f00c f8a1 	bl	c00e190 <__aeabi_memclr>
 c00204e:	1c64      	adds	r4, r4, #1
 c002050:	f014 0003 	ands.w	r0, r4, #3
 c002054:	d021      	beq.n	c00209a <cmox_bn_toU8BE+0x6e>
 c002056:	08a1      	lsrs	r1, r4, #2
 c002058:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 c00205c:	6851      	ldr	r1, [r2, #4]
 c00205e:	1e42      	subs	r2, r0, #1
 c002060:	00d2      	lsls	r2, r2, #3
 c002062:	fa21 f302 	lsr.w	r3, r1, r2
 c002066:	1b3a      	subs	r2, r7, r4
 c002068:	1e64      	subs	r4, r4, #1
 c00206a:	f808 3002 	strb.w	r3, [r8, r2]
 c00206e:	1e40      	subs	r0, r0, #1
 c002070:	d1f5      	bne.n	c00205e <cmox_bn_toU8BE+0x32>
 c002072:	e012      	b.n	c00209a <cmox_bn_toU8BE+0x6e>
 c002074:	08a1      	lsrs	r1, r4, #2
 c002076:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 c00207a:	1b38      	subs	r0, r7, r4
 c00207c:	4440      	add	r0, r8
 c00207e:	0e12      	lsrs	r2, r2, #24
 c002080:	7002      	strb	r2, [r0, #0]
 c002082:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 c002086:	1f24      	subs	r4, r4, #4
 c002088:	0c1b      	lsrs	r3, r3, #16
 c00208a:	7043      	strb	r3, [r0, #1]
 c00208c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 c002090:	0a12      	lsrs	r2, r2, #8
 c002092:	7082      	strb	r2, [r0, #2]
 c002094:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 c002098:	70c1      	strb	r1, [r0, #3]
 c00209a:	2c00      	cmp	r4, #0
 c00209c:	d1ea      	bne.n	c002074 <cmox_bn_toU8BE+0x48>
 c00209e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0c0020a2 <cmox_bn_fromU8LE>:
 c0020a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0020a4:	2300      	movs	r3, #0
 c0020a6:	b10a      	cbz	r2, c0020ac <cmox_bn_fromU8LE+0xa>
 c0020a8:	b910      	cbnz	r0, c0020b0 <cmox_bn_fromU8LE+0xe>
 c0020aa:	b109      	cbz	r1, c0020b0 <cmox_bn_fromU8LE+0xe>
 c0020ac:	2001      	movs	r0, #1
 c0020ae:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 c0020b0:	6814      	ldr	r4, [r2, #0]
 c0020b2:	1ccd      	adds	r5, r1, #3
 c0020b4:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
 c0020b8:	d201      	bcs.n	c0020be <cmox_bn_fromU8LE+0x1c>
 c0020ba:	2003      	movs	r0, #3
 c0020bc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 c0020be:	b3b9      	cbz	r1, c002130 <cmox_bn_fromU8LE+0x8e>
 c0020c0:	2400      	movs	r4, #0
 c0020c2:	e010      	b.n	c0020e6 <cmox_bn_fromU8LE+0x44>
 c0020c4:	1906      	adds	r6, r0, r4
 c0020c6:	f896 c002 	ldrb.w	ip, [r6, #2]
 c0020ca:	78f7      	ldrb	r7, [r6, #3]
 c0020cc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 c0020d0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 c0020d4:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
 c0020d8:	7877      	ldrb	r7, [r6, #1]
 c0020da:	7836      	ldrb	r6, [r6, #0]
 c0020dc:	1d24      	adds	r4, r4, #4
 c0020de:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 c0020e2:	433e      	orrs	r6, r7
 c0020e4:	606e      	str	r6, [r5, #4]
 c0020e6:	08a5      	lsrs	r5, r4, #2
 c0020e8:	1ece      	subs	r6, r1, #3
 c0020ea:	42b4      	cmp	r4, r6
 c0020ec:	d3ea      	bcc.n	c0020c4 <cmox_bn_fromU8LE+0x22>
 c0020ee:	f011 0f03 	tst.w	r1, #3
 c0020f2:	d011      	beq.n	c002118 <cmox_bn_fromU8LE+0x76>
 c0020f4:	1c6d      	adds	r5, r5, #1
 c0020f6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 c0020fa:	e00b      	b.n	c002114 <cmox_bn_fromU8LE+0x72>
 c0020fc:	5d07      	ldrb	r7, [r0, r4]
 c0020fe:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 c002102:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 c002106:	fa07 f70c 	lsl.w	r7, r7, ip
 c00210a:	433e      	orrs	r6, r7
 c00210c:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
 c002110:	1c5b      	adds	r3, r3, #1
 c002112:	1c64      	adds	r4, r4, #1
 c002114:	428c      	cmp	r4, r1
 c002116:	d3f1      	bcc.n	c0020fc <cmox_bn_fromU8LE+0x5a>
 c002118:	1ce4      	adds	r4, r4, #3
 c00211a:	08a4      	lsrs	r4, r4, #2
 c00211c:	1c64      	adds	r4, r4, #1
 c00211e:	2100      	movs	r1, #0
 c002120:	6810      	ldr	r0, [r2, #0]
 c002122:	42a0      	cmp	r0, r4
 c002124:	bf24      	itt	cs
 c002126:	f842 1024 	strcs.w	r1, [r2, r4, lsl #2]
 c00212a:	1c64      	addcs	r4, r4, #1
 c00212c:	d2f8      	bcs.n	c002120 <cmox_bn_fromU8LE+0x7e>
 c00212e:	e002      	b.n	c002136 <cmox_bn_fromU8LE+0x94>
 c002130:	4610      	mov	r0, r2
 c002132:	f7ff fe0d 	bl	c001d50 <cmox_bn_init>
 c002136:	2000      	movs	r0, #0
 c002138:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0c00213a <cmox_ECC_InvertModN>:
 c00213a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 c00213c:	0004      	movs	r4, r0
 c00213e:	460d      	mov	r5, r1
 c002140:	4616      	mov	r6, r2
 c002142:	461f      	mov	r7, r3
 c002144:	bf18      	it	ne
 c002146:	2d00      	cmpne	r5, #0
 c002148:	d00d      	beq.n	c002166 <cmox_ECC_InvertModN+0x2c>
 c00214a:	2e00      	cmp	r6, #0
 c00214c:	bf18      	it	ne
 c00214e:	2f00      	cmpne	r7, #0
 c002150:	d009      	beq.n	c002166 <cmox_ECC_InvertModN+0x2c>
 c002152:	69a0      	ldr	r0, [r4, #24]
 c002154:	682a      	ldr	r2, [r5, #0]
 c002156:	6801      	ldr	r1, [r0, #0]
 c002158:	6888      	ldr	r0, [r1, #8]
 c00215a:	6801      	ldr	r1, [r0, #0]
 c00215c:	428a      	cmp	r2, r1
 c00215e:	bf24      	itt	cs
 c002160:	683b      	ldrcs	r3, [r7, #0]
 c002162:	428b      	cmpcs	r3, r1
 c002164:	d201      	bcs.n	c00216a <cmox_ECC_InvertModN+0x30>
 c002166:	2001      	movs	r0, #1
 c002168:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 c00216a:	463a      	mov	r2, r7
 c00216c:	f06f 0101 	mvn.w	r1, #1
 c002170:	f7fe fb6f 	bl	c000852 <cmox_AddBN_Int>
 c002174:	69a0      	ldr	r0, [r4, #24]
 c002176:	4622      	mov	r2, r4
 c002178:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 c00217c:	6a20      	ldr	r0, [r4, #32]
 c00217e:	9002      	str	r0, [sp, #8]
 c002180:	69e1      	ldr	r1, [r4, #28]
 c002182:	9600      	str	r6, [sp, #0]
 c002184:	4628      	mov	r0, r5
 c002186:	9101      	str	r1, [sp, #4]
 c002188:	f8dc 3004 	ldr.w	r3, [ip, #4]
 c00218c:	f8dc 4000 	ldr.w	r4, [ip]
 c002190:	4639      	mov	r1, r7
 c002192:	47a0      	blx	r4
 c002194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0c002196 <cmox_ECC_InitCurve>:
 c002196:	2800      	cmp	r0, #0
 c002198:	b510      	push	{r4, lr}
 c00219a:	bf18      	it	ne
 c00219c:	2900      	cmpne	r1, #0
 c00219e:	d101      	bne.n	c0021a4 <cmox_ECC_InitCurve+0xe>
 c0021a0:	2001      	movs	r0, #1
 c0021a2:	bd10      	pop	{r4, pc}
 c0021a4:	2400      	movs	r4, #0
 c0021a6:	6144      	str	r4, [r0, #20]
 c0021a8:	6181      	str	r1, [r0, #24]
 c0021aa:	61c2      	str	r2, [r0, #28]
 c0021ac:	6203      	str	r3, [r0, #32]
 c0021ae:	2000      	movs	r0, #0
 c0021b0:	bd10      	pop	{r4, pc}

0c0021b2 <cmox_ECC_InitCurveModDomainP>:
 c0021b2:	4602      	mov	r2, r0
 c0021b4:	6990      	ldr	r0, [r2, #24]
 c0021b6:	69d3      	ldr	r3, [r2, #28]
 c0021b8:	6800      	ldr	r0, [r0, #0]
 c0021ba:	6841      	ldr	r1, [r0, #4]
 c0021bc:	6800      	ldr	r0, [r0, #0]
 c0021be:	f7fe bc46 	b.w	c000a4e <cmox_ModularBN_InitWithR2>

0c0021c2 <cmox_ECC_InitCurveModDomainN>:
 c0021c2:	4602      	mov	r2, r0
 c0021c4:	6990      	ldr	r0, [r2, #24]
 c0021c6:	69d3      	ldr	r3, [r2, #28]
 c0021c8:	6800      	ldr	r0, [r0, #0]
 c0021ca:	68c1      	ldr	r1, [r0, #12]
 c0021cc:	6880      	ldr	r0, [r0, #8]
 c0021ce:	f7fe bc3e 	b.w	c000a4e <cmox_ModularBN_InitWithR2>

0c0021d2 <cmox_ECC_DeInitCurveModDomain>:
 c0021d2:	69c1      	ldr	r1, [r0, #28]
 c0021d4:	f7fe bcc2 	b.w	c000b5c <cmox_ModularBN_DeinitWithR2>

0c0021d8 <cmox_ECC_AllocPoint>:
 c0021d8:	b570      	push	{r4, r5, r6, lr}
 c0021da:	4605      	mov	r5, r0
 c0021dc:	69e8      	ldr	r0, [r5, #28]
 c0021de:	460e      	mov	r6, r1
 c0021e0:	2214      	movs	r2, #20
 c0021e2:	f001 fe77 	bl	c003ed4 <cmox_membuf_alloc>
 c0021e6:	0004      	movs	r4, r0
 c0021e8:	d149      	bne.n	c00227e <cmox_ECC_AllocPoint+0xa6>
 c0021ea:	6831      	ldr	r1, [r6, #0]
 c0021ec:	2000      	movs	r0, #0
 c0021ee:	6108      	str	r0, [r1, #16]
 c0021f0:	69aa      	ldr	r2, [r5, #24]
 c0021f2:	6810      	ldr	r0, [r2, #0]
 c0021f4:	6803      	ldr	r3, [r0, #0]
 c0021f6:	69e8      	ldr	r0, [r5, #28]
 c0021f8:	681a      	ldr	r2, [r3, #0]
 c0021fa:	f7ff fd72 	bl	c001ce2 <cmox_bn_alloc>
 c0021fe:	0004      	movs	r4, r0
 c002200:	d138      	bne.n	c002274 <cmox_ECC_AllocPoint+0x9c>
 c002202:	69a8      	ldr	r0, [r5, #24]
 c002204:	6801      	ldr	r1, [r0, #0]
 c002206:	6830      	ldr	r0, [r6, #0]
 c002208:	680a      	ldr	r2, [r1, #0]
 c00220a:	f100 0108 	add.w	r1, r0, #8
 c00220e:	69e8      	ldr	r0, [r5, #28]
 c002210:	6812      	ldr	r2, [r2, #0]
 c002212:	f7ff fd66 	bl	c001ce2 <cmox_bn_alloc>
 c002216:	0004      	movs	r4, r0
 c002218:	d128      	bne.n	c00226c <cmox_ECC_AllocPoint+0x94>
 c00221a:	69a8      	ldr	r0, [r5, #24]
 c00221c:	6831      	ldr	r1, [r6, #0]
 c00221e:	6842      	ldr	r2, [r0, #4]
 c002220:	69d3      	ldr	r3, [r2, #28]
 c002222:	2b03      	cmp	r3, #3
 c002224:	d030      	beq.n	c002288 <cmox_ECC_AllocPoint+0xb0>
 c002226:	6800      	ldr	r0, [r0, #0]
 c002228:	1d09      	adds	r1, r1, #4
 c00222a:	6802      	ldr	r2, [r0, #0]
 c00222c:	69e8      	ldr	r0, [r5, #28]
 c00222e:	6812      	ldr	r2, [r2, #0]
 c002230:	f7ff fd57 	bl	c001ce2 <cmox_bn_alloc>
 c002234:	0004      	movs	r4, r0
 c002236:	d113      	bne.n	c002260 <cmox_ECC_AllocPoint+0x88>
 c002238:	69a8      	ldr	r0, [r5, #24]
 c00223a:	6831      	ldr	r1, [r6, #0]
 c00223c:	6842      	ldr	r2, [r0, #4]
 c00223e:	69d3      	ldr	r3, [r2, #28]
 c002240:	2b02      	cmp	r3, #2
 c002242:	d11e      	bne.n	c002282 <cmox_ECC_AllocPoint+0xaa>
 c002244:	6800      	ldr	r0, [r0, #0]
 c002246:	310c      	adds	r1, #12
 c002248:	6802      	ldr	r2, [r0, #0]
 c00224a:	69e8      	ldr	r0, [r5, #28]
 c00224c:	6812      	ldr	r2, [r2, #0]
 c00224e:	f7ff fd48 	bl	c001ce2 <cmox_bn_alloc>
 c002252:	0004      	movs	r4, r0
 c002254:	d013      	beq.n	c00227e <cmox_ECC_AllocPoint+0xa6>
 c002256:	6830      	ldr	r0, [r6, #0]
 c002258:	1d01      	adds	r1, r0, #4
 c00225a:	69e8      	ldr	r0, [r5, #28]
 c00225c:	f7ff fd4c 	bl	c001cf8 <cmox_bn_free>
 c002260:	6830      	ldr	r0, [r6, #0]
 c002262:	f100 0108 	add.w	r1, r0, #8
 c002266:	69e8      	ldr	r0, [r5, #28]
 c002268:	f7ff fd46 	bl	c001cf8 <cmox_bn_free>
 c00226c:	6831      	ldr	r1, [r6, #0]
 c00226e:	69e8      	ldr	r0, [r5, #28]
 c002270:	f7ff fd42 	bl	c001cf8 <cmox_bn_free>
 c002274:	69e8      	ldr	r0, [r5, #28]
 c002276:	2214      	movs	r2, #20
 c002278:	4631      	mov	r1, r6
 c00227a:	f001 fe4a 	bl	c003f12 <cmox_membuf_free>
 c00227e:	4620      	mov	r0, r4
 c002280:	bd70      	pop	{r4, r5, r6, pc}
 c002282:	2000      	movs	r0, #0
 c002284:	60c8      	str	r0, [r1, #12]
 c002286:	e7fa      	b.n	c00227e <cmox_ECC_AllocPoint+0xa6>
 c002288:	2200      	movs	r2, #0
 c00228a:	604a      	str	r2, [r1, #4]
 c00228c:	60ca      	str	r2, [r1, #12]
 c00228e:	e7f6      	b.n	c00227e <cmox_ECC_AllocPoint+0xa6>

0c002290 <cmox_ECC_FreePoint>:
 c002290:	b570      	push	{r4, r5, r6, lr}
 c002292:	460c      	mov	r4, r1
 c002294:	2500      	movs	r5, #0
 c002296:	2c00      	cmp	r4, #0
 c002298:	4606      	mov	r6, r0
 c00229a:	bf1a      	itte	ne
 c00229c:	6820      	ldrne	r0, [r4, #0]
 c00229e:	2800      	cmpne	r0, #0
 c0022a0:	2501      	moveq	r5, #1
 c0022a2:	d023      	beq.n	c0022ec <cmox_ECC_FreePoint+0x5c>
 c0022a4:	69b1      	ldr	r1, [r6, #24]
 c0022a6:	684a      	ldr	r2, [r1, #4]
 c0022a8:	69d3      	ldr	r3, [r2, #28]
 c0022aa:	2b02      	cmp	r3, #2
 c0022ac:	d104      	bne.n	c0022b8 <cmox_ECC_FreePoint+0x28>
 c0022ae:	f100 010c 	add.w	r1, r0, #12
 c0022b2:	69f0      	ldr	r0, [r6, #28]
 c0022b4:	f7ff fd20 	bl	c001cf8 <cmox_bn_free>
 c0022b8:	69b0      	ldr	r0, [r6, #24]
 c0022ba:	6841      	ldr	r1, [r0, #4]
 c0022bc:	69c8      	ldr	r0, [r1, #28]
 c0022be:	2803      	cmp	r0, #3
 c0022c0:	d004      	beq.n	c0022cc <cmox_ECC_FreePoint+0x3c>
 c0022c2:	6821      	ldr	r1, [r4, #0]
 c0022c4:	69f0      	ldr	r0, [r6, #28]
 c0022c6:	1d09      	adds	r1, r1, #4
 c0022c8:	f7ff fd16 	bl	c001cf8 <cmox_bn_free>
 c0022cc:	6820      	ldr	r0, [r4, #0]
 c0022ce:	f100 0108 	add.w	r1, r0, #8
 c0022d2:	69f0      	ldr	r0, [r6, #28]
 c0022d4:	f7ff fd10 	bl	c001cf8 <cmox_bn_free>
 c0022d8:	6821      	ldr	r1, [r4, #0]
 c0022da:	69f0      	ldr	r0, [r6, #28]
 c0022dc:	f7ff fd0c 	bl	c001cf8 <cmox_bn_free>
 c0022e0:	69f0      	ldr	r0, [r6, #28]
 c0022e2:	2214      	movs	r2, #20
 c0022e4:	4621      	mov	r1, r4
 c0022e6:	f001 fe14 	bl	c003f12 <cmox_membuf_free>
 c0022ea:	6025      	str	r5, [r4, #0]
 c0022ec:	4628      	mov	r0, r5
 c0022ee:	bd70      	pop	{r4, r5, r6, pc}

0c0022f0 <cmox_ECC_CondCopyPoint>:
 c0022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0022f2:	460f      	mov	r7, r1
 c0022f4:	2500      	movs	r5, #0
 c0022f6:	4616      	mov	r6, r2
 c0022f8:	2f00      	cmp	r7, #0
 c0022fa:	4604      	mov	r4, r0
 c0022fc:	bf18      	it	ne
 c0022fe:	2e00      	cmpne	r6, #0
 c002300:	d00b      	beq.n	c00231a <cmox_ECC_CondCopyPoint+0x2a>
 c002302:	6839      	ldr	r1, [r7, #0]
 c002304:	2900      	cmp	r1, #0
 c002306:	bf1c      	itt	ne
 c002308:	68b8      	ldrne	r0, [r7, #8]
 c00230a:	2800      	cmpne	r0, #0
 c00230c:	d005      	beq.n	c00231a <cmox_ECC_CondCopyPoint+0x2a>
 c00230e:	6832      	ldr	r2, [r6, #0]
 c002310:	2a00      	cmp	r2, #0
 c002312:	bf1c      	itt	ne
 c002314:	68b0      	ldrne	r0, [r6, #8]
 c002316:	2800      	cmpne	r0, #0
 c002318:	d101      	bne.n	c00231e <cmox_ECC_CondCopyPoint+0x2e>
 c00231a:	2501      	movs	r5, #1
 c00231c:	e019      	b.n	c002352 <cmox_ECC_CondCopyPoint+0x62>
 c00231e:	693b      	ldr	r3, [r7, #16]
 c002320:	4620      	mov	r0, r4
 c002322:	6133      	str	r3, [r6, #16]
 c002324:	f7ff fd23 	bl	c001d6e <cmox_bn_cCopy>
 c002328:	6879      	ldr	r1, [r7, #4]
 c00232a:	2900      	cmp	r1, #0
 c00232c:	bf1f      	itttt	ne
 c00232e:	6872      	ldrne	r2, [r6, #4]
 c002330:	2a00      	cmpne	r2, #0
 c002332:	4620      	movne	r0, r4
 c002334:	f7ff fd1b 	blne	c001d6e <cmox_bn_cCopy>
 c002338:	68b2      	ldr	r2, [r6, #8]
 c00233a:	68b9      	ldr	r1, [r7, #8]
 c00233c:	4620      	mov	r0, r4
 c00233e:	f7ff fd16 	bl	c001d6e <cmox_bn_cCopy>
 c002342:	68f9      	ldr	r1, [r7, #12]
 c002344:	2900      	cmp	r1, #0
 c002346:	bf1f      	itttt	ne
 c002348:	68f2      	ldrne	r2, [r6, #12]
 c00234a:	2a00      	cmpne	r2, #0
 c00234c:	4620      	movne	r0, r4
 c00234e:	f7ff fd0e 	blne	c001d6e <cmox_bn_cCopy>
 c002352:	4628      	mov	r0, r5
 c002354:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0c002356 <cmox_ECC_CondSymmetricPoint>:
 c002356:	b570      	push	{r4, r5, r6, lr}
 c002358:	460e      	mov	r6, r1
 c00235a:	69b1      	ldr	r1, [r6, #24]
 c00235c:	4615      	mov	r5, r2
 c00235e:	4604      	mov	r4, r0
 c002360:	680a      	ldr	r2, [r1, #0]
 c002362:	2001      	movs	r0, #1
 c002364:	69d3      	ldr	r3, [r2, #28]
 c002366:	b13b      	cbz	r3, c002378 <cmox_ECC_CondSymmetricPoint+0x22>
 c002368:	2b02      	cmp	r3, #2
 c00236a:	d001      	beq.n	c002370 <cmox_ECC_CondSymmetricPoint+0x1a>
 c00236c:	d307      	bcc.n	c00237e <cmox_ECC_CondSymmetricPoint+0x28>
 c00236e:	bd70      	pop	{r4, r5, r6, pc}
 c002370:	6849      	ldr	r1, [r1, #4]
 c002372:	69cb      	ldr	r3, [r1, #28]
 c002374:	2b03      	cmp	r3, #3
 c002376:	d014      	beq.n	c0023a2 <cmox_ECC_CondSymmetricPoint+0x4c>
 c002378:	6812      	ldr	r2, [r2, #0]
 c00237a:	6869      	ldr	r1, [r5, #4]
 c00237c:	e00c      	b.n	c002398 <cmox_ECC_CondSymmetricPoint+0x42>
 c00237e:	6812      	ldr	r2, [r2, #0]
 c002380:	6829      	ldr	r1, [r5, #0]
 c002382:	4620      	mov	r0, r4
 c002384:	f7fe fb35 	bl	c0009f2 <cmox_FieldBN_CondNegate>
 c002388:	69b1      	ldr	r1, [r6, #24]
 c00238a:	684a      	ldr	r2, [r1, #4]
 c00238c:	69d3      	ldr	r3, [r2, #28]
 c00238e:	2b02      	cmp	r3, #2
 c002390:	d107      	bne.n	c0023a2 <cmox_ECC_CondSymmetricPoint+0x4c>
 c002392:	6808      	ldr	r0, [r1, #0]
 c002394:	68e9      	ldr	r1, [r5, #12]
 c002396:	6802      	ldr	r2, [r0, #0]
 c002398:	4620      	mov	r0, r4
 c00239a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 c00239e:	f7fe bb28 	b.w	c0009f2 <cmox_FieldBN_CondNegate>
 c0023a2:	bd70      	pop	{r4, r5, r6, pc}

0c0023a4 <cmox_ECC_SetPointAtInfinity>:
 c0023a4:	b570      	push	{r4, r5, r6, lr}
 c0023a6:	4606      	mov	r6, r0
 c0023a8:	460d      	mov	r5, r1
 c0023aa:	6928      	ldr	r0, [r5, #16]
 c0023ac:	2400      	movs	r4, #0
 c0023ae:	f040 0001 	orr.w	r0, r0, #1
 c0023b2:	6128      	str	r0, [r5, #16]
 c0023b4:	69b1      	ldr	r1, [r6, #24]
 c0023b6:	6808      	ldr	r0, [r1, #0]
 c0023b8:	69c2      	ldr	r2, [r0, #28]
 c0023ba:	b11a      	cbz	r2, c0023c4 <cmox_ECC_SetPointAtInfinity+0x20>
 c0023bc:	2a02      	cmp	r2, #2
 c0023be:	d008      	beq.n	c0023d2 <cmox_ECC_SetPointAtInfinity+0x2e>
 c0023c0:	d318      	bcc.n	c0023f4 <cmox_ECC_SetPointAtInfinity+0x50>
 c0023c2:	e02d      	b.n	c002420 <cmox_ECC_SetPointAtInfinity+0x7c>
 c0023c4:	6828      	ldr	r0, [r5, #0]
 c0023c6:	2100      	movs	r1, #0
 c0023c8:	f7ff fcc2 	bl	c001d50 <cmox_bn_init>
 c0023cc:	6868      	ldr	r0, [r5, #4]
 c0023ce:	2101      	movs	r1, #1
 c0023d0:	e00b      	b.n	c0023ea <cmox_ECC_SetPointAtInfinity+0x46>
 c0023d2:	6849      	ldr	r1, [r1, #4]
 c0023d4:	6828      	ldr	r0, [r5, #0]
 c0023d6:	69ca      	ldr	r2, [r1, #28]
 c0023d8:	2a03      	cmp	r2, #3
 c0023da:	bf08      	it	eq
 c0023dc:	2101      	moveq	r1, #1
 c0023de:	d004      	beq.n	c0023ea <cmox_ECC_SetPointAtInfinity+0x46>
 c0023e0:	2100      	movs	r1, #0
 c0023e2:	f7ff fcb5 	bl	c001d50 <cmox_bn_init>
 c0023e6:	2101      	movs	r1, #1
 c0023e8:	6868      	ldr	r0, [r5, #4]
 c0023ea:	f7ff fcb1 	bl	c001d50 <cmox_bn_init>
 c0023ee:	2100      	movs	r1, #0
 c0023f0:	68a8      	ldr	r0, [r5, #8]
 c0023f2:	e012      	b.n	c00241a <cmox_ECC_SetPointAtInfinity+0x76>
 c0023f4:	6828      	ldr	r0, [r5, #0]
 c0023f6:	2100      	movs	r1, #0
 c0023f8:	f7ff fcaa 	bl	c001d50 <cmox_bn_init>
 c0023fc:	6868      	ldr	r0, [r5, #4]
 c0023fe:	2101      	movs	r1, #1
 c002400:	f7ff fca6 	bl	c001d50 <cmox_bn_init>
 c002404:	68a8      	ldr	r0, [r5, #8]
 c002406:	2101      	movs	r1, #1
 c002408:	f7ff fca2 	bl	c001d50 <cmox_bn_init>
 c00240c:	69b0      	ldr	r0, [r6, #24]
 c00240e:	6841      	ldr	r1, [r0, #4]
 c002410:	69c8      	ldr	r0, [r1, #28]
 c002412:	2802      	cmp	r0, #2
 c002414:	d105      	bne.n	c002422 <cmox_ECC_SetPointAtInfinity+0x7e>
 c002416:	2100      	movs	r1, #0
 c002418:	68e8      	ldr	r0, [r5, #12]
 c00241a:	f7ff fc99 	bl	c001d50 <cmox_bn_init>
 c00241e:	e000      	b.n	c002422 <cmox_ECC_SetPointAtInfinity+0x7e>
 c002420:	2401      	movs	r4, #1
 c002422:	4620      	mov	r0, r4
 c002424:	bd70      	pop	{r4, r5, r6, pc}

0c002426 <cmox_ECC_CondImportPoint>:
 c002426:	e92d 4bfc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}
 c00242a:	4616      	mov	r6, r2
 c00242c:	2500      	movs	r5, #0
 c00242e:	2e00      	cmp	r6, #0
 c002430:	4680      	mov	r8, r0
 c002432:	468b      	mov	fp, r1
 c002434:	461c      	mov	r4, r3
 c002436:	bf1c      	itt	ne
 c002438:	9f0b      	ldrne	r7, [sp, #44]	@ 0x2c
 c00243a:	2f00      	cmpne	r7, #0
 c00243c:	d005      	beq.n	c00244a <cmox_ECC_CondImportPoint+0x24>
 c00243e:	6839      	ldr	r1, [r7, #0]
 c002440:	2900      	cmp	r1, #0
 c002442:	bf1c      	itt	ne
 c002444:	68b8      	ldrne	r0, [r7, #8]
 c002446:	2800      	cmpne	r0, #0
 c002448:	d103      	bne.n	c002452 <cmox_ECC_CondImportPoint+0x2c>
 c00244a:	2501      	movs	r5, #1
 c00244c:	4628      	mov	r0, r5
 c00244e:	e8bd 8bf6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, fp, pc}
 c002452:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c002454:	6138      	str	r0, [r7, #16]
 c002456:	684a      	ldr	r2, [r1, #4]
 c002458:	6831      	ldr	r1, [r6, #0]
 c00245a:	4640      	mov	r0, r8
 c00245c:	f7fe fb8a 	bl	c000b74 <cmox_mathUtils_mux>
 c002460:	683a      	ldr	r2, [r7, #0]
 c002462:	6050      	str	r0, [r2, #4]
 c002464:	6878      	ldr	r0, [r7, #4]
 c002466:	b138      	cbz	r0, c002478 <cmox_ECC_CondImportPoint+0x52>
 c002468:	f856 102b 	ldr.w	r1, [r6, fp, lsl #2]
 c00246c:	6842      	ldr	r2, [r0, #4]
 c00246e:	4640      	mov	r0, r8
 c002470:	f7fe fb80 	bl	c000b74 <cmox_mathUtils_mux>
 c002474:	6879      	ldr	r1, [r7, #4]
 c002476:	6048      	str	r0, [r1, #4]
 c002478:	68b8      	ldr	r0, [r7, #8]
 c00247a:	2c00      	cmp	r4, #0
 c00247c:	6842      	ldr	r2, [r0, #4]
 c00247e:	4640      	mov	r0, r8
 c002480:	bf0c      	ite	eq
 c002482:	2101      	moveq	r1, #1
 c002484:	6821      	ldrne	r1, [r4, #0]
 c002486:	f7fe fb75 	bl	c000b74 <cmox_mathUtils_mux>
 c00248a:	68b9      	ldr	r1, [r7, #8]
 c00248c:	6048      	str	r0, [r1, #4]
 c00248e:	68f8      	ldr	r0, [r7, #12]
 c002490:	b138      	cbz	r0, c0024a2 <cmox_ECC_CondImportPoint+0x7c>
 c002492:	f856 103b 	ldr.w	r1, [r6, fp, lsl #3]
 c002496:	6842      	ldr	r2, [r0, #4]
 c002498:	4640      	mov	r0, r8
 c00249a:	f7fe fb6b 	bl	c000b74 <cmox_mathUtils_mux>
 c00249e:	68f9      	ldr	r1, [r7, #12]
 c0024a0:	6048      	str	r0, [r1, #4]
 c0024a2:	f04f 0902 	mov.w	r9, #2
 c0024a6:	1f36      	subs	r6, r6, #4
 c0024a8:	e015      	b.n	c0024d6 <cmox_ECC_CondImportPoint+0xb0>
 c0024aa:	4640      	mov	r0, r8
 c0024ac:	f7fe fb62 	bl	c000b74 <cmox_mathUtils_mux>
 c0024b0:	68b9      	ldr	r1, [r7, #8]
 c0024b2:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 c0024b6:	68f8      	ldr	r0, [r7, #12]
 c0024b8:	b158      	cbz	r0, c0024d2 <cmox_ECC_CondImportPoint+0xac>
 c0024ba:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 c0024be:	eb09 004b 	add.w	r0, r9, fp, lsl #1
 c0024c2:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 c0024c6:	4640      	mov	r0, r8
 c0024c8:	f7fe fb54 	bl	c000b74 <cmox_mathUtils_mux>
 c0024cc:	68f9      	ldr	r1, [r7, #12]
 c0024ce:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 c0024d2:	f109 0901 	add.w	r9, r9, #1
 c0024d6:	45cb      	cmp	fp, r9
 c0024d8:	d3b8      	bcc.n	c00244c <cmox_ECC_CondImportPoint+0x26>
 c0024da:	6838      	ldr	r0, [r7, #0]
 c0024dc:	f856 1029 	ldr.w	r1, [r6, r9, lsl #2]
 c0024e0:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 c0024e4:	4640      	mov	r0, r8
 c0024e6:	f7fe fb45 	bl	c000b74 <cmox_mathUtils_mux>
 c0024ea:	6839      	ldr	r1, [r7, #0]
 c0024ec:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 c0024f0:	6878      	ldr	r0, [r7, #4]
 c0024f2:	b158      	cbz	r0, c00250c <cmox_ECC_CondImportPoint+0xe6>
 c0024f4:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 c0024f8:	eb0b 0009 	add.w	r0, fp, r9
 c0024fc:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 c002500:	4640      	mov	r0, r8
 c002502:	f7fe fb37 	bl	c000b74 <cmox_mathUtils_mux>
 c002506:	6879      	ldr	r1, [r7, #4]
 c002508:	f841 0029 	str.w	r0, [r1, r9, lsl #2]
 c00250c:	68b8      	ldr	r0, [r7, #8]
 c00250e:	2c00      	cmp	r4, #0
 c002510:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 c002514:	bf0e      	itee	eq
 c002516:	2100      	moveq	r1, #0
 c002518:	1f20      	subne	r0, r4, #4
 c00251a:	f850 1029 	ldrne.w	r1, [r0, r9, lsl #2]
 c00251e:	e7c4      	b.n	c0024aa <cmox_ECC_CondImportPoint+0x84>

0c002520 <cmox_ECC_PointToModularDomain>:
 c002520:	b570      	push	{r4, r5, r6, lr}
 c002522:	4604      	mov	r4, r0
 c002524:	69a0      	ldr	r0, [r4, #24]
 c002526:	460d      	mov	r5, r1
 c002528:	2600      	movs	r6, #0
 c00252a:	6841      	ldr	r1, [r0, #4]
 c00252c:	69c8      	ldr	r0, [r1, #28]
 c00252e:	2803      	cmp	r0, #3
 c002530:	d818      	bhi.n	c002564 <cmox_ECC_PointToModularDomain+0x44>
 c002532:	e8df f000 	tbb	[pc, r0]
 c002536:	0707      	.short	0x0707
 c002538:	0c02      	.short	0x0c02
 c00253a:	6a22      	ldr	r2, [r4, #32]
 c00253c:	68e8      	ldr	r0, [r5, #12]
 c00253e:	4621      	mov	r1, r4
 c002540:	f7fe fa9e 	bl	c000a80 <cmox_ModularBN_Enter>
 c002544:	6a22      	ldr	r2, [r4, #32]
 c002546:	6868      	ldr	r0, [r5, #4]
 c002548:	4621      	mov	r1, r4
 c00254a:	f7fe fa99 	bl	c000a80 <cmox_ModularBN_Enter>
 c00254e:	6a22      	ldr	r2, [r4, #32]
 c002550:	6828      	ldr	r0, [r5, #0]
 c002552:	4621      	mov	r1, r4
 c002554:	f7fe fa94 	bl	c000a80 <cmox_ModularBN_Enter>
 c002558:	6a22      	ldr	r2, [r4, #32]
 c00255a:	68a8      	ldr	r0, [r5, #8]
 c00255c:	4621      	mov	r1, r4
 c00255e:	f7fe fa8f 	bl	c000a80 <cmox_ModularBN_Enter>
 c002562:	e000      	b.n	c002566 <cmox_ECC_PointToModularDomain+0x46>
 c002564:	2601      	movs	r6, #1
 c002566:	6928      	ldr	r0, [r5, #16]
 c002568:	f040 0004 	orr.w	r0, r0, #4
 c00256c:	6128      	str	r0, [r5, #16]
 c00256e:	4630      	mov	r0, r6
 c002570:	bd70      	pop	{r4, r5, r6, pc}
	...

0c002574 <cmox_ECC_PointFromModularDomain>:
 c002574:	b538      	push	{r3, r4, r5, lr}
 c002576:	4604      	mov	r4, r0
 c002578:	69a0      	ldr	r0, [r4, #24]
 c00257a:	460d      	mov	r5, r1
 c00257c:	6841      	ldr	r1, [r0, #4]
 c00257e:	69c8      	ldr	r0, [r1, #28]
 c002580:	2803      	cmp	r0, #3
 c002582:	d81f      	bhi.n	c0025c4 <cmox_ECC_PointFromModularDomain+0x50>
 c002584:	e8df f000 	tbb	[pc, r0]
 c002588:	10020909 	.word	0x10020909
 c00258c:	6a23      	ldr	r3, [r4, #32]
 c00258e:	69e2      	ldr	r2, [r4, #28]
 c002590:	68e8      	ldr	r0, [r5, #12]
 c002592:	4621      	mov	r1, r4
 c002594:	f7fe fa7c 	bl	c000a90 <cmox_ModularBN_Exit>
 c002598:	b9a8      	cbnz	r0, c0025c6 <cmox_ECC_PointFromModularDomain+0x52>
 c00259a:	6a23      	ldr	r3, [r4, #32]
 c00259c:	69e2      	ldr	r2, [r4, #28]
 c00259e:	6868      	ldr	r0, [r5, #4]
 c0025a0:	4621      	mov	r1, r4
 c0025a2:	f7fe fa75 	bl	c000a90 <cmox_ModularBN_Exit>
 c0025a6:	b970      	cbnz	r0, c0025c6 <cmox_ECC_PointFromModularDomain+0x52>
 c0025a8:	6a23      	ldr	r3, [r4, #32]
 c0025aa:	69e2      	ldr	r2, [r4, #28]
 c0025ac:	6828      	ldr	r0, [r5, #0]
 c0025ae:	4621      	mov	r1, r4
 c0025b0:	f7fe fa6e 	bl	c000a90 <cmox_ModularBN_Exit>
 c0025b4:	b938      	cbnz	r0, c0025c6 <cmox_ECC_PointFromModularDomain+0x52>
 c0025b6:	6a23      	ldr	r3, [r4, #32]
 c0025b8:	69e2      	ldr	r2, [r4, #28]
 c0025ba:	68a8      	ldr	r0, [r5, #8]
 c0025bc:	4621      	mov	r1, r4
 c0025be:	f7fe fa67 	bl	c000a90 <cmox_ModularBN_Exit>
 c0025c2:	e000      	b.n	c0025c6 <cmox_ECC_PointFromModularDomain+0x52>
 c0025c4:	2001      	movs	r0, #1
 c0025c6:	6929      	ldr	r1, [r5, #16]
 c0025c8:	f021 0104 	bic.w	r1, r1, #4
 c0025cc:	6129      	str	r1, [r5, #16]
 c0025ce:	bd32      	pop	{r1, r4, r5, pc}

0c0025d0 <cmox_ECC_PointValidation>:
 c0025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0025d2:	4604      	mov	r4, r0
 c0025d4:	2600      	movs	r6, #0
 c0025d6:	460d      	mov	r5, r1
 c0025d8:	2c00      	cmp	r4, #0
 c0025da:	bf18      	it	ne
 c0025dc:	2d00      	cmpne	r5, #0
 c0025de:	d05e      	beq.n	c00269e <cmox_ECC_PointValidation+0xce>
 c0025e0:	7c28      	ldrb	r0, [r5, #16]
 c0025e2:	2100      	movs	r1, #0
 c0025e4:	f000 0001 	and.w	r0, r0, #1
 c0025e8:	f7fe facc 	bl	c000b84 <cmox_mathUtils_neq>
 c0025ec:	2801      	cmp	r0, #1
 c0025ee:	d056      	beq.n	c00269e <cmox_ECC_PointValidation+0xce>
 c0025f0:	68a8      	ldr	r0, [r5, #8]
 c0025f2:	2100      	movs	r1, #0
 c0025f4:	f7ff fc39 	bl	c001e6a <cmox_bn_cmpUint>
 c0025f8:	2801      	cmp	r0, #1
 c0025fa:	d050      	beq.n	c00269e <cmox_ECC_PointValidation+0xce>
 c0025fc:	69a0      	ldr	r0, [r4, #24]
 c0025fe:	6801      	ldr	r1, [r0, #0]
 c002600:	6828      	ldr	r0, [r5, #0]
 c002602:	6809      	ldr	r1, [r1, #0]
 c002604:	f7ff fbf0 	bl	c001de8 <cmox_bn_cmp>
 c002608:	2800      	cmp	r0, #0
 c00260a:	d548      	bpl.n	c00269e <cmox_ECC_PointValidation+0xce>
 c00260c:	69a0      	ldr	r0, [r4, #24]
 c00260e:	6841      	ldr	r1, [r0, #4]
 c002610:	69ca      	ldr	r2, [r1, #28]
 c002612:	2a03      	cmp	r2, #3
 c002614:	d006      	beq.n	c002624 <cmox_ECC_PointValidation+0x54>
 c002616:	6800      	ldr	r0, [r0, #0]
 c002618:	6801      	ldr	r1, [r0, #0]
 c00261a:	6868      	ldr	r0, [r5, #4]
 c00261c:	f7ff fbe4 	bl	c001de8 <cmox_bn_cmp>
 c002620:	2800      	cmp	r0, #0
 c002622:	d53c      	bpl.n	c00269e <cmox_ECC_PointValidation+0xce>
 c002624:	69a1      	ldr	r1, [r4, #24]
 c002626:	6809      	ldr	r1, [r1, #0]
 c002628:	6908      	ldr	r0, [r1, #16]
 c00262a:	2800      	cmp	r0, #0
 c00262c:	bf1c      	itt	ne
 c00262e:	6948      	ldrne	r0, [r1, #20]
 c002630:	2800      	cmpne	r0, #0
 c002632:	d035      	beq.n	c0026a0 <cmox_ECC_PointValidation+0xd0>
 c002634:	69c8      	ldr	r0, [r1, #28]
 c002636:	b118      	cbz	r0, c002640 <cmox_ECC_PointValidation+0x70>
 c002638:	2802      	cmp	r0, #2
 c00263a:	d031      	beq.n	c0026a0 <cmox_ECC_PointValidation+0xd0>
 c00263c:	d332      	bcc.n	c0026a4 <cmox_ECC_PointValidation+0xd4>
 c00263e:	e02e      	b.n	c00269e <cmox_ECC_PointValidation+0xce>
 c002640:	6960      	ldr	r0, [r4, #20]
 c002642:	6a23      	ldr	r3, [r4, #32]
 c002644:	4622      	mov	r2, r4
 c002646:	6801      	ldr	r1, [r0, #0]
 c002648:	6828      	ldr	r0, [r5, #0]
 c00264a:	f7fe fa66 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00264e:	69a0      	ldr	r0, [r4, #24]
 c002650:	6961      	ldr	r1, [r4, #20]
 c002652:	6800      	ldr	r0, [r0, #0]
 c002654:	680b      	ldr	r3, [r1, #0]
 c002656:	6802      	ldr	r2, [r0, #0]
 c002658:	6901      	ldr	r1, [r0, #16]
 c00265a:	4618      	mov	r0, r3
 c00265c:	f7fd ffb5 	bl	c0005ca <cmox_ModAddBN>
 c002660:	6960      	ldr	r0, [r4, #20]
 c002662:	6a21      	ldr	r1, [r4, #32]
 c002664:	4623      	mov	r3, r4
 c002666:	6802      	ldr	r2, [r0, #0]
 c002668:	9100      	str	r1, [sp, #0]
 c00266a:	6829      	ldr	r1, [r5, #0]
 c00266c:	4610      	mov	r0, r2
 c00266e:	f7fe fa31 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002672:	69a0      	ldr	r0, [r4, #24]
 c002674:	6962      	ldr	r2, [r4, #20]
 c002676:	6801      	ldr	r1, [r0, #0]
 c002678:	6810      	ldr	r0, [r2, #0]
 c00267a:	680a      	ldr	r2, [r1, #0]
 c00267c:	6949      	ldr	r1, [r1, #20]
 c00267e:	4603      	mov	r3, r0
 c002680:	f7fd ffa3 	bl	c0005ca <cmox_ModAddBN>
 c002684:	6960      	ldr	r0, [r4, #20]
 c002686:	6a23      	ldr	r3, [r4, #32]
 c002688:	4622      	mov	r2, r4
 c00268a:	6841      	ldr	r1, [r0, #4]
 c00268c:	6868      	ldr	r0, [r5, #4]
 c00268e:	f7fe fa44 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002692:	6960      	ldr	r0, [r4, #20]
 c002694:	6841      	ldr	r1, [r0, #4]
 c002696:	6800      	ldr	r0, [r0, #0]
 c002698:	f7ff fba6 	bl	c001de8 <cmox_bn_cmp>
 c00269c:	b100      	cbz	r0, c0026a0 <cmox_ECC_PointValidation+0xd0>
 c00269e:	2604      	movs	r6, #4
 c0026a0:	4630      	mov	r0, r6
 c0026a2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 c0026a4:	6960      	ldr	r0, [r4, #20]
 c0026a6:	6a23      	ldr	r3, [r4, #32]
 c0026a8:	4622      	mov	r2, r4
 c0026aa:	6801      	ldr	r1, [r0, #0]
 c0026ac:	6828      	ldr	r0, [r5, #0]
 c0026ae:	f7fe fa34 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0026b2:	6960      	ldr	r0, [r4, #20]
 c0026b4:	6a23      	ldr	r3, [r4, #32]
 c0026b6:	4622      	mov	r2, r4
 c0026b8:	6841      	ldr	r1, [r0, #4]
 c0026ba:	6868      	ldr	r0, [r5, #4]
 c0026bc:	f7fe fa2d 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0026c0:	6960      	ldr	r0, [r4, #20]
 c0026c2:	6a22      	ldr	r2, [r4, #32]
 c0026c4:	4623      	mov	r3, r4
 c0026c6:	6801      	ldr	r1, [r0, #0]
 c0026c8:	9200      	str	r2, [sp, #0]
 c0026ca:	69a0      	ldr	r0, [r4, #24]
 c0026cc:	460a      	mov	r2, r1
 c0026ce:	6807      	ldr	r7, [r0, #0]
 c0026d0:	6938      	ldr	r0, [r7, #16]
 c0026d2:	f7fe f9ff 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0026d6:	69a2      	ldr	r2, [r4, #24]
 c0026d8:	6961      	ldr	r1, [r4, #20]
 c0026da:	6817      	ldr	r7, [r2, #0]
 c0026dc:	6808      	ldr	r0, [r1, #0]
 c0026de:	6849      	ldr	r1, [r1, #4]
 c0026e0:	683a      	ldr	r2, [r7, #0]
 c0026e2:	4603      	mov	r3, r0
 c0026e4:	f7fd ff71 	bl	c0005ca <cmox_ModAddBN>
 c0026e8:	6960      	ldr	r0, [r4, #20]
 c0026ea:	6a21      	ldr	r1, [r4, #32]
 c0026ec:	4623      	mov	r3, r4
 c0026ee:	6840      	ldr	r0, [r0, #4]
 c0026f0:	9100      	str	r1, [sp, #0]
 c0026f2:	6829      	ldr	r1, [r5, #0]
 c0026f4:	4602      	mov	r2, r0
 c0026f6:	f7fe f9ed 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0026fa:	6960      	ldr	r0, [r4, #20]
 c0026fc:	6a21      	ldr	r1, [r4, #32]
 c0026fe:	4623      	mov	r3, r4
 c002700:	6840      	ldr	r0, [r0, #4]
 c002702:	9100      	str	r1, [sp, #0]
 c002704:	6829      	ldr	r1, [r5, #0]
 c002706:	4602      	mov	r2, r0
 c002708:	f7fe f9e4 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00270c:	6960      	ldr	r0, [r4, #20]
 c00270e:	6a21      	ldr	r1, [r4, #32]
 c002710:	4623      	mov	r3, r4
 c002712:	6840      	ldr	r0, [r0, #4]
 c002714:	9100      	str	r1, [sp, #0]
 c002716:	69a7      	ldr	r7, [r4, #24]
 c002718:	4602      	mov	r2, r0
 c00271a:	683f      	ldr	r7, [r7, #0]
 c00271c:	6979      	ldr	r1, [r7, #20]
 c00271e:	f7fe f9d9 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002722:	69a1      	ldr	r1, [r4, #24]
 c002724:	6960      	ldr	r0, [r4, #20]
 c002726:	680a      	ldr	r2, [r1, #0]
 c002728:	68a9      	ldr	r1, [r5, #8]
 c00272a:	6840      	ldr	r0, [r0, #4]
 c00272c:	6812      	ldr	r2, [r2, #0]
 c00272e:	4603      	mov	r3, r0
 c002730:	f7fd ff4b 	bl	c0005ca <cmox_ModAddBN>
 c002734:	e7ad      	b.n	c002692 <cmox_ECC_PointValidation+0xc2>
	...

0c002738 <cmox_ECC_PointToAffine>:
 c002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 c00273a:	460f      	mov	r7, r1
 c00273c:	b085      	sub	sp, #20
 c00273e:	2100      	movs	r1, #0
 c002740:	4606      	mov	r6, r0
 c002742:	9103      	str	r1, [sp, #12]
 c002744:	9104      	str	r1, [sp, #16]
 c002746:	69b0      	ldr	r0, [r6, #24]
 c002748:	a903      	add	r1, sp, #12
 c00274a:	2501      	movs	r5, #1
 c00274c:	6803      	ldr	r3, [r0, #0]
 c00274e:	69f0      	ldr	r0, [r6, #28]
 c002750:	681c      	ldr	r4, [r3, #0]
 c002752:	6822      	ldr	r2, [r4, #0]
 c002754:	f7ff fac5 	bl	c001ce2 <cmox_bn_alloc>
 c002758:	0004      	movs	r4, r0
 c00275a:	f040 80c6 	bne.w	c0028ea <cmox_ECC_PointToAffine+0x1b2>
 c00275e:	69b0      	ldr	r0, [r6, #24]
 c002760:	6801      	ldr	r1, [r0, #0]
 c002762:	69f0      	ldr	r0, [r6, #28]
 c002764:	680a      	ldr	r2, [r1, #0]
 c002766:	a904      	add	r1, sp, #16
 c002768:	6812      	ldr	r2, [r2, #0]
 c00276a:	f7ff faba 	bl	c001ce2 <cmox_bn_alloc>
 c00276e:	0004      	movs	r4, r0
 c002770:	f040 80b7 	bne.w	c0028e2 <cmox_ECC_PointToAffine+0x1aa>
 c002774:	7c38      	ldrb	r0, [r7, #16]
 c002776:	2100      	movs	r1, #0
 c002778:	f000 0004 	and.w	r0, r0, #4
 c00277c:	f7fe fa02 	bl	c000b84 <cmox_mathUtils_neq>
 c002780:	b920      	cbnz	r0, c00278c <cmox_ECC_PointToAffine+0x54>
 c002782:	4639      	mov	r1, r7
 c002784:	4630      	mov	r0, r6
 c002786:	2500      	movs	r5, #0
 c002788:	f7ff feca 	bl	c002520 <cmox_ECC_PointToModularDomain>
 c00278c:	f8df 2178 	ldr.w	r2, [pc, #376]	@ c002908 <.text_19>
 c002790:	e9d2 3400 	ldrd	r3, r4, [r2]
 c002794:	4956      	ldr	r1, [pc, #344]	@ (c0028f0 <cmox_ECC_PointToAffine+0x1b8>)
 c002796:	e9cd 3400 	strd	r3, r4, [sp]
 c00279a:	7808      	ldrb	r0, [r1, #0]
 c00279c:	4b55      	ldr	r3, [pc, #340]	@ (c0028f4 <cmox_ECC_PointToAffine+0x1bc>)
 c00279e:	2800      	cmp	r0, #0
 c0027a0:	bf0e      	itee	eq
 c0027a2:	2100      	moveq	r1, #0
 c0027a4:	2004      	movne	r0, #4
 c0027a6:	2104      	movne	r1, #4
 c0027a8:	581a      	ldr	r2, [r3, r0]
 c0027aa:	f85d 0001 	ldr.w	r0, [sp, r1]
 c0027ae:	4952      	ldr	r1, [pc, #328]	@ (c0028f8 <cmox_ECC_PointToAffine+0x1c0>)
 c0027b0:	1882      	adds	r2, r0, r2
 c0027b2:	6011      	str	r1, [r2, #0]
 c0027b4:	6810      	ldr	r0, [r2, #0]
 c0027b6:	2101      	movs	r1, #1
 c0027b8:	6091      	str	r1, [r2, #8]
 c0027ba:	685a      	ldr	r2, [r3, #4]
 c0027bc:	9900      	ldr	r1, [sp, #0]
 c0027be:	4050      	eors	r0, r2
 c0027c0:	681a      	ldr	r2, [r3, #0]
 c0027c2:	4041      	eors	r1, r0
 c0027c4:	484d      	ldr	r0, [pc, #308]	@ (c0028fc <cmox_ECC_PointToAffine+0x1c4>)
 c0027c6:	ea80 0c01 	eor.w	ip, r0, r1
 c0027ca:	9901      	ldr	r1, [sp, #4]
 c0027cc:	484c      	ldr	r0, [pc, #304]	@ (c002900 <cmox_ECC_PointToAffine+0x1c8>)
 c0027ce:	404a      	eors	r2, r1
 c0027d0:	4042      	eors	r2, r0
 c0027d2:	69b0      	ldr	r0, [r6, #24]
 c0027d4:	4494      	add	ip, r2
 c0027d6:	4a4b      	ldr	r2, [pc, #300]	@ (c002904 <cmox_ECC_PointToAffine+0x1cc>)
 c0027d8:	6803      	ldr	r3, [r0, #0]
 c0027da:	ea92 0f0c 	teq	r2, ip
 c0027de:	9a04      	ldr	r2, [sp, #16]
 c0027e0:	6818      	ldr	r0, [r3, #0]
 c0027e2:	bf14      	ite	ne
 c0027e4:	f06f 0102 	mvnne.w	r1, #2
 c0027e8:	f06f 0101 	mvneq.w	r1, #1
 c0027ec:	f7fe f831 	bl	c000852 <cmox_AddBN_Int>
 c0027f0:	69b0      	ldr	r0, [r6, #24]
 c0027f2:	4632      	mov	r2, r6
 c0027f4:	69c4      	ldr	r4, [r0, #28]
 c0027f6:	6a30      	ldr	r0, [r6, #32]
 c0027f8:	9002      	str	r0, [sp, #8]
 c0027fa:	69f1      	ldr	r1, [r6, #28]
 c0027fc:	9803      	ldr	r0, [sp, #12]
 c0027fe:	9101      	str	r1, [sp, #4]
 c002800:	9904      	ldr	r1, [sp, #16]
 c002802:	9000      	str	r0, [sp, #0]
 c002804:	6863      	ldr	r3, [r4, #4]
 c002806:	68b8      	ldr	r0, [r7, #8]
 c002808:	6824      	ldr	r4, [r4, #0]
 c00280a:	47a0      	blx	r4
 c00280c:	4604      	mov	r4, r0
 c00280e:	69b0      	ldr	r0, [r6, #24]
 c002810:	6841      	ldr	r1, [r0, #4]
 c002812:	69c8      	ldr	r0, [r1, #28]
 c002814:	2803      	cmp	r0, #3
 c002816:	d84a      	bhi.n	c0028ae <cmox_ECC_PointToAffine+0x176>
 c002818:	e8df f000 	tbb	[pc, r0]
 c00281c:	40291f02 	.word	0x40291f02
 c002820:	6a33      	ldr	r3, [r6, #32]
 c002822:	9904      	ldr	r1, [sp, #16]
 c002824:	9803      	ldr	r0, [sp, #12]
 c002826:	4632      	mov	r2, r6
 c002828:	f7fe f977 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00282c:	6a30      	ldr	r0, [r6, #32]
 c00282e:	683a      	ldr	r2, [r7, #0]
 c002830:	9904      	ldr	r1, [sp, #16]
 c002832:	9000      	str	r0, [sp, #0]
 c002834:	4633      	mov	r3, r6
 c002836:	4610      	mov	r0, r2
 c002838:	f7fe f94c 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00283c:	6a30      	ldr	r0, [r6, #32]
 c00283e:	9a04      	ldr	r2, [sp, #16]
 c002840:	4633      	mov	r3, r6
 c002842:	9000      	str	r0, [sp, #0]
 c002844:	9803      	ldr	r0, [sp, #12]
 c002846:	4611      	mov	r1, r2
 c002848:	f7fe f944 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00284c:	6a31      	ldr	r1, [r6, #32]
 c00284e:	6878      	ldr	r0, [r7, #4]
 c002850:	4633      	mov	r3, r6
 c002852:	9100      	str	r1, [sp, #0]
 c002854:	4602      	mov	r2, r0
 c002856:	9904      	ldr	r1, [sp, #16]
 c002858:	e026      	b.n	c0028a8 <cmox_ECC_PointToAffine+0x170>
 c00285a:	6a31      	ldr	r1, [r6, #32]
 c00285c:	6838      	ldr	r0, [r7, #0]
 c00285e:	4633      	mov	r3, r6
 c002860:	9100      	str	r1, [sp, #0]
 c002862:	9903      	ldr	r1, [sp, #12]
 c002864:	4602      	mov	r2, r0
 c002866:	f7fe f935 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00286a:	6878      	ldr	r0, [r7, #4]
 c00286c:	e017      	b.n	c00289e <cmox_ECC_PointToAffine+0x166>
 c00286e:	6a31      	ldr	r1, [r6, #32]
 c002870:	6838      	ldr	r0, [r7, #0]
 c002872:	4633      	mov	r3, r6
 c002874:	9100      	str	r1, [sp, #0]
 c002876:	9903      	ldr	r1, [sp, #12]
 c002878:	4602      	mov	r2, r0
 c00287a:	f7fe f92b 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00287e:	6a31      	ldr	r1, [r6, #32]
 c002880:	6878      	ldr	r0, [r7, #4]
 c002882:	4633      	mov	r3, r6
 c002884:	9100      	str	r1, [sp, #0]
 c002886:	9903      	ldr	r1, [sp, #12]
 c002888:	4602      	mov	r2, r0
 c00288a:	f7fe f923 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00288e:	6a30      	ldr	r0, [r6, #32]
 c002890:	4633      	mov	r3, r6
 c002892:	9000      	str	r0, [sp, #0]
 c002894:	68fa      	ldr	r2, [r7, #12]
 c002896:	6879      	ldr	r1, [r7, #4]
 c002898:	6838      	ldr	r0, [r7, #0]
 c00289a:	e005      	b.n	c0028a8 <cmox_ECC_PointToAffine+0x170>
 c00289c:	6838      	ldr	r0, [r7, #0]
 c00289e:	6a31      	ldr	r1, [r6, #32]
 c0028a0:	4633      	mov	r3, r6
 c0028a2:	4602      	mov	r2, r0
 c0028a4:	9100      	str	r1, [sp, #0]
 c0028a6:	9903      	ldr	r1, [sp, #12]
 c0028a8:	f7fe f914 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0028ac:	e000      	b.n	c0028b0 <cmox_ECC_PointToAffine+0x178>
 c0028ae:	2401      	movs	r4, #1
 c0028b0:	6a31      	ldr	r1, [r6, #32]
 c0028b2:	68b8      	ldr	r0, [r7, #8]
 c0028b4:	4633      	mov	r3, r6
 c0028b6:	9100      	str	r1, [sp, #0]
 c0028b8:	9903      	ldr	r1, [sp, #12]
 c0028ba:	4602      	mov	r2, r0
 c0028bc:	f7fe f90a 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0028c0:	2d00      	cmp	r5, #0
 c0028c2:	bf08      	it	eq
 c0028c4:	2c00      	cmpeq	r4, #0
 c0028c6:	d104      	bne.n	c0028d2 <cmox_ECC_PointToAffine+0x19a>
 c0028c8:	4639      	mov	r1, r7
 c0028ca:	4630      	mov	r0, r6
 c0028cc:	f7ff fe52 	bl	c002574 <cmox_ECC_PointFromModularDomain>
 c0028d0:	4604      	mov	r4, r0
 c0028d2:	6938      	ldr	r0, [r7, #16]
 c0028d4:	a904      	add	r1, sp, #16
 c0028d6:	f040 0002 	orr.w	r0, r0, #2
 c0028da:	6138      	str	r0, [r7, #16]
 c0028dc:	69f0      	ldr	r0, [r6, #28]
 c0028de:	f7ff fa0b 	bl	c001cf8 <cmox_bn_free>
 c0028e2:	69f0      	ldr	r0, [r6, #28]
 c0028e4:	a903      	add	r1, sp, #12
 c0028e6:	f7ff fa07 	bl	c001cf8 <cmox_bn_free>
 c0028ea:	4620      	mov	r0, r4
 c0028ec:	b005      	add	sp, #20
 c0028ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c0028f0:	30000028 	.word	0x30000028
 c0028f4:	0c00e44c 	.word	0x0c00e44c
 c0028f8:	ad827e2c 	.word	0xad827e2c
 c0028fc:	12008504 	.word	0x12008504
 c002900:	7a0168fc 	.word	0x7a0168fc
 c002904:	8e9be2a8 	.word	0x8e9be2a8

0c002908 <.text_19>:
 c002908:	0c003ecc 	.word	0x0c003ecc

0c00290c <cmox_ECC_EDW_DecPoint_ed25519>:
 c00290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c002910:	b088      	sub	sp, #32
 c002912:	4606      	mov	r6, r0
 c002914:	69b0      	ldr	r0, [r6, #24]
 c002916:	461d      	mov	r5, r3
 c002918:	4689      	mov	r9, r1
 c00291a:	4692      	mov	sl, r2
 c00291c:	6a01      	ldr	r1, [r0, #32]
 c00291e:	6800      	ldr	r0, [r0, #0]
 c002920:	eb09 020a 	add.w	r2, r9, sl
 c002924:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 c002928:	6803      	ldr	r3, [r0, #0]
 c00292a:	69f0      	ldr	r0, [r6, #28]
 c00292c:	f8d1 8008 	ldr.w	r8, [r1, #8]
 c002930:	681a      	ldr	r2, [r3, #0]
 c002932:	a906      	add	r1, sp, #24
 c002934:	09ff      	lsrs	r7, r7, #7
 c002936:	f7ff f9d4 	bl	c001ce2 <cmox_bn_alloc>
 c00293a:	0004      	movs	r4, r0
 c00293c:	f040 8141 	bne.w	c002bc2 <cmox_ECC_EDW_DecPoint_ed25519+0x2b6>
 c002940:	69b0      	ldr	r0, [r6, #24]
 c002942:	6801      	ldr	r1, [r0, #0]
 c002944:	69f0      	ldr	r0, [r6, #28]
 c002946:	680a      	ldr	r2, [r1, #0]
 c002948:	a907      	add	r1, sp, #28
 c00294a:	6812      	ldr	r2, [r2, #0]
 c00294c:	f7ff f9c9 	bl	c001ce2 <cmox_bn_alloc>
 c002950:	0004      	movs	r4, r0
 c002952:	f040 8132 	bne.w	c002bba <cmox_ECC_EDW_DecPoint_ed25519+0x2ae>
 c002956:	69b0      	ldr	r0, [r6, #24]
 c002958:	6801      	ldr	r1, [r0, #0]
 c00295a:	69f0      	ldr	r0, [r6, #28]
 c00295c:	680a      	ldr	r2, [r1, #0]
 c00295e:	a903      	add	r1, sp, #12
 c002960:	6812      	ldr	r2, [r2, #0]
 c002962:	f7ff f9be 	bl	c001ce2 <cmox_bn_alloc>
 c002966:	0004      	movs	r4, r0
 c002968:	f040 8123 	bne.w	c002bb2 <cmox_ECC_EDW_DecPoint_ed25519+0x2a6>
 c00296c:	69b0      	ldr	r0, [r6, #24]
 c00296e:	6801      	ldr	r1, [r0, #0]
 c002970:	69f0      	ldr	r0, [r6, #28]
 c002972:	680a      	ldr	r2, [r1, #0]
 c002974:	a905      	add	r1, sp, #20
 c002976:	6812      	ldr	r2, [r2, #0]
 c002978:	f7ff f9b3 	bl	c001ce2 <cmox_bn_alloc>
 c00297c:	0004      	movs	r4, r0
 c00297e:	f040 8114 	bne.w	c002baa <cmox_ECC_EDW_DecPoint_ed25519+0x29e>
 c002982:	69b0      	ldr	r0, [r6, #24]
 c002984:	6801      	ldr	r1, [r0, #0]
 c002986:	69f0      	ldr	r0, [r6, #28]
 c002988:	680a      	ldr	r2, [r1, #0]
 c00298a:	a904      	add	r1, sp, #16
 c00298c:	6812      	ldr	r2, [r2, #0]
 c00298e:	f7ff f9a8 	bl	c001ce2 <cmox_bn_alloc>
 c002992:	0004      	movs	r4, r0
 c002994:	d11a      	bne.n	c0029cc <cmox_ECC_EDW_DecPoint_ed25519+0xc0>
 c002996:	9a03      	ldr	r2, [sp, #12]
 c002998:	4651      	mov	r1, sl
 c00299a:	4648      	mov	r0, r9
 c00299c:	f7ff fb81 	bl	c0020a2 <cmox_bn_fromU8LE>
 c0029a0:	9803      	ldr	r0, [sp, #12]
 c0029a2:	9903      	ldr	r1, [sp, #12]
 c0029a4:	6800      	ldr	r0, [r0, #0]
 c0029a6:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 c0029aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 c0029ae:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 c0029b2:	69b0      	ldr	r0, [r6, #24]
 c0029b4:	6801      	ldr	r1, [r0, #0]
 c0029b6:	9803      	ldr	r0, [sp, #12]
 c0029b8:	6809      	ldr	r1, [r1, #0]
 c0029ba:	f7ff fa15 	bl	c001de8 <cmox_bn_cmp>
 c0029be:	2800      	cmp	r0, #0
 c0029c0:	d405      	bmi.n	c0029ce <cmox_ECC_EDW_DecPoint_ed25519+0xc2>
 c0029c2:	69f0      	ldr	r0, [r6, #28]
 c0029c4:	a904      	add	r1, sp, #16
 c0029c6:	2404      	movs	r4, #4
 c0029c8:	f7ff f996 	bl	c001cf8 <cmox_bn_free>
 c0029cc:	e0e9      	b.n	c002ba2 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 c0029ce:	6868      	ldr	r0, [r5, #4]
 c0029d0:	2100      	movs	r1, #0
 c0029d2:	f7ff f9bd 	bl	c001d50 <cmox_bn_init>
 c0029d6:	686a      	ldr	r2, [r5, #4]
 c0029d8:	9903      	ldr	r1, [sp, #12]
 c0029da:	2001      	movs	r0, #1
 c0029dc:	f7ff f9c7 	bl	c001d6e <cmox_bn_cCopy>
 c0029e0:	6a32      	ldr	r2, [r6, #32]
 c0029e2:	9803      	ldr	r0, [sp, #12]
 c0029e4:	4631      	mov	r1, r6
 c0029e6:	f7fe f84b 	bl	c000a80 <cmox_ModularBN_Enter>
 c0029ea:	6a33      	ldr	r3, [r6, #32]
 c0029ec:	9905      	ldr	r1, [sp, #20]
 c0029ee:	9803      	ldr	r0, [sp, #12]
 c0029f0:	4632      	mov	r2, r6
 c0029f2:	f7fe f892 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0029f6:	69b0      	ldr	r0, [r6, #24]
 c0029f8:	6801      	ldr	r1, [r0, #0]
 c0029fa:	68c0      	ldr	r0, [r0, #12]
 c0029fc:	680a      	ldr	r2, [r1, #0]
 c0029fe:	1d01      	adds	r1, r0, #4
 c002a00:	9804      	ldr	r0, [sp, #16]
 c002a02:	6812      	ldr	r2, [r2, #0]
 c002a04:	f7ff f983 	bl	c001d0e <cmox_bn_import>
 c002a08:	69b0      	ldr	r0, [r6, #24]
 c002a0a:	9b07      	ldr	r3, [sp, #28]
 c002a0c:	6801      	ldr	r1, [r0, #0]
 c002a0e:	9805      	ldr	r0, [sp, #20]
 c002a10:	680a      	ldr	r2, [r1, #0]
 c002a12:	9904      	ldr	r1, [sp, #16]
 c002a14:	f7fd fe6a 	bl	c0006ec <cmox_ModSubBN>
 c002a18:	6a30      	ldr	r0, [r6, #32]
 c002a1a:	9a06      	ldr	r2, [sp, #24]
 c002a1c:	4633      	mov	r3, r6
 c002a1e:	9000      	str	r0, [sp, #0]
 c002a20:	69b0      	ldr	r0, [r6, #24]
 c002a22:	6801      	ldr	r1, [r0, #0]
 c002a24:	9805      	ldr	r0, [sp, #20]
 c002a26:	6949      	ldr	r1, [r1, #20]
 c002a28:	f7fe f854 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002a2c:	69b0      	ldr	r0, [r6, #24]
 c002a2e:	9b06      	ldr	r3, [sp, #24]
 c002a30:	6801      	ldr	r1, [r0, #0]
 c002a32:	680a      	ldr	r2, [r1, #0]
 c002a34:	9904      	ldr	r1, [sp, #16]
 c002a36:	4618      	mov	r0, r3
 c002a38:	f7fd fdc7 	bl	c0005ca <cmox_ModAddBN>
 c002a3c:	6a33      	ldr	r3, [r6, #32]
 c002a3e:	9903      	ldr	r1, [sp, #12]
 c002a40:	9806      	ldr	r0, [sp, #24]
 c002a42:	4632      	mov	r2, r6
 c002a44:	f7fe f869 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002a48:	6a30      	ldr	r0, [r6, #32]
 c002a4a:	9a03      	ldr	r2, [sp, #12]
 c002a4c:	9906      	ldr	r1, [sp, #24]
 c002a4e:	9000      	str	r0, [sp, #0]
 c002a50:	4633      	mov	r3, r6
 c002a52:	4610      	mov	r0, r2
 c002a54:	f7fe f83e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002a58:	6a30      	ldr	r0, [r6, #32]
 c002a5a:	9a05      	ldr	r2, [sp, #20]
 c002a5c:	9903      	ldr	r1, [sp, #12]
 c002a5e:	9000      	str	r0, [sp, #0]
 c002a60:	9807      	ldr	r0, [sp, #28]
 c002a62:	4633      	mov	r3, r6
 c002a64:	f7fe f836 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002a68:	9903      	ldr	r1, [sp, #12]
 c002a6a:	6a33      	ldr	r3, [r6, #32]
 c002a6c:	4632      	mov	r2, r6
 c002a6e:	4608      	mov	r0, r1
 c002a70:	f7fe f853 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002a74:	6a30      	ldr	r0, [r6, #32]
 c002a76:	9a03      	ldr	r2, [sp, #12]
 c002a78:	9906      	ldr	r1, [sp, #24]
 c002a7a:	9000      	str	r0, [sp, #0]
 c002a7c:	4633      	mov	r3, r6
 c002a7e:	4610      	mov	r0, r2
 c002a80:	f7fe f828 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002a84:	6a30      	ldr	r0, [r6, #32]
 c002a86:	9a03      	ldr	r2, [sp, #12]
 c002a88:	9907      	ldr	r1, [sp, #28]
 c002a8a:	9000      	str	r0, [sp, #0]
 c002a8c:	4633      	mov	r3, r6
 c002a8e:	4610      	mov	r0, r2
 c002a90:	f7fe f820 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002a94:	69b0      	ldr	r0, [r6, #24]
 c002a96:	9a04      	ldr	r2, [sp, #16]
 c002a98:	f06f 0104 	mvn.w	r1, #4
 c002a9c:	6803      	ldr	r3, [r0, #0]
 c002a9e:	6818      	ldr	r0, [r3, #0]
 c002aa0:	f7fd fed7 	bl	c000852 <cmox_AddBN_Int>
 c002aa4:	9a04      	ldr	r2, [sp, #16]
 c002aa6:	2103      	movs	r1, #3
 c002aa8:	4610      	mov	r0, r2
 c002aaa:	f7fd fd63 	bl	c000574 <cmox_RightShiftBN>
 c002aae:	69b0      	ldr	r0, [r6, #24]
 c002ab0:	69c4      	ldr	r4, [r0, #28]
 c002ab2:	6a30      	ldr	r0, [r6, #32]
 c002ab4:	9002      	str	r0, [sp, #8]
 c002ab6:	69f1      	ldr	r1, [r6, #28]
 c002ab8:	9803      	ldr	r0, [sp, #12]
 c002aba:	9101      	str	r1, [sp, #4]
 c002abc:	682a      	ldr	r2, [r5, #0]
 c002abe:	9904      	ldr	r1, [sp, #16]
 c002ac0:	9200      	str	r2, [sp, #0]
 c002ac2:	6863      	ldr	r3, [r4, #4]
 c002ac4:	6824      	ldr	r4, [r4, #0]
 c002ac6:	4632      	mov	r2, r6
 c002ac8:	47a0      	blx	r4
 c002aca:	4604      	mov	r4, r0
 c002acc:	69f0      	ldr	r0, [r6, #28]
 c002ace:	a904      	add	r1, sp, #16
 c002ad0:	f7ff f912 	bl	c001cf8 <cmox_bn_free>
 c002ad4:	2c00      	cmp	r4, #0
 c002ad6:	d164      	bne.n	c002ba2 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 c002ad8:	6a31      	ldr	r1, [r6, #32]
 c002ada:	6828      	ldr	r0, [r5, #0]
 c002adc:	4633      	mov	r3, r6
 c002ade:	9100      	str	r1, [sp, #0]
 c002ae0:	9905      	ldr	r1, [sp, #20]
 c002ae2:	4602      	mov	r2, r0
 c002ae4:	f7fd fff6 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002ae8:	6a33      	ldr	r3, [r6, #32]
 c002aea:	9903      	ldr	r1, [sp, #12]
 c002aec:	6828      	ldr	r0, [r5, #0]
 c002aee:	4632      	mov	r2, r6
 c002af0:	f7fe f813 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002af4:	6a30      	ldr	r0, [r6, #32]
 c002af6:	9a03      	ldr	r2, [sp, #12]
 c002af8:	4633      	mov	r3, r6
 c002afa:	9000      	str	r0, [sp, #0]
 c002afc:	9806      	ldr	r0, [sp, #24]
 c002afe:	4611      	mov	r1, r2
 c002b00:	f7fd ffe8 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002b04:	9907      	ldr	r1, [sp, #28]
 c002b06:	9803      	ldr	r0, [sp, #12]
 c002b08:	f7ff f96e 	bl	c001de8 <cmox_bn_cmp>
 c002b0c:	b198      	cbz	r0, c002b36 <cmox_ECC_EDW_DecPoint_ed25519+0x22a>
 c002b0e:	69b0      	ldr	r0, [r6, #24]
 c002b10:	9a05      	ldr	r2, [sp, #20]
 c002b12:	9907      	ldr	r1, [sp, #28]
 c002b14:	6803      	ldr	r3, [r0, #0]
 c002b16:	6818      	ldr	r0, [r3, #0]
 c002b18:	f7fd fe67 	bl	c0007ea <cmox_SubBN>
 c002b1c:	9905      	ldr	r1, [sp, #20]
 c002b1e:	9803      	ldr	r0, [sp, #12]
 c002b20:	f7ff f962 	bl	c001de8 <cmox_bn_cmp>
 c002b24:	b9b8      	cbnz	r0, c002b56 <cmox_ECC_EDW_DecPoint_ed25519+0x24a>
 c002b26:	6a31      	ldr	r1, [r6, #32]
 c002b28:	6828      	ldr	r0, [r5, #0]
 c002b2a:	4633      	mov	r3, r6
 c002b2c:	9100      	str	r1, [sp, #0]
 c002b2e:	4602      	mov	r2, r0
 c002b30:	4641      	mov	r1, r8
 c002b32:	f7fd ffcf 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002b36:	6a33      	ldr	r3, [r6, #32]
 c002b38:	69f2      	ldr	r2, [r6, #28]
 c002b3a:	6828      	ldr	r0, [r5, #0]
 c002b3c:	4631      	mov	r1, r6
 c002b3e:	f7fd ffa7 	bl	c000a90 <cmox_ModularBN_Exit>
 c002b42:	0004      	movs	r4, r0
 c002b44:	d12d      	bne.n	c002ba2 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 c002b46:	2f01      	cmp	r7, #1
 c002b48:	d107      	bne.n	c002b5a <cmox_ECC_EDW_DecPoint_ed25519+0x24e>
 c002b4a:	6828      	ldr	r0, [r5, #0]
 c002b4c:	2100      	movs	r1, #0
 c002b4e:	f7ff f98c 	bl	c001e6a <cmox_bn_cmpUint>
 c002b52:	2801      	cmp	r0, #1
 c002b54:	d101      	bne.n	c002b5a <cmox_ECC_EDW_DecPoint_ed25519+0x24e>
 c002b56:	2404      	movs	r4, #4
 c002b58:	e023      	b.n	c002ba2 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 c002b5a:	69b0      	ldr	r0, [r6, #24]
 c002b5c:	6829      	ldr	r1, [r5, #0]
 c002b5e:	6802      	ldr	r2, [r0, #0]
 c002b60:	7908      	ldrb	r0, [r1, #4]
 c002b62:	6812      	ldr	r2, [r2, #0]
 c002b64:	f000 0001 	and.w	r0, r0, #1
 c002b68:	4078      	eors	r0, r7
 c002b6a:	f7fd ff42 	bl	c0009f2 <cmox_FieldBN_CondNegate>
 c002b6e:	6928      	ldr	r0, [r5, #16]
 c002b70:	2101      	movs	r1, #1
 c002b72:	f040 0002 	orr.w	r0, r0, #2
 c002b76:	6128      	str	r0, [r5, #16]
 c002b78:	68a8      	ldr	r0, [r5, #8]
 c002b7a:	f7ff f8e9 	bl	c001d50 <cmox_bn_init>
 c002b7e:	69b0      	ldr	r0, [r6, #24]
 c002b80:	6841      	ldr	r1, [r0, #4]
 c002b82:	69c8      	ldr	r0, [r1, #28]
 c002b84:	2802      	cmp	r0, #2
 c002b86:	d10c      	bne.n	c002ba2 <cmox_ECC_EDW_DecPoint_ed25519+0x296>
 c002b88:	6a30      	ldr	r0, [r6, #32]
 c002b8a:	4633      	mov	r3, r6
 c002b8c:	9000      	str	r0, [sp, #0]
 c002b8e:	68ea      	ldr	r2, [r5, #12]
 c002b90:	6869      	ldr	r1, [r5, #4]
 c002b92:	6828      	ldr	r0, [r5, #0]
 c002b94:	f7fd ff9e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002b98:	6a32      	ldr	r2, [r6, #32]
 c002b9a:	68e8      	ldr	r0, [r5, #12]
 c002b9c:	4631      	mov	r1, r6
 c002b9e:	f7fd ff6f 	bl	c000a80 <cmox_ModularBN_Enter>
 c002ba2:	69f0      	ldr	r0, [r6, #28]
 c002ba4:	a905      	add	r1, sp, #20
 c002ba6:	f7ff f8a7 	bl	c001cf8 <cmox_bn_free>
 c002baa:	69f0      	ldr	r0, [r6, #28]
 c002bac:	a903      	add	r1, sp, #12
 c002bae:	f7ff f8a3 	bl	c001cf8 <cmox_bn_free>
 c002bb2:	69f0      	ldr	r0, [r6, #28]
 c002bb4:	a907      	add	r1, sp, #28
 c002bb6:	f7ff f89f 	bl	c001cf8 <cmox_bn_free>
 c002bba:	69f0      	ldr	r0, [r6, #28]
 c002bbc:	a906      	add	r1, sp, #24
 c002bbe:	f7ff f89b 	bl	c001cf8 <cmox_bn_free>
 c002bc2:	4620      	mov	r0, r4
 c002bc4:	b008      	add	sp, #32
 c002bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0c002bca <cmox_ECC_EDW_DecPoint_ed448>:
 c002bca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c002bce:	461f      	mov	r7, r3
 c002bd0:	4605      	mov	r5, r0
 c002bd2:	4688      	mov	r8, r1
 c002bd4:	4691      	mov	r9, r2
 c002bd6:	b087      	sub	sp, #28
 c002bd8:	eb08 0009 	add.w	r0, r8, r9
 c002bdc:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 c002be0:	69a8      	ldr	r0, [r5, #24]
 c002be2:	a905      	add	r1, sp, #20
 c002be4:	09f6      	lsrs	r6, r6, #7
 c002be6:	6803      	ldr	r3, [r0, #0]
 c002be8:	69e8      	ldr	r0, [r5, #28]
 c002bea:	681c      	ldr	r4, [r3, #0]
 c002bec:	6822      	ldr	r2, [r4, #0]
 c002bee:	f7ff f878 	bl	c001ce2 <cmox_bn_alloc>
 c002bf2:	0004      	movs	r4, r0
 c002bf4:	f040 8113 	bne.w	c002e1e <cmox_ECC_EDW_DecPoint_ed448+0x254>
 c002bf8:	69a8      	ldr	r0, [r5, #24]
 c002bfa:	6801      	ldr	r1, [r0, #0]
 c002bfc:	69e8      	ldr	r0, [r5, #28]
 c002bfe:	680a      	ldr	r2, [r1, #0]
 c002c00:	a906      	add	r1, sp, #24
 c002c02:	6812      	ldr	r2, [r2, #0]
 c002c04:	f7ff f86d 	bl	c001ce2 <cmox_bn_alloc>
 c002c08:	0004      	movs	r4, r0
 c002c0a:	f040 8104 	bne.w	c002e16 <cmox_ECC_EDW_DecPoint_ed448+0x24c>
 c002c0e:	69a8      	ldr	r0, [r5, #24]
 c002c10:	6801      	ldr	r1, [r0, #0]
 c002c12:	69e8      	ldr	r0, [r5, #28]
 c002c14:	680a      	ldr	r2, [r1, #0]
 c002c16:	a903      	add	r1, sp, #12
 c002c18:	6812      	ldr	r2, [r2, #0]
 c002c1a:	f7ff f862 	bl	c001ce2 <cmox_bn_alloc>
 c002c1e:	0004      	movs	r4, r0
 c002c20:	f040 80f5 	bne.w	c002e0e <cmox_ECC_EDW_DecPoint_ed448+0x244>
 c002c24:	69a8      	ldr	r0, [r5, #24]
 c002c26:	6801      	ldr	r1, [r0, #0]
 c002c28:	69e8      	ldr	r0, [r5, #28]
 c002c2a:	680a      	ldr	r2, [r1, #0]
 c002c2c:	a904      	add	r1, sp, #16
 c002c2e:	6812      	ldr	r2, [r2, #0]
 c002c30:	f7ff f857 	bl	c001ce2 <cmox_bn_alloc>
 c002c34:	0004      	movs	r4, r0
 c002c36:	f040 80e6 	bne.w	c002e06 <cmox_ECC_EDW_DecPoint_ed448+0x23c>
 c002c3a:	687a      	ldr	r2, [r7, #4]
 c002c3c:	f1a9 0101 	sub.w	r1, r9, #1
 c002c40:	4640      	mov	r0, r8
 c002c42:	f7ff fa2e 	bl	c0020a2 <cmox_bn_fromU8LE>
 c002c46:	69a8      	ldr	r0, [r5, #24]
 c002c48:	6801      	ldr	r1, [r0, #0]
 c002c4a:	6878      	ldr	r0, [r7, #4]
 c002c4c:	6809      	ldr	r1, [r1, #0]
 c002c4e:	f7ff f8cb 	bl	c001de8 <cmox_bn_cmp>
 c002c52:	2800      	cmp	r0, #0
 c002c54:	f140 80bf 	bpl.w	c002dd6 <cmox_ECC_EDW_DecPoint_ed448+0x20c>
 c002c58:	9803      	ldr	r0, [sp, #12]
 c002c5a:	2100      	movs	r1, #0
 c002c5c:	f7ff f878 	bl	c001d50 <cmox_bn_init>
 c002c60:	9a03      	ldr	r2, [sp, #12]
 c002c62:	6879      	ldr	r1, [r7, #4]
 c002c64:	2001      	movs	r0, #1
 c002c66:	f7ff f882 	bl	c001d6e <cmox_bn_cCopy>
 c002c6a:	6a2a      	ldr	r2, [r5, #32]
 c002c6c:	9803      	ldr	r0, [sp, #12]
 c002c6e:	4629      	mov	r1, r5
 c002c70:	f7fd ff06 	bl	c000a80 <cmox_ModularBN_Enter>
 c002c74:	6a2b      	ldr	r3, [r5, #32]
 c002c76:	9904      	ldr	r1, [sp, #16]
 c002c78:	9803      	ldr	r0, [sp, #12]
 c002c7a:	462a      	mov	r2, r5
 c002c7c:	f7fd ff4d 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002c80:	69a8      	ldr	r0, [r5, #24]
 c002c82:	6801      	ldr	r1, [r0, #0]
 c002c84:	68c0      	ldr	r0, [r0, #12]
 c002c86:	680a      	ldr	r2, [r1, #0]
 c002c88:	1d01      	adds	r1, r0, #4
 c002c8a:	6838      	ldr	r0, [r7, #0]
 c002c8c:	6812      	ldr	r2, [r2, #0]
 c002c8e:	f7ff f83e 	bl	c001d0e <cmox_bn_import>
 c002c92:	69a8      	ldr	r0, [r5, #24]
 c002c94:	9b06      	ldr	r3, [sp, #24]
 c002c96:	6801      	ldr	r1, [r0, #0]
 c002c98:	9804      	ldr	r0, [sp, #16]
 c002c9a:	680a      	ldr	r2, [r1, #0]
 c002c9c:	6839      	ldr	r1, [r7, #0]
 c002c9e:	f7fd fd25 	bl	c0006ec <cmox_ModSubBN>
 c002ca2:	6a28      	ldr	r0, [r5, #32]
 c002ca4:	9a05      	ldr	r2, [sp, #20]
 c002ca6:	462b      	mov	r3, r5
 c002ca8:	9000      	str	r0, [sp, #0]
 c002caa:	69a8      	ldr	r0, [r5, #24]
 c002cac:	6801      	ldr	r1, [r0, #0]
 c002cae:	9804      	ldr	r0, [sp, #16]
 c002cb0:	6949      	ldr	r1, [r1, #20]
 c002cb2:	f7fd ff0f 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002cb6:	69a8      	ldr	r0, [r5, #24]
 c002cb8:	9b05      	ldr	r3, [sp, #20]
 c002cba:	6801      	ldr	r1, [r0, #0]
 c002cbc:	680a      	ldr	r2, [r1, #0]
 c002cbe:	6839      	ldr	r1, [r7, #0]
 c002cc0:	4618      	mov	r0, r3
 c002cc2:	f7fd fd13 	bl	c0006ec <cmox_ModSubBN>
 c002cc6:	6a2b      	ldr	r3, [r5, #32]
 c002cc8:	9903      	ldr	r1, [sp, #12]
 c002cca:	9806      	ldr	r0, [sp, #24]
 c002ccc:	462a      	mov	r2, r5
 c002cce:	f7fd ff24 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002cd2:	9903      	ldr	r1, [sp, #12]
 c002cd4:	6a2b      	ldr	r3, [r5, #32]
 c002cd6:	462a      	mov	r2, r5
 c002cd8:	4608      	mov	r0, r1
 c002cda:	f7fd ff1e 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002cde:	6a28      	ldr	r0, [r5, #32]
 c002ce0:	9a03      	ldr	r2, [sp, #12]
 c002ce2:	9906      	ldr	r1, [sp, #24]
 c002ce4:	9000      	str	r0, [sp, #0]
 c002ce6:	462b      	mov	r3, r5
 c002ce8:	4610      	mov	r0, r2
 c002cea:	f7fd fef3 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002cee:	6a2b      	ldr	r3, [r5, #32]
 c002cf0:	9904      	ldr	r1, [sp, #16]
 c002cf2:	9805      	ldr	r0, [sp, #20]
 c002cf4:	462a      	mov	r2, r5
 c002cf6:	f7fd ff10 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002cfa:	6a28      	ldr	r0, [r5, #32]
 c002cfc:	9a04      	ldr	r2, [sp, #16]
 c002cfe:	462b      	mov	r3, r5
 c002d00:	9000      	str	r0, [sp, #0]
 c002d02:	9805      	ldr	r0, [sp, #20]
 c002d04:	4611      	mov	r1, r2
 c002d06:	f7fd fee5 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002d0a:	6a28      	ldr	r0, [r5, #32]
 c002d0c:	9a03      	ldr	r2, [sp, #12]
 c002d0e:	9904      	ldr	r1, [sp, #16]
 c002d10:	9000      	str	r0, [sp, #0]
 c002d12:	462b      	mov	r3, r5
 c002d14:	4610      	mov	r0, r2
 c002d16:	f7fd fedd 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002d1a:	69a8      	ldr	r0, [r5, #24]
 c002d1c:	9a04      	ldr	r2, [sp, #16]
 c002d1e:	f06f 0102 	mvn.w	r1, #2
 c002d22:	6803      	ldr	r3, [r0, #0]
 c002d24:	6818      	ldr	r0, [r3, #0]
 c002d26:	f7fd fd94 	bl	c000852 <cmox_AddBN_Int>
 c002d2a:	9a04      	ldr	r2, [sp, #16]
 c002d2c:	2102      	movs	r1, #2
 c002d2e:	4610      	mov	r0, r2
 c002d30:	f7fd fc20 	bl	c000574 <cmox_RightShiftBN>
 c002d34:	69a8      	ldr	r0, [r5, #24]
 c002d36:	69c4      	ldr	r4, [r0, #28]
 c002d38:	6a28      	ldr	r0, [r5, #32]
 c002d3a:	9002      	str	r0, [sp, #8]
 c002d3c:	69e9      	ldr	r1, [r5, #28]
 c002d3e:	9803      	ldr	r0, [sp, #12]
 c002d40:	9101      	str	r1, [sp, #4]
 c002d42:	683a      	ldr	r2, [r7, #0]
 c002d44:	9904      	ldr	r1, [sp, #16]
 c002d46:	9200      	str	r2, [sp, #0]
 c002d48:	6863      	ldr	r3, [r4, #4]
 c002d4a:	6824      	ldr	r4, [r4, #0]
 c002d4c:	462a      	mov	r2, r5
 c002d4e:	47a0      	blx	r4
 c002d50:	0004      	movs	r4, r0
 c002d52:	d154      	bne.n	c002dfe <cmox_ECC_EDW_DecPoint_ed448+0x234>
 c002d54:	6a28      	ldr	r0, [r5, #32]
 c002d56:	9a03      	ldr	r2, [sp, #12]
 c002d58:	9905      	ldr	r1, [sp, #20]
 c002d5a:	9000      	str	r0, [sp, #0]
 c002d5c:	9806      	ldr	r0, [sp, #24]
 c002d5e:	462b      	mov	r3, r5
 c002d60:	f7fd feb8 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002d64:	6a2b      	ldr	r3, [r5, #32]
 c002d66:	9904      	ldr	r1, [sp, #16]
 c002d68:	9806      	ldr	r0, [sp, #24]
 c002d6a:	462a      	mov	r2, r5
 c002d6c:	f7fd fed5 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002d70:	6a28      	ldr	r0, [r5, #32]
 c002d72:	9a03      	ldr	r2, [sp, #12]
 c002d74:	9904      	ldr	r1, [sp, #16]
 c002d76:	9000      	str	r0, [sp, #0]
 c002d78:	462b      	mov	r3, r5
 c002d7a:	4610      	mov	r0, r2
 c002d7c:	f7fd feaa 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002d80:	6a29      	ldr	r1, [r5, #32]
 c002d82:	6838      	ldr	r0, [r7, #0]
 c002d84:	462b      	mov	r3, r5
 c002d86:	9100      	str	r1, [sp, #0]
 c002d88:	9903      	ldr	r1, [sp, #12]
 c002d8a:	4602      	mov	r2, r0
 c002d8c:	f7fd fea2 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002d90:	6a2b      	ldr	r3, [r5, #32]
 c002d92:	9903      	ldr	r1, [sp, #12]
 c002d94:	6838      	ldr	r0, [r7, #0]
 c002d96:	462a      	mov	r2, r5
 c002d98:	f7fd febf 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002d9c:	6a28      	ldr	r0, [r5, #32]
 c002d9e:	9a03      	ldr	r2, [sp, #12]
 c002da0:	462b      	mov	r3, r5
 c002da2:	9000      	str	r0, [sp, #0]
 c002da4:	9805      	ldr	r0, [sp, #20]
 c002da6:	4611      	mov	r1, r2
 c002da8:	f7fd fe94 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002dac:	9906      	ldr	r1, [sp, #24]
 c002dae:	9803      	ldr	r0, [sp, #12]
 c002db0:	f7ff f81a 	bl	c001de8 <cmox_bn_cmp>
 c002db4:	b978      	cbnz	r0, c002dd6 <cmox_ECC_EDW_DecPoint_ed448+0x20c>
 c002db6:	6a2b      	ldr	r3, [r5, #32]
 c002db8:	69ea      	ldr	r2, [r5, #28]
 c002dba:	6838      	ldr	r0, [r7, #0]
 c002dbc:	4629      	mov	r1, r5
 c002dbe:	f7fd fe67 	bl	c000a90 <cmox_ModularBN_Exit>
 c002dc2:	0004      	movs	r4, r0
 c002dc4:	d11b      	bne.n	c002dfe <cmox_ECC_EDW_DecPoint_ed448+0x234>
 c002dc6:	2e01      	cmp	r6, #1
 c002dc8:	d107      	bne.n	c002dda <cmox_ECC_EDW_DecPoint_ed448+0x210>
 c002dca:	6838      	ldr	r0, [r7, #0]
 c002dcc:	2100      	movs	r1, #0
 c002dce:	f7ff f84c 	bl	c001e6a <cmox_bn_cmpUint>
 c002dd2:	2801      	cmp	r0, #1
 c002dd4:	d101      	bne.n	c002dda <cmox_ECC_EDW_DecPoint_ed448+0x210>
 c002dd6:	2404      	movs	r4, #4
 c002dd8:	e011      	b.n	c002dfe <cmox_ECC_EDW_DecPoint_ed448+0x234>
 c002dda:	69a8      	ldr	r0, [r5, #24]
 c002ddc:	6839      	ldr	r1, [r7, #0]
 c002dde:	6802      	ldr	r2, [r0, #0]
 c002de0:	7908      	ldrb	r0, [r1, #4]
 c002de2:	6812      	ldr	r2, [r2, #0]
 c002de4:	f000 0001 	and.w	r0, r0, #1
 c002de8:	4070      	eors	r0, r6
 c002dea:	f7fd fe02 	bl	c0009f2 <cmox_FieldBN_CondNegate>
 c002dee:	68b8      	ldr	r0, [r7, #8]
 c002df0:	2101      	movs	r1, #1
 c002df2:	f7fe ffad 	bl	c001d50 <cmox_bn_init>
 c002df6:	6938      	ldr	r0, [r7, #16]
 c002df8:	f040 0002 	orr.w	r0, r0, #2
 c002dfc:	6138      	str	r0, [r7, #16]
 c002dfe:	69e8      	ldr	r0, [r5, #28]
 c002e00:	a904      	add	r1, sp, #16
 c002e02:	f7fe ff79 	bl	c001cf8 <cmox_bn_free>
 c002e06:	69e8      	ldr	r0, [r5, #28]
 c002e08:	a903      	add	r1, sp, #12
 c002e0a:	f7fe ff75 	bl	c001cf8 <cmox_bn_free>
 c002e0e:	69e8      	ldr	r0, [r5, #28]
 c002e10:	a906      	add	r1, sp, #24
 c002e12:	f7fe ff71 	bl	c001cf8 <cmox_bn_free>
 c002e16:	69e8      	ldr	r0, [r5, #28]
 c002e18:	a905      	add	r1, sp, #20
 c002e1a:	f7fe ff6d 	bl	c001cf8 <cmox_bn_free>
 c002e1e:	4620      	mov	r0, r4
 c002e20:	b007      	add	sp, #28
 c002e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c002e26 <cmox_ECC_MONTY_Clamping>:
 c002e26:	b570      	push	{r4, r5, r6, lr}
 c002e28:	4606      	mov	r6, r0
 c002e2a:	69b0      	ldr	r0, [r6, #24]
 c002e2c:	460c      	mov	r4, r1
 c002e2e:	4615      	mov	r5, r2
 c002e30:	6801      	ldr	r1, [r0, #0]
 c002e32:	6808      	ldr	r0, [r1, #0]
 c002e34:	6802      	ldr	r2, [r0, #0]
 c002e36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 c002e3a:	f7fd feaf 	bl	c000b9c <cmox_mathUtils_bitLength>
 c002e3e:	69b1      	ldr	r1, [r6, #24]
 c002e40:	6862      	ldr	r2, [r4, #4]
 c002e42:	680b      	ldr	r3, [r1, #0]
 c002e44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c002e48:	699e      	ldr	r6, [r3, #24]
 c002e4a:	1e76      	subs	r6, r6, #1
 c002e4c:	404e      	eors	r6, r1
 c002e4e:	4032      	ands	r2, r6
 c002e50:	6062      	str	r2, [r4, #4]
 c002e52:	f1c0 0220 	rsb	r2, r0, #32
 c002e56:	40d1      	lsrs	r1, r2
 c002e58:	6822      	ldr	r2, [r4, #0]
 c002e5a:	2601      	movs	r6, #1
 c002e5c:	1e40      	subs	r0, r0, #1
 c002e5e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 c002e62:	4086      	lsls	r6, r0
 c002e64:	400b      	ands	r3, r1
 c002e66:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 c002e6a:	6822      	ldr	r2, [r4, #0]
 c002e6c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 c002e70:	4333      	orrs	r3, r6
 c002e72:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 c002e76:	6828      	ldr	r0, [r5, #0]
 c002e78:	6802      	ldr	r2, [r0, #0]
 c002e7a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 c002e7e:	4019      	ands	r1, r3
 c002e80:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 c002e84:	bd70      	pop	{r4, r5, r6, pc}

0c002e86 <cmox_ECC_SW_AddPoints_JacoAff>:
 c002e86:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c002e8a:	4605      	mov	r5, r0
 c002e8c:	460e      	mov	r6, r1
 c002e8e:	461f      	mov	r7, r3
 c002e90:	b084      	sub	sp, #16
 c002e92:	6968      	ldr	r0, [r5, #20]
 c002e94:	f8d0 8000 	ldr.w	r8, [r0]
 c002e98:	f8d0 9004 	ldr.w	r9, [r0, #4]
 c002e9c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 c002ea0:	68c0      	ldr	r0, [r0, #12]
 c002ea2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 c002ea4:	462a      	mov	r2, r5
 c002ea6:	9001      	str	r0, [sp, #4]
 c002ea8:	6879      	ldr	r1, [r7, #4]
 c002eaa:	f8d7 b000 	ldr.w	fp, [r7]
 c002eae:	9103      	str	r1, [sp, #12]
 c002eb0:	68b8      	ldr	r0, [r7, #8]
 c002eb2:	4641      	mov	r1, r8
 c002eb4:	9002      	str	r0, [sp, #8]
 c002eb6:	6a2b      	ldr	r3, [r5, #32]
 c002eb8:	68b0      	ldr	r0, [r6, #8]
 c002eba:	f7fd fe2e 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002ebe:	6a28      	ldr	r0, [r5, #32]
 c002ec0:	462b      	mov	r3, r5
 c002ec2:	464a      	mov	r2, r9
 c002ec4:	9000      	str	r0, [sp, #0]
 c002ec6:	68b0      	ldr	r0, [r6, #8]
 c002ec8:	4641      	mov	r1, r8
 c002eca:	f7fd fe03 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002ece:	6a28      	ldr	r0, [r5, #32]
 c002ed0:	9904      	ldr	r1, [sp, #16]
 c002ed2:	462b      	mov	r3, r5
 c002ed4:	9000      	str	r0, [sp, #0]
 c002ed6:	6809      	ldr	r1, [r1, #0]
 c002ed8:	4642      	mov	r2, r8
 c002eda:	4640      	mov	r0, r8
 c002edc:	f7fd fdfa 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002ee0:	6a28      	ldr	r0, [r5, #32]
 c002ee2:	9904      	ldr	r1, [sp, #16]
 c002ee4:	462b      	mov	r3, r5
 c002ee6:	9000      	str	r0, [sp, #0]
 c002ee8:	6849      	ldr	r1, [r1, #4]
 c002eea:	464a      	mov	r2, r9
 c002eec:	4648      	mov	r0, r9
 c002eee:	f7fd fdf1 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002ef2:	69a8      	ldr	r0, [r5, #24]
 c002ef4:	4643      	mov	r3, r8
 c002ef6:	6801      	ldr	r1, [r0, #0]
 c002ef8:	4640      	mov	r0, r8
 c002efa:	680a      	ldr	r2, [r1, #0]
 c002efc:	6831      	ldr	r1, [r6, #0]
 c002efe:	f7fd fbf5 	bl	c0006ec <cmox_ModSubBN>
 c002f02:	69a8      	ldr	r0, [r5, #24]
 c002f04:	464b      	mov	r3, r9
 c002f06:	6801      	ldr	r1, [r0, #0]
 c002f08:	4648      	mov	r0, r9
 c002f0a:	680a      	ldr	r2, [r1, #0]
 c002f0c:	6871      	ldr	r1, [r6, #4]
 c002f0e:	f7fd fbed 	bl	c0006ec <cmox_ModSubBN>
 c002f12:	b1ec      	cbz	r4, c002f50 <cmox_ECC_SW_AddPoints_JacoAff+0xca>
 c002f14:	2100      	movs	r1, #0
 c002f16:	4640      	mov	r0, r8
 c002f18:	f7fe ffa7 	bl	c001e6a <cmox_bn_cmpUint>
 c002f1c:	6020      	str	r0, [r4, #0]
 c002f1e:	683a      	ldr	r2, [r7, #0]
 c002f20:	4649      	mov	r1, r9
 c002f22:	f7fe ff5c 	bl	c001dde <cmox_bn_mux>
 c002f26:	4683      	mov	fp, r0
 c002f28:	687a      	ldr	r2, [r7, #4]
 c002f2a:	6820      	ldr	r0, [r4, #0]
 c002f2c:	4649      	mov	r1, r9
 c002f2e:	f7fe ff56 	bl	c001dde <cmox_bn_mux>
 c002f32:	9003      	str	r0, [sp, #12]
 c002f34:	68ba      	ldr	r2, [r7, #8]
 c002f36:	6820      	ldr	r0, [r4, #0]
 c002f38:	4649      	mov	r1, r9
 c002f3a:	f7fe ff50 	bl	c001dde <cmox_bn_mux>
 c002f3e:	9002      	str	r0, [sp, #8]
 c002f40:	2100      	movs	r1, #0
 c002f42:	4648      	mov	r0, r9
 c002f44:	f7fe ff91 	bl	c001e6a <cmox_bn_cmpUint>
 c002f48:	6821      	ldr	r1, [r4, #0]
 c002f4a:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
 c002f4e:	6021      	str	r1, [r4, #0]
 c002f50:	6a28      	ldr	r0, [r5, #32]
 c002f52:	9a02      	ldr	r2, [sp, #8]
 c002f54:	462b      	mov	r3, r5
 c002f56:	9000      	str	r0, [sp, #0]
 c002f58:	68b0      	ldr	r0, [r6, #8]
 c002f5a:	4641      	mov	r1, r8
 c002f5c:	f7fd fdba 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002f60:	6a2b      	ldr	r3, [r5, #32]
 c002f62:	462a      	mov	r2, r5
 c002f64:	4651      	mov	r1, sl
 c002f66:	4640      	mov	r0, r8
 c002f68:	f7fd fdd7 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002f6c:	6a28      	ldr	r0, [r5, #32]
 c002f6e:	9a01      	ldr	r2, [sp, #4]
 c002f70:	462b      	mov	r3, r5
 c002f72:	9000      	str	r0, [sp, #0]
 c002f74:	4651      	mov	r1, sl
 c002f76:	4640      	mov	r0, r8
 c002f78:	f7fd fdac 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002f7c:	6a28      	ldr	r0, [r5, #32]
 c002f7e:	462b      	mov	r3, r5
 c002f80:	4652      	mov	r2, sl
 c002f82:	9000      	str	r0, [sp, #0]
 c002f84:	6830      	ldr	r0, [r6, #0]
 c002f86:	4651      	mov	r1, sl
 c002f88:	f7fd fda4 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002f8c:	69a8      	ldr	r0, [r5, #24]
 c002f8e:	4643      	mov	r3, r8
 c002f90:	6801      	ldr	r1, [r0, #0]
 c002f92:	4650      	mov	r0, sl
 c002f94:	680a      	ldr	r2, [r1, #0]
 c002f96:	4651      	mov	r1, sl
 c002f98:	f7fd fb17 	bl	c0005ca <cmox_ModAddBN>
 c002f9c:	6a2b      	ldr	r3, [r5, #32]
 c002f9e:	462a      	mov	r2, r5
 c002fa0:	4659      	mov	r1, fp
 c002fa2:	4648      	mov	r0, r9
 c002fa4:	f7fd fdb9 	bl	c000b1a <cmox_ModularBN_Sqr>
 c002fa8:	69a8      	ldr	r0, [r5, #24]
 c002faa:	465b      	mov	r3, fp
 c002fac:	6801      	ldr	r1, [r0, #0]
 c002fae:	4658      	mov	r0, fp
 c002fb0:	680a      	ldr	r2, [r1, #0]
 c002fb2:	4641      	mov	r1, r8
 c002fb4:	f7fd fb9a 	bl	c0006ec <cmox_ModSubBN>
 c002fb8:	69a8      	ldr	r0, [r5, #24]
 c002fba:	465b      	mov	r3, fp
 c002fbc:	6801      	ldr	r1, [r0, #0]
 c002fbe:	4658      	mov	r0, fp
 c002fc0:	680a      	ldr	r2, [r1, #0]
 c002fc2:	9901      	ldr	r1, [sp, #4]
 c002fc4:	f7fd fb92 	bl	c0006ec <cmox_ModSubBN>
 c002fc8:	69a8      	ldr	r0, [r5, #24]
 c002fca:	4653      	mov	r3, sl
 c002fcc:	6801      	ldr	r1, [r0, #0]
 c002fce:	4650      	mov	r0, sl
 c002fd0:	680a      	ldr	r2, [r1, #0]
 c002fd2:	4659      	mov	r1, fp
 c002fd4:	f7fd fb8a 	bl	c0006ec <cmox_ModSubBN>
 c002fd8:	6a28      	ldr	r0, [r5, #32]
 c002fda:	462b      	mov	r3, r5
 c002fdc:	4652      	mov	r2, sl
 c002fde:	9000      	str	r0, [sp, #0]
 c002fe0:	4651      	mov	r1, sl
 c002fe2:	4648      	mov	r0, r9
 c002fe4:	f7fd fd76 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002fe8:	6a28      	ldr	r0, [r5, #32]
 c002fea:	9a01      	ldr	r2, [sp, #4]
 c002fec:	462b      	mov	r3, r5
 c002fee:	9000      	str	r0, [sp, #0]
 c002ff0:	6871      	ldr	r1, [r6, #4]
 c002ff2:	4610      	mov	r0, r2
 c002ff4:	f7fd fd6e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c002ff8:	69a8      	ldr	r0, [r5, #24]
 c002ffa:	9b03      	ldr	r3, [sp, #12]
 c002ffc:	6801      	ldr	r1, [r0, #0]
 c002ffe:	4650      	mov	r0, sl
 c003000:	680a      	ldr	r2, [r1, #0]
 c003002:	9901      	ldr	r1, [sp, #4]
 c003004:	b005      	add	sp, #20
 c003006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00300a:	f7fd bb6f 	b.w	c0006ec <cmox_ModSubBN>

0c00300e <cmox_ECC_SW_AddPoints_Jacobian>:
 c00300e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c003012:	4604      	mov	r4, r0
 c003014:	6960      	ldr	r0, [r4, #20]
 c003016:	461e      	mov	r6, r3
 c003018:	f8d0 9000 	ldr.w	r9, [r0]
 c00301c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 c003020:	f8d0 8008 	ldr.w	r8, [r0, #8]
 c003024:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 c003028:	6a23      	ldr	r3, [r4, #32]
 c00302a:	460d      	mov	r5, r1
 c00302c:	68a8      	ldr	r0, [r5, #8]
 c00302e:	4617      	mov	r7, r2
 c003030:	4622      	mov	r2, r4
 c003032:	4649      	mov	r1, r9
 c003034:	f7fd fd71 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003038:	6a20      	ldr	r0, [r4, #32]
 c00303a:	4623      	mov	r3, r4
 c00303c:	4652      	mov	r2, sl
 c00303e:	9000      	str	r0, [sp, #0]
 c003040:	6838      	ldr	r0, [r7, #0]
 c003042:	4649      	mov	r1, r9
 c003044:	f7fd fd46 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003048:	6a20      	ldr	r0, [r4, #32]
 c00304a:	4623      	mov	r3, r4
 c00304c:	464a      	mov	r2, r9
 c00304e:	9000      	str	r0, [sp, #0]
 c003050:	68a8      	ldr	r0, [r5, #8]
 c003052:	4649      	mov	r1, r9
 c003054:	f7fd fd3e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003058:	6a20      	ldr	r0, [r4, #32]
 c00305a:	4623      	mov	r3, r4
 c00305c:	464a      	mov	r2, r9
 c00305e:	9000      	str	r0, [sp, #0]
 c003060:	6878      	ldr	r0, [r7, #4]
 c003062:	4649      	mov	r1, r9
 c003064:	f7fd fd36 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003068:	6a23      	ldr	r3, [r4, #32]
 c00306a:	68b8      	ldr	r0, [r7, #8]
 c00306c:	4622      	mov	r2, r4
 c00306e:	4641      	mov	r1, r8
 c003070:	f7fd fd53 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003074:	6a20      	ldr	r0, [r4, #32]
 c003076:	4623      	mov	r3, r4
 c003078:	465a      	mov	r2, fp
 c00307a:	9000      	str	r0, [sp, #0]
 c00307c:	6828      	ldr	r0, [r5, #0]
 c00307e:	4641      	mov	r1, r8
 c003080:	f7fd fd28 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003084:	6a20      	ldr	r0, [r4, #32]
 c003086:	4623      	mov	r3, r4
 c003088:	4642      	mov	r2, r8
 c00308a:	9000      	str	r0, [sp, #0]
 c00308c:	68b8      	ldr	r0, [r7, #8]
 c00308e:	4641      	mov	r1, r8
 c003090:	f7fd fd20 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003094:	6a20      	ldr	r0, [r4, #32]
 c003096:	4623      	mov	r3, r4
 c003098:	4642      	mov	r2, r8
 c00309a:	9000      	str	r0, [sp, #0]
 c00309c:	6868      	ldr	r0, [r5, #4]
 c00309e:	4641      	mov	r1, r8
 c0030a0:	f7fd fd18 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0030a4:	69a0      	ldr	r0, [r4, #24]
 c0030a6:	4653      	mov	r3, sl
 c0030a8:	6801      	ldr	r1, [r0, #0]
 c0030aa:	4650      	mov	r0, sl
 c0030ac:	680a      	ldr	r2, [r1, #0]
 c0030ae:	4659      	mov	r1, fp
 c0030b0:	f7fd fb1c 	bl	c0006ec <cmox_ModSubBN>
 c0030b4:	69a0      	ldr	r0, [r4, #24]
 c0030b6:	464b      	mov	r3, r9
 c0030b8:	6801      	ldr	r1, [r0, #0]
 c0030ba:	4648      	mov	r0, r9
 c0030bc:	680a      	ldr	r2, [r1, #0]
 c0030be:	4641      	mov	r1, r8
 c0030c0:	f7fd fb14 	bl	c0006ec <cmox_ModSubBN>
 c0030c4:	6a20      	ldr	r0, [r4, #32]
 c0030c6:	4623      	mov	r3, r4
 c0030c8:	4651      	mov	r1, sl
 c0030ca:	9000      	str	r0, [sp, #0]
 c0030cc:	6832      	ldr	r2, [r6, #0]
 c0030ce:	68b8      	ldr	r0, [r7, #8]
 c0030d0:	f7fd fd00 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0030d4:	6a20      	ldr	r0, [r4, #32]
 c0030d6:	4623      	mov	r3, r4
 c0030d8:	9000      	str	r0, [sp, #0]
 c0030da:	68b2      	ldr	r2, [r6, #8]
 c0030dc:	6831      	ldr	r1, [r6, #0]
 c0030de:	68a8      	ldr	r0, [r5, #8]
 c0030e0:	f7fd fcf8 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0030e4:	6a23      	ldr	r3, [r4, #32]
 c0030e6:	6831      	ldr	r1, [r6, #0]
 c0030e8:	4622      	mov	r2, r4
 c0030ea:	4650      	mov	r0, sl
 c0030ec:	f7fd fd15 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0030f0:	6a20      	ldr	r0, [r4, #32]
 c0030f2:	4623      	mov	r3, r4
 c0030f4:	9000      	str	r0, [sp, #0]
 c0030f6:	6872      	ldr	r2, [r6, #4]
 c0030f8:	6831      	ldr	r1, [r6, #0]
 c0030fa:	4650      	mov	r0, sl
 c0030fc:	f7fd fcea 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003100:	6a20      	ldr	r0, [r4, #32]
 c003102:	4623      	mov	r3, r4
 c003104:	4652      	mov	r2, sl
 c003106:	9000      	str	r0, [sp, #0]
 c003108:	6831      	ldr	r1, [r6, #0]
 c00310a:	4658      	mov	r0, fp
 c00310c:	f7fd fce2 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003110:	6a23      	ldr	r3, [r4, #32]
 c003112:	6831      	ldr	r1, [r6, #0]
 c003114:	4622      	mov	r2, r4
 c003116:	4648      	mov	r0, r9
 c003118:	f7fd fcff 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00311c:	69a1      	ldr	r1, [r4, #24]
 c00311e:	6830      	ldr	r0, [r6, #0]
 c003120:	680a      	ldr	r2, [r1, #0]
 c003122:	6871      	ldr	r1, [r6, #4]
 c003124:	4603      	mov	r3, r0
 c003126:	6812      	ldr	r2, [r2, #0]
 c003128:	f7fd fae0 	bl	c0006ec <cmox_ModSubBN>
 c00312c:	6a20      	ldr	r0, [r4, #32]
 c00312e:	6871      	ldr	r1, [r6, #4]
 c003130:	4623      	mov	r3, r4
 c003132:	9000      	str	r0, [sp, #0]
 c003134:	460a      	mov	r2, r1
 c003136:	4640      	mov	r0, r8
 c003138:	f7fd fccc 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00313c:	69a0      	ldr	r0, [r4, #24]
 c00313e:	4642      	mov	r2, r8
 c003140:	6801      	ldr	r1, [r0, #0]
 c003142:	4650      	mov	r0, sl
 c003144:	6809      	ldr	r1, [r1, #0]
 c003146:	f7fd fbf5 	bl	c000934 <cmox_FieldBN_Mul2>
 c00314a:	69a1      	ldr	r1, [r4, #24]
 c00314c:	6830      	ldr	r0, [r6, #0]
 c00314e:	680a      	ldr	r2, [r1, #0]
 c003150:	4641      	mov	r1, r8
 c003152:	4603      	mov	r3, r0
 c003154:	6812      	ldr	r2, [r2, #0]
 c003156:	f7fd fac9 	bl	c0006ec <cmox_ModSubBN>
 c00315a:	69a0      	ldr	r0, [r4, #24]
 c00315c:	4653      	mov	r3, sl
 c00315e:	6801      	ldr	r1, [r0, #0]
 c003160:	4650      	mov	r0, sl
 c003162:	680a      	ldr	r2, [r1, #0]
 c003164:	6831      	ldr	r1, [r6, #0]
 c003166:	f7fd fac1 	bl	c0006ec <cmox_ModSubBN>
 c00316a:	6a20      	ldr	r0, [r4, #32]
 c00316c:	4623      	mov	r3, r4
 c00316e:	464a      	mov	r2, r9
 c003170:	9000      	str	r0, [sp, #0]
 c003172:	4651      	mov	r1, sl
 c003174:	4648      	mov	r0, r9
 c003176:	f7fd fcad 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00317a:	69a0      	ldr	r0, [r4, #24]
 c00317c:	6871      	ldr	r1, [r6, #4]
 c00317e:	6802      	ldr	r2, [r0, #0]
 c003180:	4648      	mov	r0, r9
 c003182:	460b      	mov	r3, r1
 c003184:	6812      	ldr	r2, [r2, #0]
 c003186:	b001      	add	sp, #4
 c003188:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00318c:	f7fd baae 	b.w	c0006ec <cmox_ModSubBN>

0c003190 <cmox_ECC_SW_DblPoint_Jac_a3>:
 c003190:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c003194:	4604      	mov	r4, r0
 c003196:	460d      	mov	r5, r1
 c003198:	6960      	ldr	r0, [r4, #20]
 c00319a:	4616      	mov	r6, r2
 c00319c:	4698      	mov	r8, r3
 c00319e:	6881      	ldr	r1, [r0, #8]
 c0031a0:	6807      	ldr	r7, [r0, #0]
 c0031a2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 c0031a6:	9101      	str	r1, [sp, #4]
 c0031a8:	6831      	ldr	r1, [r6, #0]
 c0031aa:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 c0031ae:	463a      	mov	r2, r7
 c0031b0:	4640      	mov	r0, r8
 c0031b2:	f7fe fe14 	bl	c001dde <cmox_bn_mux>
 c0031b6:	6871      	ldr	r1, [r6, #4]
 c0031b8:	4683      	mov	fp, r0
 c0031ba:	463a      	mov	r2, r7
 c0031bc:	4640      	mov	r0, r8
 c0031be:	f7fe fe0e 	bl	c001dde <cmox_bn_mux>
 c0031c2:	9002      	str	r0, [sp, #8]
 c0031c4:	68b1      	ldr	r1, [r6, #8]
 c0031c6:	463a      	mov	r2, r7
 c0031c8:	4640      	mov	r0, r8
 c0031ca:	f7fe fe08 	bl	c001dde <cmox_bn_mux>
 c0031ce:	4606      	mov	r6, r0
 c0031d0:	6a23      	ldr	r3, [r4, #32]
 c0031d2:	68a8      	ldr	r0, [r5, #8]
 c0031d4:	4622      	mov	r2, r4
 c0031d6:	4639      	mov	r1, r7
 c0031d8:	f7fd fc9f 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0031dc:	69a0      	ldr	r0, [r4, #24]
 c0031de:	464b      	mov	r3, r9
 c0031e0:	6801      	ldr	r1, [r0, #0]
 c0031e2:	6828      	ldr	r0, [r5, #0]
 c0031e4:	680a      	ldr	r2, [r1, #0]
 c0031e6:	4639      	mov	r1, r7
 c0031e8:	f7fd f9ef 	bl	c0005ca <cmox_ModAddBN>
 c0031ec:	69a0      	ldr	r0, [r4, #24]
 c0031ee:	463b      	mov	r3, r7
 c0031f0:	6801      	ldr	r1, [r0, #0]
 c0031f2:	6828      	ldr	r0, [r5, #0]
 c0031f4:	680a      	ldr	r2, [r1, #0]
 c0031f6:	4639      	mov	r1, r7
 c0031f8:	f7fd fa78 	bl	c0006ec <cmox_ModSubBN>
 c0031fc:	6a20      	ldr	r0, [r4, #32]
 c0031fe:	4623      	mov	r3, r4
 c003200:	463a      	mov	r2, r7
 c003202:	9000      	str	r0, [sp, #0]
 c003204:	4649      	mov	r1, r9
 c003206:	4638      	mov	r0, r7
 c003208:	f7fd fc64 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00320c:	69a0      	ldr	r0, [r4, #24]
 c00320e:	464a      	mov	r2, r9
 c003210:	6801      	ldr	r1, [r0, #0]
 c003212:	4638      	mov	r0, r7
 c003214:	6809      	ldr	r1, [r1, #0]
 c003216:	f7fd fb3b 	bl	c000890 <cmox_FieldBN_Div2>
 c00321a:	69a0      	ldr	r0, [r4, #24]
 c00321c:	463b      	mov	r3, r7
 c00321e:	6801      	ldr	r1, [r0, #0]
 c003220:	4638      	mov	r0, r7
 c003222:	680a      	ldr	r2, [r1, #0]
 c003224:	4649      	mov	r1, r9
 c003226:	f7fd f9d0 	bl	c0005ca <cmox_ModAddBN>
 c00322a:	6a23      	ldr	r3, [r4, #32]
 c00322c:	6868      	ldr	r0, [r5, #4]
 c00322e:	4622      	mov	r2, r4
 c003230:	4649      	mov	r1, r9
 c003232:	f7fd fc72 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003236:	6a20      	ldr	r0, [r4, #32]
 c003238:	9a01      	ldr	r2, [sp, #4]
 c00323a:	4623      	mov	r3, r4
 c00323c:	9000      	str	r0, [sp, #0]
 c00323e:	6828      	ldr	r0, [r5, #0]
 c003240:	4649      	mov	r1, r9
 c003242:	f7fd fc47 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003246:	6a23      	ldr	r3, [r4, #32]
 c003248:	4622      	mov	r2, r4
 c00324a:	4651      	mov	r1, sl
 c00324c:	4638      	mov	r0, r7
 c00324e:	f7fd fc64 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003252:	69a0      	ldr	r0, [r4, #24]
 c003254:	4653      	mov	r3, sl
 c003256:	6801      	ldr	r1, [r0, #0]
 c003258:	4650      	mov	r0, sl
 c00325a:	680a      	ldr	r2, [r1, #0]
 c00325c:	9901      	ldr	r1, [sp, #4]
 c00325e:	f7fd fa45 	bl	c0006ec <cmox_ModSubBN>
 c003262:	69a0      	ldr	r0, [r4, #24]
 c003264:	465b      	mov	r3, fp
 c003266:	6801      	ldr	r1, [r0, #0]
 c003268:	4650      	mov	r0, sl
 c00326a:	680a      	ldr	r2, [r1, #0]
 c00326c:	9901      	ldr	r1, [sp, #4]
 c00326e:	f7fd fa3d 	bl	c0006ec <cmox_ModSubBN>
 c003272:	6a20      	ldr	r0, [r4, #32]
 c003274:	4623      	mov	r3, r4
 c003276:	4632      	mov	r2, r6
 c003278:	9000      	str	r0, [sp, #0]
 c00327a:	68a9      	ldr	r1, [r5, #8]
 c00327c:	6868      	ldr	r0, [r5, #4]
 c00327e:	f7fd fc29 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003282:	6a23      	ldr	r3, [r4, #32]
 c003284:	4622      	mov	r2, r4
 c003286:	4649      	mov	r1, r9
 c003288:	4648      	mov	r0, r9
 c00328a:	f7fd fc46 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00328e:	69a0      	ldr	r0, [r4, #24]
 c003290:	4653      	mov	r3, sl
 c003292:	6801      	ldr	r1, [r0, #0]
 c003294:	9801      	ldr	r0, [sp, #4]
 c003296:	680a      	ldr	r2, [r1, #0]
 c003298:	4659      	mov	r1, fp
 c00329a:	f7fd fa27 	bl	c0006ec <cmox_ModSubBN>
 c00329e:	6a20      	ldr	r0, [r4, #32]
 c0032a0:	4623      	mov	r3, r4
 c0032a2:	463a      	mov	r2, r7
 c0032a4:	9000      	str	r0, [sp, #0]
 c0032a6:	4651      	mov	r1, sl
 c0032a8:	4638      	mov	r0, r7
 c0032aa:	f7fd fc13 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0032ae:	69a0      	ldr	r0, [r4, #24]
 c0032b0:	9b02      	ldr	r3, [sp, #8]
 c0032b2:	6801      	ldr	r1, [r0, #0]
 c0032b4:	4638      	mov	r0, r7
 c0032b6:	680a      	ldr	r2, [r1, #0]
 c0032b8:	4649      	mov	r1, r9
 c0032ba:	b003      	add	sp, #12
 c0032bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0032c0:	f7fd ba14 	b.w	c0006ec <cmox_ModSubBN>

0c0032c4 <cmox_ECC_SW_DblPoint_Jacobian>:
 c0032c4:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0032c8:	4604      	mov	r4, r0
 c0032ca:	6960      	ldr	r0, [r4, #20]
 c0032cc:	6807      	ldr	r7, [r0, #0]
 c0032ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 c0032d2:	f8d0 9008 	ldr.w	r9, [r0, #8]
 c0032d6:	68c0      	ldr	r0, [r0, #12]
 c0032d8:	460d      	mov	r5, r1
 c0032da:	4616      	mov	r6, r2
 c0032dc:	9001      	str	r0, [sp, #4]
 c0032de:	6831      	ldr	r1, [r6, #0]
 c0032e0:	9802      	ldr	r0, [sp, #8]
 c0032e2:	463a      	mov	r2, r7
 c0032e4:	f7fe fd7b 	bl	c001dde <cmox_bn_mux>
 c0032e8:	4682      	mov	sl, r0
 c0032ea:	6871      	ldr	r1, [r6, #4]
 c0032ec:	9802      	ldr	r0, [sp, #8]
 c0032ee:	463a      	mov	r2, r7
 c0032f0:	f7fe fd75 	bl	c001dde <cmox_bn_mux>
 c0032f4:	4683      	mov	fp, r0
 c0032f6:	68b1      	ldr	r1, [r6, #8]
 c0032f8:	9802      	ldr	r0, [sp, #8]
 c0032fa:	463a      	mov	r2, r7
 c0032fc:	f7fe fd6f 	bl	c001dde <cmox_bn_mux>
 c003300:	4606      	mov	r6, r0
 c003302:	69a0      	ldr	r0, [r4, #24]
 c003304:	463b      	mov	r3, r7
 c003306:	6801      	ldr	r1, [r0, #0]
 c003308:	6868      	ldr	r0, [r5, #4]
 c00330a:	680a      	ldr	r2, [r1, #0]
 c00330c:	68a9      	ldr	r1, [r5, #8]
 c00330e:	f7fd f95c 	bl	c0005ca <cmox_ModAddBN>
 c003312:	6a23      	ldr	r3, [r4, #32]
 c003314:	6828      	ldr	r0, [r5, #0]
 c003316:	4622      	mov	r2, r4
 c003318:	4641      	mov	r1, r8
 c00331a:	f7fd fbfe 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00331e:	6a23      	ldr	r3, [r4, #32]
 c003320:	6868      	ldr	r0, [r5, #4]
 c003322:	4622      	mov	r2, r4
 c003324:	4649      	mov	r1, r9
 c003326:	f7fd fbf8 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00332a:	69a0      	ldr	r0, [r4, #24]
 c00332c:	4653      	mov	r3, sl
 c00332e:	6801      	ldr	r1, [r0, #0]
 c003330:	6828      	ldr	r0, [r5, #0]
 c003332:	680a      	ldr	r2, [r1, #0]
 c003334:	4649      	mov	r1, r9
 c003336:	f7fd f948 	bl	c0005ca <cmox_ModAddBN>
 c00333a:	6a23      	ldr	r3, [r4, #32]
 c00333c:	9901      	ldr	r1, [sp, #4]
 c00333e:	68a8      	ldr	r0, [r5, #8]
 c003340:	4622      	mov	r2, r4
 c003342:	f7fd fbea 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003346:	6a23      	ldr	r3, [r4, #32]
 c003348:	4622      	mov	r2, r4
 c00334a:	4651      	mov	r1, sl
 c00334c:	4650      	mov	r0, sl
 c00334e:	f7fd fbe4 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003352:	69a0      	ldr	r0, [r4, #24]
 c003354:	4653      	mov	r3, sl
 c003356:	6801      	ldr	r1, [r0, #0]
 c003358:	4650      	mov	r0, sl
 c00335a:	680a      	ldr	r2, [r1, #0]
 c00335c:	4641      	mov	r1, r8
 c00335e:	f7fd f9c5 	bl	c0006ec <cmox_ModSubBN>
 c003362:	69a0      	ldr	r0, [r4, #24]
 c003364:	465a      	mov	r2, fp
 c003366:	6801      	ldr	r1, [r0, #0]
 c003368:	4640      	mov	r0, r8
 c00336a:	6809      	ldr	r1, [r1, #0]
 c00336c:	f7fd fae2 	bl	c000934 <cmox_FieldBN_Mul2>
 c003370:	69a0      	ldr	r0, [r4, #24]
 c003372:	4643      	mov	r3, r8
 c003374:	6801      	ldr	r1, [r0, #0]
 c003376:	4640      	mov	r0, r8
 c003378:	680a      	ldr	r2, [r1, #0]
 c00337a:	4659      	mov	r1, fp
 c00337c:	f7fd f925 	bl	c0005ca <cmox_ModAddBN>
 c003380:	6a23      	ldr	r3, [r4, #32]
 c003382:	4622      	mov	r2, r4
 c003384:	4659      	mov	r1, fp
 c003386:	4648      	mov	r0, r9
 c003388:	f7fd fbc7 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00338c:	6a23      	ldr	r3, [r4, #32]
 c00338e:	4622      	mov	r2, r4
 c003390:	4639      	mov	r1, r7
 c003392:	4638      	mov	r0, r7
 c003394:	f7fd fbc1 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003398:	69a0      	ldr	r0, [r4, #24]
 c00339a:	463b      	mov	r3, r7
 c00339c:	6801      	ldr	r1, [r0, #0]
 c00339e:	4638      	mov	r0, r7
 c0033a0:	680a      	ldr	r2, [r1, #0]
 c0033a2:	4649      	mov	r1, r9
 c0033a4:	f7fd f9a2 	bl	c0006ec <cmox_ModSubBN>
 c0033a8:	69a0      	ldr	r0, [r4, #24]
 c0033aa:	4633      	mov	r3, r6
 c0033ac:	6801      	ldr	r1, [r0, #0]
 c0033ae:	4638      	mov	r0, r7
 c0033b0:	680a      	ldr	r2, [r1, #0]
 c0033b2:	9901      	ldr	r1, [sp, #4]
 c0033b4:	f7fd f99a 	bl	c0006ec <cmox_ModSubBN>
 c0033b8:	9901      	ldr	r1, [sp, #4]
 c0033ba:	6a23      	ldr	r3, [r4, #32]
 c0033bc:	4622      	mov	r2, r4
 c0033be:	4608      	mov	r0, r1
 c0033c0:	f7fd fbab 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0033c4:	6a20      	ldr	r0, [r4, #32]
 c0033c6:	9a01      	ldr	r2, [sp, #4]
 c0033c8:	4623      	mov	r3, r4
 c0033ca:	9000      	str	r0, [sp, #0]
 c0033cc:	69a0      	ldr	r0, [r4, #24]
 c0033ce:	4611      	mov	r1, r2
 c0033d0:	6805      	ldr	r5, [r0, #0]
 c0033d2:	6928      	ldr	r0, [r5, #16]
 c0033d4:	f7fd fb7e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0033d8:	69a0      	ldr	r0, [r4, #24]
 c0033da:	463b      	mov	r3, r7
 c0033dc:	6801      	ldr	r1, [r0, #0]
 c0033de:	4640      	mov	r0, r8
 c0033e0:	680a      	ldr	r2, [r1, #0]
 c0033e2:	9901      	ldr	r1, [sp, #4]
 c0033e4:	f7fd f8f1 	bl	c0005ca <cmox_ModAddBN>
 c0033e8:	69a0      	ldr	r0, [r4, #24]
 c0033ea:	4643      	mov	r3, r8
 c0033ec:	6801      	ldr	r1, [r0, #0]
 c0033ee:	680a      	ldr	r2, [r1, #0]
 c0033f0:	4659      	mov	r1, fp
 c0033f2:	4650      	mov	r0, sl
 c0033f4:	f7fd f97a 	bl	c0006ec <cmox_ModSubBN>
 c0033f8:	69a0      	ldr	r0, [r4, #24]
 c0033fa:	4642      	mov	r2, r8
 c0033fc:	6801      	ldr	r1, [r0, #0]
 c0033fe:	4640      	mov	r0, r8
 c003400:	6809      	ldr	r1, [r1, #0]
 c003402:	f7fd fa97 	bl	c000934 <cmox_FieldBN_Mul2>
 c003406:	6a23      	ldr	r3, [r4, #32]
 c003408:	4622      	mov	r2, r4
 c00340a:	4649      	mov	r1, r9
 c00340c:	4638      	mov	r0, r7
 c00340e:	f7fd fb84 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003412:	69a0      	ldr	r0, [r4, #24]
 c003414:	9a01      	ldr	r2, [sp, #4]
 c003416:	6801      	ldr	r1, [r0, #0]
 c003418:	4640      	mov	r0, r8
 c00341a:	6809      	ldr	r1, [r1, #0]
 c00341c:	f7fd fa8a 	bl	c000934 <cmox_FieldBN_Mul2>
 c003420:	69a0      	ldr	r0, [r4, #24]
 c003422:	4653      	mov	r3, sl
 c003424:	6801      	ldr	r1, [r0, #0]
 c003426:	4648      	mov	r0, r9
 c003428:	680a      	ldr	r2, [r1, #0]
 c00342a:	9901      	ldr	r1, [sp, #4]
 c00342c:	f7fd f95e 	bl	c0006ec <cmox_ModSubBN>
 c003430:	69a0      	ldr	r0, [r4, #24]
 c003432:	4643      	mov	r3, r8
 c003434:	6801      	ldr	r1, [r0, #0]
 c003436:	4640      	mov	r0, r8
 c003438:	680a      	ldr	r2, [r1, #0]
 c00343a:	4651      	mov	r1, sl
 c00343c:	f7fd f956 	bl	c0006ec <cmox_ModSubBN>
 c003440:	69a0      	ldr	r0, [r4, #24]
 c003442:	464a      	mov	r2, r9
 c003444:	6801      	ldr	r1, [r0, #0]
 c003446:	4658      	mov	r0, fp
 c003448:	6809      	ldr	r1, [r1, #0]
 c00344a:	f7fd fa73 	bl	c000934 <cmox_FieldBN_Mul2>
 c00344e:	69a0      	ldr	r0, [r4, #24]
 c003450:	464a      	mov	r2, r9
 c003452:	6801      	ldr	r1, [r0, #0]
 c003454:	4648      	mov	r0, r9
 c003456:	6809      	ldr	r1, [r1, #0]
 c003458:	f7fd fa6c 	bl	c000934 <cmox_FieldBN_Mul2>
 c00345c:	69a0      	ldr	r0, [r4, #24]
 c00345e:	464a      	mov	r2, r9
 c003460:	6801      	ldr	r1, [r0, #0]
 c003462:	4648      	mov	r0, r9
 c003464:	6809      	ldr	r1, [r1, #0]
 c003466:	f7fd fa65 	bl	c000934 <cmox_FieldBN_Mul2>
 c00346a:	6a20      	ldr	r0, [r4, #32]
 c00346c:	4623      	mov	r3, r4
 c00346e:	463a      	mov	r2, r7
 c003470:	9000      	str	r0, [sp, #0]
 c003472:	4641      	mov	r1, r8
 c003474:	4638      	mov	r0, r7
 c003476:	f7fd fb2d 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00347a:	69a0      	ldr	r0, [r4, #24]
 c00347c:	465b      	mov	r3, fp
 c00347e:	6801      	ldr	r1, [r0, #0]
 c003480:	4638      	mov	r0, r7
 c003482:	680a      	ldr	r2, [r1, #0]
 c003484:	4649      	mov	r1, r9
 c003486:	b003      	add	sp, #12
 c003488:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00348c:	f7fd b92e 	b.w	c0006ec <cmox_ModSubBN>

0c003490 <cmox_ECC_EDW_AddPoints_ProjAff>:
 c003490:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c003494:	4604      	mov	r4, r0
 c003496:	6965      	ldr	r5, [r4, #20]
 c003498:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c00349a:	f8d5 8000 	ldr.w	r8, [r5]
 c00349e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 c0034a2:	f8d5 a008 	ldr.w	sl, [r5, #8]
 c0034a6:	b108      	cbz	r0, c0034ac <cmox_ECC_EDW_AddPoints_ProjAff+0x1c>
 c0034a8:	2500      	movs	r5, #0
 c0034aa:	6005      	str	r5, [r0, #0]
 c0034ac:	4616      	mov	r6, r2
 c0034ae:	6a22      	ldr	r2, [r4, #32]
 c0034b0:	460f      	mov	r7, r1
 c0034b2:	461d      	mov	r5, r3
 c0034b4:	9200      	str	r2, [sp, #0]
 c0034b6:	6831      	ldr	r1, [r6, #0]
 c0034b8:	6838      	ldr	r0, [r7, #0]
 c0034ba:	4623      	mov	r3, r4
 c0034bc:	4642      	mov	r2, r8
 c0034be:	f7fd fb09 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0034c2:	69a0      	ldr	r0, [r4, #24]
 c0034c4:	464b      	mov	r3, r9
 c0034c6:	6801      	ldr	r1, [r0, #0]
 c0034c8:	6838      	ldr	r0, [r7, #0]
 c0034ca:	680a      	ldr	r2, [r1, #0]
 c0034cc:	6879      	ldr	r1, [r7, #4]
 c0034ce:	f7fd f87c 	bl	c0005ca <cmox_ModAddBN>
 c0034d2:	69a0      	ldr	r0, [r4, #24]
 c0034d4:	682b      	ldr	r3, [r5, #0]
 c0034d6:	6801      	ldr	r1, [r0, #0]
 c0034d8:	6830      	ldr	r0, [r6, #0]
 c0034da:	680a      	ldr	r2, [r1, #0]
 c0034dc:	6871      	ldr	r1, [r6, #4]
 c0034de:	f7fd f874 	bl	c0005ca <cmox_ModAddBN>
 c0034e2:	6a20      	ldr	r0, [r4, #32]
 c0034e4:	4623      	mov	r3, r4
 c0034e6:	9000      	str	r0, [sp, #0]
 c0034e8:	686a      	ldr	r2, [r5, #4]
 c0034ea:	6871      	ldr	r1, [r6, #4]
 c0034ec:	6878      	ldr	r0, [r7, #4]
 c0034ee:	f7fd faf1 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0034f2:	6a20      	ldr	r0, [r4, #32]
 c0034f4:	4623      	mov	r3, r4
 c0034f6:	4652      	mov	r2, sl
 c0034f8:	9000      	str	r0, [sp, #0]
 c0034fa:	6869      	ldr	r1, [r5, #4]
 c0034fc:	4640      	mov	r0, r8
 c0034fe:	f7fd fae9 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003502:	6a20      	ldr	r0, [r4, #32]
 c003504:	4623      	mov	r3, r4
 c003506:	4652      	mov	r2, sl
 c003508:	9000      	str	r0, [sp, #0]
 c00350a:	69a0      	ldr	r0, [r4, #24]
 c00350c:	4651      	mov	r1, sl
 c00350e:	6806      	ldr	r6, [r0, #0]
 c003510:	6970      	ldr	r0, [r6, #20]
 c003512:	f7fd fadf 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003516:	6a20      	ldr	r0, [r4, #32]
 c003518:	4623      	mov	r3, r4
 c00351a:	464a      	mov	r2, r9
 c00351c:	9000      	str	r0, [sp, #0]
 c00351e:	6829      	ldr	r1, [r5, #0]
 c003520:	4648      	mov	r0, r9
 c003522:	f7fd fad7 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003526:	69a0      	ldr	r0, [r4, #24]
 c003528:	464b      	mov	r3, r9
 c00352a:	6801      	ldr	r1, [r0, #0]
 c00352c:	4648      	mov	r0, r9
 c00352e:	680a      	ldr	r2, [r1, #0]
 c003530:	4641      	mov	r1, r8
 c003532:	f7fd f8db 	bl	c0006ec <cmox_ModSubBN>
 c003536:	69a0      	ldr	r0, [r4, #24]
 c003538:	464b      	mov	r3, r9
 c00353a:	6801      	ldr	r1, [r0, #0]
 c00353c:	4648      	mov	r0, r9
 c00353e:	680a      	ldr	r2, [r1, #0]
 c003540:	6869      	ldr	r1, [r5, #4]
 c003542:	f7fd f8d3 	bl	c0006ec <cmox_ModSubBN>
 c003546:	6a20      	ldr	r0, [r4, #32]
 c003548:	4623      	mov	r3, r4
 c00354a:	4642      	mov	r2, r8
 c00354c:	9000      	str	r0, [sp, #0]
 c00354e:	69a0      	ldr	r0, [r4, #24]
 c003550:	4641      	mov	r1, r8
 c003552:	6806      	ldr	r6, [r0, #0]
 c003554:	6930      	ldr	r0, [r6, #16]
 c003556:	f7fd fabd 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00355a:	69a1      	ldr	r1, [r4, #24]
 c00355c:	6868      	ldr	r0, [r5, #4]
 c00355e:	680a      	ldr	r2, [r1, #0]
 c003560:	4641      	mov	r1, r8
 c003562:	4603      	mov	r3, r0
 c003564:	6812      	ldr	r2, [r2, #0]
 c003566:	f7fd f8c1 	bl	c0006ec <cmox_ModSubBN>
 c00356a:	6a23      	ldr	r3, [r4, #32]
 c00356c:	6829      	ldr	r1, [r5, #0]
 c00356e:	68b8      	ldr	r0, [r7, #8]
 c003570:	4622      	mov	r2, r4
 c003572:	f7fd fad2 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003576:	69a0      	ldr	r0, [r4, #24]
 c003578:	4643      	mov	r3, r8
 c00357a:	6801      	ldr	r1, [r0, #0]
 c00357c:	6828      	ldr	r0, [r5, #0]
 c00357e:	680a      	ldr	r2, [r1, #0]
 c003580:	4651      	mov	r1, sl
 c003582:	f7fd f8b3 	bl	c0006ec <cmox_ModSubBN>
 c003586:	69a0      	ldr	r0, [r4, #24]
 c003588:	4653      	mov	r3, sl
 c00358a:	6801      	ldr	r1, [r0, #0]
 c00358c:	6828      	ldr	r0, [r5, #0]
 c00358e:	680a      	ldr	r2, [r1, #0]
 c003590:	4651      	mov	r1, sl
 c003592:	f7fd f81a 	bl	c0005ca <cmox_ModAddBN>
 c003596:	6a20      	ldr	r0, [r4, #32]
 c003598:	4623      	mov	r3, r4
 c00359a:	464a      	mov	r2, r9
 c00359c:	9000      	str	r0, [sp, #0]
 c00359e:	4649      	mov	r1, r9
 c0035a0:	4640      	mov	r0, r8
 c0035a2:	f7fd fa97 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0035a6:	6a20      	ldr	r0, [r4, #32]
 c0035a8:	4623      	mov	r3, r4
 c0035aa:	4649      	mov	r1, r9
 c0035ac:	9000      	str	r0, [sp, #0]
 c0035ae:	682a      	ldr	r2, [r5, #0]
 c0035b0:	68b8      	ldr	r0, [r7, #8]
 c0035b2:	f7fd fa8f 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0035b6:	6a20      	ldr	r0, [r4, #32]
 c0035b8:	4623      	mov	r3, r4
 c0035ba:	464a      	mov	r2, r9
 c0035bc:	9000      	str	r0, [sp, #0]
 c0035be:	6869      	ldr	r1, [r5, #4]
 c0035c0:	4650      	mov	r0, sl
 c0035c2:	f7fd fa87 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0035c6:	6a20      	ldr	r0, [r4, #32]
 c0035c8:	4623      	mov	r3, r4
 c0035ca:	4649      	mov	r1, r9
 c0035cc:	9000      	str	r0, [sp, #0]
 c0035ce:	686a      	ldr	r2, [r5, #4]
 c0035d0:	68b8      	ldr	r0, [r7, #8]
 c0035d2:	f7fd fa7f 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0035d6:	6a20      	ldr	r0, [r4, #32]
 c0035d8:	4623      	mov	r3, r4
 c0035da:	4651      	mov	r1, sl
 c0035dc:	9000      	str	r0, [sp, #0]
 c0035de:	68aa      	ldr	r2, [r5, #8]
 c0035e0:	4640      	mov	r0, r8
 c0035e2:	f7fd fa77 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0035e6:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0c0035ea <cmox_ECC_EDW_AddPoints_Proj>:
 c0035ea:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c0035ee:	4604      	mov	r4, r0
 c0035f0:	6960      	ldr	r0, [r4, #20]
 c0035f2:	f8d0 a000 	ldr.w	sl, [r0]
 c0035f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 c0035fa:	f8d0 9008 	ldr.w	r9, [r0, #8]
 c0035fe:	6a20      	ldr	r0, [r4, #32]
 c003600:	460d      	mov	r5, r1
 c003602:	4617      	mov	r7, r2
 c003604:	9000      	str	r0, [sp, #0]
 c003606:	68b9      	ldr	r1, [r7, #8]
 c003608:	68a8      	ldr	r0, [r5, #8]
 c00360a:	461e      	mov	r6, r3
 c00360c:	4623      	mov	r3, r4
 c00360e:	4652      	mov	r2, sl
 c003610:	f7fd fa60 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003614:	6a20      	ldr	r0, [r4, #32]
 c003616:	4623      	mov	r3, r4
 c003618:	9000      	str	r0, [sp, #0]
 c00361a:	68b2      	ldr	r2, [r6, #8]
 c00361c:	6839      	ldr	r1, [r7, #0]
 c00361e:	6828      	ldr	r0, [r5, #0]
 c003620:	f7fd fa58 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003624:	69a0      	ldr	r0, [r4, #24]
 c003626:	4643      	mov	r3, r8
 c003628:	6801      	ldr	r1, [r0, #0]
 c00362a:	6828      	ldr	r0, [r5, #0]
 c00362c:	680a      	ldr	r2, [r1, #0]
 c00362e:	6869      	ldr	r1, [r5, #4]
 c003630:	f7fc ffcb 	bl	c0005ca <cmox_ModAddBN>
 c003634:	69a0      	ldr	r0, [r4, #24]
 c003636:	6833      	ldr	r3, [r6, #0]
 c003638:	6801      	ldr	r1, [r0, #0]
 c00363a:	6838      	ldr	r0, [r7, #0]
 c00363c:	680a      	ldr	r2, [r1, #0]
 c00363e:	6879      	ldr	r1, [r7, #4]
 c003640:	f7fc ffc3 	bl	c0005ca <cmox_ModAddBN>
 c003644:	6a20      	ldr	r0, [r4, #32]
 c003646:	4623      	mov	r3, r4
 c003648:	9000      	str	r0, [sp, #0]
 c00364a:	6872      	ldr	r2, [r6, #4]
 c00364c:	6879      	ldr	r1, [r7, #4]
 c00364e:	6868      	ldr	r0, [r5, #4]
 c003650:	f7fd fa40 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003654:	6a20      	ldr	r0, [r4, #32]
 c003656:	4623      	mov	r3, r4
 c003658:	464a      	mov	r2, r9
 c00365a:	9000      	str	r0, [sp, #0]
 c00365c:	6871      	ldr	r1, [r6, #4]
 c00365e:	68b0      	ldr	r0, [r6, #8]
 c003660:	f7fd fa38 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003664:	6a20      	ldr	r0, [r4, #32]
 c003666:	4623      	mov	r3, r4
 c003668:	464a      	mov	r2, r9
 c00366a:	9000      	str	r0, [sp, #0]
 c00366c:	69a0      	ldr	r0, [r4, #24]
 c00366e:	4649      	mov	r1, r9
 c003670:	6805      	ldr	r5, [r0, #0]
 c003672:	6968      	ldr	r0, [r5, #20]
 c003674:	f7fd fa2e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003678:	6a20      	ldr	r0, [r4, #32]
 c00367a:	4623      	mov	r3, r4
 c00367c:	4642      	mov	r2, r8
 c00367e:	9000      	str	r0, [sp, #0]
 c003680:	6831      	ldr	r1, [r6, #0]
 c003682:	4640      	mov	r0, r8
 c003684:	f7fd fa26 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003688:	69a0      	ldr	r0, [r4, #24]
 c00368a:	4643      	mov	r3, r8
 c00368c:	6801      	ldr	r1, [r0, #0]
 c00368e:	4640      	mov	r0, r8
 c003690:	680a      	ldr	r2, [r1, #0]
 c003692:	68b1      	ldr	r1, [r6, #8]
 c003694:	f7fd f82a 	bl	c0006ec <cmox_ModSubBN>
 c003698:	69a0      	ldr	r0, [r4, #24]
 c00369a:	4643      	mov	r3, r8
 c00369c:	6801      	ldr	r1, [r0, #0]
 c00369e:	4640      	mov	r0, r8
 c0036a0:	680a      	ldr	r2, [r1, #0]
 c0036a2:	6871      	ldr	r1, [r6, #4]
 c0036a4:	f7fd f822 	bl	c0006ec <cmox_ModSubBN>
 c0036a8:	6a20      	ldr	r0, [r4, #32]
 c0036aa:	68b1      	ldr	r1, [r6, #8]
 c0036ac:	4623      	mov	r3, r4
 c0036ae:	9000      	str	r0, [sp, #0]
 c0036b0:	69a0      	ldr	r0, [r4, #24]
 c0036b2:	460a      	mov	r2, r1
 c0036b4:	6805      	ldr	r5, [r0, #0]
 c0036b6:	6928      	ldr	r0, [r5, #16]
 c0036b8:	f7fd fa0c 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0036bc:	69a1      	ldr	r1, [r4, #24]
 c0036be:	6870      	ldr	r0, [r6, #4]
 c0036c0:	680a      	ldr	r2, [r1, #0]
 c0036c2:	68b1      	ldr	r1, [r6, #8]
 c0036c4:	4603      	mov	r3, r0
 c0036c6:	6812      	ldr	r2, [r2, #0]
 c0036c8:	f7fd f810 	bl	c0006ec <cmox_ModSubBN>
 c0036cc:	6a23      	ldr	r3, [r4, #32]
 c0036ce:	6831      	ldr	r1, [r6, #0]
 c0036d0:	4622      	mov	r2, r4
 c0036d2:	4650      	mov	r0, sl
 c0036d4:	f7fd fa21 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0036d8:	69a0      	ldr	r0, [r4, #24]
 c0036da:	68b3      	ldr	r3, [r6, #8]
 c0036dc:	6801      	ldr	r1, [r0, #0]
 c0036de:	6830      	ldr	r0, [r6, #0]
 c0036e0:	680a      	ldr	r2, [r1, #0]
 c0036e2:	4649      	mov	r1, r9
 c0036e4:	f7fd f802 	bl	c0006ec <cmox_ModSubBN>
 c0036e8:	69a0      	ldr	r0, [r4, #24]
 c0036ea:	464b      	mov	r3, r9
 c0036ec:	6801      	ldr	r1, [r0, #0]
 c0036ee:	6830      	ldr	r0, [r6, #0]
 c0036f0:	680a      	ldr	r2, [r1, #0]
 c0036f2:	4649      	mov	r1, r9
 c0036f4:	f7fc ff69 	bl	c0005ca <cmox_ModAddBN>
 c0036f8:	6a20      	ldr	r0, [r4, #32]
 c0036fa:	4623      	mov	r3, r4
 c0036fc:	4642      	mov	r2, r8
 c0036fe:	9000      	str	r0, [sp, #0]
 c003700:	68b0      	ldr	r0, [r6, #8]
 c003702:	4641      	mov	r1, r8
 c003704:	f7fd f9e6 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003708:	6a20      	ldr	r0, [r4, #32]
 c00370a:	4623      	mov	r3, r4
 c00370c:	4641      	mov	r1, r8
 c00370e:	9000      	str	r0, [sp, #0]
 c003710:	6832      	ldr	r2, [r6, #0]
 c003712:	4650      	mov	r0, sl
 c003714:	f7fd f9de 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003718:	6a20      	ldr	r0, [r4, #32]
 c00371a:	4623      	mov	r3, r4
 c00371c:	4642      	mov	r2, r8
 c00371e:	9000      	str	r0, [sp, #0]
 c003720:	6871      	ldr	r1, [r6, #4]
 c003722:	4648      	mov	r0, r9
 c003724:	f7fd f9d6 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003728:	6a20      	ldr	r0, [r4, #32]
 c00372a:	4623      	mov	r3, r4
 c00372c:	4641      	mov	r1, r8
 c00372e:	9000      	str	r0, [sp, #0]
 c003730:	6872      	ldr	r2, [r6, #4]
 c003732:	4650      	mov	r0, sl
 c003734:	f7fd f9ce 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003738:	6a21      	ldr	r1, [r4, #32]
 c00373a:	68b0      	ldr	r0, [r6, #8]
 c00373c:	4623      	mov	r3, r4
 c00373e:	9100      	str	r1, [sp, #0]
 c003740:	4602      	mov	r2, r0
 c003742:	4649      	mov	r1, r9
 c003744:	f7fd f9c6 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003748:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0c00374c <cmox_ECC_EDW_DblPoint_Proj>:
 c00374c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c003750:	4604      	mov	r4, r0
 c003752:	6960      	ldr	r0, [r4, #20]
 c003754:	460d      	mov	r5, r1
 c003756:	4617      	mov	r7, r2
 c003758:	6806      	ldr	r6, [r0, #0]
 c00375a:	6839      	ldr	r1, [r7, #0]
 c00375c:	469b      	mov	fp, r3
 c00375e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 c003762:	4632      	mov	r2, r6
 c003764:	4658      	mov	r0, fp
 c003766:	f7fe fb3a 	bl	c001dde <cmox_bn_mux>
 c00376a:	6879      	ldr	r1, [r7, #4]
 c00376c:	4680      	mov	r8, r0
 c00376e:	4632      	mov	r2, r6
 c003770:	4658      	mov	r0, fp
 c003772:	f7fe fb34 	bl	c001dde <cmox_bn_mux>
 c003776:	68b9      	ldr	r1, [r7, #8]
 c003778:	4681      	mov	r9, r0
 c00377a:	4632      	mov	r2, r6
 c00377c:	4658      	mov	r0, fp
 c00377e:	f7fe fb2e 	bl	c001dde <cmox_bn_mux>
 c003782:	4607      	mov	r7, r0
 c003784:	69a0      	ldr	r0, [r4, #24]
 c003786:	4633      	mov	r3, r6
 c003788:	6801      	ldr	r1, [r0, #0]
 c00378a:	6828      	ldr	r0, [r5, #0]
 c00378c:	680a      	ldr	r2, [r1, #0]
 c00378e:	6869      	ldr	r1, [r5, #4]
 c003790:	f7fc ff1b 	bl	c0005ca <cmox_ModAddBN>
 c003794:	6a23      	ldr	r3, [r4, #32]
 c003796:	6828      	ldr	r0, [r5, #0]
 c003798:	4622      	mov	r2, r4
 c00379a:	4651      	mov	r1, sl
 c00379c:	f7fd f9bd 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0037a0:	6a20      	ldr	r0, [r4, #32]
 c0037a2:	4623      	mov	r3, r4
 c0037a4:	4642      	mov	r2, r8
 c0037a6:	9000      	str	r0, [sp, #0]
 c0037a8:	69a0      	ldr	r0, [r4, #24]
 c0037aa:	4651      	mov	r1, sl
 c0037ac:	f8d0 e000 	ldr.w	lr, [r0]
 c0037b0:	f8de 0010 	ldr.w	r0, [lr, #16]
 c0037b4:	f7fd f98e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0037b8:	6a23      	ldr	r3, [r4, #32]
 c0037ba:	4622      	mov	r2, r4
 c0037bc:	4631      	mov	r1, r6
 c0037be:	4630      	mov	r0, r6
 c0037c0:	f7fd f9ab 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0037c4:	69a0      	ldr	r0, [r4, #24]
 c0037c6:	4633      	mov	r3, r6
 c0037c8:	6801      	ldr	r1, [r0, #0]
 c0037ca:	4630      	mov	r0, r6
 c0037cc:	680a      	ldr	r2, [r1, #0]
 c0037ce:	4651      	mov	r1, sl
 c0037d0:	f7fc ff8c 	bl	c0006ec <cmox_ModSubBN>
 c0037d4:	6a23      	ldr	r3, [r4, #32]
 c0037d6:	6868      	ldr	r0, [r5, #4]
 c0037d8:	4622      	mov	r2, r4
 c0037da:	4649      	mov	r1, r9
 c0037dc:	f7fd f99d 	bl	c000b1a <cmox_ModularBN_Sqr>
 c0037e0:	69a0      	ldr	r0, [r4, #24]
 c0037e2:	4653      	mov	r3, sl
 c0037e4:	6801      	ldr	r1, [r0, #0]
 c0037e6:	4640      	mov	r0, r8
 c0037e8:	680a      	ldr	r2, [r1, #0]
 c0037ea:	4649      	mov	r1, r9
 c0037ec:	f7fc feed 	bl	c0005ca <cmox_ModAddBN>
 c0037f0:	69a0      	ldr	r0, [r4, #24]
 c0037f2:	4643      	mov	r3, r8
 c0037f4:	6801      	ldr	r1, [r0, #0]
 c0037f6:	4640      	mov	r0, r8
 c0037f8:	680a      	ldr	r2, [r1, #0]
 c0037fa:	4649      	mov	r1, r9
 c0037fc:	f7fc ff76 	bl	c0006ec <cmox_ModSubBN>
 c003800:	69a0      	ldr	r0, [r4, #24]
 c003802:	4633      	mov	r3, r6
 c003804:	6801      	ldr	r1, [r0, #0]
 c003806:	4630      	mov	r0, r6
 c003808:	680a      	ldr	r2, [r1, #0]
 c00380a:	4649      	mov	r1, r9
 c00380c:	f7fc ff6e 	bl	c0006ec <cmox_ModSubBN>
 c003810:	6a23      	ldr	r3, [r4, #32]
 c003812:	68a8      	ldr	r0, [r5, #8]
 c003814:	4622      	mov	r2, r4
 c003816:	4639      	mov	r1, r7
 c003818:	f7fd f97f 	bl	c000b1a <cmox_ModularBN_Sqr>
 c00381c:	69a0      	ldr	r0, [r4, #24]
 c00381e:	463a      	mov	r2, r7
 c003820:	6801      	ldr	r1, [r0, #0]
 c003822:	4638      	mov	r0, r7
 c003824:	6809      	ldr	r1, [r1, #0]
 c003826:	f7fd f885 	bl	c000934 <cmox_FieldBN_Mul2>
 c00382a:	6a20      	ldr	r0, [r4, #32]
 c00382c:	4623      	mov	r3, r4
 c00382e:	464a      	mov	r2, r9
 c003830:	9000      	str	r0, [sp, #0]
 c003832:	4641      	mov	r1, r8
 c003834:	4650      	mov	r0, sl
 c003836:	f7fd f94d 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00383a:	69a0      	ldr	r0, [r4, #24]
 c00383c:	463b      	mov	r3, r7
 c00383e:	6801      	ldr	r1, [r0, #0]
 c003840:	4650      	mov	r0, sl
 c003842:	680a      	ldr	r2, [r1, #0]
 c003844:	4639      	mov	r1, r7
 c003846:	f7fc ff51 	bl	c0006ec <cmox_ModSubBN>
 c00384a:	6a20      	ldr	r0, [r4, #32]
 c00384c:	4623      	mov	r3, r4
 c00384e:	4642      	mov	r2, r8
 c003850:	9000      	str	r0, [sp, #0]
 c003852:	4639      	mov	r1, r7
 c003854:	4630      	mov	r0, r6
 c003856:	f7fd f93d 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00385a:	6a20      	ldr	r0, [r4, #32]
 c00385c:	4623      	mov	r3, r4
 c00385e:	463a      	mov	r2, r7
 c003860:	9000      	str	r0, [sp, #0]
 c003862:	4639      	mov	r1, r7
 c003864:	4650      	mov	r0, sl
 c003866:	f7fd f935 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00386a:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c00386e <cmox_ECC_EDW_AddPnts_ExtAff_a_1>:
 c00386e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c003872:	460d      	mov	r5, r1
 c003874:	4604      	mov	r4, r0
 c003876:	6961      	ldr	r1, [r4, #20]
 c003878:	9808      	ldr	r0, [sp, #32]
 c00387a:	4617      	mov	r7, r2
 c00387c:	461e      	mov	r6, r3
 c00387e:	f8d1 8000 	ldr.w	r8, [r1]
 c003882:	f8d1 9004 	ldr.w	r9, [r1, #4]
 c003886:	b108      	cbz	r0, c00388c <cmox_ECC_EDW_AddPnts_ExtAff_a_1+0x1e>
 c003888:	2100      	movs	r1, #0
 c00388a:	6001      	str	r1, [r0, #0]
 c00388c:	69a0      	ldr	r0, [r4, #24]
 c00388e:	6829      	ldr	r1, [r5, #0]
 c003890:	4643      	mov	r3, r8
 c003892:	6800      	ldr	r0, [r0, #0]
 c003894:	6802      	ldr	r2, [r0, #0]
 c003896:	6868      	ldr	r0, [r5, #4]
 c003898:	f7fc ff28 	bl	c0006ec <cmox_ModSubBN>
 c00389c:	69a0      	ldr	r0, [r4, #24]
 c00389e:	464b      	mov	r3, r9
 c0038a0:	6801      	ldr	r1, [r0, #0]
 c0038a2:	6878      	ldr	r0, [r7, #4]
 c0038a4:	680a      	ldr	r2, [r1, #0]
 c0038a6:	6839      	ldr	r1, [r7, #0]
 c0038a8:	f7fc fe8f 	bl	c0005ca <cmox_ModAddBN>
 c0038ac:	6a20      	ldr	r0, [r4, #32]
 c0038ae:	4623      	mov	r3, r4
 c0038b0:	4642      	mov	r2, r8
 c0038b2:	9000      	str	r0, [sp, #0]
 c0038b4:	4649      	mov	r1, r9
 c0038b6:	4640      	mov	r0, r8
 c0038b8:	f7fd f90c 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0038bc:	69a0      	ldr	r0, [r4, #24]
 c0038be:	464b      	mov	r3, r9
 c0038c0:	6801      	ldr	r1, [r0, #0]
 c0038c2:	6868      	ldr	r0, [r5, #4]
 c0038c4:	680a      	ldr	r2, [r1, #0]
 c0038c6:	6829      	ldr	r1, [r5, #0]
 c0038c8:	f7fc fe7f 	bl	c0005ca <cmox_ModAddBN>
 c0038cc:	69a0      	ldr	r0, [r4, #24]
 c0038ce:	6833      	ldr	r3, [r6, #0]
 c0038d0:	6801      	ldr	r1, [r0, #0]
 c0038d2:	6878      	ldr	r0, [r7, #4]
 c0038d4:	680a      	ldr	r2, [r1, #0]
 c0038d6:	6839      	ldr	r1, [r7, #0]
 c0038d8:	f7fc ff08 	bl	c0006ec <cmox_ModSubBN>
 c0038dc:	6a20      	ldr	r0, [r4, #32]
 c0038de:	4623      	mov	r3, r4
 c0038e0:	464a      	mov	r2, r9
 c0038e2:	9000      	str	r0, [sp, #0]
 c0038e4:	6831      	ldr	r1, [r6, #0]
 c0038e6:	4648      	mov	r0, r9
 c0038e8:	f7fd f8f4 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0038ec:	69a0      	ldr	r0, [r4, #24]
 c0038ee:	6833      	ldr	r3, [r6, #0]
 c0038f0:	6801      	ldr	r1, [r0, #0]
 c0038f2:	4648      	mov	r0, r9
 c0038f4:	680a      	ldr	r2, [r1, #0]
 c0038f6:	4641      	mov	r1, r8
 c0038f8:	f7fc fef8 	bl	c0006ec <cmox_ModSubBN>
 c0038fc:	69a0      	ldr	r0, [r4, #24]
 c0038fe:	464b      	mov	r3, r9
 c003900:	6801      	ldr	r1, [r0, #0]
 c003902:	4648      	mov	r0, r9
 c003904:	680a      	ldr	r2, [r1, #0]
 c003906:	4641      	mov	r1, r8
 c003908:	f7fc fe5f 	bl	c0005ca <cmox_ModAddBN>
 c00390c:	69a0      	ldr	r0, [r4, #24]
 c00390e:	6872      	ldr	r2, [r6, #4]
 c003910:	6801      	ldr	r1, [r0, #0]
 c003912:	68f8      	ldr	r0, [r7, #12]
 c003914:	6809      	ldr	r1, [r1, #0]
 c003916:	f7fd f80d 	bl	c000934 <cmox_FieldBN_Mul2>
 c00391a:	6a20      	ldr	r0, [r4, #32]
 c00391c:	6871      	ldr	r1, [r6, #4]
 c00391e:	4623      	mov	r3, r4
 c003920:	9000      	str	r0, [sp, #0]
 c003922:	68a8      	ldr	r0, [r5, #8]
 c003924:	460a      	mov	r2, r1
 c003926:	f7fd f8d5 	bl	c000ad4 <cmox_ModularBN_Mul>
 c00392a:	69a0      	ldr	r0, [r4, #24]
 c00392c:	68f2      	ldr	r2, [r6, #12]
 c00392e:	6801      	ldr	r1, [r0, #0]
 c003930:	68e8      	ldr	r0, [r5, #12]
 c003932:	6809      	ldr	r1, [r1, #0]
 c003934:	f7fc fffe 	bl	c000934 <cmox_FieldBN_Mul2>
 c003938:	69a0      	ldr	r0, [r4, #24]
 c00393a:	4643      	mov	r3, r8
 c00393c:	6801      	ldr	r1, [r0, #0]
 c00393e:	68f0      	ldr	r0, [r6, #12]
 c003940:	680a      	ldr	r2, [r1, #0]
 c003942:	6871      	ldr	r1, [r6, #4]
 c003944:	f7fc fe41 	bl	c0005ca <cmox_ModAddBN>
 c003948:	69a1      	ldr	r1, [r4, #24]
 c00394a:	68f0      	ldr	r0, [r6, #12]
 c00394c:	680a      	ldr	r2, [r1, #0]
 c00394e:	6871      	ldr	r1, [r6, #4]
 c003950:	4603      	mov	r3, r0
 c003952:	6812      	ldr	r2, [r2, #0]
 c003954:	f7fc feca 	bl	c0006ec <cmox_ModSubBN>
 c003958:	6a20      	ldr	r0, [r4, #32]
 c00395a:	4623      	mov	r3, r4
 c00395c:	4649      	mov	r1, r9
 c00395e:	9000      	str	r0, [sp, #0]
 c003960:	68b2      	ldr	r2, [r6, #8]
 c003962:	6830      	ldr	r0, [r6, #0]
 c003964:	f7fd f8b6 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003968:	6a20      	ldr	r0, [r4, #32]
 c00396a:	6831      	ldr	r1, [r6, #0]
 c00396c:	4623      	mov	r3, r4
 c00396e:	9000      	str	r0, [sp, #0]
 c003970:	460a      	mov	r2, r1
 c003972:	4640      	mov	r0, r8
 c003974:	f7fd f8ae 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003978:	6a20      	ldr	r0, [r4, #32]
 c00397a:	4623      	mov	r3, r4
 c00397c:	9000      	str	r0, [sp, #0]
 c00397e:	6872      	ldr	r2, [r6, #4]
 c003980:	68f1      	ldr	r1, [r6, #12]
 c003982:	4648      	mov	r0, r9
 c003984:	f7fd f8a6 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003988:	6a20      	ldr	r0, [r4, #32]
 c00398a:	68f1      	ldr	r1, [r6, #12]
 c00398c:	4623      	mov	r3, r4
 c00398e:	9000      	str	r0, [sp, #0]
 c003990:	460a      	mov	r2, r1
 c003992:	4640      	mov	r0, r8
 c003994:	f7fd f89e 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003998:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

0c00399c <cmox_ECC_EDW_AddPoints_Ext_a_1>:
 c00399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0039a0:	4604      	mov	r4, r0
 c0039a2:	6960      	ldr	r0, [r4, #20]
 c0039a4:	4617      	mov	r7, r2
 c0039a6:	460d      	mov	r5, r1
 c0039a8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 c0039ac:	f8d0 8000 	ldr.w	r8, [r0]
 c0039b0:	69a0      	ldr	r0, [r4, #24]
 c0039b2:	6829      	ldr	r1, [r5, #0]
 c0039b4:	461e      	mov	r6, r3
 c0039b6:	6800      	ldr	r0, [r0, #0]
 c0039b8:	4643      	mov	r3, r8
 c0039ba:	6802      	ldr	r2, [r0, #0]
 c0039bc:	6868      	ldr	r0, [r5, #4]
 c0039be:	f7fc fe95 	bl	c0006ec <cmox_ModSubBN>
 c0039c2:	69a0      	ldr	r0, [r4, #24]
 c0039c4:	464b      	mov	r3, r9
 c0039c6:	6801      	ldr	r1, [r0, #0]
 c0039c8:	6878      	ldr	r0, [r7, #4]
 c0039ca:	680a      	ldr	r2, [r1, #0]
 c0039cc:	6839      	ldr	r1, [r7, #0]
 c0039ce:	f7fc fdfc 	bl	c0005ca <cmox_ModAddBN>
 c0039d2:	6a20      	ldr	r0, [r4, #32]
 c0039d4:	4623      	mov	r3, r4
 c0039d6:	4642      	mov	r2, r8
 c0039d8:	9000      	str	r0, [sp, #0]
 c0039da:	4649      	mov	r1, r9
 c0039dc:	4640      	mov	r0, r8
 c0039de:	f7fd f879 	bl	c000ad4 <cmox_ModularBN_Mul>
 c0039e2:	69a0      	ldr	r0, [r4, #24]
 c0039e4:	464b      	mov	r3, r9
 c0039e6:	6801      	ldr	r1, [r0, #0]
 c0039e8:	6868      	ldr	r0, [r5, #4]
 c0039ea:	680a      	ldr	r2, [r1, #0]
 c0039ec:	6829      	ldr	r1, [r5, #0]
 c0039ee:	f7fc fdec 	bl	c0005ca <cmox_ModAddBN>
 c0039f2:	69a0      	ldr	r0, [r4, #24]
 c0039f4:	6833      	ldr	r3, [r6, #0]
 c0039f6:	6801      	ldr	r1, [r0, #0]
 c0039f8:	6878      	ldr	r0, [r7, #4]
 c0039fa:	680a      	ldr	r2, [r1, #0]
 c0039fc:	6839      	ldr	r1, [r7, #0]
 c0039fe:	f7fc fe75 	bl	c0006ec <cmox_ModSubBN>
 c003a02:	6a20      	ldr	r0, [r4, #32]
 c003a04:	4623      	mov	r3, r4
 c003a06:	464a      	mov	r2, r9
 c003a08:	9000      	str	r0, [sp, #0]
 c003a0a:	6831      	ldr	r1, [r6, #0]
 c003a0c:	4648      	mov	r0, r9
 c003a0e:	f7fd f861 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003a12:	69a0      	ldr	r0, [r4, #24]
 c003a14:	6833      	ldr	r3, [r6, #0]
 c003a16:	6801      	ldr	r1, [r0, #0]
 c003a18:	4648      	mov	r0, r9
 c003a1a:	680a      	ldr	r2, [r1, #0]
 c003a1c:	4641      	mov	r1, r8
 c003a1e:	f7fc fe65 	bl	c0006ec <cmox_ModSubBN>
 c003a22:	69a0      	ldr	r0, [r4, #24]
 c003a24:	464b      	mov	r3, r9
 c003a26:	6801      	ldr	r1, [r0, #0]
 c003a28:	4648      	mov	r0, r9
 c003a2a:	680a      	ldr	r2, [r1, #0]
 c003a2c:	4641      	mov	r1, r8
 c003a2e:	f7fc fdcc 	bl	c0005ca <cmox_ModAddBN>
 c003a32:	69a0      	ldr	r0, [r4, #24]
 c003a34:	6872      	ldr	r2, [r6, #4]
 c003a36:	6801      	ldr	r1, [r0, #0]
 c003a38:	68f8      	ldr	r0, [r7, #12]
 c003a3a:	6809      	ldr	r1, [r1, #0]
 c003a3c:	f7fc ff7a 	bl	c000934 <cmox_FieldBN_Mul2>
 c003a40:	6a20      	ldr	r0, [r4, #32]
 c003a42:	6871      	ldr	r1, [r6, #4]
 c003a44:	4623      	mov	r3, r4
 c003a46:	9000      	str	r0, [sp, #0]
 c003a48:	68a8      	ldr	r0, [r5, #8]
 c003a4a:	460a      	mov	r2, r1
 c003a4c:	f7fd f842 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003a50:	69a0      	ldr	r0, [r4, #24]
 c003a52:	68b2      	ldr	r2, [r6, #8]
 c003a54:	6801      	ldr	r1, [r0, #0]
 c003a56:	68b8      	ldr	r0, [r7, #8]
 c003a58:	6809      	ldr	r1, [r1, #0]
 c003a5a:	f7fc ff6b 	bl	c000934 <cmox_FieldBN_Mul2>
 c003a5e:	6a20      	ldr	r0, [r4, #32]
 c003a60:	4623      	mov	r3, r4
 c003a62:	9000      	str	r0, [sp, #0]
 c003a64:	68f2      	ldr	r2, [r6, #12]
 c003a66:	68b1      	ldr	r1, [r6, #8]
 c003a68:	68e8      	ldr	r0, [r5, #12]
 c003a6a:	f7fd f833 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003a6e:	69a0      	ldr	r0, [r4, #24]
 c003a70:	4643      	mov	r3, r8
 c003a72:	6801      	ldr	r1, [r0, #0]
 c003a74:	68f0      	ldr	r0, [r6, #12]
 c003a76:	680a      	ldr	r2, [r1, #0]
 c003a78:	6871      	ldr	r1, [r6, #4]
 c003a7a:	f7fc fda6 	bl	c0005ca <cmox_ModAddBN>
 c003a7e:	69a1      	ldr	r1, [r4, #24]
 c003a80:	68f0      	ldr	r0, [r6, #12]
 c003a82:	680a      	ldr	r2, [r1, #0]
 c003a84:	6871      	ldr	r1, [r6, #4]
 c003a86:	4603      	mov	r3, r0
 c003a88:	6812      	ldr	r2, [r2, #0]
 c003a8a:	f7fc fe2f 	bl	c0006ec <cmox_ModSubBN>
 c003a8e:	6a20      	ldr	r0, [r4, #32]
 c003a90:	4623      	mov	r3, r4
 c003a92:	4649      	mov	r1, r9
 c003a94:	9000      	str	r0, [sp, #0]
 c003a96:	68b2      	ldr	r2, [r6, #8]
 c003a98:	6830      	ldr	r0, [r6, #0]
 c003a9a:	f7fd f81b 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003a9e:	6a20      	ldr	r0, [r4, #32]
 c003aa0:	6831      	ldr	r1, [r6, #0]
 c003aa2:	4623      	mov	r3, r4
 c003aa4:	9000      	str	r0, [sp, #0]
 c003aa6:	460a      	mov	r2, r1
 c003aa8:	4640      	mov	r0, r8
 c003aaa:	f7fd f813 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003aae:	6a20      	ldr	r0, [r4, #32]
 c003ab0:	4623      	mov	r3, r4
 c003ab2:	9000      	str	r0, [sp, #0]
 c003ab4:	6872      	ldr	r2, [r6, #4]
 c003ab6:	68f1      	ldr	r1, [r6, #12]
 c003ab8:	4648      	mov	r0, r9
 c003aba:	f7fd f80b 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003abe:	6a20      	ldr	r0, [r4, #32]
 c003ac0:	68f1      	ldr	r1, [r6, #12]
 c003ac2:	4623      	mov	r3, r4
 c003ac4:	9000      	str	r0, [sp, #0]
 c003ac6:	460a      	mov	r2, r1
 c003ac8:	4640      	mov	r0, r8
 c003aca:	f7fd f803 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003ace:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

0c003ad2 <cmox_ECC_EDW_DblPoint_Ext_a_1>:
 c003ad2:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c003ad6:	4604      	mov	r4, r0
 c003ad8:	4698      	mov	r8, r3
 c003ada:	6960      	ldr	r0, [r4, #20]
 c003adc:	460d      	mov	r5, r1
 c003ade:	4616      	mov	r6, r2
 c003ae0:	6843      	ldr	r3, [r0, #4]
 c003ae2:	6807      	ldr	r7, [r0, #0]
 c003ae4:	4640      	mov	r0, r8
 c003ae6:	9301      	str	r3, [sp, #4]
 c003ae8:	6831      	ldr	r1, [r6, #0]
 c003aea:	463a      	mov	r2, r7
 c003aec:	f7fe f977 	bl	c001dde <cmox_bn_mux>
 c003af0:	6871      	ldr	r1, [r6, #4]
 c003af2:	4681      	mov	r9, r0
 c003af4:	463a      	mov	r2, r7
 c003af6:	4640      	mov	r0, r8
 c003af8:	f7fe f971 	bl	c001dde <cmox_bn_mux>
 c003afc:	68b1      	ldr	r1, [r6, #8]
 c003afe:	4682      	mov	sl, r0
 c003b00:	463a      	mov	r2, r7
 c003b02:	4640      	mov	r0, r8
 c003b04:	f7fe f96b 	bl	c001dde <cmox_bn_mux>
 c003b08:	68f1      	ldr	r1, [r6, #12]
 c003b0a:	4683      	mov	fp, r0
 c003b0c:	463a      	mov	r2, r7
 c003b0e:	4640      	mov	r0, r8
 c003b10:	f7fe f965 	bl	c001dde <cmox_bn_mux>
 c003b14:	4606      	mov	r6, r0
 c003b16:	6a23      	ldr	r3, [r4, #32]
 c003b18:	6828      	ldr	r0, [r5, #0]
 c003b1a:	4622      	mov	r2, r4
 c003b1c:	4639      	mov	r1, r7
 c003b1e:	f7fc fffc 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003b22:	6a23      	ldr	r3, [r4, #32]
 c003b24:	6868      	ldr	r0, [r5, #4]
 c003b26:	4622      	mov	r2, r4
 c003b28:	4631      	mov	r1, r6
 c003b2a:	f7fc fff6 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003b2e:	6a23      	ldr	r3, [r4, #32]
 c003b30:	68a8      	ldr	r0, [r5, #8]
 c003b32:	4622      	mov	r2, r4
 c003b34:	4659      	mov	r1, fp
 c003b36:	f7fc fff0 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003b3a:	69a0      	ldr	r0, [r4, #24]
 c003b3c:	465a      	mov	r2, fp
 c003b3e:	6801      	ldr	r1, [r0, #0]
 c003b40:	4658      	mov	r0, fp
 c003b42:	6809      	ldr	r1, [r1, #0]
 c003b44:	f7fc fef6 	bl	c000934 <cmox_FieldBN_Mul2>
 c003b48:	69a0      	ldr	r0, [r4, #24]
 c003b4a:	464b      	mov	r3, r9
 c003b4c:	6801      	ldr	r1, [r0, #0]
 c003b4e:	6828      	ldr	r0, [r5, #0]
 c003b50:	680a      	ldr	r2, [r1, #0]
 c003b52:	6869      	ldr	r1, [r5, #4]
 c003b54:	f7fc fd39 	bl	c0005ca <cmox_ModAddBN>
 c003b58:	6a23      	ldr	r3, [r4, #32]
 c003b5a:	4622      	mov	r2, r4
 c003b5c:	4649      	mov	r1, r9
 c003b5e:	4648      	mov	r0, r9
 c003b60:	f7fc ffdb 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003b64:	69a0      	ldr	r0, [r4, #24]
 c003b66:	464b      	mov	r3, r9
 c003b68:	6801      	ldr	r1, [r0, #0]
 c003b6a:	4648      	mov	r0, r9
 c003b6c:	680a      	ldr	r2, [r1, #0]
 c003b6e:	4639      	mov	r1, r7
 c003b70:	f7fc fdbc 	bl	c0006ec <cmox_ModSubBN>
 c003b74:	69a0      	ldr	r0, [r4, #24]
 c003b76:	4652      	mov	r2, sl
 c003b78:	4639      	mov	r1, r7
 c003b7a:	6803      	ldr	r3, [r0, #0]
 c003b7c:	6818      	ldr	r0, [r3, #0]
 c003b7e:	f7fc fe34 	bl	c0007ea <cmox_SubBN>
 c003b82:	69a0      	ldr	r0, [r4, #24]
 c003b84:	463b      	mov	r3, r7
 c003b86:	6801      	ldr	r1, [r0, #0]
 c003b88:	4648      	mov	r0, r9
 c003b8a:	680a      	ldr	r2, [r1, #0]
 c003b8c:	4631      	mov	r1, r6
 c003b8e:	f7fc fdad 	bl	c0006ec <cmox_ModSubBN>
 c003b92:	69a0      	ldr	r0, [r4, #24]
 c003b94:	9b01      	ldr	r3, [sp, #4]
 c003b96:	6801      	ldr	r1, [r0, #0]
 c003b98:	4650      	mov	r0, sl
 c003b9a:	680a      	ldr	r2, [r1, #0]
 c003b9c:	4631      	mov	r1, r6
 c003b9e:	f7fc fd14 	bl	c0005ca <cmox_ModAddBN>
 c003ba2:	69a0      	ldr	r0, [r4, #24]
 c003ba4:	4633      	mov	r3, r6
 c003ba6:	6801      	ldr	r1, [r0, #0]
 c003ba8:	4650      	mov	r0, sl
 c003baa:	680a      	ldr	r2, [r1, #0]
 c003bac:	4631      	mov	r1, r6
 c003bae:	f7fc fd9d 	bl	c0006ec <cmox_ModSubBN>
 c003bb2:	69a0      	ldr	r0, [r4, #24]
 c003bb4:	4653      	mov	r3, sl
 c003bb6:	6801      	ldr	r1, [r0, #0]
 c003bb8:	9801      	ldr	r0, [sp, #4]
 c003bba:	680a      	ldr	r2, [r1, #0]
 c003bbc:	4659      	mov	r1, fp
 c003bbe:	f7fc fd95 	bl	c0006ec <cmox_ModSubBN>
 c003bc2:	6a20      	ldr	r0, [r4, #32]
 c003bc4:	9901      	ldr	r1, [sp, #4]
 c003bc6:	4623      	mov	r3, r4
 c003bc8:	9000      	str	r0, [sp, #0]
 c003bca:	465a      	mov	r2, fp
 c003bcc:	4650      	mov	r0, sl
 c003bce:	f7fc ff81 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003bd2:	6a20      	ldr	r0, [r4, #32]
 c003bd4:	4623      	mov	r3, r4
 c003bd6:	464a      	mov	r2, r9
 c003bd8:	9000      	str	r0, [sp, #0]
 c003bda:	4651      	mov	r1, sl
 c003bdc:	4638      	mov	r0, r7
 c003bde:	f7fc ff79 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003be2:	6a20      	ldr	r0, [r4, #32]
 c003be4:	4623      	mov	r3, r4
 c003be6:	4652      	mov	r2, sl
 c003be8:	9000      	str	r0, [sp, #0]
 c003bea:	9801      	ldr	r0, [sp, #4]
 c003bec:	4631      	mov	r1, r6
 c003bee:	f7fc ff71 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003bf2:	6a20      	ldr	r0, [r4, #32]
 c003bf4:	4623      	mov	r3, r4
 c003bf6:	4632      	mov	r2, r6
 c003bf8:	9000      	str	r0, [sp, #0]
 c003bfa:	4631      	mov	r1, r6
 c003bfc:	4638      	mov	r0, r7
 c003bfe:	f7fc ff69 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003c02:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0c003c06 <cmox_ECC_MONTY_Ladder_XzAff>:
 c003c06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c003c0a:	4604      	mov	r4, r0
 c003c0c:	6960      	ldr	r0, [r4, #20]
 c003c0e:	4616      	mov	r6, r2
 c003c10:	460d      	mov	r5, r1
 c003c12:	f8d0 9004 	ldr.w	r9, [r0, #4]
 c003c16:	f8d0 8000 	ldr.w	r8, [r0]
 c003c1a:	69a0      	ldr	r0, [r4, #24]
 c003c1c:	461f      	mov	r7, r3
 c003c1e:	68b9      	ldr	r1, [r7, #8]
 c003c20:	6800      	ldr	r0, [r0, #0]
 c003c22:	4643      	mov	r3, r8
 c003c24:	6802      	ldr	r2, [r0, #0]
 c003c26:	6838      	ldr	r0, [r7, #0]
 c003c28:	f7fc fccf 	bl	c0005ca <cmox_ModAddBN>
 c003c2c:	69a0      	ldr	r0, [r4, #24]
 c003c2e:	464b      	mov	r3, r9
 c003c30:	6801      	ldr	r1, [r0, #0]
 c003c32:	6838      	ldr	r0, [r7, #0]
 c003c34:	680a      	ldr	r2, [r1, #0]
 c003c36:	68b9      	ldr	r1, [r7, #8]
 c003c38:	f7fc fd58 	bl	c0006ec <cmox_ModSubBN>
 c003c3c:	69a0      	ldr	r0, [r4, #24]
 c003c3e:	683b      	ldr	r3, [r7, #0]
 c003c40:	6801      	ldr	r1, [r0, #0]
 c003c42:	6830      	ldr	r0, [r6, #0]
 c003c44:	680a      	ldr	r2, [r1, #0]
 c003c46:	68b1      	ldr	r1, [r6, #8]
 c003c48:	f7fc fcbf 	bl	c0005ca <cmox_ModAddBN>
 c003c4c:	69a0      	ldr	r0, [r4, #24]
 c003c4e:	68bb      	ldr	r3, [r7, #8]
 c003c50:	6801      	ldr	r1, [r0, #0]
 c003c52:	6830      	ldr	r0, [r6, #0]
 c003c54:	680a      	ldr	r2, [r1, #0]
 c003c56:	68b1      	ldr	r1, [r6, #8]
 c003c58:	f7fc fd48 	bl	c0006ec <cmox_ModSubBN>
 c003c5c:	6a21      	ldr	r1, [r4, #32]
 c003c5e:	68b8      	ldr	r0, [r7, #8]
 c003c60:	4623      	mov	r3, r4
 c003c62:	9100      	str	r1, [sp, #0]
 c003c64:	4602      	mov	r2, r0
 c003c66:	4641      	mov	r1, r8
 c003c68:	f7fc ff34 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003c6c:	6a23      	ldr	r3, [r4, #32]
 c003c6e:	4622      	mov	r2, r4
 c003c70:	4641      	mov	r1, r8
 c003c72:	4640      	mov	r0, r8
 c003c74:	f7fc ff51 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003c78:	6a21      	ldr	r1, [r4, #32]
 c003c7a:	6838      	ldr	r0, [r7, #0]
 c003c7c:	4623      	mov	r3, r4
 c003c7e:	9100      	str	r1, [sp, #0]
 c003c80:	4602      	mov	r2, r0
 c003c82:	4649      	mov	r1, r9
 c003c84:	f7fc ff26 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003c88:	6a23      	ldr	r3, [r4, #32]
 c003c8a:	4622      	mov	r2, r4
 c003c8c:	4649      	mov	r1, r9
 c003c8e:	4648      	mov	r0, r9
 c003c90:	f7fc ff43 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003c94:	69a0      	ldr	r0, [r4, #24]
 c003c96:	6833      	ldr	r3, [r6, #0]
 c003c98:	6801      	ldr	r1, [r0, #0]
 c003c9a:	68b8      	ldr	r0, [r7, #8]
 c003c9c:	680a      	ldr	r2, [r1, #0]
 c003c9e:	6839      	ldr	r1, [r7, #0]
 c003ca0:	f7fc fc93 	bl	c0005ca <cmox_ModAddBN>
 c003ca4:	69a1      	ldr	r1, [r4, #24]
 c003ca6:	68b8      	ldr	r0, [r7, #8]
 c003ca8:	680a      	ldr	r2, [r1, #0]
 c003caa:	6839      	ldr	r1, [r7, #0]
 c003cac:	4603      	mov	r3, r0
 c003cae:	6812      	ldr	r2, [r2, #0]
 c003cb0:	f7fc fd1c 	bl	c0006ec <cmox_ModSubBN>
 c003cb4:	6830      	ldr	r0, [r6, #0]
 c003cb6:	6a23      	ldr	r3, [r4, #32]
 c003cb8:	4622      	mov	r2, r4
 c003cba:	4601      	mov	r1, r0
 c003cbc:	f7fc ff2d 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003cc0:	68b8      	ldr	r0, [r7, #8]
 c003cc2:	6a23      	ldr	r3, [r4, #32]
 c003cc4:	4622      	mov	r2, r4
 c003cc6:	4601      	mov	r1, r0
 c003cc8:	f7fc ff27 	bl	c000b1a <cmox_ModularBN_Sqr>
 c003ccc:	6a20      	ldr	r0, [r4, #32]
 c003cce:	4623      	mov	r3, r4
 c003cd0:	9000      	str	r0, [sp, #0]
 c003cd2:	68b2      	ldr	r2, [r6, #8]
 c003cd4:	68b9      	ldr	r1, [r7, #8]
 c003cd6:	6828      	ldr	r0, [r5, #0]
 c003cd8:	f7fc fefc 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003cdc:	6a20      	ldr	r0, [r4, #32]
 c003cde:	4623      	mov	r3, r4
 c003ce0:	4649      	mov	r1, r9
 c003ce2:	9000      	str	r0, [sp, #0]
 c003ce4:	683a      	ldr	r2, [r7, #0]
 c003ce6:	4640      	mov	r0, r8
 c003ce8:	f7fc fef4 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003cec:	69a0      	ldr	r0, [r4, #24]
 c003cee:	464b      	mov	r3, r9
 c003cf0:	6801      	ldr	r1, [r0, #0]
 c003cf2:	4640      	mov	r0, r8
 c003cf4:	680a      	ldr	r2, [r1, #0]
 c003cf6:	4649      	mov	r1, r9
 c003cf8:	f7fc fcf8 	bl	c0006ec <cmox_ModSubBN>
 c003cfc:	6a20      	ldr	r0, [r4, #32]
 c003cfe:	4623      	mov	r3, r4
 c003d00:	9000      	str	r0, [sp, #0]
 c003d02:	69a0      	ldr	r0, [r4, #24]
 c003d04:	68ba      	ldr	r2, [r7, #8]
 c003d06:	6801      	ldr	r1, [r0, #0]
 c003d08:	4648      	mov	r0, r9
 c003d0a:	6909      	ldr	r1, [r1, #16]
 c003d0c:	f7fc fee2 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003d10:	69a0      	ldr	r0, [r4, #24]
 c003d12:	4643      	mov	r3, r8
 c003d14:	6801      	ldr	r1, [r0, #0]
 c003d16:	4640      	mov	r0, r8
 c003d18:	680a      	ldr	r2, [r1, #0]
 c003d1a:	68b9      	ldr	r1, [r7, #8]
 c003d1c:	f7fc fc55 	bl	c0005ca <cmox_ModAddBN>
 c003d20:	6a20      	ldr	r0, [r4, #32]
 c003d22:	4623      	mov	r3, r4
 c003d24:	4649      	mov	r1, r9
 c003d26:	9000      	str	r0, [sp, #0]
 c003d28:	68ba      	ldr	r2, [r7, #8]
 c003d2a:	4640      	mov	r0, r8
 c003d2c:	f7fc fed2 	bl	c000ad4 <cmox_ModularBN_Mul>
 c003d30:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}

0c003d34 <cmox_ECC_CompleteMADD>:
 c003d34:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 c003d36:	4606      	mov	r6, r0
 c003d38:	2000      	movs	r0, #0
 c003d3a:	460c      	mov	r4, r1
 c003d3c:	4617      	mov	r7, r2
 c003d3e:	9001      	str	r0, [sp, #4]
 c003d40:	6922      	ldr	r2, [r4, #16]
 c003d42:	461d      	mov	r5, r3
 c003d44:	2100      	movs	r1, #0
 c003d46:	612a      	str	r2, [r5, #16]
 c003d48:	7c20      	ldrb	r0, [r4, #16]
 c003d4a:	f000 0001 	and.w	r0, r0, #1
 c003d4e:	f7fc ff19 	bl	c000b84 <cmox_mathUtils_neq>
 c003d52:	2801      	cmp	r0, #1
 c003d54:	d107      	bne.n	c003d66 <cmox_ECC_CompleteMADD+0x32>
 c003d56:	7c38      	ldrb	r0, [r7, #16]
 c003d58:	2100      	movs	r1, #0
 c003d5a:	f000 0001 	and.w	r0, r0, #1
 c003d5e:	f7fc ff11 	bl	c000b84 <cmox_mathUtils_neq>
 c003d62:	2801      	cmp	r0, #1
 c003d64:	d036      	beq.n	c003dd4 <cmox_ECC_CompleteMADD+0xa0>
 c003d66:	7c20      	ldrb	r0, [r4, #16]
 c003d68:	2100      	movs	r1, #0
 c003d6a:	f000 0001 	and.w	r0, r0, #1
 c003d6e:	f7fc ff09 	bl	c000b84 <cmox_mathUtils_neq>
 c003d72:	2801      	cmp	r0, #1
 c003d74:	d102      	bne.n	c003d7c <cmox_ECC_CompleteMADD+0x48>
 c003d76:	462a      	mov	r2, r5
 c003d78:	4639      	mov	r1, r7
 c003d7a:	e009      	b.n	c003d90 <cmox_ECC_CompleteMADD+0x5c>
 c003d7c:	7c38      	ldrb	r0, [r7, #16]
 c003d7e:	2100      	movs	r1, #0
 c003d80:	f000 0001 	and.w	r0, r0, #1
 c003d84:	f7fc fefe 	bl	c000b84 <cmox_mathUtils_neq>
 c003d88:	2801      	cmp	r0, #1
 c003d8a:	d104      	bne.n	c003d96 <cmox_ECC_CompleteMADD+0x62>
 c003d8c:	462a      	mov	r2, r5
 c003d8e:	4621      	mov	r1, r4
 c003d90:	f7fe faae 	bl	c0022f0 <cmox_ECC_CondCopyPoint>
 c003d94:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 c003d96:	463a      	mov	r2, r7
 c003d98:	a801      	add	r0, sp, #4
 c003d9a:	9000      	str	r0, [sp, #0]
 c003d9c:	69b7      	ldr	r7, [r6, #24]
 c003d9e:	462b      	mov	r3, r5
 c003da0:	4621      	mov	r1, r4
 c003da2:	f8d7 c004 	ldr.w	ip, [r7, #4]
 c003da6:	4630      	mov	r0, r6
 c003da8:	f8dc 7004 	ldr.w	r7, [ip, #4]
 c003dac:	47b8      	blx	r7
 c003dae:	9801      	ldr	r0, [sp, #4]
 c003db0:	07c1      	lsls	r1, r0, #31
 c003db2:	d513      	bpl.n	c003ddc <cmox_ECC_CompleteMADD+0xa8>
 c003db4:	f3c0 0040 	ubfx	r0, r0, #1, #1
 c003db8:	b160      	cbz	r0, c003dd4 <cmox_ECC_CompleteMADD+0xa0>
 c003dba:	4630      	mov	r0, r6
 c003dbc:	69b6      	ldr	r6, [r6, #24]
 c003dbe:	2301      	movs	r3, #1
 c003dc0:	462a      	mov	r2, r5
 c003dc2:	6877      	ldr	r7, [r6, #4]
 c003dc4:	4621      	mov	r1, r4
 c003dc6:	f8d7 c000 	ldr.w	ip, [r7]
 c003dca:	47e0      	blx	ip
 c003dcc:	6920      	ldr	r0, [r4, #16]
 c003dce:	0840      	lsrs	r0, r0, #1
 c003dd0:	0040      	lsls	r0, r0, #1
 c003dd2:	e002      	b.n	c003dda <cmox_ECC_CompleteMADD+0xa6>
 c003dd4:	6928      	ldr	r0, [r5, #16]
 c003dd6:	f040 0001 	orr.w	r0, r0, #1
 c003dda:	6128      	str	r0, [r5, #16]
 c003ddc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0c003dde <cmox_ECC_CompleteADD>:
 c003dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c003de0:	4606      	mov	r6, r0
 c003de2:	460f      	mov	r7, r1
 c003de4:	6938      	ldr	r0, [r7, #16]
 c003de6:	461d      	mov	r5, r3
 c003de8:	4614      	mov	r4, r2
 c003dea:	6128      	str	r0, [r5, #16]
 c003dec:	7c38      	ldrb	r0, [r7, #16]
 c003dee:	2100      	movs	r1, #0
 c003df0:	f000 0001 	and.w	r0, r0, #1
 c003df4:	f7fc fec6 	bl	c000b84 <cmox_mathUtils_neq>
 c003df8:	2801      	cmp	r0, #1
 c003dfa:	d107      	bne.n	c003e0c <cmox_ECC_CompleteADD+0x2e>
 c003dfc:	7c20      	ldrb	r0, [r4, #16]
 c003dfe:	2100      	movs	r1, #0
 c003e00:	f000 0001 	and.w	r0, r0, #1
 c003e04:	f7fc febe 	bl	c000b84 <cmox_mathUtils_neq>
 c003e08:	2801      	cmp	r0, #1
 c003e0a:	d03b      	beq.n	c003e84 <cmox_ECC_CompleteADD+0xa6>
 c003e0c:	7c38      	ldrb	r0, [r7, #16]
 c003e0e:	2100      	movs	r1, #0
 c003e10:	f000 0001 	and.w	r0, r0, #1
 c003e14:	f7fc feb6 	bl	c000b84 <cmox_mathUtils_neq>
 c003e18:	2801      	cmp	r0, #1
 c003e1a:	d102      	bne.n	c003e22 <cmox_ECC_CompleteADD+0x44>
 c003e1c:	462a      	mov	r2, r5
 c003e1e:	4621      	mov	r1, r4
 c003e20:	e009      	b.n	c003e36 <cmox_ECC_CompleteADD+0x58>
 c003e22:	7c20      	ldrb	r0, [r4, #16]
 c003e24:	2100      	movs	r1, #0
 c003e26:	f000 0001 	and.w	r0, r0, #1
 c003e2a:	f7fc feab 	bl	c000b84 <cmox_mathUtils_neq>
 c003e2e:	2801      	cmp	r0, #1
 c003e30:	d105      	bne.n	c003e3e <cmox_ECC_CompleteADD+0x60>
 c003e32:	462a      	mov	r2, r5
 c003e34:	4639      	mov	r1, r7
 c003e36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 c003e3a:	f7fe ba59 	b.w	c0022f0 <cmox_ECC_CondCopyPoint>
 c003e3e:	4639      	mov	r1, r7
 c003e40:	69b7      	ldr	r7, [r6, #24]
 c003e42:	462b      	mov	r3, r5
 c003e44:	4622      	mov	r2, r4
 c003e46:	f8d7 c004 	ldr.w	ip, [r7, #4]
 c003e4a:	4630      	mov	r0, r6
 c003e4c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 c003e50:	47b8      	blx	r7
 c003e52:	68a8      	ldr	r0, [r5, #8]
 c003e54:	2100      	movs	r1, #0
 c003e56:	f7fe f808 	bl	c001e6a <cmox_bn_cmpUint>
 c003e5a:	2801      	cmp	r0, #1
 c003e5c:	d116      	bne.n	c003e8c <cmox_ECC_CompleteADD+0xae>
 c003e5e:	6828      	ldr	r0, [r5, #0]
 c003e60:	2100      	movs	r1, #0
 c003e62:	f7fe f802 	bl	c001e6a <cmox_bn_cmpUint>
 c003e66:	2801      	cmp	r0, #1
 c003e68:	d10c      	bne.n	c003e84 <cmox_ECC_CompleteADD+0xa6>
 c003e6a:	4630      	mov	r0, r6
 c003e6c:	69b6      	ldr	r6, [r6, #24]
 c003e6e:	2301      	movs	r3, #1
 c003e70:	462a      	mov	r2, r5
 c003e72:	6877      	ldr	r7, [r6, #4]
 c003e74:	4621      	mov	r1, r4
 c003e76:	f8d7 c000 	ldr.w	ip, [r7]
 c003e7a:	47e0      	blx	ip
 c003e7c:	6920      	ldr	r0, [r4, #16]
 c003e7e:	0840      	lsrs	r0, r0, #1
 c003e80:	0040      	lsls	r0, r0, #1
 c003e82:	e002      	b.n	c003e8a <cmox_ECC_CompleteADD+0xac>
 c003e84:	6928      	ldr	r0, [r5, #16]
 c003e86:	f040 0001 	orr.w	r0, r0, #1
 c003e8a:	6128      	str	r0, [r5, #16]
 c003e8c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0c003e8e <cmox_ECC_CompleteDBL>:
 c003e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c003e90:	4605      	mov	r5, r0
 c003e92:	460e      	mov	r6, r1
 c003e94:	6930      	ldr	r0, [r6, #16]
 c003e96:	4614      	mov	r4, r2
 c003e98:	2100      	movs	r1, #0
 c003e9a:	6120      	str	r0, [r4, #16]
 c003e9c:	7c30      	ldrb	r0, [r6, #16]
 c003e9e:	f000 0001 	and.w	r0, r0, #1
 c003ea2:	f7fc fe6f 	bl	c000b84 <cmox_mathUtils_neq>
 c003ea6:	2801      	cmp	r0, #1
 c003ea8:	d103      	bne.n	c003eb2 <cmox_ECC_CompleteDBL+0x24>
 c003eaa:	6920      	ldr	r0, [r4, #16]
 c003eac:	f040 0001 	orr.w	r0, r0, #1
 c003eb0:	e00a      	b.n	c003ec8 <cmox_ECC_CompleteDBL+0x3a>
 c003eb2:	4628      	mov	r0, r5
 c003eb4:	69ad      	ldr	r5, [r5, #24]
 c003eb6:	4631      	mov	r1, r6
 c003eb8:	2301      	movs	r3, #1
 c003eba:	686e      	ldr	r6, [r5, #4]
 c003ebc:	4622      	mov	r2, r4
 c003ebe:	6837      	ldr	r7, [r6, #0]
 c003ec0:	47b8      	blx	r7
 c003ec2:	6920      	ldr	r0, [r4, #16]
 c003ec4:	0840      	lsrs	r0, r0, #1
 c003ec6:	0040      	lsls	r0, r0, #1
 c003ec8:	6120      	str	r0, [r4, #16]
 c003eca:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 c003ecc:	0101b004 	.word	0x0101b004
 c003ed0:	45011700 	.word	0x45011700

0c003ed4 <cmox_membuf_alloc>:
 c003ed4:	b520      	push	{r5, lr}
 c003ed6:	b111      	cbz	r1, c003ede <cmox_membuf_alloc+0xa>
 c003ed8:	b91a      	cbnz	r2, c003ee2 <cmox_membuf_alloc+0xe>
 c003eda:	2000      	movs	r0, #0
 c003edc:	6008      	str	r0, [r1, #0]
 c003ede:	2001      	movs	r0, #1
 c003ee0:	bd20      	pop	{r5, pc}
 c003ee2:	6883      	ldr	r3, [r0, #8]
 c003ee4:	1cd2      	adds	r2, r2, #3
 c003ee6:	6845      	ldr	r5, [r0, #4]
 c003ee8:	0892      	lsrs	r2, r2, #2
 c003eea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 c003eee:	4295      	cmp	r5, r2
 c003ef0:	d203      	bcs.n	c003efa <cmox_membuf_alloc+0x26>
 c003ef2:	2000      	movs	r0, #0
 c003ef4:	6008      	str	r0, [r1, #0]
 c003ef6:	2002      	movs	r0, #2
 c003ef8:	bd20      	pop	{r5, pc}
 c003efa:	6805      	ldr	r5, [r0, #0]
 c003efc:	442b      	add	r3, r5
 c003efe:	600b      	str	r3, [r1, #0]
 c003f00:	6082      	str	r2, [r0, #8]
 c003f02:	4611      	mov	r1, r2
 c003f04:	68c2      	ldr	r2, [r0, #12]
 c003f06:	4291      	cmp	r1, r2
 c003f08:	bf38      	it	cc
 c003f0a:	4611      	movcc	r1, r2
 c003f0c:	60c1      	str	r1, [r0, #12]
 c003f0e:	2000      	movs	r0, #0
 c003f10:	bd20      	pop	{r5, pc}

0c003f12 <cmox_membuf_free>:
 c003f12:	b510      	push	{r4, lr}
 c003f14:	4604      	mov	r4, r0
 c003f16:	2000      	movs	r0, #0
 c003f18:	2900      	cmp	r1, #0
 c003f1a:	bf1c      	itt	ne
 c003f1c:	680b      	ldrne	r3, [r1, #0]
 c003f1e:	2b00      	cmpne	r3, #0
 c003f20:	d003      	beq.n	c003f2a <cmox_membuf_free+0x18>
 c003f22:	b112      	cbz	r2, c003f2a <cmox_membuf_free+0x18>
 c003f24:	68a3      	ldr	r3, [r4, #8]
 c003f26:	4293      	cmp	r3, r2
 c003f28:	d201      	bcs.n	c003f2e <cmox_membuf_free+0x1c>
 c003f2a:	2001      	movs	r0, #1
 c003f2c:	bd10      	pop	{r4, pc}
 c003f2e:	1cd2      	adds	r2, r2, #3
 c003f30:	0892      	lsrs	r2, r2, #2
 c003f32:	6008      	str	r0, [r1, #0]
 c003f34:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 c003f38:	60a2      	str	r2, [r4, #8]
 c003f3a:	bd10      	pop	{r4, pc}

0c003f3c <__aeabi_memset>:
 c003f3c:	b470      	push	{r4, r5, r6}
 c003f3e:	0784      	lsls	r4, r0, #30
 c003f40:	d046      	beq.n	c003fd0 <__aeabi_memset+0x94>
 c003f42:	1e4c      	subs	r4, r1, #1
 c003f44:	2900      	cmp	r1, #0
 c003f46:	d041      	beq.n	c003fcc <__aeabi_memset+0x90>
 c003f48:	b2d5      	uxtb	r5, r2
 c003f4a:	4603      	mov	r3, r0
 c003f4c:	e002      	b.n	c003f54 <__aeabi_memset+0x18>
 c003f4e:	1e61      	subs	r1, r4, #1
 c003f50:	b3e4      	cbz	r4, c003fcc <__aeabi_memset+0x90>
 c003f52:	460c      	mov	r4, r1
 c003f54:	f803 5b01 	strb.w	r5, [r3], #1
 c003f58:	0799      	lsls	r1, r3, #30
 c003f5a:	d1f8      	bne.n	c003f4e <__aeabi_memset+0x12>
 c003f5c:	2c03      	cmp	r4, #3
 c003f5e:	d92e      	bls.n	c003fbe <__aeabi_memset+0x82>
 c003f60:	b2d5      	uxtb	r5, r2
 c003f62:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 c003f66:	2c0f      	cmp	r4, #15
 c003f68:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 c003f6c:	d919      	bls.n	c003fa2 <__aeabi_memset+0x66>
 c003f6e:	4626      	mov	r6, r4
 c003f70:	f103 0110 	add.w	r1, r3, #16
 c003f74:	3e10      	subs	r6, #16
 c003f76:	2e0f      	cmp	r6, #15
 c003f78:	f841 5c10 	str.w	r5, [r1, #-16]
 c003f7c:	f841 5c0c 	str.w	r5, [r1, #-12]
 c003f80:	f841 5c08 	str.w	r5, [r1, #-8]
 c003f84:	f841 5c04 	str.w	r5, [r1, #-4]
 c003f88:	f101 0110 	add.w	r1, r1, #16
 c003f8c:	d8f2      	bhi.n	c003f74 <__aeabi_memset+0x38>
 c003f8e:	f1a4 0110 	sub.w	r1, r4, #16
 c003f92:	f021 010f 	bic.w	r1, r1, #15
 c003f96:	f004 040f 	and.w	r4, r4, #15
 c003f9a:	3110      	adds	r1, #16
 c003f9c:	2c03      	cmp	r4, #3
 c003f9e:	440b      	add	r3, r1
 c003fa0:	d90d      	bls.n	c003fbe <__aeabi_memset+0x82>
 c003fa2:	461e      	mov	r6, r3
 c003fa4:	4621      	mov	r1, r4
 c003fa6:	3904      	subs	r1, #4
 c003fa8:	2903      	cmp	r1, #3
 c003faa:	f846 5b04 	str.w	r5, [r6], #4
 c003fae:	d8fa      	bhi.n	c003fa6 <__aeabi_memset+0x6a>
 c003fb0:	1f21      	subs	r1, r4, #4
 c003fb2:	f021 0103 	bic.w	r1, r1, #3
 c003fb6:	3104      	adds	r1, #4
 c003fb8:	440b      	add	r3, r1
 c003fba:	f004 0403 	and.w	r4, r4, #3
 c003fbe:	b12c      	cbz	r4, c003fcc <__aeabi_memset+0x90>
 c003fc0:	b2d2      	uxtb	r2, r2
 c003fc2:	441c      	add	r4, r3
 c003fc4:	f803 2b01 	strb.w	r2, [r3], #1
 c003fc8:	42a3      	cmp	r3, r4
 c003fca:	d1fb      	bne.n	c003fc4 <__aeabi_memset+0x88>
 c003fcc:	bc70      	pop	{r4, r5, r6}
 c003fce:	4770      	bx	lr
 c003fd0:	460c      	mov	r4, r1
 c003fd2:	4603      	mov	r3, r0
 c003fd4:	e7c2      	b.n	c003f5c <__aeabi_memset+0x20>

0c003fd6 <__gnu_cmse_nonsecure_call>:
 c003fd6:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c003fda:	4627      	mov	r7, r4
 c003fdc:	46a0      	mov	r8, r4
 c003fde:	46a1      	mov	r9, r4
 c003fe0:	46a2      	mov	sl, r4
 c003fe2:	46a3      	mov	fp, r4
 c003fe4:	46a4      	mov	ip, r4
 c003fe6:	ed2d 8b10 	vpush	{d8-d15}
 c003fea:	f04f 0500 	mov.w	r5, #0
 c003fee:	ec45 5b18 	vmov	d8, r5, r5
 c003ff2:	ec45 5a19 	vmov	s18, s19, r5, r5
 c003ff6:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c003ffa:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c003ffe:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c004002:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c004006:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c00400a:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00400e:	eef1 5a10 	vmrs	r5, fpscr
 c004012:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c004016:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c00401a:	4035      	ands	r5, r6
 c00401c:	eee1 5a10 	vmsr	fpscr, r5
 c004020:	f384 8800 	msr	CPSR_f, r4
 c004024:	4625      	mov	r5, r4
 c004026:	4626      	mov	r6, r4
 c004028:	47a4      	blxns	r4
 c00402a:	ecbd 8b10 	vpop	{d8-d15}
 c00402e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

0c004034 <__aeabi_uldivmod>:
 c004034:	b953      	cbnz	r3, c00404c <__aeabi_uldivmod+0x18>
 c004036:	b94a      	cbnz	r2, c00404c <__aeabi_uldivmod+0x18>
 c004038:	2900      	cmp	r1, #0
 c00403a:	bf08      	it	eq
 c00403c:	2800      	cmpeq	r0, #0
 c00403e:	bf1c      	itt	ne
 c004040:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 c004044:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 c004048:	f000 b9b0 	b.w	c0043ac <__aeabi_idiv0>
 c00404c:	f1ad 0c08 	sub.w	ip, sp, #8
 c004050:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c004054:	f000 f806 	bl	c004064 <__udivmoddi4>
 c004058:	f8dd e004 	ldr.w	lr, [sp, #4]
 c00405c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c004060:	b004      	add	sp, #16
 c004062:	4770      	bx	lr

0c004064 <__udivmoddi4>:
 c004064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c004068:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 c00406a:	4688      	mov	r8, r1
 c00406c:	4604      	mov	r4, r0
 c00406e:	468e      	mov	lr, r1
 c004070:	2b00      	cmp	r3, #0
 c004072:	d14a      	bne.n	c00410a <__udivmoddi4+0xa6>
 c004074:	428a      	cmp	r2, r1
 c004076:	4617      	mov	r7, r2
 c004078:	d95f      	bls.n	c00413a <__udivmoddi4+0xd6>
 c00407a:	fab2 f682 	clz	r6, r2
 c00407e:	b14e      	cbz	r6, c004094 <__udivmoddi4+0x30>
 c004080:	f1c6 0320 	rsb	r3, r6, #32
 c004084:	fa01 fe06 	lsl.w	lr, r1, r6
 c004088:	40b7      	lsls	r7, r6
 c00408a:	40b4      	lsls	r4, r6
 c00408c:	fa20 f303 	lsr.w	r3, r0, r3
 c004090:	ea43 0e0e 	orr.w	lr, r3, lr
 c004094:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c004098:	fa1f fc87 	uxth.w	ip, r7
 c00409c:	0c23      	lsrs	r3, r4, #16
 c00409e:	fbbe f1f8 	udiv	r1, lr, r8
 c0040a2:	fb08 ee11 	mls	lr, r8, r1, lr
 c0040a6:	fb01 f20c 	mul.w	r2, r1, ip
 c0040aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 c0040ae:	429a      	cmp	r2, r3
 c0040b0:	d907      	bls.n	c0040c2 <__udivmoddi4+0x5e>
 c0040b2:	18fb      	adds	r3, r7, r3
 c0040b4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 c0040b8:	d202      	bcs.n	c0040c0 <__udivmoddi4+0x5c>
 c0040ba:	429a      	cmp	r2, r3
 c0040bc:	f200 8154 	bhi.w	c004368 <__udivmoddi4+0x304>
 c0040c0:	4601      	mov	r1, r0
 c0040c2:	1a9b      	subs	r3, r3, r2
 c0040c4:	b2a2      	uxth	r2, r4
 c0040c6:	fbb3 f0f8 	udiv	r0, r3, r8
 c0040ca:	fb08 3310 	mls	r3, r8, r0, r3
 c0040ce:	fb00 fc0c 	mul.w	ip, r0, ip
 c0040d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 c0040d6:	4594      	cmp	ip, r2
 c0040d8:	d90b      	bls.n	c0040f2 <__udivmoddi4+0x8e>
 c0040da:	18ba      	adds	r2, r7, r2
 c0040dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 c0040e0:	bf2c      	ite	cs
 c0040e2:	2401      	movcs	r4, #1
 c0040e4:	2400      	movcc	r4, #0
 c0040e6:	4594      	cmp	ip, r2
 c0040e8:	d902      	bls.n	c0040f0 <__udivmoddi4+0x8c>
 c0040ea:	2c00      	cmp	r4, #0
 c0040ec:	f000 813f 	beq.w	c00436e <__udivmoddi4+0x30a>
 c0040f0:	4618      	mov	r0, r3
 c0040f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 c0040f6:	eba2 020c 	sub.w	r2, r2, ip
 c0040fa:	2100      	movs	r1, #0
 c0040fc:	b11d      	cbz	r5, c004106 <__udivmoddi4+0xa2>
 c0040fe:	40f2      	lsrs	r2, r6
 c004100:	2300      	movs	r3, #0
 c004102:	e9c5 2300 	strd	r2, r3, [r5]
 c004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00410a:	428b      	cmp	r3, r1
 c00410c:	d905      	bls.n	c00411a <__udivmoddi4+0xb6>
 c00410e:	b10d      	cbz	r5, c004114 <__udivmoddi4+0xb0>
 c004110:	e9c5 0100 	strd	r0, r1, [r5]
 c004114:	2100      	movs	r1, #0
 c004116:	4608      	mov	r0, r1
 c004118:	e7f5      	b.n	c004106 <__udivmoddi4+0xa2>
 c00411a:	fab3 f183 	clz	r1, r3
 c00411e:	2900      	cmp	r1, #0
 c004120:	d14e      	bne.n	c0041c0 <__udivmoddi4+0x15c>
 c004122:	4543      	cmp	r3, r8
 c004124:	f0c0 8112 	bcc.w	c00434c <__udivmoddi4+0x2e8>
 c004128:	4282      	cmp	r2, r0
 c00412a:	f240 810f 	bls.w	c00434c <__udivmoddi4+0x2e8>
 c00412e:	4608      	mov	r0, r1
 c004130:	2d00      	cmp	r5, #0
 c004132:	d0e8      	beq.n	c004106 <__udivmoddi4+0xa2>
 c004134:	e9c5 4e00 	strd	r4, lr, [r5]
 c004138:	e7e5      	b.n	c004106 <__udivmoddi4+0xa2>
 c00413a:	2a00      	cmp	r2, #0
 c00413c:	f000 80ac 	beq.w	c004298 <__udivmoddi4+0x234>
 c004140:	fab2 f682 	clz	r6, r2
 c004144:	2e00      	cmp	r6, #0
 c004146:	f040 80bb 	bne.w	c0042c0 <__udivmoddi4+0x25c>
 c00414a:	1a8b      	subs	r3, r1, r2
 c00414c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c004150:	b2bc      	uxth	r4, r7
 c004152:	2101      	movs	r1, #1
 c004154:	0c02      	lsrs	r2, r0, #16
 c004156:	b280      	uxth	r0, r0
 c004158:	fbb3 fcfe 	udiv	ip, r3, lr
 c00415c:	fb0e 331c 	mls	r3, lr, ip, r3
 c004160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 c004164:	fb04 f20c 	mul.w	r2, r4, ip
 c004168:	429a      	cmp	r2, r3
 c00416a:	d90e      	bls.n	c00418a <__udivmoddi4+0x126>
 c00416c:	18fb      	adds	r3, r7, r3
 c00416e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 c004172:	bf2c      	ite	cs
 c004174:	f04f 0901 	movcs.w	r9, #1
 c004178:	f04f 0900 	movcc.w	r9, #0
 c00417c:	429a      	cmp	r2, r3
 c00417e:	d903      	bls.n	c004188 <__udivmoddi4+0x124>
 c004180:	f1b9 0f00 	cmp.w	r9, #0
 c004184:	f000 80ec 	beq.w	c004360 <__udivmoddi4+0x2fc>
 c004188:	46c4      	mov	ip, r8
 c00418a:	1a9b      	subs	r3, r3, r2
 c00418c:	fbb3 f8fe 	udiv	r8, r3, lr
 c004190:	fb0e 3318 	mls	r3, lr, r8, r3
 c004194:	fb04 f408 	mul.w	r4, r4, r8
 c004198:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 c00419c:	4294      	cmp	r4, r2
 c00419e:	d90b      	bls.n	c0041b8 <__udivmoddi4+0x154>
 c0041a0:	18ba      	adds	r2, r7, r2
 c0041a2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 c0041a6:	bf2c      	ite	cs
 c0041a8:	2001      	movcs	r0, #1
 c0041aa:	2000      	movcc	r0, #0
 c0041ac:	4294      	cmp	r4, r2
 c0041ae:	d902      	bls.n	c0041b6 <__udivmoddi4+0x152>
 c0041b0:	2800      	cmp	r0, #0
 c0041b2:	f000 80d1 	beq.w	c004358 <__udivmoddi4+0x2f4>
 c0041b6:	4698      	mov	r8, r3
 c0041b8:	1b12      	subs	r2, r2, r4
 c0041ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 c0041be:	e79d      	b.n	c0040fc <__udivmoddi4+0x98>
 c0041c0:	f1c1 0620 	rsb	r6, r1, #32
 c0041c4:	408b      	lsls	r3, r1
 c0041c6:	fa08 f401 	lsl.w	r4, r8, r1
 c0041ca:	fa00 f901 	lsl.w	r9, r0, r1
 c0041ce:	fa22 f706 	lsr.w	r7, r2, r6
 c0041d2:	fa28 f806 	lsr.w	r8, r8, r6
 c0041d6:	408a      	lsls	r2, r1
 c0041d8:	431f      	orrs	r7, r3
 c0041da:	fa20 f306 	lsr.w	r3, r0, r6
 c0041de:	0c38      	lsrs	r0, r7, #16
 c0041e0:	4323      	orrs	r3, r4
 c0041e2:	fa1f fc87 	uxth.w	ip, r7
 c0041e6:	0c1c      	lsrs	r4, r3, #16
 c0041e8:	fbb8 fef0 	udiv	lr, r8, r0
 c0041ec:	fb00 881e 	mls	r8, r0, lr, r8
 c0041f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 c0041f4:	fb0e f80c 	mul.w	r8, lr, ip
 c0041f8:	45a0      	cmp	r8, r4
 c0041fa:	d90e      	bls.n	c00421a <__udivmoddi4+0x1b6>
 c0041fc:	193c      	adds	r4, r7, r4
 c0041fe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 c004202:	bf2c      	ite	cs
 c004204:	f04f 0b01 	movcs.w	fp, #1
 c004208:	f04f 0b00 	movcc.w	fp, #0
 c00420c:	45a0      	cmp	r8, r4
 c00420e:	d903      	bls.n	c004218 <__udivmoddi4+0x1b4>
 c004210:	f1bb 0f00 	cmp.w	fp, #0
 c004214:	f000 80b8 	beq.w	c004388 <__udivmoddi4+0x324>
 c004218:	46d6      	mov	lr, sl
 c00421a:	eba4 0408 	sub.w	r4, r4, r8
 c00421e:	fa1f f883 	uxth.w	r8, r3
 c004222:	fbb4 f3f0 	udiv	r3, r4, r0
 c004226:	fb00 4413 	mls	r4, r0, r3, r4
 c00422a:	fb03 fc0c 	mul.w	ip, r3, ip
 c00422e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 c004232:	45a4      	cmp	ip, r4
 c004234:	d90e      	bls.n	c004254 <__udivmoddi4+0x1f0>
 c004236:	193c      	adds	r4, r7, r4
 c004238:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 c00423c:	bf2c      	ite	cs
 c00423e:	f04f 0801 	movcs.w	r8, #1
 c004242:	f04f 0800 	movcc.w	r8, #0
 c004246:	45a4      	cmp	ip, r4
 c004248:	d903      	bls.n	c004252 <__udivmoddi4+0x1ee>
 c00424a:	f1b8 0f00 	cmp.w	r8, #0
 c00424e:	f000 809f 	beq.w	c004390 <__udivmoddi4+0x32c>
 c004252:	4603      	mov	r3, r0
 c004254:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 c004258:	eba4 040c 	sub.w	r4, r4, ip
 c00425c:	fba0 ec02 	umull	lr, ip, r0, r2
 c004260:	4564      	cmp	r4, ip
 c004262:	4673      	mov	r3, lr
 c004264:	46e0      	mov	r8, ip
 c004266:	d302      	bcc.n	c00426e <__udivmoddi4+0x20a>
 c004268:	d107      	bne.n	c00427a <__udivmoddi4+0x216>
 c00426a:	45f1      	cmp	r9, lr
 c00426c:	d205      	bcs.n	c00427a <__udivmoddi4+0x216>
 c00426e:	ebbe 0302 	subs.w	r3, lr, r2
 c004272:	eb6c 0c07 	sbc.w	ip, ip, r7
 c004276:	3801      	subs	r0, #1
 c004278:	46e0      	mov	r8, ip
 c00427a:	b15d      	cbz	r5, c004294 <__udivmoddi4+0x230>
 c00427c:	ebb9 0203 	subs.w	r2, r9, r3
 c004280:	eb64 0408 	sbc.w	r4, r4, r8
 c004284:	fa04 f606 	lsl.w	r6, r4, r6
 c004288:	fa22 f301 	lsr.w	r3, r2, r1
 c00428c:	40cc      	lsrs	r4, r1
 c00428e:	431e      	orrs	r6, r3
 c004290:	e9c5 6400 	strd	r6, r4, [r5]
 c004294:	2100      	movs	r1, #0
 c004296:	e736      	b.n	c004106 <__udivmoddi4+0xa2>
 c004298:	fbb1 fcf2 	udiv	ip, r1, r2
 c00429c:	0c01      	lsrs	r1, r0, #16
 c00429e:	4614      	mov	r4, r2
 c0042a0:	b280      	uxth	r0, r0
 c0042a2:	4696      	mov	lr, r2
 c0042a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 c0042a8:	2620      	movs	r6, #32
 c0042aa:	4690      	mov	r8, r2
 c0042ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 c0042b0:	4610      	mov	r0, r2
 c0042b2:	fbb1 f1f2 	udiv	r1, r1, r2
 c0042b6:	eba3 0308 	sub.w	r3, r3, r8
 c0042ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 c0042be:	e74b      	b.n	c004158 <__udivmoddi4+0xf4>
 c0042c0:	40b7      	lsls	r7, r6
 c0042c2:	f1c6 0320 	rsb	r3, r6, #32
 c0042c6:	fa01 f206 	lsl.w	r2, r1, r6
 c0042ca:	fa21 f803 	lsr.w	r8, r1, r3
 c0042ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c0042d2:	fa20 f303 	lsr.w	r3, r0, r3
 c0042d6:	b2bc      	uxth	r4, r7
 c0042d8:	40b0      	lsls	r0, r6
 c0042da:	4313      	orrs	r3, r2
 c0042dc:	0c02      	lsrs	r2, r0, #16
 c0042de:	0c19      	lsrs	r1, r3, #16
 c0042e0:	b280      	uxth	r0, r0
 c0042e2:	fbb8 f9fe 	udiv	r9, r8, lr
 c0042e6:	fb0e 8819 	mls	r8, lr, r9, r8
 c0042ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 c0042ee:	fb09 f804 	mul.w	r8, r9, r4
 c0042f2:	4588      	cmp	r8, r1
 c0042f4:	d951      	bls.n	c00439a <__udivmoddi4+0x336>
 c0042f6:	1879      	adds	r1, r7, r1
 c0042f8:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 c0042fc:	bf2c      	ite	cs
 c0042fe:	f04f 0a01 	movcs.w	sl, #1
 c004302:	f04f 0a00 	movcc.w	sl, #0
 c004306:	4588      	cmp	r8, r1
 c004308:	d902      	bls.n	c004310 <__udivmoddi4+0x2ac>
 c00430a:	f1ba 0f00 	cmp.w	sl, #0
 c00430e:	d031      	beq.n	c004374 <__udivmoddi4+0x310>
 c004310:	eba1 0108 	sub.w	r1, r1, r8
 c004314:	fbb1 f9fe 	udiv	r9, r1, lr
 c004318:	fb09 f804 	mul.w	r8, r9, r4
 c00431c:	fb0e 1119 	mls	r1, lr, r9, r1
 c004320:	b29b      	uxth	r3, r3
 c004322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 c004326:	4543      	cmp	r3, r8
 c004328:	d235      	bcs.n	c004396 <__udivmoddi4+0x332>
 c00432a:	18fb      	adds	r3, r7, r3
 c00432c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 c004330:	bf2c      	ite	cs
 c004332:	f04f 0a01 	movcs.w	sl, #1
 c004336:	f04f 0a00 	movcc.w	sl, #0
 c00433a:	4543      	cmp	r3, r8
 c00433c:	d2bb      	bcs.n	c0042b6 <__udivmoddi4+0x252>
 c00433e:	f1ba 0f00 	cmp.w	sl, #0
 c004342:	d1b8      	bne.n	c0042b6 <__udivmoddi4+0x252>
 c004344:	f1a9 0102 	sub.w	r1, r9, #2
 c004348:	443b      	add	r3, r7
 c00434a:	e7b4      	b.n	c0042b6 <__udivmoddi4+0x252>
 c00434c:	1a84      	subs	r4, r0, r2
 c00434e:	eb68 0203 	sbc.w	r2, r8, r3
 c004352:	2001      	movs	r0, #1
 c004354:	4696      	mov	lr, r2
 c004356:	e6eb      	b.n	c004130 <__udivmoddi4+0xcc>
 c004358:	443a      	add	r2, r7
 c00435a:	f1a8 0802 	sub.w	r8, r8, #2
 c00435e:	e72b      	b.n	c0041b8 <__udivmoddi4+0x154>
 c004360:	f1ac 0c02 	sub.w	ip, ip, #2
 c004364:	443b      	add	r3, r7
 c004366:	e710      	b.n	c00418a <__udivmoddi4+0x126>
 c004368:	3902      	subs	r1, #2
 c00436a:	443b      	add	r3, r7
 c00436c:	e6a9      	b.n	c0040c2 <__udivmoddi4+0x5e>
 c00436e:	443a      	add	r2, r7
 c004370:	3802      	subs	r0, #2
 c004372:	e6be      	b.n	c0040f2 <__udivmoddi4+0x8e>
 c004374:	eba7 0808 	sub.w	r8, r7, r8
 c004378:	f1a9 0c02 	sub.w	ip, r9, #2
 c00437c:	4441      	add	r1, r8
 c00437e:	fbb1 f9fe 	udiv	r9, r1, lr
 c004382:	fb09 f804 	mul.w	r8, r9, r4
 c004386:	e7c9      	b.n	c00431c <__udivmoddi4+0x2b8>
 c004388:	f1ae 0e02 	sub.w	lr, lr, #2
 c00438c:	443c      	add	r4, r7
 c00438e:	e744      	b.n	c00421a <__udivmoddi4+0x1b6>
 c004390:	3b02      	subs	r3, #2
 c004392:	443c      	add	r4, r7
 c004394:	e75e      	b.n	c004254 <__udivmoddi4+0x1f0>
 c004396:	4649      	mov	r1, r9
 c004398:	e78d      	b.n	c0042b6 <__udivmoddi4+0x252>
 c00439a:	eba1 0108 	sub.w	r1, r1, r8
 c00439e:	46cc      	mov	ip, r9
 c0043a0:	fbb1 f9fe 	udiv	r9, r1, lr
 c0043a4:	fb09 f804 	mul.w	r8, r9, r4
 c0043a8:	e7b8      	b.n	c00431c <__udivmoddi4+0x2b8>
 c0043aa:	bf00      	nop

0c0043ac <__aeabi_idiv0>:
 c0043ac:	4770      	bx	lr
 c0043ae:	bf00      	nop

0c0043b0 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 c0043b0:	b480      	push	{r7}
 c0043b2:	b085      	sub	sp, #20
 c0043b4:	af00      	add	r7, sp, #0
 c0043b6:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 c0043b8:	4b0d      	ldr	r3, [pc, #52]	@ (c0043f0 <cmox_ll_init+0x40>)
 c0043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c0043bc:	4a0c      	ldr	r2, [pc, #48]	@ (c0043f0 <cmox_ll_init+0x40>)
 c0043be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 c0043c2:	6613      	str	r3, [r2, #96]	@ 0x60
  __HAL_RCC_CRC_CLK_ENABLE();
 c0043c4:	4b0a      	ldr	r3, [pc, #40]	@ (c0043f0 <cmox_ll_init+0x40>)
 c0043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0043ca:	4a09      	ldr	r2, [pc, #36]	@ (c0043f0 <cmox_ll_init+0x40>)
 c0043cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 c0043d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 c0043d4:	4b06      	ldr	r3, [pc, #24]	@ (c0043f0 <cmox_ll_init+0x40>)
 c0043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c0043da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 c0043de:	60fb      	str	r3, [r7, #12]
 c0043e0:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 c0043e2:	2300      	movs	r3, #0
}
 c0043e4:	4618      	mov	r0, r3
 c0043e6:	3714      	adds	r7, #20
 c0043e8:	46bd      	mov	sp, r7
 c0043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0043ee:	4770      	bx	lr
 c0043f0:	56020c00 	.word	0x56020c00

0c0043f4 <cmox_ll_deInit>:
  * @brief          CMOX library low level de-initialization
  * @param          pArg User defined parameter that is transmitted from finalize service
  * @retval         De-initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_deInit(void *pArg)
{
 c0043f4:	b480      	push	{r7}
 c0043f6:	b083      	sub	sp, #12
 c0043f8:	af00      	add	r7, sp, #0
 c0043fa:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Do not turn off CRC to avoid side effect on other SW parts using it */
  return CMOX_INIT_SUCCESS;
 c0043fc:	2300      	movs	r3, #0
}
 c0043fe:	4618      	mov	r0, r3
 c004400:	370c      	adds	r7, #12
 c004402:	46bd      	mov	sp, r7
 c004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004408:	4770      	bx	lr
	...

0c00440c <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 c00440c:	b480      	push	{r7}
 c00440e:	b085      	sub	sp, #20
 c004410:	af00      	add	r7, sp, #0
 c004412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 c004414:	4b0a      	ldr	r3, [pc, #40]	@ (c004440 <LL_AHB2_GRP1_EnableClock+0x34>)
 c004416:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 c00441a:	4909      	ldr	r1, [pc, #36]	@ (c004440 <LL_AHB2_GRP1_EnableClock+0x34>)
 c00441c:	687b      	ldr	r3, [r7, #4]
 c00441e:	4313      	orrs	r3, r2
 c004420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 c004424:	4b06      	ldr	r3, [pc, #24]	@ (c004440 <LL_AHB2_GRP1_EnableClock+0x34>)
 c004426:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 c00442a:	687b      	ldr	r3, [r7, #4]
 c00442c:	4013      	ands	r3, r2
 c00442e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 c004430:	68fb      	ldr	r3, [r7, #12]
}
 c004432:	bf00      	nop
 c004434:	3714      	adds	r7, #20
 c004436:	46bd      	mov	sp, r7
 c004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00443c:	4770      	bx	lr
 c00443e:	bf00      	nop
 c004440:	56020c00 	.word	0x56020c00

0c004444 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 c004444:	b480      	push	{r7}
 c004446:	b085      	sub	sp, #20
 c004448:	af00      	add	r7, sp, #0
 c00444a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 c00444c:	4b0a      	ldr	r3, [pc, #40]	@ (c004478 <LL_APB1_GRP2_EnableClock+0x34>)
 c00444e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 c004452:	4909      	ldr	r1, [pc, #36]	@ (c004478 <LL_APB1_GRP2_EnableClock+0x34>)
 c004454:	687b      	ldr	r3, [r7, #4]
 c004456:	4313      	orrs	r3, r2
 c004458:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 c00445c:	4b06      	ldr	r3, [pc, #24]	@ (c004478 <LL_APB1_GRP2_EnableClock+0x34>)
 c00445e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 c004462:	687b      	ldr	r3, [r7, #4]
 c004464:	4013      	ands	r3, r2
 c004466:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 c004468:	68fb      	ldr	r3, [r7, #12]
}
 c00446a:	bf00      	nop
 c00446c:	3714      	adds	r7, #20
 c00446e:	46bd      	mov	sp, r7
 c004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004474:	4770      	bx	lr
 c004476:	bf00      	nop
 c004478:	56020c00 	.word	0x56020c00

0c00447c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c00447c:	b580      	push	{r7, lr}
 c00447e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c004480:	f002 f806 	bl	c006490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 c004484:	f000 f8c8 	bl	c004618 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 c004488:	f000 f862 	bl	c004550 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c00448c:	f000 f920 	bl	c0046d0 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c004490:	f000 feb2 	bl	c0051f8 <MX_GPIO_Init>
  MX_ADF1_Init();
 c004494:	f000 f8ce 	bl	c004634 <MX_ADF1_Init>
  MX_I2C1_Init();
 c004498:	f000 fbb6 	bl	c004c08 <MX_I2C1_Init>
  MX_I2C2_Init();
 c00449c:	f000 fbf4 	bl	c004c88 <MX_I2C2_Init>
  MX_ICACHE_Init();
 c0044a0:	f000 fc32 	bl	c004d08 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 c0044a4:	f000 fc44 	bl	c004d30 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 c0044a8:	f000 fcbc 	bl	c004e24 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 c0044ac:	f000 fd36 	bl	c004f1c <MX_SPI2_Init>
  MX_UART4_Init();
 c0044b0:	f000 fda2 	bl	c004ff8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 c0044b4:	f000 fdec 	bl	c005090 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 c0044b8:	f000 fe36 	bl	c005128 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 c0044bc:	f000 fe6a 	bl	c005194 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0044c0:	f000 f802 	bl	c0044c8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0044c4:	bf00      	nop
 c0044c6:	e7fd      	b.n	c0044c4 <main+0x48>

0c0044c8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0044c8:	b590      	push	{r4, r7, lr}
 c0044ca:	b083      	sub	sp, #12
 c0044cc:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0044ce:	4b1e      	ldr	r3, [pc, #120]	@ (c004548 <NonSecure_Init+0x80>)
 c0044d0:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 c0044d4:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0044d6:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 c0044da:	681b      	ldr	r3, [r3, #0]
 c0044dc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0044de:	683b      	ldr	r3, [r7, #0]
 c0044e0:	f383 8888 	msr	MSP_NS, r3
}
 c0044e4:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0044e6:	4b19      	ldr	r3, [pc, #100]	@ (c00454c <NonSecure_Init+0x84>)
 c0044e8:	681b      	ldr	r3, [r3, #0]
 c0044ea:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0044ec:	687b      	ldr	r3, [r7, #4]
 c0044ee:	461c      	mov	r4, r3
 c0044f0:	0864      	lsrs	r4, r4, #1
 c0044f2:	0064      	lsls	r4, r4, #1
 c0044f4:	4620      	mov	r0, r4
 c0044f6:	4621      	mov	r1, r4
 c0044f8:	4622      	mov	r2, r4
 c0044fa:	4623      	mov	r3, r4
 c0044fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c004500:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c004504:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c004508:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00450c:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c004510:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c004514:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c004518:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00451c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c004520:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c004524:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c004528:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c00452c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c004530:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c004538:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c00453c:	f7ff fd4b 	bl	c003fd6 <__gnu_cmse_nonsecure_call>
}
 c004540:	bf00      	nop
 c004542:	370c      	adds	r7, #12
 c004544:	46bd      	mov	sp, r7
 c004546:	bd90      	pop	{r4, r7, pc}
 c004548:	e002ed00 	.word	0xe002ed00
 c00454c:	08100004 	.word	0x08100004

0c004550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c004550:	b580      	push	{r7, lr}
 c004552:	b09e      	sub	sp, #120	@ 0x78
 c004554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c004556:	f107 0318 	add.w	r3, r7, #24
 c00455a:	2260      	movs	r2, #96	@ 0x60
 c00455c:	2100      	movs	r1, #0
 c00455e:	4618      	mov	r0, r3
 c004560:	f009 fdea 	bl	c00e138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c004564:	463b      	mov	r3, r7
 c004566:	2200      	movs	r2, #0
 c004568:	601a      	str	r2, [r3, #0]
 c00456a:	605a      	str	r2, [r3, #4]
 c00456c:	609a      	str	r2, [r3, #8]
 c00456e:	60da      	str	r2, [r3, #12]
 c004570:	611a      	str	r2, [r3, #16]
 c004572:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 c004574:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 c004578:	f004 fa34 	bl	c0089e4 <HAL_PWREx_ControlVoltageScaling>
 c00457c:	4603      	mov	r3, r0
 c00457e:	2b00      	cmp	r3, #0
 c004580:	d001      	beq.n	c004586 <SystemClock_Config+0x36>
  {
    Error_Handler();
 c004582:	f000 fee7 	bl	c005354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 c004586:	2332      	movs	r3, #50	@ 0x32
 c004588:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c00458a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 c00458e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 c004590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 c004594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c004596:	2310      	movs	r3, #16
 c004598:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c00459a:	2301      	movs	r3, #1
 c00459c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c00459e:	2310      	movs	r3, #16
 c0045a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 c0045a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 c0045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0045a8:	2302      	movs	r3, #2
 c0045aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0045ac:	2301      	movs	r3, #1
 c0045ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 c0045b0:	2300      	movs	r3, #0
 c0045b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 c0045b4:	2301      	movs	r3, #1
 c0045b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 c0045b8:	2350      	movs	r3, #80	@ 0x50
 c0045ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 c0045bc:	2302      	movs	r3, #2
 c0045be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 c0045c0:	2302      	movs	r3, #2
 c0045c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 c0045c4:	2302      	movs	r3, #2
 c0045c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 c0045c8:	2300      	movs	r3, #0
 c0045ca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 c0045cc:	2300      	movs	r3, #0
 c0045ce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0045d0:	f107 0318 	add.w	r3, r7, #24
 c0045d4:	4618      	mov	r0, r3
 c0045d6:	f004 fb01 	bl	c008bdc <HAL_RCC_OscConfig>
 c0045da:	4603      	mov	r3, r0
 c0045dc:	2b00      	cmp	r3, #0
 c0045de:	d001      	beq.n	c0045e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 c0045e0:	f000 feb8 	bl	c005354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0045e4:	231f      	movs	r3, #31
 c0045e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0045e8:	2303      	movs	r3, #3
 c0045ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0045ec:	2300      	movs	r3, #0
 c0045ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0045f0:	2300      	movs	r3, #0
 c0045f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0045f4:	2300      	movs	r3, #0
 c0045f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 c0045f8:	2300      	movs	r3, #0
 c0045fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 c0045fc:	463b      	mov	r3, r7
 c0045fe:	2104      	movs	r1, #4
 c004600:	4618      	mov	r0, r3
 c004602:	f005 f9c7 	bl	c009994 <HAL_RCC_ClockConfig>
 c004606:	4603      	mov	r3, r0
 c004608:	2b00      	cmp	r3, #0
 c00460a:	d001      	beq.n	c004610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 c00460c:	f000 fea2 	bl	c005354 <Error_Handler>
  }
}
 c004610:	bf00      	nop
 c004612:	3778      	adds	r7, #120	@ 0x78
 c004614:	46bd      	mov	sp, r7
 c004616:	bd80      	pop	{r7, pc}

0c004618 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 c004618:	b580      	push	{r7, lr}
 c00461a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 c00461c:	f004 face 	bl	c008bbc <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 c004620:	2002      	movs	r0, #2
 c004622:	f004 fa6b 	bl	c008afc <HAL_PWREx_ConfigSupply>
 c004626:	4603      	mov	r3, r0
 c004628:	2b00      	cmp	r3, #0
 c00462a:	d001      	beq.n	c004630 <SystemPower_Config+0x18>
  {
    Error_Handler();
 c00462c:	f000 fe92 	bl	c005354 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 c004630:	bf00      	nop
 c004632:	bd80      	pop	{r7, pc}

0c004634 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 c004634:	b580      	push	{r7, lr}
 c004636:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 c004638:	4b22      	ldr	r3, [pc, #136]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c00463a:	4a23      	ldr	r2, [pc, #140]	@ (c0046c8 <MX_ADF1_Init+0x94>)
 c00463c:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 c00463e:	4b21      	ldr	r3, [pc, #132]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c004640:	2201      	movs	r2, #1
 c004642:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 c004644:	4b1f      	ldr	r3, [pc, #124]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c004646:	2200      	movs	r2, #0
 c004648:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 c00464a:	4b1e      	ldr	r3, [pc, #120]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c00464c:	2201      	movs	r2, #1
 c00464e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_LF_MASTER_SPI_MODE;
 c004652:	4b1c      	ldr	r3, [pc, #112]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c004654:	2200      	movs	r2, #0
 c004656:	629a      	str	r2, [r3, #40]	@ 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 c004658:	4b1a      	ldr	r3, [pc, #104]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c00465a:	2200      	movs	r2, #0
 c00465c:	62da      	str	r2, [r3, #44]	@ 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 c00465e:	4b19      	ldr	r3, [pc, #100]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c004660:	2204      	movs	r2, #4
 c004662:	631a      	str	r2, [r3, #48]	@ 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 c004664:	4b17      	ldr	r3, [pc, #92]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c004666:	2201      	movs	r2, #1
 c004668:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 c00466a:	4816      	ldr	r0, [pc, #88]	@ (c0046c4 <MX_ADF1_Init+0x90>)
 c00466c:	f002 ff5a 	bl	c007524 <HAL_MDF_Init>
 c004670:	4603      	mov	r3, r0
 c004672:	2b00      	cmp	r3, #0
 c004674:	d001      	beq.n	c00467a <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 c004676:	f000 fe6d 	bl	c005354 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 c00467a:	4b14      	ldr	r3, [pc, #80]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c00467c:	2200      	movs	r2, #0
 c00467e:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 c004680:	4b12      	ldr	r3, [pc, #72]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c004682:	2200      	movs	r2, #0
 c004684:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 c004686:	4b11      	ldr	r3, [pc, #68]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c004688:	2240      	movs	r2, #64	@ 0x40
 c00468a:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 c00468c:	4b0f      	ldr	r3, [pc, #60]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c00468e:	2202      	movs	r2, #2
 c004690:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 c004692:	4b0e      	ldr	r3, [pc, #56]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c004694:	2200      	movs	r2, #0
 c004696:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 c004698:	4b0c      	ldr	r3, [pc, #48]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c00469a:	2200      	movs	r2, #0
 c00469c:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 c00469e:	4b0b      	ldr	r3, [pc, #44]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c0046a0:	2200      	movs	r2, #0
 c0046a2:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 c0046a6:	4b09      	ldr	r3, [pc, #36]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c0046a8:	2200      	movs	r2, #0
 c0046aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 c0046ae:	4b07      	ldr	r3, [pc, #28]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c0046b0:	2200      	movs	r2, #0
 c0046b2:	665a      	str	r2, [r3, #100]	@ 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 c0046b4:	4b05      	ldr	r3, [pc, #20]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c0046b6:	2200      	movs	r2, #0
 c0046b8:	669a      	str	r2, [r3, #104]	@ 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 c0046ba:	4b04      	ldr	r3, [pc, #16]	@ (c0046cc <MX_ADF1_Init+0x98>)
 c0046bc:	2200      	movs	r2, #0
 c0046be:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 c0046c0:	bf00      	nop
 c0046c2:	bd80      	pop	{r7, pc}
 c0046c4:	3000002c 	.word	0x3000002c
 c0046c8:	56024080 	.word	0x56024080
 c0046cc:	30000070 	.word	0x30000070

0c0046d0 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c0046d0:	b580      	push	{r7, lr}
 c0046d2:	b0c4      	sub	sp, #272	@ 0x110
 c0046d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c0046d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0046da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0046de:	4618      	mov	r0, r3
 c0046e0:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 c0046e4:	461a      	mov	r2, r3
 c0046e6:	2100      	movs	r1, #0
 c0046e8:	f009 fd26 	bl	c00e138 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_SPI2, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0046ec:	f240 3101 	movw	r1, #769	@ 0x301
 c0046f0:	2008      	movs	r0, #8
 c0046f2:	f002 fb7b 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0046f6:	4603      	mov	r3, r0
 c0046f8:	2b00      	cmp	r3, #0
 c0046fa:	d001      	beq.n	c004700 <MX_GTZC_S_Init+0x30>
  {
    Error_Handler();
 c0046fc:	f000 fe2a 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART2, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c004700:	f240 3101 	movw	r1, #769	@ 0x301
 c004704:	2009      	movs	r0, #9
 c004706:	f002 fb71 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00470a:	4603      	mov	r3, r0
 c00470c:	2b00      	cmp	r3, #0
 c00470e:	d001      	beq.n	c004714 <MX_GTZC_S_Init+0x44>
  {
    Error_Handler();
 c004710:	f000 fe20 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_UART4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c004714:	f240 3101 	movw	r1, #769	@ 0x301
 c004718:	200b      	movs	r0, #11
 c00471a:	f002 fb67 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00471e:	4603      	mov	r3, r0
 c004720:	2b00      	cmp	r3, #0
 c004722:	d001      	beq.n	c004728 <MX_GTZC_S_Init+0x58>
  {
    Error_Handler();
 c004724:	f000 fe16 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_I2C1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c004728:	f240 3101 	movw	r1, #769	@ 0x301
 c00472c:	200d      	movs	r0, #13
 c00472e:	f002 fb5d 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c004732:	4603      	mov	r3, r0
 c004734:	2b00      	cmp	r3, #0
 c004736:	d001      	beq.n	c00473c <MX_GTZC_S_Init+0x6c>
  {
    Error_Handler();
 c004738:	f000 fe0c 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_I2C2, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00473c:	f240 3101 	movw	r1, #769	@ 0x301
 c004740:	200e      	movs	r0, #14
 c004742:	f002 fb53 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c004746:	4603      	mov	r3, r0
 c004748:	2b00      	cmp	r3, #0
 c00474a:	d001      	beq.n	c004750 <MX_GTZC_S_Init+0x80>
  {
    Error_Handler();
 c00474c:	f000 fe02 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_UCPD1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c004750:	f240 3101 	movw	r1, #769	@ 0x301
 c004754:	2013      	movs	r0, #19
 c004756:	f002 fb49 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00475a:	4603      	mov	r3, r0
 c00475c:	2b00      	cmp	r3, #0
 c00475e:	d001      	beq.n	c004764 <MX_GTZC_S_Init+0x94>
  {
    Error_Handler();
 c004760:	f000 fdf8 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c004764:	f240 3101 	movw	r1, #769	@ 0x301
 c004768:	482c      	ldr	r0, [pc, #176]	@ (c00481c <MX_GTZC_S_Init+0x14c>)
 c00476a:	f002 fb3f 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00476e:	4603      	mov	r3, r0
 c004770:	2b00      	cmp	r3, #0
 c004772:	d001      	beq.n	c004778 <MX_GTZC_S_Init+0xa8>
  {
    Error_Handler();
 c004774:	f000 fdee 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_MDF1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c004778:	f240 3101 	movw	r1, #769	@ 0x301
 c00477c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 c004780:	f002 fb34 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c004784:	4603      	mov	r3, r0
 c004786:	2b00      	cmp	r3, #0
 c004788:	d001      	beq.n	c00478e <MX_GTZC_S_Init+0xbe>
  {
    Error_Handler();
 c00478a:	f000 fde3 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADC12, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00478e:	f240 3101 	movw	r1, #769	@ 0x301
 c004792:	4823      	ldr	r0, [pc, #140]	@ (c004820 <MX_GTZC_S_Init+0x150>)
 c004794:	f002 fb2a 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c004798:	4603      	mov	r3, r0
 c00479a:	2b00      	cmp	r3, #0
 c00479c:	d001      	beq.n	c0047a2 <MX_GTZC_S_Init+0xd2>
  {
    Error_Handler();
 c00479e:	f000 fdd9 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OTG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0047a2:	f240 3101 	movw	r1, #769	@ 0x301
 c0047a6:	481f      	ldr	r0, [pc, #124]	@ (c004824 <MX_GTZC_S_Init+0x154>)
 c0047a8:	f002 fb20 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0047ac:	4603      	mov	r3, r0
 c0047ae:	2b00      	cmp	r3, #0
 c0047b0:	d001      	beq.n	c0047b6 <MX_GTZC_S_Init+0xe6>
  {
    Error_Handler();
 c0047b2:	f000 fdcf 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OCTOSPIM, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0047b6:	f240 3101 	movw	r1, #769	@ 0x301
 c0047ba:	481b      	ldr	r0, [pc, #108]	@ (c004828 <MX_GTZC_S_Init+0x158>)
 c0047bc:	f002 fb16 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0047c0:	4603      	mov	r3, r0
 c0047c2:	2b00      	cmp	r3, #0
 c0047c4:	d001      	beq.n	c0047ca <MX_GTZC_S_Init+0xfa>
  {
    Error_Handler();
 c0047c6:	f000 fdc5 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OCTOSPI1_REG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0047ca:	f240 3101 	movw	r1, #769	@ 0x301
 c0047ce:	4817      	ldr	r0, [pc, #92]	@ (c00482c <MX_GTZC_S_Init+0x15c>)
 c0047d0:	f002 fb0c 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0047d4:	4603      	mov	r3, r0
 c0047d6:	2b00      	cmp	r3, #0
 c0047d8:	d001      	beq.n	c0047de <MX_GTZC_S_Init+0x10e>
  {
    Error_Handler();
 c0047da:	f000 fdbb 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OCTOSPI2_REG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0047de:	f240 3101 	movw	r1, #769	@ 0x301
 c0047e2:	4813      	ldr	r0, [pc, #76]	@ (c004830 <MX_GTZC_S_Init+0x160>)
 c0047e4:	f002 fb02 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0047e8:	4603      	mov	r3, r0
 c0047ea:	2b00      	cmp	r3, #0
 c0047ec:	d001      	beq.n	c0047f2 <MX_GTZC_S_Init+0x122>
  {
    Error_Handler();
 c0047ee:	f000 fdb1 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADC4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0047f2:	f240 3101 	movw	r1, #769	@ 0x301
 c0047f6:	480f      	ldr	r0, [pc, #60]	@ (c004834 <MX_GTZC_S_Init+0x164>)
 c0047f8:	f002 faf8 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0047fc:	4603      	mov	r3, r0
 c0047fe:	2b00      	cmp	r3, #0
 c004800:	d001      	beq.n	c004806 <MX_GTZC_S_Init+0x136>
  {
    Error_Handler();
 c004802:	f000 fda7 	bl	c005354 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_ADF1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c004806:	f240 3101 	movw	r1, #769	@ 0x301
 c00480a:	480b      	ldr	r0, [pc, #44]	@ (c004838 <MX_GTZC_S_Init+0x168>)
 c00480c:	f002 faee 	bl	c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c004810:	4603      	mov	r3, r0
 c004812:	2b00      	cmp	r3, #0
 c004814:	d012      	beq.n	c00483c <MX_GTZC_S_Init+0x16c>
  {
    Error_Handler();
 c004816:	f000 fd9d 	bl	c005354 <Error_Handler>
 c00481a:	e00f      	b.n	c00483c <MX_GTZC_S_Init+0x16c>
 c00481c:	10000003 	.word	0x10000003
 c004820:	20000008 	.word	0x20000008
 c004824:	2000000a 	.word	0x2000000a
 c004828:	20000010 	.word	0x20000010
 c00482c:	20000014 	.word	0x20000014
 c004830:	20000015 	.word	0x20000015
 c004834:	40000008 	.word	0x40000008
 c004838:	4000000c 	.word	0x4000000c
  }
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00483c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004840:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004844:	2200      	movs	r2, #0
 c004846:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c004848:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00484c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004850:	2200      	movs	r2, #0
 c004852:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c004854:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004858:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00485c:	2200      	movs	r2, #0
 c00485e:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c004860:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004864:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004868:	2200      	movs	r2, #0
 c00486a:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00486c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004870:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004874:	2200      	movs	r2, #0
 c004876:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c004878:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00487c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004880:	2200      	movs	r2, #0
 c004882:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c004884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004888:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00488c:	2200      	movs	r2, #0
 c00488e:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c004890:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004894:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004898:	2200      	movs	r2, #0
 c00489a:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00489c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048a4:	2200      	movs	r2, #0
 c0048a6:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c0048a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048b0:	2200      	movs	r2, #0
 c0048b2:	625a      	str	r2, [r3, #36]	@ 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c0048b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048bc:	2200      	movs	r2, #0
 c0048be:	629a      	str	r2, [r3, #40]	@ 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c0048c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048c8:	2200      	movs	r2, #0
 c0048ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c0048cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048d4:	2200      	movs	r2, #0
 c0048d6:	631a      	str	r2, [r3, #48]	@ 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c0048d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048e0:	2200      	movs	r2, #0
 c0048e2:	635a      	str	r2, [r3, #52]	@ 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0048e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048ec:	2200      	movs	r2, #0
 c0048ee:	639a      	str	r2, [r3, #56]	@ 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0048f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0048f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0048f8:	2200      	movs	r2, #0
 c0048fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0048fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004900:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004904:	2200      	movs	r2, #0
 c004906:	641a      	str	r2, [r3, #64]	@ 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c004908:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00490c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004910:	2200      	movs	r2, #0
 c004912:	645a      	str	r2, [r3, #68]	@ 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c004914:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004918:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00491c:	2200      	movs	r2, #0
 c00491e:	649a      	str	r2, [r3, #72]	@ 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c004920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004924:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004928:	2200      	movs	r2, #0
 c00492a:	64da      	str	r2, [r3, #76]	@ 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c00492c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004930:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004934:	2200      	movs	r2, #0
 c004936:	651a      	str	r2, [r3, #80]	@ 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c004938:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00493c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004940:	2200      	movs	r2, #0
 c004942:	655a      	str	r2, [r3, #84]	@ 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c004944:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004948:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00494c:	2200      	movs	r2, #0
 c00494e:	659a      	str	r2, [r3, #88]	@ 0x58
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c004950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004954:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004958:	2200      	movs	r2, #0
 c00495a:	65da      	str	r2, [r3, #92]	@ 0x5c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c00495c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004960:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004964:	2200      	movs	r2, #0
 c004966:	661a      	str	r2, [r3, #96]	@ 0x60
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c004968:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00496c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004970:	2200      	movs	r2, #0
 c004972:	665a      	str	r2, [r3, #100]	@ 0x64
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[24] =   0x00000000;
 c004974:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004978:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00497c:	2200      	movs	r2, #0
 c00497e:	669a      	str	r2, [r3, #104]	@ 0x68
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[25] =   0x00000000;
 c004980:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004984:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004988:	2200      	movs	r2, #0
 c00498a:	66da      	str	r2, [r3, #108]	@ 0x6c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[26] =   0x00000000;
 c00498c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004990:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004994:	2200      	movs	r2, #0
 c004996:	671a      	str	r2, [r3, #112]	@ 0x70
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[27] =   0x00000000;
 c004998:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00499c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0049a0:	2200      	movs	r2, #0
 c0049a2:	675a      	str	r2, [r3, #116]	@ 0x74
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[28] =   0x00000000;
 c0049a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0049a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0049ac:	2200      	movs	r2, #0
 c0049ae:	679a      	str	r2, [r3, #120]	@ 0x78
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[29] =   0x00000000;
 c0049b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0049b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0049b8:	2200      	movs	r2, #0
 c0049ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[30] =   0x00000000;
 c0049bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0049c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0049c4:	2200      	movs	r2, #0
 c0049c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[31] =   0x00000000;
 c0049ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0049ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0049d2:	2200      	movs	r2, #0
 c0049d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c0049d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0049dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0049e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0049e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c0049e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0049ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0049f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0049f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c0049f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0049fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c004a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a14:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c004a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c004a28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c004a38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c004a48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c004a58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a64:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c004a68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a74:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c004a78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a84:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c004a88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004a94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c004a98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004a9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004aa4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c004aa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004aac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004ab4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c004ab8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004abc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004ac4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c004ac8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004acc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004ad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004ad4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c004ad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004adc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004ae4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c004ae8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004aec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004af4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c004af8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004afc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b04:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c004b08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b14:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[20] =   0xFFFFFFFF;
 c004b18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b24:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[21] =   0xFFFFFFFF;
 c004b28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b34:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[22] =   0xFFFFFFFF;
 c004b38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[23] =   0xFFFFFFFF;
 c004b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b54:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[24] =   0xFFFFFFFF;
 c004b58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b64:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[25] =   0xFFFFFFFF;
 c004b68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b74:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[26] =   0xFFFFFFFF;
 c004b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b84:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[27] =   0xFFFFFFFF;
 c004b88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004b94:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[28] =   0xFFFFFFFF;
 c004b98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004b9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004ba0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004ba4:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[29] =   0xFFFFFFFF;
 c004ba8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004bac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004bb4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[30] =   0xFFFFFFFF;
 c004bb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004bbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004bc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004bc4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[31] =   0xFFFFFFFF;
 c004bc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004bcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004bd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c004bd4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c004bd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c004bdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c004be0:	2200      	movs	r2, #0
 c004be2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c004be6:	1d3b      	adds	r3, r7, #4
 c004be8:	4619      	mov	r1, r3
 c004bea:	4806      	ldr	r0, [pc, #24]	@ (c004c04 <MX_GTZC_S_Init+0x534>)
 c004bec:	f002 fa60 	bl	c0070b0 <HAL_GTZC_MPCBB_ConfigMem>
 c004bf0:	4603      	mov	r3, r0
 c004bf2:	2b00      	cmp	r3, #0
 c004bf4:	d001      	beq.n	c004bfa <MX_GTZC_S_Init+0x52a>
  {
    Error_Handler();
 c004bf6:	f000 fbad 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c004bfa:	bf00      	nop
 c004bfc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 c004c00:	46bd      	mov	sp, r7
 c004c02:	bd80      	pop	{r7, pc}
 c004c04:	30040000 	.word	0x30040000

0c004c08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 c004c08:	b580      	push	{r7, lr}
 c004c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 c004c0c:	4b1b      	ldr	r3, [pc, #108]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c0e:	4a1c      	ldr	r2, [pc, #112]	@ (c004c80 <MX_I2C1_Init+0x78>)
 c004c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 c004c12:	4b1a      	ldr	r3, [pc, #104]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c14:	4a1b      	ldr	r2, [pc, #108]	@ (c004c84 <MX_I2C1_Init+0x7c>)
 c004c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 c004c18:	4b18      	ldr	r3, [pc, #96]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c1a:	2200      	movs	r2, #0
 c004c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 c004c1e:	4b17      	ldr	r3, [pc, #92]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c20:	2201      	movs	r2, #1
 c004c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 c004c24:	4b15      	ldr	r3, [pc, #84]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c26:	2200      	movs	r2, #0
 c004c28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 c004c2a:	4b14      	ldr	r3, [pc, #80]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c2c:	2200      	movs	r2, #0
 c004c2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 c004c30:	4b12      	ldr	r3, [pc, #72]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c32:	2200      	movs	r2, #0
 c004c34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 c004c36:	4b11      	ldr	r3, [pc, #68]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c38:	2200      	movs	r2, #0
 c004c3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 c004c3c:	4b0f      	ldr	r3, [pc, #60]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c3e:	2200      	movs	r2, #0
 c004c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 c004c42:	480e      	ldr	r0, [pc, #56]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c44:	f002 fb0c 	bl	c007260 <HAL_I2C_Init>
 c004c48:	4603      	mov	r3, r0
 c004c4a:	2b00      	cmp	r3, #0
 c004c4c:	d001      	beq.n	c004c52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 c004c4e:	f000 fb81 	bl	c005354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 c004c52:	2100      	movs	r1, #0
 c004c54:	4809      	ldr	r0, [pc, #36]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c56:	f002 fb9e 	bl	c007396 <HAL_I2CEx_ConfigAnalogFilter>
 c004c5a:	4603      	mov	r3, r0
 c004c5c:	2b00      	cmp	r3, #0
 c004c5e:	d001      	beq.n	c004c64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 c004c60:	f000 fb78 	bl	c005354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 c004c64:	2100      	movs	r1, #0
 c004c66:	4805      	ldr	r0, [pc, #20]	@ (c004c7c <MX_I2C1_Init+0x74>)
 c004c68:	f002 fbe0 	bl	c00742c <HAL_I2CEx_ConfigDigitalFilter>
 c004c6c:	4603      	mov	r3, r0
 c004c6e:	2b00      	cmp	r3, #0
 c004c70:	d001      	beq.n	c004c76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 c004c72:	f000 fb6f 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 c004c76:	bf00      	nop
 c004c78:	bd80      	pop	{r7, pc}
 c004c7a:	bf00      	nop
 c004c7c:	300000ec 	.word	0x300000ec
 c004c80:	50005400 	.word	0x50005400
 c004c84:	30909dec 	.word	0x30909dec

0c004c88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 c004c88:	b580      	push	{r7, lr}
 c004c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 c004c8c:	4b1b      	ldr	r3, [pc, #108]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004c8e:	4a1c      	ldr	r2, [pc, #112]	@ (c004d00 <MX_I2C2_Init+0x78>)
 c004c90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 c004c92:	4b1a      	ldr	r3, [pc, #104]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004c94:	4a1b      	ldr	r2, [pc, #108]	@ (c004d04 <MX_I2C2_Init+0x7c>)
 c004c96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 c004c98:	4b18      	ldr	r3, [pc, #96]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004c9a:	2200      	movs	r2, #0
 c004c9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 c004c9e:	4b17      	ldr	r3, [pc, #92]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004ca0:	2201      	movs	r2, #1
 c004ca2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 c004ca4:	4b15      	ldr	r3, [pc, #84]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004ca6:	2200      	movs	r2, #0
 c004ca8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 c004caa:	4b14      	ldr	r3, [pc, #80]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004cac:	2200      	movs	r2, #0
 c004cae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 c004cb0:	4b12      	ldr	r3, [pc, #72]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004cb2:	2200      	movs	r2, #0
 c004cb4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 c004cb6:	4b11      	ldr	r3, [pc, #68]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004cb8:	2200      	movs	r2, #0
 c004cba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 c004cbc:	4b0f      	ldr	r3, [pc, #60]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004cbe:	2200      	movs	r2, #0
 c004cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 c004cc2:	480e      	ldr	r0, [pc, #56]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004cc4:	f002 facc 	bl	c007260 <HAL_I2C_Init>
 c004cc8:	4603      	mov	r3, r0
 c004cca:	2b00      	cmp	r3, #0
 c004ccc:	d001      	beq.n	c004cd2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 c004cce:	f000 fb41 	bl	c005354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 c004cd2:	2100      	movs	r1, #0
 c004cd4:	4809      	ldr	r0, [pc, #36]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004cd6:	f002 fb5e 	bl	c007396 <HAL_I2CEx_ConfigAnalogFilter>
 c004cda:	4603      	mov	r3, r0
 c004cdc:	2b00      	cmp	r3, #0
 c004cde:	d001      	beq.n	c004ce4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 c004ce0:	f000 fb38 	bl	c005354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 c004ce4:	2100      	movs	r1, #0
 c004ce6:	4805      	ldr	r0, [pc, #20]	@ (c004cfc <MX_I2C2_Init+0x74>)
 c004ce8:	f002 fba0 	bl	c00742c <HAL_I2CEx_ConfigDigitalFilter>
 c004cec:	4603      	mov	r3, r0
 c004cee:	2b00      	cmp	r3, #0
 c004cf0:	d001      	beq.n	c004cf6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 c004cf2:	f000 fb2f 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 c004cf6:	bf00      	nop
 c004cf8:	bd80      	pop	{r7, pc}
 c004cfa:	bf00      	nop
 c004cfc:	30000140 	.word	0x30000140
 c004d00:	50005800 	.word	0x50005800
 c004d04:	30909dec 	.word	0x30909dec

0c004d08 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c004d08:	b580      	push	{r7, lr}
 c004d0a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c004d0c:	2000      	movs	r0, #0
 c004d0e:	f002 fbd9 	bl	c0074c4 <HAL_ICACHE_ConfigAssociativityMode>
 c004d12:	4603      	mov	r3, r0
 c004d14:	2b00      	cmp	r3, #0
 c004d16:	d001      	beq.n	c004d1c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c004d18:	f000 fb1c 	bl	c005354 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c004d1c:	f002 fbf2 	bl	c007504 <HAL_ICACHE_Enable>
 c004d20:	4603      	mov	r3, r0
 c004d22:	2b00      	cmp	r3, #0
 c004d24:	d001      	beq.n	c004d2a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c004d26:	f000 fb15 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c004d2a:	bf00      	nop
 c004d2c:	bd80      	pop	{r7, pc}
	...

0c004d30 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 c004d30:	b580      	push	{r7, lr}
 c004d32:	b088      	sub	sp, #32
 c004d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 c004d36:	f107 0308 	add.w	r3, r7, #8
 c004d3a:	2200      	movs	r2, #0
 c004d3c:	601a      	str	r2, [r3, #0]
 c004d3e:	605a      	str	r2, [r3, #4]
 c004d40:	609a      	str	r2, [r3, #8]
 c004d42:	60da      	str	r2, [r3, #12]
 c004d44:	611a      	str	r2, [r3, #16]
 c004d46:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 c004d48:	463b      	mov	r3, r7
 c004d4a:	2200      	movs	r2, #0
 c004d4c:	601a      	str	r2, [r3, #0]
 c004d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 c004d50:	4b31      	ldr	r3, [pc, #196]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d52:	4a32      	ldr	r2, [pc, #200]	@ (c004e1c <MX_OCTOSPI1_Init+0xec>)
 c004d54:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 c004d56:	4b30      	ldr	r3, [pc, #192]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d58:	2201      	movs	r2, #1
 c004d5a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 c004d5c:	4b2e      	ldr	r3, [pc, #184]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d5e:	2200      	movs	r2, #0
 c004d60:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 c004d62:	4b2d      	ldr	r3, [pc, #180]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 c004d68:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 c004d6a:	4b2b      	ldr	r3, [pc, #172]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d6c:	2217      	movs	r2, #23
 c004d6e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 c004d70:	4b29      	ldr	r3, [pc, #164]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d72:	2201      	movs	r2, #1
 c004d74:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 c004d76:	4b28      	ldr	r3, [pc, #160]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d78:	2200      	movs	r2, #0
 c004d7a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 c004d7c:	4b26      	ldr	r3, [pc, #152]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d7e:	2200      	movs	r2, #0
 c004d80:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 c004d82:	4b25      	ldr	r3, [pc, #148]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d84:	2200      	movs	r2, #0
 c004d86:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 c004d88:	4b23      	ldr	r3, [pc, #140]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d8a:	2202      	movs	r2, #2
 c004d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 c004d8e:	4b22      	ldr	r3, [pc, #136]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d90:	2200      	movs	r2, #0
 c004d92:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 c004d94:	4b20      	ldr	r3, [pc, #128]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 c004d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 c004d9c:	4b1e      	ldr	r3, [pc, #120]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004d9e:	220a      	movs	r2, #10
 c004da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 c004da2:	4b1d      	ldr	r3, [pc, #116]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004da4:	2200      	movs	r2, #0
 c004da6:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 c004da8:	4b1b      	ldr	r3, [pc, #108]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004daa:	2200      	movs	r2, #0
 c004dac:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 100;
 c004dae:	4b1a      	ldr	r3, [pc, #104]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004db0:	2264      	movs	r2, #100	@ 0x64
 c004db2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 c004db4:	4818      	ldr	r0, [pc, #96]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004db6:	f002 fd61 	bl	c00787c <HAL_OSPI_Init>
 c004dba:	4603      	mov	r3, r0
 c004dbc:	2b00      	cmp	r3, #0
 c004dbe:	d001      	beq.n	c004dc4 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 c004dc0:	f000 fac8 	bl	c005354 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 c004dc4:	2301      	movs	r3, #1
 c004dc6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 c004dc8:	2301      	movs	r3, #1
 c004dca:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 c004dcc:	2301      	movs	r3, #1
 c004dce:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 c004dd0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 c004dd4:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 c004dd6:	4b12      	ldr	r3, [pc, #72]	@ (c004e20 <MX_OCTOSPI1_Init+0xf0>)
 c004dd8:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 c004dda:	f107 0308 	add.w	r3, r7, #8
 c004dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 c004de2:	4619      	mov	r1, r3
 c004de4:	480c      	ldr	r0, [pc, #48]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004de6:	f002 fe89 	bl	c007afc <HAL_OSPIM_Config>
 c004dea:	4603      	mov	r3, r0
 c004dec:	2b00      	cmp	r3, #0
 c004dee:	d001      	beq.n	c004df4 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 c004df0:	f000 fab0 	bl	c005354 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 c004df4:	2300      	movs	r3, #0
 c004df6:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 c004df8:	2300      	movs	r3, #0
 c004dfa:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 c004dfc:	463b      	mov	r3, r7
 c004dfe:	4619      	mov	r1, r3
 c004e00:	4805      	ldr	r0, [pc, #20]	@ (c004e18 <MX_OCTOSPI1_Init+0xe8>)
 c004e02:	f003 fc6b 	bl	c0086dc <HAL_OSPI_DLYB_SetConfig>
 c004e06:	4603      	mov	r3, r0
 c004e08:	2b00      	cmp	r3, #0
 c004e0a:	d001      	beq.n	c004e10 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 c004e0c:	f000 faa2 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 c004e10:	bf00      	nop
 c004e12:	3720      	adds	r7, #32
 c004e14:	46bd      	mov	sp, r7
 c004e16:	bd80      	pop	{r7, pc}
 c004e18:	30000194 	.word	0x30000194
 c004e1c:	520d1400 	.word	0x520d1400
 c004e20:	01000001 	.word	0x01000001

0c004e24 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 c004e24:	b580      	push	{r7, lr}
 c004e26:	b088      	sub	sp, #32
 c004e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 c004e2a:	f107 0308 	add.w	r3, r7, #8
 c004e2e:	2200      	movs	r2, #0
 c004e30:	601a      	str	r2, [r3, #0]
 c004e32:	605a      	str	r2, [r3, #4]
 c004e34:	609a      	str	r2, [r3, #8]
 c004e36:	60da      	str	r2, [r3, #12]
 c004e38:	611a      	str	r2, [r3, #16]
 c004e3a:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 c004e3c:	463b      	mov	r3, r7
 c004e3e:	2200      	movs	r2, #0
 c004e40:	601a      	str	r2, [r3, #0]
 c004e42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 c004e44:	4b31      	ldr	r3, [pc, #196]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e46:	4a32      	ldr	r2, [pc, #200]	@ (c004f10 <MX_OCTOSPI2_Init+0xec>)
 c004e48:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 c004e4a:	4b30      	ldr	r3, [pc, #192]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e4c:	2204      	movs	r2, #4
 c004e4e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 c004e50:	4b2e      	ldr	r3, [pc, #184]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e52:	2200      	movs	r2, #0
 c004e54:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 c004e56:	4b2d      	ldr	r3, [pc, #180]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 c004e5c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 c004e5e:	4b2b      	ldr	r3, [pc, #172]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e60:	221a      	movs	r2, #26
 c004e62:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 c004e64:	4b29      	ldr	r3, [pc, #164]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e66:	2202      	movs	r2, #2
 c004e68:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 c004e6a:	4b28      	ldr	r3, [pc, #160]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e6c:	2200      	movs	r2, #0
 c004e6e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 c004e70:	4b26      	ldr	r3, [pc, #152]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e72:	2200      	movs	r2, #0
 c004e74:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 c004e76:	4b25      	ldr	r3, [pc, #148]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e78:	2200      	movs	r2, #0
 c004e7a:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 c004e7c:	4b23      	ldr	r3, [pc, #140]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e7e:	2204      	movs	r2, #4
 c004e80:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 c004e82:	4b22      	ldr	r3, [pc, #136]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e84:	2200      	movs	r2, #0
 c004e86:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 c004e88:	4b20      	ldr	r3, [pc, #128]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 c004e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 c004e90:	4b1e      	ldr	r3, [pc, #120]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e92:	2200      	movs	r2, #0
 c004e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 c004e96:	4b1d      	ldr	r3, [pc, #116]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e98:	2200      	movs	r2, #0
 c004e9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 c004e9c:	4b1b      	ldr	r3, [pc, #108]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004e9e:	2200      	movs	r2, #0
 c004ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 c004ea2:	4b1a      	ldr	r3, [pc, #104]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004ea4:	2200      	movs	r2, #0
 c004ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 c004ea8:	4818      	ldr	r0, [pc, #96]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004eaa:	f002 fce7 	bl	c00787c <HAL_OSPI_Init>
 c004eae:	4603      	mov	r3, r0
 c004eb0:	2b00      	cmp	r3, #0
 c004eb2:	d001      	beq.n	c004eb8 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 c004eb4:	f000 fa4e 	bl	c005354 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 c004eb8:	2302      	movs	r3, #2
 c004eba:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 c004ebc:	2302      	movs	r3, #2
 c004ebe:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 c004ec0:	2302      	movs	r3, #2
 c004ec2:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 c004ec4:	4b13      	ldr	r3, [pc, #76]	@ (c004f14 <MX_OCTOSPI2_Init+0xf0>)
 c004ec6:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 c004ec8:	4b13      	ldr	r3, [pc, #76]	@ (c004f18 <MX_OCTOSPI2_Init+0xf4>)
 c004eca:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 c004ecc:	f107 0308 	add.w	r3, r7, #8
 c004ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 c004ed4:	4619      	mov	r1, r3
 c004ed6:	480d      	ldr	r0, [pc, #52]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004ed8:	f002 fe10 	bl	c007afc <HAL_OSPIM_Config>
 c004edc:	4603      	mov	r3, r0
 c004ede:	2b00      	cmp	r3, #0
 c004ee0:	d001      	beq.n	c004ee6 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 c004ee2:	f000 fa37 	bl	c005354 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 c004ee6:	2300      	movs	r3, #0
 c004ee8:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 c004eea:	2300      	movs	r3, #0
 c004eec:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 c004eee:	463b      	mov	r3, r7
 c004ef0:	4619      	mov	r1, r3
 c004ef2:	4806      	ldr	r0, [pc, #24]	@ (c004f0c <MX_OCTOSPI2_Init+0xe8>)
 c004ef4:	f003 fbf2 	bl	c0086dc <HAL_OSPI_DLYB_SetConfig>
 c004ef8:	4603      	mov	r3, r0
 c004efa:	2b00      	cmp	r3, #0
 c004efc:	d001      	beq.n	c004f02 <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 c004efe:	f000 fa29 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 c004f02:	bf00      	nop
 c004f04:	3720      	adds	r7, #32
 c004f06:	46bd      	mov	sp, r7
 c004f08:	bd80      	pop	{r7, pc}
 c004f0a:	bf00      	nop
 c004f0c:	300001f0 	.word	0x300001f0
 c004f10:	520d2400 	.word	0x520d2400
 c004f14:	00010002 	.word	0x00010002
 c004f18:	01000002 	.word	0x01000002

0c004f1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 c004f1c:	b580      	push	{r7, lr}
 c004f1e:	b084      	sub	sp, #16
 c004f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 c004f22:	1d3b      	adds	r3, r7, #4
 c004f24:	2200      	movs	r2, #0
 c004f26:	601a      	str	r2, [r3, #0]
 c004f28:	605a      	str	r2, [r3, #4]
 c004f2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 c004f2c:	4b30      	ldr	r3, [pc, #192]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f2e:	4a31      	ldr	r2, [pc, #196]	@ (c004ff4 <MX_SPI2_Init+0xd8>)
 c004f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 c004f32:	4b2f      	ldr	r3, [pc, #188]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 c004f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 c004f3a:	4b2d      	ldr	r3, [pc, #180]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f3c:	2200      	movs	r2, #0
 c004f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 c004f40:	4b2b      	ldr	r3, [pc, #172]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f42:	2203      	movs	r2, #3
 c004f44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 c004f46:	4b2a      	ldr	r3, [pc, #168]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f48:	2200      	movs	r2, #0
 c004f4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 c004f4c:	4b28      	ldr	r3, [pc, #160]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f4e:	2200      	movs	r2, #0
 c004f50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 c004f52:	4b27      	ldr	r3, [pc, #156]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f54:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 c004f58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 c004f5a:	4b25      	ldr	r3, [pc, #148]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f5c:	2200      	movs	r2, #0
 c004f5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 c004f60:	4b23      	ldr	r3, [pc, #140]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f62:	2200      	movs	r2, #0
 c004f64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 c004f66:	4b22      	ldr	r3, [pc, #136]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f68:	2200      	movs	r2, #0
 c004f6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c004f6c:	4b20      	ldr	r3, [pc, #128]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f6e:	2200      	movs	r2, #0
 c004f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 c004f72:	4b1f      	ldr	r3, [pc, #124]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f74:	2207      	movs	r2, #7
 c004f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 c004f78:	4b1d      	ldr	r3, [pc, #116]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 c004f7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 c004f80:	4b1b      	ldr	r3, [pc, #108]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f82:	2200      	movs	r2, #0
 c004f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 c004f86:	4b1a      	ldr	r3, [pc, #104]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f88:	2200      	movs	r2, #0
 c004f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 c004f8c:	4b18      	ldr	r3, [pc, #96]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f8e:	2200      	movs	r2, #0
 c004f90:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 c004f92:	4b17      	ldr	r3, [pc, #92]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f94:	2200      	movs	r2, #0
 c004f96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 c004f98:	4b15      	ldr	r3, [pc, #84]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004f9a:	2200      	movs	r2, #0
 c004f9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 c004f9e:	4b14      	ldr	r3, [pc, #80]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004fa0:	2200      	movs	r2, #0
 c004fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 c004fa4:	4b12      	ldr	r3, [pc, #72]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004fa6:	2200      	movs	r2, #0
 c004fa8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 c004faa:	4b11      	ldr	r3, [pc, #68]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004fac:	2200      	movs	r2, #0
 c004fae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 c004fb0:	4b0f      	ldr	r3, [pc, #60]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004fb2:	2200      	movs	r2, #0
 c004fb4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 c004fb6:	480e      	ldr	r0, [pc, #56]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004fb8:	f007 fd9c 	bl	c00caf4 <HAL_SPI_Init>
 c004fbc:	4603      	mov	r3, r0
 c004fbe:	2b00      	cmp	r3, #0
 c004fc0:	d001      	beq.n	c004fc6 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 c004fc2:	f000 f9c7 	bl	c005354 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 c004fc6:	2300      	movs	r3, #0
 c004fc8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 c004fca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 c004fce:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 c004fd0:	2300      	movs	r3, #0
 c004fd2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 c004fd4:	1d3b      	adds	r3, r7, #4
 c004fd6:	4619      	mov	r1, r3
 c004fd8:	4805      	ldr	r0, [pc, #20]	@ (c004ff0 <MX_SPI2_Init+0xd4>)
 c004fda:	f007 febc 	bl	c00cd56 <HAL_SPIEx_SetConfigAutonomousMode>
 c004fde:	4603      	mov	r3, r0
 c004fe0:	2b00      	cmp	r3, #0
 c004fe2:	d001      	beq.n	c004fe8 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 c004fe4:	f000 f9b6 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 c004fe8:	bf00      	nop
 c004fea:	3710      	adds	r7, #16
 c004fec:	46bd      	mov	sp, r7
 c004fee:	bd80      	pop	{r7, pc}
 c004ff0:	3000024c 	.word	0x3000024c
 c004ff4:	50003800 	.word	0x50003800

0c004ff8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 c004ff8:	b580      	push	{r7, lr}
 c004ffa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 c004ffc:	4b22      	ldr	r3, [pc, #136]	@ (c005088 <MX_UART4_Init+0x90>)
 c004ffe:	4a23      	ldr	r2, [pc, #140]	@ (c00508c <MX_UART4_Init+0x94>)
 c005000:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 c005002:	4b21      	ldr	r3, [pc, #132]	@ (c005088 <MX_UART4_Init+0x90>)
 c005004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 c005008:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 c00500a:	4b1f      	ldr	r3, [pc, #124]	@ (c005088 <MX_UART4_Init+0x90>)
 c00500c:	2200      	movs	r2, #0
 c00500e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 c005010:	4b1d      	ldr	r3, [pc, #116]	@ (c005088 <MX_UART4_Init+0x90>)
 c005012:	2200      	movs	r2, #0
 c005014:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 c005016:	4b1c      	ldr	r3, [pc, #112]	@ (c005088 <MX_UART4_Init+0x90>)
 c005018:	2200      	movs	r2, #0
 c00501a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 c00501c:	4b1a      	ldr	r3, [pc, #104]	@ (c005088 <MX_UART4_Init+0x90>)
 c00501e:	220c      	movs	r2, #12
 c005020:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c005022:	4b19      	ldr	r3, [pc, #100]	@ (c005088 <MX_UART4_Init+0x90>)
 c005024:	2200      	movs	r2, #0
 c005026:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 c005028:	4b17      	ldr	r3, [pc, #92]	@ (c005088 <MX_UART4_Init+0x90>)
 c00502a:	2200      	movs	r2, #0
 c00502c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c00502e:	4b16      	ldr	r3, [pc, #88]	@ (c005088 <MX_UART4_Init+0x90>)
 c005030:	2200      	movs	r2, #0
 c005032:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c005034:	4b14      	ldr	r3, [pc, #80]	@ (c005088 <MX_UART4_Init+0x90>)
 c005036:	2200      	movs	r2, #0
 c005038:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c00503a:	4b13      	ldr	r3, [pc, #76]	@ (c005088 <MX_UART4_Init+0x90>)
 c00503c:	2200      	movs	r2, #0
 c00503e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 c005040:	4811      	ldr	r0, [pc, #68]	@ (c005088 <MX_UART4_Init+0x90>)
 c005042:	f007 fec9 	bl	c00cdd8 <HAL_UART_Init>
 c005046:	4603      	mov	r3, r0
 c005048:	2b00      	cmp	r3, #0
 c00504a:	d001      	beq.n	c005050 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 c00504c:	f000 f982 	bl	c005354 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c005050:	2100      	movs	r1, #0
 c005052:	480d      	ldr	r0, [pc, #52]	@ (c005088 <MX_UART4_Init+0x90>)
 c005054:	f008 fb08 	bl	c00d668 <HAL_UARTEx_SetTxFifoThreshold>
 c005058:	4603      	mov	r3, r0
 c00505a:	2b00      	cmp	r3, #0
 c00505c:	d001      	beq.n	c005062 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 c00505e:	f000 f979 	bl	c005354 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c005062:	2100      	movs	r1, #0
 c005064:	4808      	ldr	r0, [pc, #32]	@ (c005088 <MX_UART4_Init+0x90>)
 c005066:	f008 fb3d 	bl	c00d6e4 <HAL_UARTEx_SetRxFifoThreshold>
 c00506a:	4603      	mov	r3, r0
 c00506c:	2b00      	cmp	r3, #0
 c00506e:	d001      	beq.n	c005074 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 c005070:	f000 f970 	bl	c005354 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 c005074:	4804      	ldr	r0, [pc, #16]	@ (c005088 <MX_UART4_Init+0x90>)
 c005076:	f008 fabe 	bl	c00d5f6 <HAL_UARTEx_DisableFifoMode>
 c00507a:	4603      	mov	r3, r0
 c00507c:	2b00      	cmp	r3, #0
 c00507e:	d001      	beq.n	c005084 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 c005080:	f000 f968 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 c005084:	bf00      	nop
 c005086:	bd80      	pop	{r7, pc}
 c005088:	300002dc 	.word	0x300002dc
 c00508c:	50004c00 	.word	0x50004c00

0c005090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c005090:	b580      	push	{r7, lr}
 c005092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c005094:	4b22      	ldr	r3, [pc, #136]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c005096:	4a23      	ldr	r2, [pc, #140]	@ (c005124 <MX_USART1_UART_Init+0x94>)
 c005098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c00509a:	4b21      	ldr	r3, [pc, #132]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c00509c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 c0050a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c0050a2:	4b1f      	ldr	r3, [pc, #124]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050a4:	2200      	movs	r2, #0
 c0050a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c0050a8:	4b1d      	ldr	r3, [pc, #116]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050aa:	2200      	movs	r2, #0
 c0050ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 c0050ae:	4b1c      	ldr	r3, [pc, #112]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050b0:	2200      	movs	r2, #0
 c0050b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c0050b4:	4b1a      	ldr	r3, [pc, #104]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050b6:	220c      	movs	r2, #12
 c0050b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c0050ba:	4b19      	ldr	r3, [pc, #100]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050bc:	2200      	movs	r2, #0
 c0050be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c0050c0:	4b17      	ldr	r3, [pc, #92]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050c2:	2200      	movs	r2, #0
 c0050c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c0050c6:	4b16      	ldr	r3, [pc, #88]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050c8:	2200      	movs	r2, #0
 c0050ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c0050cc:	4b14      	ldr	r3, [pc, #80]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050ce:	2200      	movs	r2, #0
 c0050d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c0050d2:	4b13      	ldr	r3, [pc, #76]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050d4:	2200      	movs	r2, #0
 c0050d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c0050d8:	4811      	ldr	r0, [pc, #68]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050da:	f007 fe7d 	bl	c00cdd8 <HAL_UART_Init>
 c0050de:	4603      	mov	r3, r0
 c0050e0:	2b00      	cmp	r3, #0
 c0050e2:	d001      	beq.n	c0050e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 c0050e4:	f000 f936 	bl	c005354 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0050e8:	2100      	movs	r1, #0
 c0050ea:	480d      	ldr	r0, [pc, #52]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050ec:	f008 fabc 	bl	c00d668 <HAL_UARTEx_SetTxFifoThreshold>
 c0050f0:	4603      	mov	r3, r0
 c0050f2:	2b00      	cmp	r3, #0
 c0050f4:	d001      	beq.n	c0050fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 c0050f6:	f000 f92d 	bl	c005354 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0050fa:	2100      	movs	r1, #0
 c0050fc:	4808      	ldr	r0, [pc, #32]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c0050fe:	f008 faf1 	bl	c00d6e4 <HAL_UARTEx_SetRxFifoThreshold>
 c005102:	4603      	mov	r3, r0
 c005104:	2b00      	cmp	r3, #0
 c005106:	d001      	beq.n	c00510c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 c005108:	f000 f924 	bl	c005354 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c00510c:	4804      	ldr	r0, [pc, #16]	@ (c005120 <MX_USART1_UART_Init+0x90>)
 c00510e:	f008 fa72 	bl	c00d5f6 <HAL_UARTEx_DisableFifoMode>
 c005112:	4603      	mov	r3, r0
 c005114:	2b00      	cmp	r3, #0
 c005116:	d001      	beq.n	c00511c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 c005118:	f000 f91c 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c00511c:	bf00      	nop
 c00511e:	bd80      	pop	{r7, pc}
 c005120:	30000370 	.word	0x30000370
 c005124:	50013800 	.word	0x50013800

0c005128 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 c005128:	b580      	push	{r7, lr}
 c00512a:	b086      	sub	sp, #24
 c00512c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00512e:	463b      	mov	r3, r7
 c005130:	2200      	movs	r2, #0
 c005132:	601a      	str	r2, [r3, #0]
 c005134:	605a      	str	r2, [r3, #4]
 c005136:	609a      	str	r2, [r3, #8]
 c005138:	60da      	str	r2, [r3, #12]
 c00513a:	611a      	str	r2, [r3, #16]
 c00513c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 c00513e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 c005142:	f7ff f97f 	bl	c004444 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 c005146:	2001      	movs	r0, #1
 c005148:	f7ff f960 	bl	c00440c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 c00514c:	2002      	movs	r0, #2
 c00514e:	f7ff f95d 	bl	c00440c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 c005152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005156:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 c005158:	2303      	movs	r3, #3
 c00515a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 c00515c:	2300      	movs	r3, #0
 c00515e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c005160:	463b      	mov	r3, r7
 c005162:	4619      	mov	r1, r3
 c005164:	4809      	ldr	r0, [pc, #36]	@ (c00518c <MX_UCPD1_Init+0x64>)
 c005166:	f008 fcb3 	bl	c00dad0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 c00516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00516e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 c005170:	2303      	movs	r3, #3
 c005172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 c005174:	2300      	movs	r3, #0
 c005176:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c005178:	463b      	mov	r3, r7
 c00517a:	4619      	mov	r1, r3
 c00517c:	4804      	ldr	r0, [pc, #16]	@ (c005190 <MX_UCPD1_Init+0x68>)
 c00517e:	f008 fca7 	bl	c00dad0 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 c005182:	bf00      	nop
 c005184:	3718      	adds	r7, #24
 c005186:	46bd      	mov	sp, r7
 c005188:	bd80      	pop	{r7, pc}
 c00518a:	bf00      	nop
 c00518c:	52020000 	.word	0x52020000
 c005190:	52020400 	.word	0x52020400

0c005194 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 c005194:	b580      	push	{r7, lr}
 c005196:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 c005198:	4b15      	ldr	r3, [pc, #84]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c00519a:	4a16      	ldr	r2, [pc, #88]	@ (c0051f4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 c00519c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 c00519e:	4b14      	ldr	r3, [pc, #80]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051a0:	2206      	movs	r2, #6
 c0051a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 c0051a4:	4b12      	ldr	r3, [pc, #72]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051a6:	2202      	movs	r2, #2
 c0051a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 c0051aa:	4b11      	ldr	r3, [pc, #68]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051ac:	2202      	movs	r2, #2
 c0051ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 c0051b0:	4b0f      	ldr	r3, [pc, #60]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051b2:	2200      	movs	r2, #0
 c0051b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 c0051b6:	4b0e      	ldr	r3, [pc, #56]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051b8:	2200      	movs	r2, #0
 c0051ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 c0051bc:	4b0c      	ldr	r3, [pc, #48]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051be:	2200      	movs	r2, #0
 c0051c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 c0051c2:	4b0b      	ldr	r3, [pc, #44]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051c4:	2200      	movs	r2, #0
 c0051c6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 c0051c8:	4b09      	ldr	r3, [pc, #36]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051ca:	2200      	movs	r2, #0
 c0051cc:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 c0051ce:	4b08      	ldr	r3, [pc, #32]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051d0:	2200      	movs	r2, #0
 c0051d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 c0051d4:	4b06      	ldr	r3, [pc, #24]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051d6:	2200      	movs	r2, #0
 c0051d8:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 c0051da:	4805      	ldr	r0, [pc, #20]	@ (c0051f0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 c0051dc:	f003 fac6 	bl	c00876c <HAL_PCD_Init>
 c0051e0:	4603      	mov	r3, r0
 c0051e2:	2b00      	cmp	r3, #0
 c0051e4:	d001      	beq.n	c0051ea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 c0051e6:	f000 f8b5 	bl	c005354 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 c0051ea:	bf00      	nop
 c0051ec:	bd80      	pop	{r7, pc}
 c0051ee:	bf00      	nop
 c0051f0:	30000404 	.word	0x30000404
 c0051f4:	52040000 	.word	0x52040000

0c0051f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c0051f8:	b580      	push	{r7, lr}
 c0051fa:	b08e      	sub	sp, #56	@ 0x38
 c0051fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0051fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005202:	2200      	movs	r2, #0
 c005204:	601a      	str	r2, [r3, #0]
 c005206:	605a      	str	r2, [r3, #4]
 c005208:	609a      	str	r2, [r3, #8]
 c00520a:	60da      	str	r2, [r3, #12]
 c00520c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00520e:	4b4e      	ldr	r3, [pc, #312]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005214:	4a4c      	ldr	r2, [pc, #304]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005216:	f043 0304 	orr.w	r3, r3, #4
 c00521a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00521e:	4b4a      	ldr	r3, [pc, #296]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005224:	f003 0304 	and.w	r3, r3, #4
 c005228:	623b      	str	r3, [r7, #32]
 c00522a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c00522c:	4b46      	ldr	r3, [pc, #280]	@ (c005348 <MX_GPIO_Init+0x150>)
 c00522e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005232:	4a45      	ldr	r2, [pc, #276]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005234:	f043 0301 	orr.w	r3, r3, #1
 c005238:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00523c:	4b42      	ldr	r3, [pc, #264]	@ (c005348 <MX_GPIO_Init+0x150>)
 c00523e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005242:	f003 0301 	and.w	r3, r3, #1
 c005246:	61fb      	str	r3, [r7, #28]
 c005248:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 c00524a:	4b3f      	ldr	r3, [pc, #252]	@ (c005348 <MX_GPIO_Init+0x150>)
 c00524c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005250:	4a3d      	ldr	r2, [pc, #244]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c005256:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00525a:	4b3b      	ldr	r3, [pc, #236]	@ (c005348 <MX_GPIO_Init+0x150>)
 c00525c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c005264:	61bb      	str	r3, [r7, #24]
 c005266:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c005268:	4b37      	ldr	r3, [pc, #220]	@ (c005348 <MX_GPIO_Init+0x150>)
 c00526a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00526e:	4a36      	ldr	r2, [pc, #216]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c005274:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005278:	4b33      	ldr	r3, [pc, #204]	@ (c005348 <MX_GPIO_Init+0x150>)
 c00527a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00527e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c005282:	617b      	str	r3, [r7, #20]
 c005284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c005286:	4b30      	ldr	r3, [pc, #192]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00528c:	4a2e      	ldr	r2, [pc, #184]	@ (c005348 <MX_GPIO_Init+0x150>)
 c00528e:	f043 0308 	orr.w	r3, r3, #8
 c005292:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005296:	4b2c      	ldr	r3, [pc, #176]	@ (c005348 <MX_GPIO_Init+0x150>)
 c005298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00529c:	f003 0308 	and.w	r3, r3, #8
 c0052a0:	613b      	str	r3, [r7, #16]
 c0052a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c0052a4:	4b28      	ldr	r3, [pc, #160]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0052aa:	4a27      	ldr	r2, [pc, #156]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052ac:	f043 0310 	orr.w	r3, r3, #16
 c0052b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0052b4:	4b24      	ldr	r3, [pc, #144]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0052ba:	f003 0310 	and.w	r3, r3, #16
 c0052be:	60fb      	str	r3, [r7, #12]
 c0052c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c0052c2:	4b21      	ldr	r3, [pc, #132]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0052c8:	4a1f      	ldr	r2, [pc, #124]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052ca:	f043 0302 	orr.w	r3, r3, #2
 c0052ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0052d2:	4b1d      	ldr	r3, [pc, #116]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0052d8:	f003 0302 	and.w	r3, r3, #2
 c0052dc:	60bb      	str	r3, [r7, #8]
 c0052de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c0052e0:	4b19      	ldr	r3, [pc, #100]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0052e6:	4a18      	ldr	r2, [pc, #96]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052e8:	f043 0320 	orr.w	r3, r3, #32
 c0052ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0052f0:	4b15      	ldr	r3, [pc, #84]	@ (c005348 <MX_GPIO_Init+0x150>)
 c0052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0052f6:	f003 0320 	and.w	r3, r3, #32
 c0052fa:	607b      	str	r3, [r7, #4]
 c0052fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 c0052fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 c005302:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005304:	2302      	movs	r3, #2
 c005306:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005308:	2300      	movs	r3, #0
 c00530a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c00530c:	2300      	movs	r3, #0
 c00530e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 c005310:	2306      	movs	r3, #6
 c005312:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 c005314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005318:	4619      	mov	r1, r3
 c00531a:	480c      	ldr	r0, [pc, #48]	@ (c00534c <MX_GPIO_Init+0x154>)
 c00531c:	f001 fb86 	bl	c006a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 c005320:	2302      	movs	r3, #2
 c005322:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005324:	2302      	movs	r3, #2
 c005326:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005328:	2300      	movs	r3, #0
 c00532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c00532c:	2300      	movs	r3, #0
 c00532e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 c005330:	2306      	movs	r3, #6
 c005332:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 c005334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005338:	4619      	mov	r1, r3
 c00533a:	4805      	ldr	r0, [pc, #20]	@ (c005350 <MX_GPIO_Init+0x158>)
 c00533c:	f001 fb76 	bl	c006a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 c005340:	bf00      	nop
 c005342:	3738      	adds	r7, #56	@ 0x38
 c005344:	46bd      	mov	sp, r7
 c005346:	bd80      	pop	{r7, pc}
 c005348:	56020c00 	.word	0x56020c00
 c00534c:	52021400 	.word	0x52021400
 c005350:	52020400 	.word	0x52020400

0c005354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c005354:	b480      	push	{r7}
 c005356:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c005358:	b672      	cpsid	i
}
 c00535a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c00535c:	bf00      	nop
 c00535e:	e7fd      	b.n	c00535c <Error_Handler+0x8>

0c005360 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c005360:	b2c0      	uxtb	r0, r0
 c005362:	b480      	push	{r7}
 c005364:	b083      	sub	sp, #12
 c005366:	af00      	add	r7, sp, #0
 c005368:	4603      	mov	r3, r0
 c00536a:	6039      	str	r1, [r7, #0]
 c00536c:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c00536e:	683b      	ldr	r3, [r7, #0]
 c005370:	2b00      	cmp	r3, #0
 c005372:	d00d      	beq.n	c005390 <__acle_se_SECURE_RegisterCallback+0x30>
  {
    switch(CallbackId)
 c005374:	79fb      	ldrb	r3, [r7, #7]
 c005376:	2b00      	cmp	r3, #0
 c005378:	d002      	beq.n	c005380 <__acle_se_SECURE_RegisterCallback+0x20>
 c00537a:	2b01      	cmp	r3, #1
 c00537c:	d004      	beq.n	c005388 <__acle_se_SECURE_RegisterCallback+0x28>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c00537e:	e007      	b.n	c005390 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c005380:	4a20      	ldr	r2, [pc, #128]	@ (c005404 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c005382:	683b      	ldr	r3, [r7, #0]
 c005384:	6013      	str	r3, [r2, #0]
        break;
 c005386:	e003      	b.n	c005390 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c005388:	4a1f      	ldr	r2, [pc, #124]	@ (c005408 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c00538a:	683b      	ldr	r3, [r7, #0]
 c00538c:	6013      	str	r3, [r2, #0]
        break;
 c00538e:	bf00      	nop
    }
  }
}
 c005390:	bf00      	nop
 c005392:	370c      	adds	r7, #12
 c005394:	46bd      	mov	sp, r7
 c005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00539a:	4670      	mov	r0, lr
 c00539c:	4671      	mov	r1, lr
 c00539e:	4672      	mov	r2, lr
 c0053a0:	4673      	mov	r3, lr
 c0053a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0053a6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0053aa:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0053ae:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0053b2:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0053b6:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0053ba:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0053be:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0053c2:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0053c6:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0053ca:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0053ce:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0053d2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0053d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0053da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0053de:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0053e2:	f38e 8c00 	msr	CPSR_fs, lr
 c0053e6:	b410      	push	{r4}
 c0053e8:	eef1 ca10 	vmrs	ip, fpscr
 c0053ec:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0053f0:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0053f4:	ea0c 0c04 	and.w	ip, ip, r4
 c0053f8:	eee1 ca10 	vmsr	fpscr, ip
 c0053fc:	bc10      	pop	{r4}
 c0053fe:	46f4      	mov	ip, lr
 c005400:	4774      	bxns	lr
 c005402:	bf00      	nop
 c005404:	30000900 	.word	0x30000900
 c005408:	30000904 	.word	0x30000904

0c00540c <__acle_se_SECURE_ECC_Sign_NSC>:

CMSE_NS_ENTRY
int32_t SECURE_ECC_Sign_NSC(uint8_t *msg, size_t msg_len,
                             uint8_t *sig, size_t *sig_len)
{
 c00540c:	b580      	push	{r7, lr}
 c00540e:	b098      	sub	sp, #96	@ 0x60
 c005410:	af06      	add	r7, sp, #24
 c005412:	60f8      	str	r0, [r7, #12]
 c005414:	60b9      	str	r1, [r7, #8]
 c005416:	607a      	str	r2, [r7, #4]
 c005418:	603b      	str	r3, [r7, #0]
    // Here you can call the low-level cmox_ecdsa_sign() safely
    // Private key stays inside Secure World

    uint8_t random[48]; // ECDSA random (for demo, pseudo-random)
    for(int i=0;i<48;i++) random[i] = i+1;
 c00541a:	2300      	movs	r3, #0
 c00541c:	647b      	str	r3, [r7, #68]	@ 0x44
 c00541e:	e00c      	b.n	c00543a <__acle_se_SECURE_ECC_Sign_NSC+0x2e>
 c005420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c005422:	b2db      	uxtb	r3, r3
 c005424:	3301      	adds	r3, #1
 c005426:	b2d9      	uxtb	r1, r3
 c005428:	f107 0210 	add.w	r2, r7, #16
 c00542c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c00542e:	4413      	add	r3, r2
 c005430:	460a      	mov	r2, r1
 c005432:	701a      	strb	r2, [r3, #0]
 c005434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c005436:	3301      	adds	r3, #1
 c005438:	647b      	str	r3, [r7, #68]	@ 0x44
 c00543a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c00543c:	2b2f      	cmp	r3, #47	@ 0x2f
 c00543e:	ddef      	ble.n	c005420 <__acle_se_SECURE_ECC_Sign_NSC+0x14>

    cmox_initialize(NULL);
 c005440:	2000      	movs	r0, #0
 c005442:	f7fb f869 	bl	c000518 <cmox_initialize>
    cmox_ecc_retval_t ret = cmox_ecdsa_sign(&Ecc_Ctx,
 c005446:	4b2c      	ldr	r3, [pc, #176]	@ (c0054f8 <__acle_se_SECURE_ECC_Sign_NSC+0xec>)
 c005448:	6819      	ldr	r1, [r3, #0]
 c00544a:	f107 0210 	add.w	r2, r7, #16
 c00544e:	683b      	ldr	r3, [r7, #0]
 c005450:	9305      	str	r3, [sp, #20]
 c005452:	687b      	ldr	r3, [r7, #4]
 c005454:	9304      	str	r3, [sp, #16]
 c005456:	68bb      	ldr	r3, [r7, #8]
 c005458:	9303      	str	r3, [sp, #12]
 c00545a:	68fb      	ldr	r3, [r7, #12]
 c00545c:	9302      	str	r3, [sp, #8]
 c00545e:	2330      	movs	r3, #48	@ 0x30
 c005460:	9301      	str	r3, [sp, #4]
 c005462:	4b26      	ldr	r3, [pc, #152]	@ (c0054fc <__acle_se_SECURE_ECC_Sign_NSC+0xf0>)
 c005464:	9300      	str	r3, [sp, #0]
 c005466:	2330      	movs	r3, #48	@ 0x30
 c005468:	4825      	ldr	r0, [pc, #148]	@ (c005500 <__acle_se_SECURE_ECC_Sign_NSC+0xf4>)
 c00546a:	f7fa ff05 	bl	c000278 <cmox_ecdsa_sign>
 c00546e:	6438      	str	r0, [r7, #64]	@ 0x40
                                            CMOX_ECC_SECP384R1_LOWMEM,
											random, sizeof(random),
											Private_Key, sizeof(Private_Key),
                                            msg, msg_len,
                                            sig, sig_len);
    cmox_finalize(NULL);
 c005470:	2000      	movs	r0, #0
 c005472:	f7fb f861 	bl	c000538 <cmox_finalize>

    return (ret == CMOX_ECC_SUCCESS) ? 0 : -1;
 c005476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c005478:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 c00547c:	d101      	bne.n	c005482 <__acle_se_SECURE_ECC_Sign_NSC+0x76>
 c00547e:	2300      	movs	r3, #0
 c005480:	e001      	b.n	c005486 <__acle_se_SECURE_ECC_Sign_NSC+0x7a>
 c005482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 c005486:	4618      	mov	r0, r3
 c005488:	3748      	adds	r7, #72	@ 0x48
 c00548a:	46bd      	mov	sp, r7
 c00548c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c005490:	4671      	mov	r1, lr
 c005492:	4672      	mov	r2, lr
 c005494:	4673      	mov	r3, lr
 c005496:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c00549a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c00549e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0054a2:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0054a6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0054aa:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0054ae:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0054b2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0054b6:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0054ba:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0054be:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0054c2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0054c6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0054ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0054ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0054d2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0054d6:	f38e 8c00 	msr	CPSR_fs, lr
 c0054da:	b410      	push	{r4}
 c0054dc:	eef1 ca10 	vmrs	ip, fpscr
 c0054e0:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0054e4:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0054e8:	ea0c 0c04 	and.w	ip, ip, r4
 c0054ec:	eee1 ca10 	vmsr	fpscr, ip
 c0054f0:	bc10      	pop	{r4}
 c0054f2:	46f4      	mov	ip, lr
 c0054f4:	4774      	bxns	lr
 c0054f6:	bf00      	nop
 c0054f8:	0c00e428 	.word	0x0c00e428
 c0054fc:	0c00e470 	.word	0x0c00e470
 c005500:	300008e8 	.word	0x300008e8

0c005504 <LL_AHB1_GRP1_EnableClock>:
{
 c005504:	b480      	push	{r7}
 c005506:	b085      	sub	sp, #20
 c005508:	af00      	add	r7, sp, #0
 c00550a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 c00550c:	4b0a      	ldr	r3, [pc, #40]	@ (c005538 <LL_AHB1_GRP1_EnableClock+0x34>)
 c00550e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 c005512:	4909      	ldr	r1, [pc, #36]	@ (c005538 <LL_AHB1_GRP1_EnableClock+0x34>)
 c005514:	687b      	ldr	r3, [r7, #4]
 c005516:	4313      	orrs	r3, r2
 c005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 c00551c:	4b06      	ldr	r3, [pc, #24]	@ (c005538 <LL_AHB1_GRP1_EnableClock+0x34>)
 c00551e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 c005522:	687b      	ldr	r3, [r7, #4]
 c005524:	4013      	ands	r3, r2
 c005526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 c005528:	68fb      	ldr	r3, [r7, #12]
}
 c00552a:	bf00      	nop
 c00552c:	3714      	adds	r7, #20
 c00552e:	46bd      	mov	sp, r7
 c005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005534:	4770      	bx	lr
 c005536:	bf00      	nop
 c005538:	56020c00 	.word	0x56020c00

0c00553c <LL_AHB3_GRP1_EnableClock>:
{
 c00553c:	b480      	push	{r7}
 c00553e:	b085      	sub	sp, #20
 c005540:	af00      	add	r7, sp, #0
 c005542:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 c005544:	4b0a      	ldr	r3, [pc, #40]	@ (c005570 <LL_AHB3_GRP1_EnableClock+0x34>)
 c005546:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 c00554a:	4909      	ldr	r1, [pc, #36]	@ (c005570 <LL_AHB3_GRP1_EnableClock+0x34>)
 c00554c:	687b      	ldr	r3, [r7, #4]
 c00554e:	4313      	orrs	r3, r2
 c005550:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 c005554:	4b06      	ldr	r3, [pc, #24]	@ (c005570 <LL_AHB3_GRP1_EnableClock+0x34>)
 c005556:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 c00555a:	687b      	ldr	r3, [r7, #4]
 c00555c:	4013      	ands	r3, r2
 c00555e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 c005560:	68fb      	ldr	r3, [r7, #12]
}
 c005562:	bf00      	nop
 c005564:	3714      	adds	r7, #20
 c005566:	46bd      	mov	sp, r7
 c005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00556c:	4770      	bx	lr
 c00556e:	bf00      	nop
 c005570:	56020c00 	.word	0x56020c00

0c005574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c005574:	b580      	push	{r7, lr}
 c005576:	b082      	sub	sp, #8
 c005578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 c00557a:	4b0f      	ldr	r3, [pc, #60]	@ (c0055b8 <HAL_MspInit+0x44>)
 c00557c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c005580:	4a0d      	ldr	r2, [pc, #52]	@ (c0055b8 <HAL_MspInit+0x44>)
 c005582:	f043 0304 	orr.w	r3, r3, #4
 c005586:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00558a:	4b0b      	ldr	r3, [pc, #44]	@ (c0055b8 <HAL_MspInit+0x44>)
 c00558c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c005590:	f003 0304 	and.w	r3, r3, #4
 c005594:	607b      	str	r3, [r7, #4]
 c005596:	687b      	ldr	r3, [r7, #4]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GTZC1);
 c005598:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 c00559c:	f7ff ffb2 	bl	c005504 <LL_AHB1_GRP1_EnableClock>
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_GTZC2);
 c0055a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 c0055a4:	f7ff ffca 	bl	c00553c <LL_AHB3_GRP1_EnableClock>
  HAL_PWREx_EnableVddUSB();
 c0055a8:	f003 faf8 	bl	c008b9c <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 c0055ac:	f003 fb06 	bl	c008bbc <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0055b0:	bf00      	nop
 c0055b2:	3708      	adds	r7, #8
 c0055b4:	46bd      	mov	sp, r7
 c0055b6:	bd80      	pop	{r7, pc}
 c0055b8:	56020c00 	.word	0x56020c00

0c0055bc <HAL_MDF_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmdf: MDF handle pointer
  * @retval None
  */
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 c0055bc:	b580      	push	{r7, lr}
 c0055be:	b0bc      	sub	sp, #240	@ 0xf0
 c0055c0:	af00      	add	r7, sp, #0
 c0055c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0055c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 c0055c8:	2200      	movs	r2, #0
 c0055ca:	601a      	str	r2, [r3, #0]
 c0055cc:	605a      	str	r2, [r3, #4]
 c0055ce:	609a      	str	r2, [r3, #8]
 c0055d0:	60da      	str	r2, [r3, #12]
 c0055d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c0055d4:	f107 0310 	add.w	r3, r7, #16
 c0055d8:	22c8      	movs	r2, #200	@ 0xc8
 c0055da:	2100      	movs	r1, #0
 c0055dc:	4618      	mov	r0, r3
 c0055de:	f008 fdab 	bl	c00e138 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 c0055e2:	687b      	ldr	r3, [r7, #4]
 c0055e4:	681b      	ldr	r3, [r3, #0]
 c0055e6:	4a27      	ldr	r2, [pc, #156]	@ (c005684 <HAL_MDF_MspInit+0xc8>)
 c0055e8:	4293      	cmp	r3, r2
 c0055ea:	d146      	bne.n	c00567a <HAL_MDF_MspInit+0xbe>

    /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 c0055ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 c0055f0:	f04f 0300 	mov.w	r3, #0
 c0055f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 c0055f8:	2300      	movs	r3, #0
 c0055fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c0055fe:	f107 0310 	add.w	r3, r7, #16
 c005602:	4618      	mov	r0, r3
 c005604:	f004 fd96 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005608:	4603      	mov	r3, r0
 c00560a:	2b00      	cmp	r3, #0
 c00560c:	d001      	beq.n	c005612 <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 c00560e:	f7ff fea1 	bl	c005354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 c005612:	4b1d      	ldr	r3, [pc, #116]	@ (c005688 <HAL_MDF_MspInit+0xcc>)
 c005614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c005618:	4a1b      	ldr	r2, [pc, #108]	@ (c005688 <HAL_MDF_MspInit+0xcc>)
 c00561a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 c00561e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c005622:	4b19      	ldr	r3, [pc, #100]	@ (c005688 <HAL_MDF_MspInit+0xcc>)
 c005624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c005628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00562c:	60fb      	str	r3, [r7, #12]
 c00562e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 c005630:	4b15      	ldr	r3, [pc, #84]	@ (c005688 <HAL_MDF_MspInit+0xcc>)
 c005632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005636:	4a14      	ldr	r2, [pc, #80]	@ (c005688 <HAL_MDF_MspInit+0xcc>)
 c005638:	f043 0310 	orr.w	r3, r3, #16
 c00563c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005640:	4b11      	ldr	r3, [pc, #68]	@ (c005688 <HAL_MDF_MspInit+0xcc>)
 c005642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005646:	f003 0310 	and.w	r3, r3, #16
 c00564a:	60bb      	str	r3, [r7, #8]
 c00564c:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 c00564e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 c005652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005656:	2302      	movs	r3, #2
 c005658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00565c:	2300      	movs	r3, #0
 c00565e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005662:	2300      	movs	r3, #0
 c005664:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 c005668:	2303      	movs	r3, #3
 c00566a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 c00566e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 c005672:	4619      	mov	r1, r3
 c005674:	4805      	ldr	r0, [pc, #20]	@ (c00568c <HAL_MDF_MspInit+0xd0>)
 c005676:	f001 f9d9 	bl	c006a2c <HAL_GPIO_Init>

    /* USER CODE END ADF1_MspInit 1 */

  }

}
 c00567a:	bf00      	nop
 c00567c:	37f0      	adds	r7, #240	@ 0xf0
 c00567e:	46bd      	mov	sp, r7
 c005680:	bd80      	pop	{r7, pc}
 c005682:	bf00      	nop
 c005684:	56024080 	.word	0x56024080
 c005688:	56020c00 	.word	0x56020c00
 c00568c:	52021000 	.word	0x52021000

0c005690 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 c005690:	b580      	push	{r7, lr}
 c005692:	b0be      	sub	sp, #248	@ 0xf8
 c005694:	af00      	add	r7, sp, #0
 c005696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c005698:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c00569c:	2200      	movs	r2, #0
 c00569e:	601a      	str	r2, [r3, #0]
 c0056a0:	605a      	str	r2, [r3, #4]
 c0056a2:	609a      	str	r2, [r3, #8]
 c0056a4:	60da      	str	r2, [r3, #12]
 c0056a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c0056a8:	f107 0318 	add.w	r3, r7, #24
 c0056ac:	22c8      	movs	r2, #200	@ 0xc8
 c0056ae:	2100      	movs	r1, #0
 c0056b0:	4618      	mov	r0, r3
 c0056b2:	f008 fd41 	bl	c00e138 <memset>
  if(hi2c->Instance==I2C1)
 c0056b6:	687b      	ldr	r3, [r7, #4]
 c0056b8:	681b      	ldr	r3, [r3, #0]
 c0056ba:	4a4d      	ldr	r2, [pc, #308]	@ (c0057f0 <HAL_I2C_MspInit+0x160>)
 c0056bc:	4293      	cmp	r3, r2
 c0056be:	d147      	bne.n	c005750 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 c0056c0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 c0056c4:	f04f 0300 	mov.w	r3, #0
 c0056c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 c0056cc:	2300      	movs	r3, #0
 c0056ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c0056d2:	f107 0318 	add.w	r3, r7, #24
 c0056d6:	4618      	mov	r0, r3
 c0056d8:	f004 fd2c 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c0056dc:	4603      	mov	r3, r0
 c0056de:	2b00      	cmp	r3, #0
 c0056e0:	d001      	beq.n	c0056e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 c0056e2:	f7ff fe37 	bl	c005354 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 c0056e6:	4b43      	ldr	r3, [pc, #268]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c0056e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0056ec:	4a41      	ldr	r2, [pc, #260]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c0056ee:	f043 0302 	orr.w	r3, r3, #2
 c0056f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0056f6:	4b3f      	ldr	r3, [pc, #252]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c0056f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0056fc:	f003 0302 	and.w	r3, r3, #2
 c005700:	617b      	str	r3, [r7, #20]
 c005702:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 c005704:	f44f 7340 	mov.w	r3, #768	@ 0x300
 c005708:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 c00570c:	2312      	movs	r3, #18
 c00570e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005712:	2300      	movs	r3, #0
 c005714:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005718:	2300      	movs	r3, #0
 c00571a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 c00571e:	2304      	movs	r3, #4
 c005720:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c005724:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005728:	4619      	mov	r1, r3
 c00572a:	4833      	ldr	r0, [pc, #204]	@ (c0057f8 <HAL_I2C_MspInit+0x168>)
 c00572c:	f001 f97e 	bl	c006a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 c005730:	4b30      	ldr	r3, [pc, #192]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c005732:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c005736:	4a2f      	ldr	r2, [pc, #188]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c005738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 c00573c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 c005740:	4b2c      	ldr	r3, [pc, #176]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c005742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c005746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c00574a:	613b      	str	r3, [r7, #16]
 c00574c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 c00574e:	e04a      	b.n	c0057e6 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 c005750:	687b      	ldr	r3, [r7, #4]
 c005752:	681b      	ldr	r3, [r3, #0]
 c005754:	4a29      	ldr	r2, [pc, #164]	@ (c0057fc <HAL_I2C_MspInit+0x16c>)
 c005756:	4293      	cmp	r3, r2
 c005758:	d145      	bne.n	c0057e6 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 c00575a:	f04f 0280 	mov.w	r2, #128	@ 0x80
 c00575e:	f04f 0300 	mov.w	r3, #0
 c005762:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 c005766:	2300      	movs	r3, #0
 c005768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c00576c:	f107 0318 	add.w	r3, r7, #24
 c005770:	4618      	mov	r0, r3
 c005772:	f004 fcdf 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005776:	4603      	mov	r3, r0
 c005778:	2b00      	cmp	r3, #0
 c00577a:	d001      	beq.n	c005780 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 c00577c:	f7ff fdea 	bl	c005354 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 c005780:	4b1c      	ldr	r3, [pc, #112]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c005782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005786:	4a1b      	ldr	r2, [pc, #108]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c005788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c00578c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005790:	4b18      	ldr	r3, [pc, #96]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c005792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c00579a:	60fb      	str	r3, [r7, #12]
 c00579c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 c00579e:	2330      	movs	r3, #48	@ 0x30
 c0057a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 c0057a4:	2312      	movs	r3, #18
 c0057a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0057aa:	2300      	movs	r3, #0
 c0057ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0057b0:	2300      	movs	r3, #0
 c0057b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 c0057b6:	2304      	movs	r3, #4
 c0057b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 c0057bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c0057c0:	4619      	mov	r1, r3
 c0057c2:	480f      	ldr	r0, [pc, #60]	@ (c005800 <HAL_I2C_MspInit+0x170>)
 c0057c4:	f001 f932 	bl	c006a2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 c0057c8:	4b0a      	ldr	r3, [pc, #40]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c0057ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c0057ce:	4a09      	ldr	r2, [pc, #36]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c0057d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 c0057d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 c0057d8:	4b06      	ldr	r3, [pc, #24]	@ (c0057f4 <HAL_I2C_MspInit+0x164>)
 c0057da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c0057de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 c0057e2:	60bb      	str	r3, [r7, #8]
 c0057e4:	68bb      	ldr	r3, [r7, #8]
}
 c0057e6:	bf00      	nop
 c0057e8:	37f8      	adds	r7, #248	@ 0xf8
 c0057ea:	46bd      	mov	sp, r7
 c0057ec:	bd80      	pop	{r7, pc}
 c0057ee:	bf00      	nop
 c0057f0:	50005400 	.word	0x50005400
 c0057f4:	56020c00 	.word	0x56020c00
 c0057f8:	52020400 	.word	0x52020400
 c0057fc:	50005800 	.word	0x50005800
 c005800:	52021c00 	.word	0x52021c00

0c005804 <HAL_OSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hospi: OSPI handle pointer
  * @retval None
  */
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 c005804:	b580      	push	{r7, lr}
 c005806:	b0c8      	sub	sp, #288	@ 0x120
 c005808:	af00      	add	r7, sp, #0
 c00580a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c00580e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 c005812:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c005814:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005818:	2200      	movs	r2, #0
 c00581a:	601a      	str	r2, [r3, #0]
 c00581c:	605a      	str	r2, [r3, #4]
 c00581e:	609a      	str	r2, [r3, #8]
 c005820:	60da      	str	r2, [r3, #12]
 c005822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c005824:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 c005828:	22c8      	movs	r2, #200	@ 0xc8
 c00582a:	2100      	movs	r1, #0
 c00582c:	4618      	mov	r0, r3
 c00582e:	f008 fc83 	bl	c00e138 <memset>
  if(hospi->Instance==OCTOSPI1)
 c005832:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005836:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 c00583a:	681b      	ldr	r3, [r3, #0]
 c00583c:	681b      	ldr	r3, [r3, #0]
 c00583e:	4aa6      	ldr	r2, [pc, #664]	@ (c005ad8 <HAL_OSPI_MspInit+0x2d4>)
 c005840:	4293      	cmp	r3, r2
 c005842:	f040 815d 	bne.w	c005b00 <HAL_OSPI_MspInit+0x2fc>

    /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 c005846:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 c00584a:	f04f 0300 	mov.w	r3, #0
 c00584e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 c005852:	2300      	movs	r3, #0
 c005854:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005858:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 c00585c:	4618      	mov	r0, r3
 c00585e:	f004 fc69 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005862:	4603      	mov	r3, r0
 c005864:	2b00      	cmp	r3, #0
 c005866:	d001      	beq.n	c00586c <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 c005868:	f7ff fd74 	bl	c005354 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 c00586c:	4b9b      	ldr	r3, [pc, #620]	@ (c005adc <HAL_OSPI_MspInit+0x2d8>)
 c00586e:	681b      	ldr	r3, [r3, #0]
 c005870:	3301      	adds	r3, #1
 c005872:	4a9a      	ldr	r2, [pc, #616]	@ (c005adc <HAL_OSPI_MspInit+0x2d8>)
 c005874:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 c005876:	4b99      	ldr	r3, [pc, #612]	@ (c005adc <HAL_OSPI_MspInit+0x2d8>)
 c005878:	681b      	ldr	r3, [r3, #0]
 c00587a:	2b01      	cmp	r3, #1
 c00587c:	d10e      	bne.n	c00589c <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 c00587e:	4b98      	ldr	r3, [pc, #608]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005884:	4a96      	ldr	r2, [pc, #600]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 c00588a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00588e:	4b94      	ldr	r3, [pc, #592]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c00589a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 c00589c:	4b90      	ldr	r3, [pc, #576]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c00589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c0058a2:	4a8f      	ldr	r2, [pc, #572]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058a4:	f043 0310 	orr.w	r3, r3, #16
 c0058a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 c0058ac:	4b8c      	ldr	r3, [pc, #560]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c0058b2:	f003 0310 	and.w	r3, r3, #16
 c0058b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 c0058b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOI_CLK_ENABLE();
 c0058ba:	4b89      	ldr	r3, [pc, #548]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0058c0:	4a87      	ldr	r2, [pc, #540]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c0058c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0058ca:	4b85      	ldr	r3, [pc, #532]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0058d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c0058d4:	637b      	str	r3, [r7, #52]	@ 0x34
 c0058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 c0058d8:	4b81      	ldr	r3, [pc, #516]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0058de:	4a80      	ldr	r2, [pc, #512]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058e0:	f043 0310 	orr.w	r3, r3, #16
 c0058e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c0058e8:	4b7d      	ldr	r3, [pc, #500]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0058ee:	f003 0310 	and.w	r3, r3, #16
 c0058f2:	633b      	str	r3, [r7, #48]	@ 0x30
 c0058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 c0058f6:	4b7a      	ldr	r3, [pc, #488]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0058fc:	4a78      	ldr	r2, [pc, #480]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c0058fe:	f043 0308 	orr.w	r3, r3, #8
 c005902:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005906:	4b76      	ldr	r3, [pc, #472]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00590c:	f003 0308 	and.w	r3, r3, #8
 c005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 c005914:	4b72      	ldr	r3, [pc, #456]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00591a:	4a71      	ldr	r2, [pc, #452]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c00591c:	f043 0320 	orr.w	r3, r3, #32
 c005920:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005924:	4b6e      	ldr	r3, [pc, #440]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00592a:	f003 0320 	and.w	r3, r3, #32
 c00592e:	62bb      	str	r3, [r7, #40]	@ 0x28
 c005930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 c005932:	4b6b      	ldr	r3, [pc, #428]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005938:	4a69      	ldr	r2, [pc, #420]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c00593a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c00593e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005942:	4b67      	ldr	r3, [pc, #412]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c00594c:	627b      	str	r3, [r7, #36]	@ 0x24
 c00594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 c005950:	4b63      	ldr	r3, [pc, #396]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005952:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005956:	4a62      	ldr	r2, [pc, #392]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005958:	f043 0304 	orr.w	r3, r3, #4
 c00595c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005960:	4b5f      	ldr	r3, [pc, #380]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005966:	f003 0204 	and.w	r2, r3, #4
 c00596a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c00596e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 c005972:	601a      	str	r2, [r3, #0]
 c005974:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005978:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 c00597c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 c00597e:	4b58      	ldr	r3, [pc, #352]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005984:	4a56      	ldr	r2, [pc, #344]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005986:	f043 0302 	orr.w	r3, r3, #2
 c00598a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c00598e:	4b54      	ldr	r3, [pc, #336]	@ (c005ae0 <HAL_OSPI_MspInit+0x2dc>)
 c005990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005994:	f003 0202 	and.w	r2, r3, #2
 c005998:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c00599c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 c0059a0:	601a      	str	r2, [r3, #0]
 c0059a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c0059a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 c0059aa:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 c0059ac:	2301      	movs	r3, #1
 c0059ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0059b2:	2302      	movs	r3, #2
 c0059b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0059b8:	2300      	movs	r3, #0
 c0059ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c0059be:	2303      	movs	r3, #3
 c0059c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 c0059c4:	2303      	movs	r3, #3
 c0059c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 c0059ca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c0059ce:	4619      	mov	r1, r3
 c0059d0:	4844      	ldr	r0, [pc, #272]	@ (c005ae4 <HAL_OSPI_MspInit+0x2e0>)
 c0059d2:	f001 f82b 	bl	c006a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 c0059d6:	2308      	movs	r3, #8
 c0059d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0059dc:	2302      	movs	r3, #2
 c0059de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0059e2:	2300      	movs	r3, #0
 c0059e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c0059e8:	2303      	movs	r3, #3
 c0059ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 c0059ee:	2303      	movs	r3, #3
 c0059f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 c0059f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c0059f8:	4619      	mov	r1, r3
 c0059fa:	483b      	ldr	r0, [pc, #236]	@ (c005ae8 <HAL_OSPI_MspInit+0x2e4>)
 c0059fc:	f001 f816 	bl	c006a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 c005a00:	2380      	movs	r3, #128	@ 0x80
 c005a02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005a06:	2302      	movs	r3, #2
 c005a08:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005a0c:	2300      	movs	r3, #0
 c005a0e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005a12:	2303      	movs	r3, #3
 c005a14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 c005a18:	230a      	movs	r3, #10
 c005a1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 c005a1e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005a22:	4619      	mov	r1, r3
 c005a24:	4831      	ldr	r0, [pc, #196]	@ (c005aec <HAL_OSPI_MspInit+0x2e8>)
 c005a26:	f001 f801 	bl	c006a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 c005a2a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 c005a2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005a32:	2302      	movs	r3, #2
 c005a34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005a38:	2300      	movs	r3, #0
 c005a3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005a3e:	2303      	movs	r3, #3
 c005a40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 c005a44:	230a      	movs	r3, #10
 c005a46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 c005a4a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005a4e:	4619      	mov	r1, r3
 c005a50:	4827      	ldr	r0, [pc, #156]	@ (c005af0 <HAL_OSPI_MspInit+0x2ec>)
 c005a52:	f000 ffeb 	bl	c006a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 c005a56:	2304      	movs	r3, #4
 c005a58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005a5c:	2302      	movs	r3, #2
 c005a5e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005a62:	2300      	movs	r3, #0
 c005a64:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005a68:	2303      	movs	r3, #3
 c005a6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 c005a6e:	2303      	movs	r3, #3
 c005a70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 c005a74:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005a78:	4619      	mov	r1, r3
 c005a7a:	481e      	ldr	r0, [pc, #120]	@ (c005af4 <HAL_OSPI_MspInit+0x2f0>)
 c005a7c:	f000 ffd6 	bl	c006a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 c005a80:	2308      	movs	r3, #8
 c005a82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005a86:	2302      	movs	r3, #2
 c005a88:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005a8c:	2300      	movs	r3, #0
 c005a8e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005a92:	2303      	movs	r3, #3
 c005a94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 c005a98:	230a      	movs	r3, #10
 c005a9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 c005a9e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005aa2:	4619      	mov	r1, r3
 c005aa4:	4814      	ldr	r0, [pc, #80]	@ (c005af8 <HAL_OSPI_MspInit+0x2f4>)
 c005aa6:	f000 ffc1 	bl	c006a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 c005aaa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 c005aae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005ab2:	2302      	movs	r3, #2
 c005ab4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005ab8:	2300      	movs	r3, #0
 c005aba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005abe:	2303      	movs	r3, #3
 c005ac0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 c005ac4:	230a      	movs	r3, #10
 c005ac6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c005aca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005ace:	4619      	mov	r1, r3
 c005ad0:	480a      	ldr	r0, [pc, #40]	@ (c005afc <HAL_OSPI_MspInit+0x2f8>)
 c005ad2:	f000 ffab 	bl	c006a2c <HAL_GPIO_Init>
    /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

    /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 c005ad6:	e0ed      	b.n	c005cb4 <HAL_OSPI_MspInit+0x4b0>
 c005ad8:	520d1400 	.word	0x520d1400
 c005adc:	30000908 	.word	0x30000908
 c005ae0:	56020c00 	.word	0x56020c00
 c005ae4:	52022000 	.word	0x52022000
 c005ae8:	52021000 	.word	0x52021000
 c005aec:	52020c00 	.word	0x52020c00
 c005af0:	52021400 	.word	0x52021400
 c005af4:	52021c00 	.word	0x52021c00
 c005af8:	52020800 	.word	0x52020800
 c005afc:	52020400 	.word	0x52020400
  else if(hospi->Instance==OCTOSPI2)
 c005b00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005b04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 c005b08:	681b      	ldr	r3, [r3, #0]
 c005b0a:	681b      	ldr	r3, [r3, #0]
 c005b0c:	4a6c      	ldr	r2, [pc, #432]	@ (c005cc0 <HAL_OSPI_MspInit+0x4bc>)
 c005b0e:	4293      	cmp	r3, r2
 c005b10:	f040 80d0 	bne.w	c005cb4 <HAL_OSPI_MspInit+0x4b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 c005b14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 c005b18:	f04f 0300 	mov.w	r3, #0
 c005b1c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 c005b20:	2300      	movs	r3, #0
 c005b22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005b26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 c005b2a:	4618      	mov	r0, r3
 c005b2c:	f004 fb02 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005b30:	4603      	mov	r3, r0
 c005b32:	2b00      	cmp	r3, #0
 c005b34:	d001      	beq.n	c005b3a <HAL_OSPI_MspInit+0x336>
      Error_Handler();
 c005b36:	f7ff fc0d 	bl	c005354 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 c005b3a:	4b62      	ldr	r3, [pc, #392]	@ (c005cc4 <HAL_OSPI_MspInit+0x4c0>)
 c005b3c:	681b      	ldr	r3, [r3, #0]
 c005b3e:	3301      	adds	r3, #1
 c005b40:	4a60      	ldr	r2, [pc, #384]	@ (c005cc4 <HAL_OSPI_MspInit+0x4c0>)
 c005b42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 c005b44:	4b5f      	ldr	r3, [pc, #380]	@ (c005cc4 <HAL_OSPI_MspInit+0x4c0>)
 c005b46:	681b      	ldr	r3, [r3, #0]
 c005b48:	2b01      	cmp	r3, #1
 c005b4a:	d116      	bne.n	c005b7a <HAL_OSPI_MspInit+0x376>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 c005b4c:	4b5e      	ldr	r3, [pc, #376]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005b52:	4a5d      	ldr	r2, [pc, #372]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005b54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 c005b58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005b5c:	4b5a      	ldr	r3, [pc, #360]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005b62:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 c005b66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 c005b6e:	601a      	str	r2, [r3, #0]
 c005b70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 c005b78:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 c005b7a:	4b53      	ldr	r3, [pc, #332]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c005b80:	4a51      	ldr	r2, [pc, #324]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c005b86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 c005b8a:	4b4f      	ldr	r3, [pc, #316]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c005b90:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 c005b94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005b98:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c005b9c:	601a      	str	r2, [r3, #0]
 c005b9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005ba2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c005ba6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 c005ba8:	4b47      	ldr	r3, [pc, #284]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005bae:	4a46      	ldr	r2, [pc, #280]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c005bb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005bb8:	4b43      	ldr	r3, [pc, #268]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005bbe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 c005bc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005bc6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 c005bca:	601a      	str	r2, [r3, #0]
 c005bcc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005bd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 c005bd4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 c005bd6:	4b3c      	ldr	r3, [pc, #240]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005bdc:	4a3a      	ldr	r2, [pc, #232]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c005be2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005be6:	4b38      	ldr	r3, [pc, #224]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005bec:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 c005bf0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005bf4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 c005bf8:	601a      	str	r2, [r3, #0]
 c005bfa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005bfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 c005c02:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 c005c04:	4b30      	ldr	r3, [pc, #192]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005c0a:	4a2f      	ldr	r2, [pc, #188]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005c0c:	f043 0320 	orr.w	r3, r3, #32
 c005c10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005c14:	4b2c      	ldr	r3, [pc, #176]	@ (c005cc8 <HAL_OSPI_MspInit+0x4c4>)
 c005c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005c1a:	f003 0220 	and.w	r2, r3, #32
 c005c1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005c22:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 c005c26:	601a      	str	r2, [r3, #0]
 c005c28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 c005c2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 c005c30:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 c005c32:	2320      	movs	r3, #32
 c005c34:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005c38:	2302      	movs	r3, #2
 c005c3a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005c3e:	2300      	movs	r3, #0
 c005c40:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005c44:	2303      	movs	r3, #3
 c005c46:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 c005c4a:	2305      	movs	r3, #5
 c005c4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 c005c50:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005c54:	4619      	mov	r1, r3
 c005c56:	481d      	ldr	r0, [pc, #116]	@ (c005ccc <HAL_OSPI_MspInit+0x4c8>)
 c005c58:	f000 fee8 	bl	c006a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 c005c5c:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 c005c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005c64:	2302      	movs	r3, #2
 c005c66:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005c6a:	2300      	movs	r3, #0
 c005c6c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005c70:	2303      	movs	r3, #3
 c005c72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 c005c76:	2305      	movs	r3, #5
 c005c78:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 c005c7c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005c80:	4619      	mov	r1, r3
 c005c82:	4813      	ldr	r0, [pc, #76]	@ (c005cd0 <HAL_OSPI_MspInit+0x4cc>)
 c005c84:	f000 fed2 	bl	c006a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 c005c88:	f241 031f 	movw	r3, #4127	@ 0x101f
 c005c8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005c90:	2302      	movs	r3, #2
 c005c92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005c96:	2300      	movs	r3, #0
 c005c98:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c005c9c:	2303      	movs	r3, #3
 c005c9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 c005ca2:	2305      	movs	r3, #5
 c005ca4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 c005ca8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 c005cac:	4619      	mov	r1, r3
 c005cae:	4809      	ldr	r0, [pc, #36]	@ (c005cd4 <HAL_OSPI_MspInit+0x4d0>)
 c005cb0:	f000 febc 	bl	c006a2c <HAL_GPIO_Init>
}
 c005cb4:	bf00      	nop
 c005cb6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 c005cba:	46bd      	mov	sp, r7
 c005cbc:	bd80      	pop	{r7, pc}
 c005cbe:	bf00      	nop
 c005cc0:	520d2400 	.word	0x520d2400
 c005cc4:	30000908 	.word	0x30000908
 c005cc8:	56020c00 	.word	0x56020c00
 c005ccc:	52022000 	.word	0x52022000
 c005cd0:	52021c00 	.word	0x52021c00
 c005cd4:	52021400 	.word	0x52021400

0c005cd8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 c005cd8:	b580      	push	{r7, lr}
 c005cda:	b0be      	sub	sp, #248	@ 0xf8
 c005cdc:	af00      	add	r7, sp, #0
 c005cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c005ce0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005ce4:	2200      	movs	r2, #0
 c005ce6:	601a      	str	r2, [r3, #0]
 c005ce8:	605a      	str	r2, [r3, #4]
 c005cea:	609a      	str	r2, [r3, #8]
 c005cec:	60da      	str	r2, [r3, #12]
 c005cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c005cf0:	f107 0318 	add.w	r3, r7, #24
 c005cf4:	22c8      	movs	r2, #200	@ 0xc8
 c005cf6:	2100      	movs	r1, #0
 c005cf8:	4618      	mov	r0, r3
 c005cfa:	f008 fa1d 	bl	c00e138 <memset>
  if(hspi->Instance==SPI2)
 c005cfe:	687b      	ldr	r3, [r7, #4]
 c005d00:	681b      	ldr	r3, [r3, #0]
 c005d02:	4a39      	ldr	r2, [pc, #228]	@ (c005de8 <HAL_SPI_MspInit+0x110>)
 c005d04:	4293      	cmp	r3, r2
 c005d06:	d16b      	bne.n	c005de0 <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 c005d08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 c005d0c:	f04f 0300 	mov.w	r3, #0
 c005d10:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 c005d14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c005d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005d1c:	f107 0318 	add.w	r3, r7, #24
 c005d20:	4618      	mov	r0, r3
 c005d22:	f004 fa07 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005d26:	4603      	mov	r3, r0
 c005d28:	2b00      	cmp	r3, #0
 c005d2a:	d001      	beq.n	c005d30 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 c005d2c:	f7ff fb12 	bl	c005354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 c005d30:	4b2e      	ldr	r3, [pc, #184]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c005d36:	4a2d      	ldr	r2, [pc, #180]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c005d3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 c005d40:	4b2a      	ldr	r3, [pc, #168]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c005d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c005d4a:	617b      	str	r3, [r7, #20]
 c005d4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 c005d4e:	4b27      	ldr	r3, [pc, #156]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005d54:	4a25      	ldr	r2, [pc, #148]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d56:	f043 0308 	orr.w	r3, r3, #8
 c005d5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005d5e:	4b23      	ldr	r3, [pc, #140]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005d64:	f003 0308 	and.w	r3, r3, #8
 c005d68:	613b      	str	r3, [r7, #16]
 c005d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 c005d6c:	4b1f      	ldr	r3, [pc, #124]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005d72:	4a1e      	ldr	r2, [pc, #120]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d74:	f043 0302 	orr.w	r3, r3, #2
 c005d78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (c005dec <HAL_SPI_MspInit+0x114>)
 c005d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005d82:	f003 0302 	and.w	r3, r3, #2
 c005d86:	60fb      	str	r3, [r7, #12]
 c005d88:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 c005d8a:	231a      	movs	r3, #26
 c005d8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005d90:	2302      	movs	r3, #2
 c005d92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005d96:	2300      	movs	r3, #0
 c005d98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005d9c:	2300      	movs	r3, #0
 c005d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 c005da2:	2305      	movs	r3, #5
 c005da4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c005da8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005dac:	4619      	mov	r1, r3
 c005dae:	4810      	ldr	r0, [pc, #64]	@ (c005df0 <HAL_SPI_MspInit+0x118>)
 c005db0:	f000 fe3c 	bl	c006a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 c005db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 c005db8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005dbc:	2302      	movs	r3, #2
 c005dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005dc2:	2300      	movs	r3, #0
 c005dc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005dc8:	2300      	movs	r3, #0
 c005dca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 c005dce:	2305      	movs	r3, #5
 c005dd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 c005dd4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005dd8:	4619      	mov	r1, r3
 c005dda:	4806      	ldr	r0, [pc, #24]	@ (c005df4 <HAL_SPI_MspInit+0x11c>)
 c005ddc:	f000 fe26 	bl	c006a2c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 c005de0:	bf00      	nop
 c005de2:	37f8      	adds	r7, #248	@ 0xf8
 c005de4:	46bd      	mov	sp, r7
 c005de6:	bd80      	pop	{r7, pc}
 c005de8:	50003800 	.word	0x50003800
 c005dec:	56020c00 	.word	0x56020c00
 c005df0:	52020c00 	.word	0x52020c00
 c005df4:	52020400 	.word	0x52020400

0c005df8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c005df8:	b580      	push	{r7, lr}
 c005dfa:	b0be      	sub	sp, #248	@ 0xf8
 c005dfc:	af00      	add	r7, sp, #0
 c005dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c005e00:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005e04:	2200      	movs	r2, #0
 c005e06:	601a      	str	r2, [r3, #0]
 c005e08:	605a      	str	r2, [r3, #4]
 c005e0a:	609a      	str	r2, [r3, #8]
 c005e0c:	60da      	str	r2, [r3, #12]
 c005e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c005e10:	f107 0318 	add.w	r3, r7, #24
 c005e14:	22c8      	movs	r2, #200	@ 0xc8
 c005e16:	2100      	movs	r1, #0
 c005e18:	4618      	mov	r0, r3
 c005e1a:	f008 f98d 	bl	c00e138 <memset>
  if(huart->Instance==UART4)
 c005e1e:	687b      	ldr	r3, [r7, #4]
 c005e20:	681b      	ldr	r3, [r3, #0]
 c005e22:	4a4c      	ldr	r2, [pc, #304]	@ (c005f54 <HAL_UART_MspInit+0x15c>)
 c005e24:	4293      	cmp	r3, r2
 c005e26:	d146      	bne.n	c005eb6 <HAL_UART_MspInit+0xbe>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 c005e28:	f04f 0208 	mov.w	r2, #8
 c005e2c:	f04f 0300 	mov.w	r3, #0
 c005e30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 c005e34:	2300      	movs	r3, #0
 c005e36:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005e38:	f107 0318 	add.w	r3, r7, #24
 c005e3c:	4618      	mov	r0, r3
 c005e3e:	f004 f979 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005e42:	4603      	mov	r3, r0
 c005e44:	2b00      	cmp	r3, #0
 c005e46:	d001      	beq.n	c005e4c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 c005e48:	f7ff fa84 	bl	c005354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 c005e4c:	4b42      	ldr	r3, [pc, #264]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c005e52:	4a41      	ldr	r2, [pc, #260]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 c005e58:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 c005e5c:	4b3e      	ldr	r3, [pc, #248]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c005e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 c005e66:	617b      	str	r3, [r7, #20]
 c005e68:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 c005e6a:	4b3b      	ldr	r3, [pc, #236]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005e70:	4a39      	ldr	r2, [pc, #228]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005e72:	f043 0304 	orr.w	r3, r3, #4
 c005e76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005e7a:	4b37      	ldr	r3, [pc, #220]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005e80:	f003 0304 	and.w	r3, r3, #4
 c005e84:	613b      	str	r3, [r7, #16]
 c005e86:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 c005e88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 c005e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005e90:	2302      	movs	r3, #2
 c005e92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005e96:	2300      	movs	r3, #0
 c005e98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005e9c:	2300      	movs	r3, #0
 c005e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 c005ea2:	2308      	movs	r3, #8
 c005ea4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 c005ea8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005eac:	4619      	mov	r1, r3
 c005eae:	482b      	ldr	r0, [pc, #172]	@ (c005f5c <HAL_UART_MspInit+0x164>)
 c005eb0:	f000 fdbc 	bl	c006a2c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 c005eb4:	e04a      	b.n	c005f4c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 c005eb6:	687b      	ldr	r3, [r7, #4]
 c005eb8:	681b      	ldr	r3, [r3, #0]
 c005eba:	4a29      	ldr	r2, [pc, #164]	@ (c005f60 <HAL_UART_MspInit+0x168>)
 c005ebc:	4293      	cmp	r3, r2
 c005ebe:	d145      	bne.n	c005f4c <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c005ec0:	f04f 0201 	mov.w	r2, #1
 c005ec4:	f04f 0300 	mov.w	r3, #0
 c005ec8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c005ecc:	2300      	movs	r3, #0
 c005ece:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005ed0:	f107 0318 	add.w	r3, r7, #24
 c005ed4:	4618      	mov	r0, r3
 c005ed6:	f004 f92d 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005eda:	4603      	mov	r3, r0
 c005edc:	2b00      	cmp	r3, #0
 c005ede:	d001      	beq.n	c005ee4 <HAL_UART_MspInit+0xec>
      Error_Handler();
 c005ee0:	f7ff fa38 	bl	c005354 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 c005ee4:	4b1c      	ldr	r3, [pc, #112]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005ee6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c005eea:	4a1b      	ldr	r2, [pc, #108]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c005ef0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 c005ef4:	4b18      	ldr	r3, [pc, #96]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005ef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c005efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c005efe:	60fb      	str	r3, [r7, #12]
 c005f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 c005f02:	4b15      	ldr	r3, [pc, #84]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005f08:	4a13      	ldr	r2, [pc, #76]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005f0a:	f043 0301 	orr.w	r3, r3, #1
 c005f0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005f12:	4b11      	ldr	r3, [pc, #68]	@ (c005f58 <HAL_UART_MspInit+0x160>)
 c005f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005f18:	f003 0301 	and.w	r3, r3, #1
 c005f1c:	60bb      	str	r3, [r7, #8]
 c005f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 c005f20:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 c005f24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005f28:	2302      	movs	r3, #2
 c005f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005f2e:	2300      	movs	r3, #0
 c005f30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005f34:	2300      	movs	r3, #0
 c005f36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c005f3a:	2307      	movs	r3, #7
 c005f3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c005f40:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005f44:	4619      	mov	r1, r3
 c005f46:	4807      	ldr	r0, [pc, #28]	@ (c005f64 <HAL_UART_MspInit+0x16c>)
 c005f48:	f000 fd70 	bl	c006a2c <HAL_GPIO_Init>
}
 c005f4c:	bf00      	nop
 c005f4e:	37f8      	adds	r7, #248	@ 0xf8
 c005f50:	46bd      	mov	sp, r7
 c005f52:	bd80      	pop	{r7, pc}
 c005f54:	50004c00 	.word	0x50004c00
 c005f58:	56020c00 	.word	0x56020c00
 c005f5c:	52020800 	.word	0x52020800
 c005f60:	50013800 	.word	0x50013800
 c005f64:	52020000 	.word	0x52020000

0c005f68 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 c005f68:	b580      	push	{r7, lr}
 c005f6a:	b0be      	sub	sp, #248	@ 0xf8
 c005f6c:	af00      	add	r7, sp, #0
 c005f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c005f70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c005f74:	2200      	movs	r2, #0
 c005f76:	601a      	str	r2, [r3, #0]
 c005f78:	605a      	str	r2, [r3, #4]
 c005f7a:	609a      	str	r2, [r3, #8]
 c005f7c:	60da      	str	r2, [r3, #12]
 c005f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c005f80:	f107 0318 	add.w	r3, r7, #24
 c005f84:	22c8      	movs	r2, #200	@ 0xc8
 c005f86:	2100      	movs	r1, #0
 c005f88:	4618      	mov	r0, r3
 c005f8a:	f008 f8d5 	bl	c00e138 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 c005f8e:	687b      	ldr	r3, [r7, #4]
 c005f90:	681b      	ldr	r3, [r3, #0]
 c005f92:	4a38      	ldr	r2, [pc, #224]	@ (c006074 <HAL_PCD_MspInit+0x10c>)
 c005f94:	4293      	cmp	r3, r2
 c005f96:	d169      	bne.n	c00606c <HAL_PCD_MspInit+0x104>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 c005f98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 c005f9c:	f04f 0300 	mov.w	r3, #0
 c005fa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 c005fa4:	2300      	movs	r3, #0
 c005fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005faa:	f107 0318 	add.w	r3, r7, #24
 c005fae:	4618      	mov	r0, r3
 c005fb0:	f004 f8c0 	bl	c00a134 <HAL_RCCEx_PeriphCLKConfig>
 c005fb4:	4603      	mov	r3, r0
 c005fb6:	2b00      	cmp	r3, #0
 c005fb8:	d001      	beq.n	c005fbe <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 c005fba:	f7ff f9cb 	bl	c005354 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c005fbe:	4b2e      	ldr	r3, [pc, #184]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c005fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005fc4:	4a2c      	ldr	r2, [pc, #176]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c005fc6:	f043 0301 	orr.w	r3, r3, #1
 c005fca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c005fce:	4b2a      	ldr	r3, [pc, #168]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c005fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c005fd4:	f003 0301 	and.w	r3, r3, #1
 c005fd8:	617b      	str	r3, [r7, #20]
 c005fda:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 c005fdc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 c005fe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005fe4:	2302      	movs	r3, #2
 c005fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c005fea:	2300      	movs	r3, #0
 c005fec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005ff0:	2300      	movs	r3, #0
 c005ff2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 c005ff6:	230a      	movs	r3, #10
 c005ff8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c005ffc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 c006000:	4619      	mov	r1, r3
 c006002:	481e      	ldr	r0, [pc, #120]	@ (c00607c <HAL_PCD_MspInit+0x114>)
 c006004:	f000 fd12 	bl	c006a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 c006008:	4b1b      	ldr	r3, [pc, #108]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c00600a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00600e:	4a1a      	ldr	r2, [pc, #104]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c006010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c006014:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c006018:	4b17      	ldr	r3, [pc, #92]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c00601a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00601e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c006022:	613b      	str	r3, [r7, #16]
 c006024:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 c006026:	4b14      	ldr	r3, [pc, #80]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c006028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00602c:	f003 0304 	and.w	r3, r3, #4
 c006030:	2b00      	cmp	r3, #0
 c006032:	d119      	bne.n	c006068 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c006034:	4b10      	ldr	r3, [pc, #64]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c006036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00603a:	4a0f      	ldr	r2, [pc, #60]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c00603c:	f043 0304 	orr.w	r3, r3, #4
 c006040:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c006044:	4b0c      	ldr	r3, [pc, #48]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c006046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00604a:	f003 0304 	and.w	r3, r3, #4
 c00604e:	60fb      	str	r3, [r7, #12]
 c006050:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 c006052:	f002 fda3 	bl	c008b9c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 c006056:	4b08      	ldr	r3, [pc, #32]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c006058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00605c:	4a06      	ldr	r2, [pc, #24]	@ (c006078 <HAL_PCD_MspInit+0x110>)
 c00605e:	f023 0304 	bic.w	r3, r3, #4
 c006062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 c006066:	e001      	b.n	c00606c <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 c006068:	f002 fd98 	bl	c008b9c <HAL_PWREx_EnableVddUSB>
}
 c00606c:	bf00      	nop
 c00606e:	37f8      	adds	r7, #248	@ 0xf8
 c006070:	46bd      	mov	sp, r7
 c006072:	bd80      	pop	{r7, pc}
 c006074:	52040000 	.word	0x52040000
 c006078:	56020c00 	.word	0x56020c00
 c00607c:	52020000 	.word	0x52020000

0c006080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c006080:	b480      	push	{r7}
 c006082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c006084:	bf00      	nop
 c006086:	e7fd      	b.n	c006084 <NMI_Handler+0x4>

0c006088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c006088:	b480      	push	{r7}
 c00608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c00608c:	bf00      	nop
 c00608e:	e7fd      	b.n	c00608c <HardFault_Handler+0x4>

0c006090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c006090:	b480      	push	{r7}
 c006092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c006094:	bf00      	nop
 c006096:	e7fd      	b.n	c006094 <MemManage_Handler+0x4>

0c006098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c006098:	b480      	push	{r7}
 c00609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c00609c:	bf00      	nop
 c00609e:	e7fd      	b.n	c00609c <BusFault_Handler+0x4>

0c0060a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c0060a0:	b480      	push	{r7}
 c0060a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c0060a4:	bf00      	nop
 c0060a6:	e7fd      	b.n	c0060a4 <UsageFault_Handler+0x4>

0c0060a8 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c0060a8:	b480      	push	{r7}
 c0060aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c0060ac:	bf00      	nop
 c0060ae:	e7fd      	b.n	c0060ac <SecureFault_Handler+0x4>

0c0060b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c0060b0:	b480      	push	{r7}
 c0060b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c0060b4:	bf00      	nop
 c0060b6:	46bd      	mov	sp, r7
 c0060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0060bc:	4770      	bx	lr

0c0060be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c0060be:	b480      	push	{r7}
 c0060c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c0060c2:	bf00      	nop
 c0060c4:	46bd      	mov	sp, r7
 c0060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0060ca:	4770      	bx	lr

0c0060cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c0060cc:	b480      	push	{r7}
 c0060ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c0060d0:	bf00      	nop
 c0060d2:	46bd      	mov	sp, r7
 c0060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0060d8:	4770      	bx	lr

0c0060da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c0060da:	b580      	push	{r7, lr}
 c0060dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0060de:	f000 fa7d 	bl	c0065dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c0060e2:	bf00      	nop
 c0060e4:	bd80      	pop	{r7, pc}
	...

0c0060e8 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c0060e8:	b480      	push	{r7}
 c0060ea:	af00      	add	r7, sp, #0
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c0060ec:	4b13      	ldr	r3, [pc, #76]	@ (c00613c <TZ_SAU_Setup+0x54>)
 c0060ee:	2202      	movs	r2, #2
 c0060f0:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0060f2:	4b13      	ldr	r3, [pc, #76]	@ (c006140 <TZ_SAU_Setup+0x58>)
 c0060f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0060f8:	4a11      	ldr	r2, [pc, #68]	@ (c006140 <TZ_SAU_Setup+0x58>)
 c0060fa:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 c0060fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c006102:	4b10      	ldr	r3, [pc, #64]	@ (c006144 <TZ_SAU_Setup+0x5c>)
 c006104:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c006106:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00610a:	4a0e      	ldr	r2, [pc, #56]	@ (c006144 <TZ_SAU_Setup+0x5c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c00610c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c006110:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c006112:	4b0d      	ldr	r3, [pc, #52]	@ (c006148 <TZ_SAU_Setup+0x60>)
 c006114:	2200      	movs	r2, #0
 c006116:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c00611a:	4b0b      	ldr	r3, [pc, #44]	@ (c006148 <TZ_SAU_Setup+0x60>)
 c00611c:	2200      	movs	r2, #0
 c00611e:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c006122:	4b09      	ldr	r3, [pc, #36]	@ (c006148 <TZ_SAU_Setup+0x60>)
 c006124:	2200      	movs	r2, #0
 c006126:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c00612a:	4b07      	ldr	r3, [pc, #28]	@ (c006148 <TZ_SAU_Setup+0x60>)
 c00612c:	2200      	movs	r2, #0
 c00612e:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

}
 c006132:	bf00      	nop
 c006134:	46bd      	mov	sp, r7
 c006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00613a:	4770      	bx	lr
 c00613c:	e000edd0 	.word	0xe000edd0
 c006140:	e000ed00 	.word	0xe000ed00
 c006144:	e000ef30 	.word	0xe000ef30
 c006148:	e000e100 	.word	0xe000e100

0c00614c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c00614c:	b580      	push	{r7, lr}
 c00614e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c006150:	f7ff ffca 	bl	c0060e8 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c006154:	4b1a      	ldr	r3, [pc, #104]	@ (c0061c0 <SystemInit+0x74>)
 c006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00615a:	4a19      	ldr	r2, [pc, #100]	@ (c0061c0 <SystemInit+0x74>)
 c00615c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c006160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c006164:	4b17      	ldr	r3, [pc, #92]	@ (c0061c4 <SystemInit+0x78>)
 c006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00616a:	4a16      	ldr	r2, [pc, #88]	@ (c0061c4 <SystemInit+0x78>)
 c00616c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c006170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 c006174:	4b14      	ldr	r3, [pc, #80]	@ (c0061c8 <SystemInit+0x7c>)
 c006176:	2201      	movs	r2, #1
 c006178:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c00617a:	4b13      	ldr	r3, [pc, #76]	@ (c0061c8 <SystemInit+0x7c>)
 c00617c:	2200      	movs	r2, #0
 c00617e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c006180:	4b11      	ldr	r3, [pc, #68]	@ (c0061c8 <SystemInit+0x7c>)
 c006182:	2200      	movs	r2, #0
 c006184:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 c006186:	4b10      	ldr	r3, [pc, #64]	@ (c0061c8 <SystemInit+0x7c>)
 c006188:	2200      	movs	r2, #0
 c00618a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 c00618c:	4b0e      	ldr	r3, [pc, #56]	@ (c0061c8 <SystemInit+0x7c>)
 c00618e:	681b      	ldr	r3, [r3, #0]
 c006190:	4a0d      	ldr	r2, [pc, #52]	@ (c0061c8 <SystemInit+0x7c>)
 c006192:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 c006196:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 c00619a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 c00619c:	4b0a      	ldr	r3, [pc, #40]	@ (c0061c8 <SystemInit+0x7c>)
 c00619e:	2200      	movs	r2, #0
 c0061a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c0061a2:	4b09      	ldr	r3, [pc, #36]	@ (c0061c8 <SystemInit+0x7c>)
 c0061a4:	681b      	ldr	r3, [r3, #0]
 c0061a6:	4a08      	ldr	r2, [pc, #32]	@ (c0061c8 <SystemInit+0x7c>)
 c0061a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c0061ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c0061ae:	4b06      	ldr	r3, [pc, #24]	@ (c0061c8 <SystemInit+0x7c>)
 c0061b0:	2200      	movs	r2, #0
 c0061b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c0061b4:	4b02      	ldr	r3, [pc, #8]	@ (c0061c0 <SystemInit+0x74>)
 c0061b6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 c0061ba:	609a      	str	r2, [r3, #8]
#endif
}
 c0061bc:	bf00      	nop
 c0061be:	bd80      	pop	{r7, pc}
 c0061c0:	e000ed00 	.word	0xe000ed00
 c0061c4:	e002ed00 	.word	0xe002ed00
 c0061c8:	56020c00 	.word	0x56020c00

0c0061cc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0061cc:	b480      	push	{r7}
 c0061ce:	b089      	sub	sp, #36	@ 0x24
 c0061d0:	af00      	add	r7, sp, #0
  uint32_t pllr, pllsource, pllm , tmp, pllfracen, msirange;
  float_t fracn1, pllvco;

  /* Get MSI Range frequency--------------------------------------------------*/
  if(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c0061d2:	4b73      	ldr	r3, [pc, #460]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c0061d4:	689b      	ldr	r3, [r3, #8]
 c0061d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0061da:	2b00      	cmp	r3, #0
 c0061dc:	d107      	bne.n	c0061ee <SystemCoreClockUpdate+0x22>
  {
    /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c0061de:	4b70      	ldr	r3, [pc, #448]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c0061e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0061e4:	0b1b      	lsrs	r3, r3, #12
 c0061e6:	f003 030f 	and.w	r3, r3, #15
 c0061ea:	61fb      	str	r3, [r7, #28]
 c0061ec:	e005      	b.n	c0061fa <SystemCoreClockUpdate+0x2e>
  }
  else
  {
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c0061ee:	4b6c      	ldr	r3, [pc, #432]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c0061f0:	689b      	ldr	r3, [r3, #8]
 c0061f2:	0f1b      	lsrs	r3, r3, #28
 c0061f4:	f003 030f 	and.w	r3, r3, #15
 c0061f8:	61fb      	str	r3, [r7, #28]
  }

  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0061fa:	4a6a      	ldr	r2, [pc, #424]	@ (c0063a4 <SystemCoreClockUpdate+0x1d8>)
 c0061fc:	69fb      	ldr	r3, [r7, #28]
 c0061fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006202:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c006204:	4b66      	ldr	r3, [pc, #408]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c006206:	69db      	ldr	r3, [r3, #28]
 c006208:	f003 030c 	and.w	r3, r3, #12
 c00620c:	2b0c      	cmp	r3, #12
 c00620e:	f200 80ae 	bhi.w	c00636e <SystemCoreClockUpdate+0x1a2>
 c006212:	a201      	add	r2, pc, #4	@ (adr r2, c006218 <SystemCoreClockUpdate+0x4c>)
 c006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c006218:	0c00624d 	.word	0x0c00624d
 c00621c:	0c00636f 	.word	0x0c00636f
 c006220:	0c00636f 	.word	0x0c00636f
 c006224:	0c00636f 	.word	0x0c00636f
 c006228:	0c006255 	.word	0x0c006255
 c00622c:	0c00636f 	.word	0x0c00636f
 c006230:	0c00636f 	.word	0x0c00636f
 c006234:	0c00636f 	.word	0x0c00636f
 c006238:	0c00625d 	.word	0x0c00625d
 c00623c:	0c00636f 	.word	0x0c00636f
 c006240:	0c00636f 	.word	0x0c00636f
 c006244:	0c00636f 	.word	0x0c00636f
 c006248:	0c006265 	.word	0x0c006265
  {
  case 0x00:  /* MSI used as system clock source */
    SystemCoreClock = msirange;
 c00624c:	4a56      	ldr	r2, [pc, #344]	@ (c0063a8 <SystemCoreClockUpdate+0x1dc>)
 c00624e:	69fb      	ldr	r3, [r7, #28]
 c006250:	6013      	str	r3, [r2, #0]
    break;
 c006252:	e090      	b.n	c006376 <SystemCoreClockUpdate+0x1aa>

  case 0x04:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 c006254:	4b54      	ldr	r3, [pc, #336]	@ (c0063a8 <SystemCoreClockUpdate+0x1dc>)
 c006256:	4a55      	ldr	r2, [pc, #340]	@ (c0063ac <SystemCoreClockUpdate+0x1e0>)
 c006258:	601a      	str	r2, [r3, #0]
    break;
 c00625a:	e08c      	b.n	c006376 <SystemCoreClockUpdate+0x1aa>

  case 0x08:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 c00625c:	4b52      	ldr	r3, [pc, #328]	@ (c0063a8 <SystemCoreClockUpdate+0x1dc>)
 c00625e:	4a53      	ldr	r2, [pc, #332]	@ (c0063ac <SystemCoreClockUpdate+0x1e0>)
 c006260:	601a      	str	r2, [r3, #0]
    break;
 c006262:	e088      	b.n	c006376 <SystemCoreClockUpdate+0x1aa>

  case 0x0C:  /* PLL used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c006264:	4b4e      	ldr	r3, [pc, #312]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006268:	f003 0303 	and.w	r3, r3, #3
 c00626c:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c00626e:	4b4c      	ldr	r3, [pc, #304]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006272:	0a1b      	lsrs	r3, r3, #8
 c006274:	f003 030f 	and.w	r3, r3, #15
 c006278:	3301      	adds	r3, #1
 c00627a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c00627c:	4b48      	ldr	r3, [pc, #288]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c00627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006280:	091b      	lsrs	r3, r3, #4
 c006282:	f003 0301 	and.w	r3, r3, #1
 c006286:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c006288:	4b45      	ldr	r3, [pc, #276]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c00628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00628c:	08db      	lsrs	r3, r3, #3
 c00628e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c006292:	68fa      	ldr	r2, [r7, #12]
 c006294:	fb02 f303 	mul.w	r3, r2, r3
 c006298:	ee07 3a90 	vmov	s15, r3
 c00629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0062a0:	edc7 7a02 	vstr	s15, [r7, #8]

      switch (pllsource)
 c0062a4:	697b      	ldr	r3, [r7, #20]
 c0062a6:	2b03      	cmp	r3, #3
 c0062a8:	d019      	beq.n	c0062de <SystemCoreClockUpdate+0x112>
 c0062aa:	697b      	ldr	r3, [r7, #20]
 c0062ac:	2b03      	cmp	r3, #3
 c0062ae:	d822      	bhi.n	c0062f6 <SystemCoreClockUpdate+0x12a>
 c0062b0:	697b      	ldr	r3, [r7, #20]
 c0062b2:	2b00      	cmp	r3, #0
 c0062b4:	d003      	beq.n	c0062be <SystemCoreClockUpdate+0xf2>
 c0062b6:	697b      	ldr	r3, [r7, #20]
 c0062b8:	2b02      	cmp	r3, #2
 c0062ba:	d004      	beq.n	c0062c6 <SystemCoreClockUpdate+0xfa>
 c0062bc:	e01b      	b.n	c0062f6 <SystemCoreClockUpdate+0x12a>
      {
      case 0x00:  /* No clock sent to PLL*/
        pllvco = (float_t)0U;
 c0062be:	f04f 0300 	mov.w	r3, #0
 c0062c2:	61bb      	str	r3, [r7, #24]
        break;
 c0062c4:	e026      	b.n	c006314 <SystemCoreClockUpdate+0x148>

      case 0x02:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm);
 c0062c6:	693b      	ldr	r3, [r7, #16]
 c0062c8:	ee07 3a90 	vmov	s15, r3
 c0062cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0062d0:	eddf 6a37 	vldr	s13, [pc, #220]	@ c0063b0 <SystemCoreClockUpdate+0x1e4>
 c0062d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0062d8:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c0062dc:	e01a      	b.n	c006314 <SystemCoreClockUpdate+0x148>

      case 0x03:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm);
 c0062de:	693b      	ldr	r3, [r7, #16]
 c0062e0:	ee07 3a90 	vmov	s15, r3
 c0062e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0062e8:	eddf 6a31 	vldr	s13, [pc, #196]	@ c0063b0 <SystemCoreClockUpdate+0x1e4>
 c0062ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0062f0:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c0062f4:	e00e      	b.n	c006314 <SystemCoreClockUpdate+0x148>

      default:    /* MSI used as PLL clock source */
        pllvco = ((float_t)msirange / (float_t)pllm);
 c0062f6:	69fb      	ldr	r3, [r7, #28]
 c0062f8:	ee07 3a90 	vmov	s15, r3
 c0062fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c006300:	693b      	ldr	r3, [r7, #16]
 c006302:	ee07 3a90 	vmov	s15, r3
 c006306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c00630a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00630e:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c006312:	bf00      	nop
      }

      pllvco = pllvco * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + (fracn1/(float_t)0x2000) + (float_t)1U);
 c006314:	4b22      	ldr	r3, [pc, #136]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c006316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00631c:	ee07 3a90 	vmov	s15, r3
 c006320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c006324:	edd7 6a02 	vldr	s13, [r7, #8]
 c006328:	ed9f 6a22 	vldr	s12, [pc, #136]	@ c0063b4 <SystemCoreClockUpdate+0x1e8>
 c00632c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 c006330:	ee77 7a27 	vadd.f32	s15, s14, s15
 c006334:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c006338:	ee77 7a87 	vadd.f32	s15, s15, s14
 c00633c:	ed97 7a06 	vldr	s14, [r7, #24]
 c006340:	ee67 7a27 	vmul.f32	s15, s14, s15
 c006344:	edc7 7a06 	vstr	s15, [r7, #24]
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U );
 c006348:	4b15      	ldr	r3, [pc, #84]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c00634a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00634c:	0e1b      	lsrs	r3, r3, #24
 c00634e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c006352:	3301      	adds	r3, #1
 c006354:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (uint32_t)((uint32_t)pllvco/pllr);
 c006356:	edd7 7a06 	vldr	s15, [r7, #24]
 c00635a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00635e:	ee17 2a90 	vmov	r2, s15
 c006362:	687b      	ldr	r3, [r7, #4]
 c006364:	fbb2 f3f3 	udiv	r3, r2, r3
 c006368:	4a0f      	ldr	r2, [pc, #60]	@ (c0063a8 <SystemCoreClockUpdate+0x1dc>)
 c00636a:	6013      	str	r3, [r2, #0]
      break;
 c00636c:	e003      	b.n	c006376 <SystemCoreClockUpdate+0x1aa>

  default:
    SystemCoreClock = msirange;
 c00636e:	4a0e      	ldr	r2, [pc, #56]	@ (c0063a8 <SystemCoreClockUpdate+0x1dc>)
 c006370:	69fb      	ldr	r3, [r7, #28]
 c006372:	6013      	str	r3, [r2, #0]
    break;
 c006374:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c006376:	4b0a      	ldr	r3, [pc, #40]	@ (c0063a0 <SystemCoreClockUpdate+0x1d4>)
 c006378:	6a1b      	ldr	r3, [r3, #32]
 c00637a:	f003 030f 	and.w	r3, r3, #15
 c00637e:	4a0e      	ldr	r2, [pc, #56]	@ (c0063b8 <SystemCoreClockUpdate+0x1ec>)
 c006380:	5cd3      	ldrb	r3, [r2, r3]
 c006382:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c006384:	4b08      	ldr	r3, [pc, #32]	@ (c0063a8 <SystemCoreClockUpdate+0x1dc>)
 c006386:	681a      	ldr	r2, [r3, #0]
 c006388:	683b      	ldr	r3, [r7, #0]
 c00638a:	fa22 f303 	lsr.w	r3, r2, r3
 c00638e:	4a06      	ldr	r2, [pc, #24]	@ (c0063a8 <SystemCoreClockUpdate+0x1dc>)
 c006390:	6013      	str	r3, [r2, #0]
}
 c006392:	bf00      	nop
 c006394:	3724      	adds	r7, #36	@ 0x24
 c006396:	46bd      	mov	sp, r7
 c006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00639c:	4770      	bx	lr
 c00639e:	bf00      	nop
 c0063a0:	56020c00 	.word	0x56020c00
 c0063a4:	0c00e4b8 	.word	0x0c00e4b8
 c0063a8:	30000000 	.word	0x30000000
 c0063ac:	00f42400 	.word	0x00f42400
 c0063b0:	4b742400 	.word	0x4b742400
 c0063b4:	46000000 	.word	0x46000000
 c0063b8:	0c00e4a0 	.word	0x0c00e4a0

0c0063bc <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c0063bc:	b580      	push	{r7, lr}
 c0063be:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0063c0:	f7ff ff04 	bl	c0061cc <SystemCoreClockUpdate>

  return SystemCoreClock;
 c0063c4:	4b1c      	ldr	r3, [pc, #112]	@ (c006438 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0063c6:	681b      	ldr	r3, [r3, #0]
}
 c0063c8:	4618      	mov	r0, r3
 c0063ca:	46bd      	mov	sp, r7
 c0063cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0063d0:	4671      	mov	r1, lr
 c0063d2:	4672      	mov	r2, lr
 c0063d4:	4673      	mov	r3, lr
 c0063d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0063da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0063de:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0063e2:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0063e6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0063ea:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0063ee:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0063f2:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0063f6:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0063fa:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0063fe:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c006402:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c006406:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c00640a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00640e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c006412:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c006416:	f38e 8c00 	msr	CPSR_fs, lr
 c00641a:	b410      	push	{r4}
 c00641c:	eef1 ca10 	vmrs	ip, fpscr
 c006420:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c006424:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c006428:	ea0c 0c04 	and.w	ip, ip, r4
 c00642c:	eee1 ca10 	vmsr	fpscr, ip
 c006430:	bc10      	pop	{r4}
 c006432:	46f4      	mov	ip, lr
 c006434:	4774      	bxns	lr
 c006436:	bf00      	nop
 c006438:	30000000 	.word	0x30000000

0c00643c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c00643c:	f8df d034 	ldr.w	sp, [pc, #52]	@ c006474 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 c006440:	f7ff fe84 	bl	c00614c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c006444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c006446:	e003      	b.n	c006450 <LoopCopyDataInit>

0c006448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c006448:	4b0b      	ldr	r3, [pc, #44]	@ (c006478 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c00644a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c00644c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c00644e:	3104      	adds	r1, #4

0c006450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c006450:	480a      	ldr	r0, [pc, #40]	@ (c00647c <LoopForever+0xa>)
	ldr	r3, =_edata
 c006452:	4b0b      	ldr	r3, [pc, #44]	@ (c006480 <LoopForever+0xe>)
	adds	r2, r0, r1
 c006454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c006456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c006458:	d3f6      	bcc.n	c006448 <CopyDataInit>
	ldr	r2, =_sbss
 c00645a:	4a0a      	ldr	r2, [pc, #40]	@ (c006484 <LoopForever+0x12>)
	b	LoopFillZerobss
 c00645c:	e002      	b.n	c006464 <LoopFillZerobss>

0c00645e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c00645e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c006460:	f842 3b04 	str.w	r3, [r2], #4

0c006464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c006464:	4b08      	ldr	r3, [pc, #32]	@ (c006488 <LoopForever+0x16>)
	cmp	r2, r3
 c006466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c006468:	d3f9      	bcc.n	c00645e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 c00646a:	f007 fe6d 	bl	c00e148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c00646e:	f7fe f805 	bl	c00447c <main>

0c006472 <LoopForever>:

LoopForever:
    b LoopForever
 c006472:	e7fe      	b.n	c006472 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c006474:	30040000 	.word	0x30040000
	ldr	r3, =_sidata
 c006478:	0c00e944 	.word	0x0c00e944
	ldr	r0, =_sdata
 c00647c:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c006480:	30000009 	.word	0x30000009
	ldr	r2, =_sbss
 c006484:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c006488:	30000934 	.word	0x30000934

0c00648c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c00648c:	e7fe      	b.n	c00648c <ADC1_IRQHandler>
	...

0c006490 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c006490:	b580      	push	{r7, lr}
 c006492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 c006494:	4b12      	ldr	r3, [pc, #72]	@ (c0064e0 <HAL_Init+0x50>)
 c006496:	681b      	ldr	r3, [r3, #0]
 c006498:	4a11      	ldr	r2, [pc, #68]	@ (c0064e0 <HAL_Init+0x50>)
 c00649a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c00649e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c0064a0:	2003      	movs	r0, #3
 c0064a2:	f000 f96e 	bl	c006782 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0064a6:	f003 fc67 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c0064aa:	4602      	mov	r2, r0
 c0064ac:	4b0d      	ldr	r3, [pc, #52]	@ (c0064e4 <HAL_Init+0x54>)
 c0064ae:	6a1b      	ldr	r3, [r3, #32]
 c0064b0:	f003 030f 	and.w	r3, r3, #15
 c0064b4:	490c      	ldr	r1, [pc, #48]	@ (c0064e8 <HAL_Init+0x58>)
 c0064b6:	5ccb      	ldrb	r3, [r1, r3]
 c0064b8:	fa22 f303 	lsr.w	r3, r2, r3
 c0064bc:	4a0b      	ldr	r2, [pc, #44]	@ (c0064ec <HAL_Init+0x5c>)
 c0064be:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 c0064c0:	2004      	movs	r0, #4
 c0064c2:	f000 f9a5 	bl	c006810 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0064c6:	2000      	movs	r0, #0
 c0064c8:	f000 f812 	bl	c0064f0 <HAL_InitTick>
 c0064cc:	4603      	mov	r3, r0
 c0064ce:	2b00      	cmp	r3, #0
 c0064d0:	d001      	beq.n	c0064d6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 c0064d2:	2301      	movs	r3, #1
 c0064d4:	e002      	b.n	c0064dc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c0064d6:	f7ff f84d 	bl	c005574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c0064da:	2300      	movs	r3, #0
}
 c0064dc:	4618      	mov	r0, r3
 c0064de:	bd80      	pop	{r7, pc}
 c0064e0:	50022000 	.word	0x50022000
 c0064e4:	56020c00 	.word	0x56020c00
 c0064e8:	0c00e4a0 	.word	0x0c00e4a0
 c0064ec:	30000000 	.word	0x30000000

0c0064f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0064f0:	b580      	push	{r7, lr}
 c0064f2:	b084      	sub	sp, #16
 c0064f4:	af00      	add	r7, sp, #0
 c0064f6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 c0064f8:	2300      	movs	r3, #0
 c0064fa:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c0064fc:	4b33      	ldr	r3, [pc, #204]	@ (c0065cc <HAL_InitTick+0xdc>)
 c0064fe:	781b      	ldrb	r3, [r3, #0]
 c006500:	2b00      	cmp	r3, #0
 c006502:	d101      	bne.n	c006508 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 c006504:	2301      	movs	r3, #1
 c006506:	e05c      	b.n	c0065c2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 c006508:	4b31      	ldr	r3, [pc, #196]	@ (c0065d0 <HAL_InitTick+0xe0>)
 c00650a:	681b      	ldr	r3, [r3, #0]
 c00650c:	f003 0304 	and.w	r3, r3, #4
 c006510:	2b04      	cmp	r3, #4
 c006512:	d10c      	bne.n	c00652e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 c006514:	4b2f      	ldr	r3, [pc, #188]	@ (c0065d4 <HAL_InitTick+0xe4>)
 c006516:	681a      	ldr	r2, [r3, #0]
 c006518:	4b2c      	ldr	r3, [pc, #176]	@ (c0065cc <HAL_InitTick+0xdc>)
 c00651a:	781b      	ldrb	r3, [r3, #0]
 c00651c:	4619      	mov	r1, r3
 c00651e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c006522:	fbb3 f3f1 	udiv	r3, r3, r1
 c006526:	fbb2 f3f3 	udiv	r3, r2, r3
 c00652a:	60fb      	str	r3, [r7, #12]
 c00652c:	e037      	b.n	c00659e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 c00652e:	f000 f9c7 	bl	c0068c0 <HAL_SYSTICK_GetCLKSourceConfig>
 c006532:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 c006534:	68bb      	ldr	r3, [r7, #8]
 c006536:	2b02      	cmp	r3, #2
 c006538:	d023      	beq.n	c006582 <HAL_InitTick+0x92>
 c00653a:	68bb      	ldr	r3, [r7, #8]
 c00653c:	2b02      	cmp	r3, #2
 c00653e:	d82d      	bhi.n	c00659c <HAL_InitTick+0xac>
 c006540:	68bb      	ldr	r3, [r7, #8]
 c006542:	2b00      	cmp	r3, #0
 c006544:	d003      	beq.n	c00654e <HAL_InitTick+0x5e>
 c006546:	68bb      	ldr	r3, [r7, #8]
 c006548:	2b01      	cmp	r3, #1
 c00654a:	d00d      	beq.n	c006568 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 c00654c:	e026      	b.n	c00659c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 c00654e:	4b21      	ldr	r3, [pc, #132]	@ (c0065d4 <HAL_InitTick+0xe4>)
 c006550:	681a      	ldr	r2, [r3, #0]
 c006552:	4b1e      	ldr	r3, [pc, #120]	@ (c0065cc <HAL_InitTick+0xdc>)
 c006554:	781b      	ldrb	r3, [r3, #0]
 c006556:	4619      	mov	r1, r3
 c006558:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 c00655c:	fbb3 f3f1 	udiv	r3, r3, r1
 c006560:	fbb2 f3f3 	udiv	r3, r2, r3
 c006564:	60fb      	str	r3, [r7, #12]
        break;
 c006566:	e01a      	b.n	c00659e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c006568:	4b18      	ldr	r3, [pc, #96]	@ (c0065cc <HAL_InitTick+0xdc>)
 c00656a:	781b      	ldrb	r3, [r3, #0]
 c00656c:	461a      	mov	r2, r3
 c00656e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c006572:	fbb3 f3f2 	udiv	r3, r3, r2
 c006576:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 c00657a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00657e:	60fb      	str	r3, [r7, #12]
        break;
 c006580:	e00d      	b.n	c00659e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c006582:	4b12      	ldr	r3, [pc, #72]	@ (c0065cc <HAL_InitTick+0xdc>)
 c006584:	781b      	ldrb	r3, [r3, #0]
 c006586:	461a      	mov	r2, r3
 c006588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c00658c:	fbb3 f3f2 	udiv	r3, r3, r2
 c006590:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 c006594:	fbb2 f3f3 	udiv	r3, r2, r3
 c006598:	60fb      	str	r3, [r7, #12]
        break;
 c00659a:	e000      	b.n	c00659e <HAL_InitTick+0xae>
        break;
 c00659c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 c00659e:	68f8      	ldr	r0, [r7, #12]
 c0065a0:	f000 f914 	bl	c0067cc <HAL_SYSTICK_Config>
 c0065a4:	4603      	mov	r3, r0
 c0065a6:	2b00      	cmp	r3, #0
 c0065a8:	d001      	beq.n	c0065ae <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 c0065aa:	2301      	movs	r3, #1
 c0065ac:	e009      	b.n	c0065c2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0065ae:	2200      	movs	r2, #0
 c0065b0:	6879      	ldr	r1, [r7, #4]
 c0065b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c0065b6:	f000 f8ef 	bl	c006798 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 c0065ba:	4a07      	ldr	r2, [pc, #28]	@ (c0065d8 <HAL_InitTick+0xe8>)
 c0065bc:	687b      	ldr	r3, [r7, #4]
 c0065be:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 c0065c0:	2300      	movs	r3, #0
}
 c0065c2:	4618      	mov	r0, r3
 c0065c4:	3710      	adds	r7, #16
 c0065c6:	46bd      	mov	sp, r7
 c0065c8:	bd80      	pop	{r7, pc}
 c0065ca:	bf00      	nop
 c0065cc:	30000008 	.word	0x30000008
 c0065d0:	e000e010 	.word	0xe000e010
 c0065d4:	30000000 	.word	0x30000000
 c0065d8:	30000004 	.word	0x30000004

0c0065dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0065dc:	b480      	push	{r7}
 c0065de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0065e0:	4b06      	ldr	r3, [pc, #24]	@ (c0065fc <HAL_IncTick+0x20>)
 c0065e2:	781b      	ldrb	r3, [r3, #0]
 c0065e4:	461a      	mov	r2, r3
 c0065e6:	4b06      	ldr	r3, [pc, #24]	@ (c006600 <HAL_IncTick+0x24>)
 c0065e8:	681b      	ldr	r3, [r3, #0]
 c0065ea:	4413      	add	r3, r2
 c0065ec:	4a04      	ldr	r2, [pc, #16]	@ (c006600 <HAL_IncTick+0x24>)
 c0065ee:	6013      	str	r3, [r2, #0]
}
 c0065f0:	bf00      	nop
 c0065f2:	46bd      	mov	sp, r7
 c0065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0065f8:	4770      	bx	lr
 c0065fa:	bf00      	nop
 c0065fc:	30000008 	.word	0x30000008
 c006600:	3000090c 	.word	0x3000090c

0c006604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c006604:	b480      	push	{r7}
 c006606:	af00      	add	r7, sp, #0
  return uwTick;
 c006608:	4b03      	ldr	r3, [pc, #12]	@ (c006618 <HAL_GetTick+0x14>)
 c00660a:	681b      	ldr	r3, [r3, #0]
}
 c00660c:	4618      	mov	r0, r3
 c00660e:	46bd      	mov	sp, r7
 c006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006614:	4770      	bx	lr
 c006616:	bf00      	nop
 c006618:	3000090c 	.word	0x3000090c

0c00661c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c00661c:	b580      	push	{r7, lr}
 c00661e:	b084      	sub	sp, #16
 c006620:	af00      	add	r7, sp, #0
 c006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c006624:	f7ff ffee 	bl	c006604 <HAL_GetTick>
 c006628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c00662a:	687b      	ldr	r3, [r7, #4]
 c00662c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 c00662e:	68fb      	ldr	r3, [r7, #12]
 c006630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 c006634:	d005      	beq.n	c006642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 c006636:	4b0a      	ldr	r3, [pc, #40]	@ (c006660 <HAL_Delay+0x44>)
 c006638:	781b      	ldrb	r3, [r3, #0]
 c00663a:	461a      	mov	r2, r3
 c00663c:	68fb      	ldr	r3, [r7, #12]
 c00663e:	4413      	add	r3, r2
 c006640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c006642:	bf00      	nop
 c006644:	f7ff ffde 	bl	c006604 <HAL_GetTick>
 c006648:	4602      	mov	r2, r0
 c00664a:	68bb      	ldr	r3, [r7, #8]
 c00664c:	1ad3      	subs	r3, r2, r3
 c00664e:	68fa      	ldr	r2, [r7, #12]
 c006650:	429a      	cmp	r2, r3
 c006652:	d8f7      	bhi.n	c006644 <HAL_Delay+0x28>
  {
  }
}
 c006654:	bf00      	nop
 c006656:	bf00      	nop
 c006658:	3710      	adds	r7, #16
 c00665a:	46bd      	mov	sp, r7
 c00665c:	bd80      	pop	{r7, pc}
 c00665e:	bf00      	nop
 c006660:	30000008 	.word	0x30000008

0c006664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c006664:	b480      	push	{r7}
 c006666:	b085      	sub	sp, #20
 c006668:	af00      	add	r7, sp, #0
 c00666a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c00666c:	687b      	ldr	r3, [r7, #4]
 c00666e:	f003 0307 	and.w	r3, r3, #7
 c006672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c006674:	4b0c      	ldr	r3, [pc, #48]	@ (c0066a8 <__NVIC_SetPriorityGrouping+0x44>)
 c006676:	68db      	ldr	r3, [r3, #12]
 c006678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c00667a:	68ba      	ldr	r2, [r7, #8]
 c00667c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 c006680:	4013      	ands	r3, r2
 c006682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c006684:	68fb      	ldr	r3, [r7, #12]
 c006686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c006688:	68bb      	ldr	r3, [r7, #8]
 c00668a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c00668c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c006690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c006694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c006696:	4a04      	ldr	r2, [pc, #16]	@ (c0066a8 <__NVIC_SetPriorityGrouping+0x44>)
 c006698:	68bb      	ldr	r3, [r7, #8]
 c00669a:	60d3      	str	r3, [r2, #12]
}
 c00669c:	bf00      	nop
 c00669e:	3714      	adds	r7, #20
 c0066a0:	46bd      	mov	sp, r7
 c0066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0066a6:	4770      	bx	lr
 c0066a8:	e000ed00 	.word	0xe000ed00

0c0066ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0066ac:	b480      	push	{r7}
 c0066ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0066b0:	4b04      	ldr	r3, [pc, #16]	@ (c0066c4 <__NVIC_GetPriorityGrouping+0x18>)
 c0066b2:	68db      	ldr	r3, [r3, #12]
 c0066b4:	0a1b      	lsrs	r3, r3, #8
 c0066b6:	f003 0307 	and.w	r3, r3, #7
}
 c0066ba:	4618      	mov	r0, r3
 c0066bc:	46bd      	mov	sp, r7
 c0066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0066c2:	4770      	bx	lr
 c0066c4:	e000ed00 	.word	0xe000ed00

0c0066c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0066c8:	b480      	push	{r7}
 c0066ca:	b083      	sub	sp, #12
 c0066cc:	af00      	add	r7, sp, #0
 c0066ce:	4603      	mov	r3, r0
 c0066d0:	6039      	str	r1, [r7, #0]
 c0066d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0066d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0066d8:	2b00      	cmp	r3, #0
 c0066da:	db0a      	blt.n	c0066f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0066dc:	683b      	ldr	r3, [r7, #0]
 c0066de:	b2da      	uxtb	r2, r3
 c0066e0:	490c      	ldr	r1, [pc, #48]	@ (c006714 <__NVIC_SetPriority+0x4c>)
 c0066e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0066e6:	0112      	lsls	r2, r2, #4
 c0066e8:	b2d2      	uxtb	r2, r2
 c0066ea:	440b      	add	r3, r1
 c0066ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0066f0:	e00a      	b.n	c006708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0066f2:	683b      	ldr	r3, [r7, #0]
 c0066f4:	b2da      	uxtb	r2, r3
 c0066f6:	4908      	ldr	r1, [pc, #32]	@ (c006718 <__NVIC_SetPriority+0x50>)
 c0066f8:	79fb      	ldrb	r3, [r7, #7]
 c0066fa:	f003 030f 	and.w	r3, r3, #15
 c0066fe:	3b04      	subs	r3, #4
 c006700:	0112      	lsls	r2, r2, #4
 c006702:	b2d2      	uxtb	r2, r2
 c006704:	440b      	add	r3, r1
 c006706:	761a      	strb	r2, [r3, #24]
}
 c006708:	bf00      	nop
 c00670a:	370c      	adds	r7, #12
 c00670c:	46bd      	mov	sp, r7
 c00670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006712:	4770      	bx	lr
 c006714:	e000e100 	.word	0xe000e100
 c006718:	e000ed00 	.word	0xe000ed00

0c00671c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00671c:	b480      	push	{r7}
 c00671e:	b089      	sub	sp, #36	@ 0x24
 c006720:	af00      	add	r7, sp, #0
 c006722:	60f8      	str	r0, [r7, #12]
 c006724:	60b9      	str	r1, [r7, #8]
 c006726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c006728:	68fb      	ldr	r3, [r7, #12]
 c00672a:	f003 0307 	and.w	r3, r3, #7
 c00672e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c006730:	69fb      	ldr	r3, [r7, #28]
 c006732:	f1c3 0307 	rsb	r3, r3, #7
 c006736:	2b04      	cmp	r3, #4
 c006738:	bf28      	it	cs
 c00673a:	2304      	movcs	r3, #4
 c00673c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00673e:	69fb      	ldr	r3, [r7, #28]
 c006740:	3304      	adds	r3, #4
 c006742:	2b06      	cmp	r3, #6
 c006744:	d902      	bls.n	c00674c <NVIC_EncodePriority+0x30>
 c006746:	69fb      	ldr	r3, [r7, #28]
 c006748:	3b03      	subs	r3, #3
 c00674a:	e000      	b.n	c00674e <NVIC_EncodePriority+0x32>
 c00674c:	2300      	movs	r3, #0
 c00674e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c006750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c006754:	69bb      	ldr	r3, [r7, #24]
 c006756:	fa02 f303 	lsl.w	r3, r2, r3
 c00675a:	43da      	mvns	r2, r3
 c00675c:	68bb      	ldr	r3, [r7, #8]
 c00675e:	401a      	ands	r2, r3
 c006760:	697b      	ldr	r3, [r7, #20]
 c006762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c006764:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c006768:	697b      	ldr	r3, [r7, #20]
 c00676a:	fa01 f303 	lsl.w	r3, r1, r3
 c00676e:	43d9      	mvns	r1, r3
 c006770:	687b      	ldr	r3, [r7, #4]
 c006772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c006774:	4313      	orrs	r3, r2
         );
}
 c006776:	4618      	mov	r0, r3
 c006778:	3724      	adds	r7, #36	@ 0x24
 c00677a:	46bd      	mov	sp, r7
 c00677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006780:	4770      	bx	lr

0c006782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c006782:	b580      	push	{r7, lr}
 c006784:	b082      	sub	sp, #8
 c006786:	af00      	add	r7, sp, #0
 c006788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00678a:	6878      	ldr	r0, [r7, #4]
 c00678c:	f7ff ff6a 	bl	c006664 <__NVIC_SetPriorityGrouping>
}
 c006790:	bf00      	nop
 c006792:	3708      	adds	r7, #8
 c006794:	46bd      	mov	sp, r7
 c006796:	bd80      	pop	{r7, pc}

0c006798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c006798:	b580      	push	{r7, lr}
 c00679a:	b086      	sub	sp, #24
 c00679c:	af00      	add	r7, sp, #0
 c00679e:	4603      	mov	r3, r0
 c0067a0:	60b9      	str	r1, [r7, #8]
 c0067a2:	607a      	str	r2, [r7, #4]
 c0067a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0067a6:	f7ff ff81 	bl	c0066ac <__NVIC_GetPriorityGrouping>
 c0067aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0067ac:	687a      	ldr	r2, [r7, #4]
 c0067ae:	68b9      	ldr	r1, [r7, #8]
 c0067b0:	6978      	ldr	r0, [r7, #20]
 c0067b2:	f7ff ffb3 	bl	c00671c <NVIC_EncodePriority>
 c0067b6:	4602      	mov	r2, r0
 c0067b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0067bc:	4611      	mov	r1, r2
 c0067be:	4618      	mov	r0, r3
 c0067c0:	f7ff ff82 	bl	c0066c8 <__NVIC_SetPriority>
}
 c0067c4:	bf00      	nop
 c0067c6:	3718      	adds	r7, #24
 c0067c8:	46bd      	mov	sp, r7
 c0067ca:	bd80      	pop	{r7, pc}

0c0067cc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0067cc:	b480      	push	{r7}
 c0067ce:	b083      	sub	sp, #12
 c0067d0:	af00      	add	r7, sp, #0
 c0067d2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0067d4:	687b      	ldr	r3, [r7, #4]
 c0067d6:	3b01      	subs	r3, #1
 c0067d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c0067dc:	d301      	bcc.n	c0067e2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 c0067de:	2301      	movs	r3, #1
 c0067e0:	e00d      	b.n	c0067fe <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 c0067e2:	4a0a      	ldr	r2, [pc, #40]	@ (c00680c <HAL_SYSTICK_Config+0x40>)
 c0067e4:	687b      	ldr	r3, [r7, #4]
 c0067e6:	3b01      	subs	r3, #1
 c0067e8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 c0067ea:	4b08      	ldr	r3, [pc, #32]	@ (c00680c <HAL_SYSTICK_Config+0x40>)
 c0067ec:	2200      	movs	r2, #0
 c0067ee:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 c0067f0:	4b06      	ldr	r3, [pc, #24]	@ (c00680c <HAL_SYSTICK_Config+0x40>)
 c0067f2:	681b      	ldr	r3, [r3, #0]
 c0067f4:	4a05      	ldr	r2, [pc, #20]	@ (c00680c <HAL_SYSTICK_Config+0x40>)
 c0067f6:	f043 0303 	orr.w	r3, r3, #3
 c0067fa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 c0067fc:	2300      	movs	r3, #0
}
 c0067fe:	4618      	mov	r0, r3
 c006800:	370c      	adds	r7, #12
 c006802:	46bd      	mov	sp, r7
 c006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006808:	4770      	bx	lr
 c00680a:	bf00      	nop
 c00680c:	e000e010 	.word	0xe000e010

0c006810 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 c006810:	b480      	push	{r7}
 c006812:	b083      	sub	sp, #12
 c006814:	af00      	add	r7, sp, #0
 c006816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 c006818:	687b      	ldr	r3, [r7, #4]
 c00681a:	2b04      	cmp	r3, #4
 c00681c:	d844      	bhi.n	c0068a8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 c00681e:	a201      	add	r2, pc, #4	@ (adr r2, c006824 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 c006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c006824:	0c006847 	.word	0x0c006847
 c006828:	0c006865 	.word	0x0c006865
 c00682c:	0c006887 	.word	0x0c006887
 c006830:	0c0068a9 	.word	0x0c0068a9
 c006834:	0c006839 	.word	0x0c006839
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c006838:	4b1f      	ldr	r3, [pc, #124]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00683a:	681b      	ldr	r3, [r3, #0]
 c00683c:	4a1e      	ldr	r2, [pc, #120]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00683e:	f043 0304 	orr.w	r3, r3, #4
 c006842:	6013      	str	r3, [r2, #0]
      break;
 c006844:	e031      	b.n	c0068aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c006846:	4b1c      	ldr	r3, [pc, #112]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c006848:	681b      	ldr	r3, [r3, #0]
 c00684a:	4a1b      	ldr	r2, [pc, #108]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00684c:	f023 0304 	bic.w	r3, r3, #4
 c006850:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 c006852:	4b1a      	ldr	r3, [pc, #104]	@ (c0068bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c006854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c006858:	4a18      	ldr	r2, [pc, #96]	@ (c0068bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00685a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00685e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c006862:	e022      	b.n	c0068aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c006864:	4b14      	ldr	r3, [pc, #80]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c006866:	681b      	ldr	r3, [r3, #0]
 c006868:	4a13      	ldr	r2, [pc, #76]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00686a:	f023 0304 	bic.w	r3, r3, #4
 c00686e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 c006870:	4b12      	ldr	r3, [pc, #72]	@ (c0068bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c006872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c006876:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00687a:	4a10      	ldr	r2, [pc, #64]	@ (c0068bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00687c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 c006880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c006884:	e011      	b.n	c0068aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c006886:	4b0c      	ldr	r3, [pc, #48]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c006888:	681b      	ldr	r3, [r3, #0]
 c00688a:	4a0b      	ldr	r2, [pc, #44]	@ (c0068b8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00688c:	f023 0304 	bic.w	r3, r3, #4
 c006890:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 c006892:	4b0a      	ldr	r3, [pc, #40]	@ (c0068bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c006894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c006898:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00689c:	4a07      	ldr	r2, [pc, #28]	@ (c0068bc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00689e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c0068a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c0068a6:	e000      	b.n	c0068aa <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 c0068a8:	bf00      	nop
  }
}
 c0068aa:	bf00      	nop
 c0068ac:	370c      	adds	r7, #12
 c0068ae:	46bd      	mov	sp, r7
 c0068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0068b4:	4770      	bx	lr
 c0068b6:	bf00      	nop
 c0068b8:	e000e010 	.word	0xe000e010
 c0068bc:	56020c00 	.word	0x56020c00

0c0068c0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 c0068c0:	b480      	push	{r7}
 c0068c2:	b083      	sub	sp, #12
 c0068c4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 c0068c6:	4b19      	ldr	r3, [pc, #100]	@ (c00692c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 c0068c8:	681b      	ldr	r3, [r3, #0]
 c0068ca:	f003 0304 	and.w	r3, r3, #4
 c0068ce:	2b00      	cmp	r3, #0
 c0068d0:	d002      	beq.n	c0068d8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 c0068d2:	2304      	movs	r3, #4
 c0068d4:	607b      	str	r3, [r7, #4]
 c0068d6:	e021      	b.n	c00691c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 c0068d8:	4b15      	ldr	r3, [pc, #84]	@ (c006930 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 c0068da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0068de:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 c0068e2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 c0068e4:	683b      	ldr	r3, [r7, #0]
 c0068e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c0068ea:	d011      	beq.n	c006910 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 c0068ec:	683b      	ldr	r3, [r7, #0]
 c0068ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c0068f2:	d810      	bhi.n	c006916 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 c0068f4:	683b      	ldr	r3, [r7, #0]
 c0068f6:	2b00      	cmp	r3, #0
 c0068f8:	d004      	beq.n	c006904 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 c0068fa:	683b      	ldr	r3, [r7, #0]
 c0068fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 c006900:	d003      	beq.n	c00690a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 c006902:	e008      	b.n	c006916 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c006904:	2300      	movs	r3, #0
 c006906:	607b      	str	r3, [r7, #4]
        break;
 c006908:	e008      	b.n	c00691c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 c00690a:	2301      	movs	r3, #1
 c00690c:	607b      	str	r3, [r7, #4]
        break;
 c00690e:	e005      	b.n	c00691c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 c006910:	2302      	movs	r3, #2
 c006912:	607b      	str	r3, [r7, #4]
        break;
 c006914:	e002      	b.n	c00691c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c006916:	2300      	movs	r3, #0
 c006918:	607b      	str	r3, [r7, #4]
        break;
 c00691a:	bf00      	nop
    }
  }
  return systick_source;
 c00691c:	687b      	ldr	r3, [r7, #4]
}
 c00691e:	4618      	mov	r0, r3
 c006920:	370c      	adds	r7, #12
 c006922:	46bd      	mov	sp, r7
 c006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006928:	4770      	bx	lr
 c00692a:	bf00      	nop
 c00692c:	e000e010 	.word	0xe000e010
 c006930:	56020c00 	.word	0x56020c00

0c006934 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 c006934:	b580      	push	{r7, lr}
 c006936:	b084      	sub	sp, #16
 c006938:	af00      	add	r7, sp, #0
 c00693a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 c00693c:	f7ff fe62 	bl	c006604 <HAL_GetTick>
 c006940:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 c006942:	687b      	ldr	r3, [r7, #4]
 c006944:	2b00      	cmp	r3, #0
 c006946:	d101      	bne.n	c00694c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 c006948:	2301      	movs	r3, #1
 c00694a:	e06b      	b.n	c006a24 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 c00694c:	687b      	ldr	r3, [r7, #4]
 c00694e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 c006952:	b2db      	uxtb	r3, r3
 c006954:	2b02      	cmp	r3, #2
 c006956:	d008      	beq.n	c00696a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 c006958:	687b      	ldr	r3, [r7, #4]
 c00695a:	2220      	movs	r2, #32
 c00695c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c00695e:	687b      	ldr	r3, [r7, #4]
 c006960:	2200      	movs	r2, #0
 c006962:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 c006966:	2301      	movs	r3, #1
 c006968:	e05c      	b.n	c006a24 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 c00696a:	687b      	ldr	r3, [r7, #4]
 c00696c:	681b      	ldr	r3, [r3, #0]
 c00696e:	695a      	ldr	r2, [r3, #20]
 c006970:	687b      	ldr	r3, [r7, #4]
 c006972:	681b      	ldr	r3, [r3, #0]
 c006974:	f042 0204 	orr.w	r2, r2, #4
 c006978:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 c00697a:	687b      	ldr	r3, [r7, #4]
 c00697c:	2205      	movs	r2, #5
 c00697e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 c006982:	e020      	b.n	c0069c6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 c006984:	f7ff fe3e 	bl	c006604 <HAL_GetTick>
 c006988:	4602      	mov	r2, r0
 c00698a:	68fb      	ldr	r3, [r7, #12]
 c00698c:	1ad3      	subs	r3, r2, r3
 c00698e:	2b05      	cmp	r3, #5
 c006990:	d919      	bls.n	c0069c6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 c006992:	687b      	ldr	r3, [r7, #4]
 c006994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c006996:	f043 0210 	orr.w	r2, r3, #16
 c00699a:	687b      	ldr	r3, [r7, #4]
 c00699c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 c00699e:	687b      	ldr	r3, [r7, #4]
 c0069a0:	2203      	movs	r2, #3
 c0069a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 c0069a6:	687b      	ldr	r3, [r7, #4]
 c0069a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c0069aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c0069ae:	2b00      	cmp	r3, #0
 c0069b0:	d003      	beq.n	c0069ba <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 c0069b2:	687b      	ldr	r3, [r7, #4]
 c0069b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c0069b6:	2201      	movs	r2, #1
 c0069b8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 c0069ba:	687b      	ldr	r3, [r7, #4]
 c0069bc:	2200      	movs	r2, #0
 c0069be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 c0069c2:	2301      	movs	r3, #1
 c0069c4:	e02e      	b.n	c006a24 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 c0069c6:	687b      	ldr	r3, [r7, #4]
 c0069c8:	681b      	ldr	r3, [r3, #0]
 c0069ca:	691b      	ldr	r3, [r3, #16]
 c0069cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c0069d0:	2b00      	cmp	r3, #0
 c0069d2:	d0d7      	beq.n	c006984 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 c0069d4:	687b      	ldr	r3, [r7, #4]
 c0069d6:	681b      	ldr	r3, [r3, #0]
 c0069d8:	695a      	ldr	r2, [r3, #20]
 c0069da:	687b      	ldr	r3, [r7, #4]
 c0069dc:	681b      	ldr	r3, [r3, #0]
 c0069de:	f042 0202 	orr.w	r2, r2, #2
 c0069e2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 c0069e4:	687b      	ldr	r3, [r7, #4]
 c0069e6:	2204      	movs	r2, #4
 c0069e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 c0069ec:	687b      	ldr	r3, [r7, #4]
 c0069ee:	681b      	ldr	r3, [r3, #0]
 c0069f0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 c0069f4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 c0069f6:	687b      	ldr	r3, [r7, #4]
 c0069f8:	2201      	movs	r2, #1
 c0069fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 c0069fe:	687b      	ldr	r3, [r7, #4]
 c006a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c006a06:	2b00      	cmp	r3, #0
 c006a08:	d007      	beq.n	c006a1a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 c006a0a:	687b      	ldr	r3, [r7, #4]
 c006a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c006a0e:	2201      	movs	r2, #1
 c006a10:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 c006a12:	687b      	ldr	r3, [r7, #4]
 c006a14:	681b      	ldr	r3, [r3, #0]
 c006a16:	2200      	movs	r2, #0
 c006a18:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c006a1a:	687b      	ldr	r3, [r7, #4]
 c006a1c:	2200      	movs	r2, #0
 c006a1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 c006a22:	2300      	movs	r3, #0
}
 c006a24:	4618      	mov	r0, r3
 c006a26:	3710      	adds	r7, #16
 c006a28:	46bd      	mov	sp, r7
 c006a2a:	bd80      	pop	{r7, pc}

0c006a2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c006a2c:	b480      	push	{r7}
 c006a2e:	b089      	sub	sp, #36	@ 0x24
 c006a30:	af00      	add	r7, sp, #0
 c006a32:	6078      	str	r0, [r7, #4]
 c006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c006a36:	2300      	movs	r3, #0
 c006a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c006a3a:	687b      	ldr	r3, [r7, #4]
 c006a3c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c006a3e:	e1c2      	b.n	c006dc6 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c006a40:	683b      	ldr	r3, [r7, #0]
 c006a42:	681a      	ldr	r2, [r3, #0]
 c006a44:	2101      	movs	r1, #1
 c006a46:	697b      	ldr	r3, [r7, #20]
 c006a48:	fa01 f303 	lsl.w	r3, r1, r3
 c006a4c:	4013      	ands	r3, r2
 c006a4e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 c006a50:	697b      	ldr	r3, [r7, #20]
 c006a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 c006a54:	68fb      	ldr	r3, [r7, #12]
 c006a56:	2b00      	cmp	r3, #0
 c006a58:	f000 81b2 	beq.w	c006dc0 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 c006a5c:	687b      	ldr	r3, [r7, #4]
 c006a5e:	4a55      	ldr	r2, [pc, #340]	@ (c006bb4 <HAL_GPIO_Init+0x188>)
 c006a60:	4293      	cmp	r3, r2
 c006a62:	d15d      	bne.n	c006b20 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 c006a64:	687b      	ldr	r3, [r7, #4]
 c006a66:	681b      	ldr	r3, [r3, #0]
 c006a68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 c006a6a:	2201      	movs	r2, #1
 c006a6c:	697b      	ldr	r3, [r7, #20]
 c006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 c006a72:	43db      	mvns	r3, r3
 c006a74:	69fa      	ldr	r2, [r7, #28]
 c006a76:	4013      	ands	r3, r2
 c006a78:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 c006a7a:	683b      	ldr	r3, [r7, #0]
 c006a7c:	685b      	ldr	r3, [r3, #4]
 c006a7e:	f003 0201 	and.w	r2, r3, #1
 c006a82:	697b      	ldr	r3, [r7, #20]
 c006a84:	fa02 f303 	lsl.w	r3, r2, r3
 c006a88:	69fa      	ldr	r2, [r7, #28]
 c006a8a:	4313      	orrs	r3, r2
 c006a8c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 c006a8e:	687b      	ldr	r3, [r7, #4]
 c006a90:	69fa      	ldr	r2, [r7, #28]
 c006a92:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c006a94:	4a48      	ldr	r2, [pc, #288]	@ (c006bb8 <HAL_GPIO_Init+0x18c>)
 c006a96:	697b      	ldr	r3, [r7, #20]
 c006a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c006a9c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c006a9e:	4a46      	ldr	r2, [pc, #280]	@ (c006bb8 <HAL_GPIO_Init+0x18c>)
 c006aa0:	697b      	ldr	r3, [r7, #20]
 c006aa2:	00db      	lsls	r3, r3, #3
 c006aa4:	4413      	add	r3, r2
 c006aa6:	685b      	ldr	r3, [r3, #4]
 c006aa8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 c006aaa:	69bb      	ldr	r3, [r7, #24]
 c006aac:	08da      	lsrs	r2, r3, #3
 c006aae:	693b      	ldr	r3, [r7, #16]
 c006ab0:	3208      	adds	r2, #8
 c006ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c006ab6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 c006ab8:	69bb      	ldr	r3, [r7, #24]
 c006aba:	f003 0307 	and.w	r3, r3, #7
 c006abe:	009b      	lsls	r3, r3, #2
 c006ac0:	220f      	movs	r2, #15
 c006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 c006ac6:	43db      	mvns	r3, r3
 c006ac8:	69fa      	ldr	r2, [r7, #28]
 c006aca:	4013      	ands	r3, r2
 c006acc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 c006ace:	69bb      	ldr	r3, [r7, #24]
 c006ad0:	f003 0307 	and.w	r3, r3, #7
 c006ad4:	009b      	lsls	r3, r3, #2
 c006ad6:	220b      	movs	r2, #11
 c006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 c006adc:	69fa      	ldr	r2, [r7, #28]
 c006ade:	4313      	orrs	r3, r2
 c006ae0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 c006ae2:	69bb      	ldr	r3, [r7, #24]
 c006ae4:	08da      	lsrs	r2, r3, #3
 c006ae6:	693b      	ldr	r3, [r7, #16]
 c006ae8:	3208      	adds	r2, #8
 c006aea:	69f9      	ldr	r1, [r7, #28]
 c006aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c006af0:	693b      	ldr	r3, [r7, #16]
 c006af2:	681b      	ldr	r3, [r3, #0]
 c006af4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c006af6:	69bb      	ldr	r3, [r7, #24]
 c006af8:	005b      	lsls	r3, r3, #1
 c006afa:	2203      	movs	r2, #3
 c006afc:	fa02 f303 	lsl.w	r3, r2, r3
 c006b00:	43db      	mvns	r3, r3
 c006b02:	69fa      	ldr	r2, [r7, #28]
 c006b04:	4013      	ands	r3, r2
 c006b06:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 c006b08:	69bb      	ldr	r3, [r7, #24]
 c006b0a:	005b      	lsls	r3, r3, #1
 c006b0c:	2202      	movs	r2, #2
 c006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 c006b12:	69fa      	ldr	r2, [r7, #28]
 c006b14:	4313      	orrs	r3, r2
 c006b16:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c006b18:	693b      	ldr	r3, [r7, #16]
 c006b1a:	69fa      	ldr	r2, [r7, #28]
 c006b1c:	601a      	str	r2, [r3, #0]
 c006b1e:	e067      	b.n	c006bf0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c006b20:	683b      	ldr	r3, [r7, #0]
 c006b22:	685b      	ldr	r3, [r3, #4]
 c006b24:	2b02      	cmp	r3, #2
 c006b26:	d003      	beq.n	c006b30 <HAL_GPIO_Init+0x104>
 c006b28:	683b      	ldr	r3, [r7, #0]
 c006b2a:	685b      	ldr	r3, [r3, #4]
 c006b2c:	2b12      	cmp	r3, #18
 c006b2e:	d145      	bne.n	c006bbc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c006b30:	697b      	ldr	r3, [r7, #20]
 c006b32:	08da      	lsrs	r2, r3, #3
 c006b34:	687b      	ldr	r3, [r7, #4]
 c006b36:	3208      	adds	r2, #8
 c006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c006b3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c006b3e:	697b      	ldr	r3, [r7, #20]
 c006b40:	f003 0307 	and.w	r3, r3, #7
 c006b44:	009b      	lsls	r3, r3, #2
 c006b46:	220f      	movs	r2, #15
 c006b48:	fa02 f303 	lsl.w	r3, r2, r3
 c006b4c:	43db      	mvns	r3, r3
 c006b4e:	69fa      	ldr	r2, [r7, #28]
 c006b50:	4013      	ands	r3, r2
 c006b52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c006b54:	683b      	ldr	r3, [r7, #0]
 c006b56:	691b      	ldr	r3, [r3, #16]
 c006b58:	f003 020f 	and.w	r2, r3, #15
 c006b5c:	697b      	ldr	r3, [r7, #20]
 c006b5e:	f003 0307 	and.w	r3, r3, #7
 c006b62:	009b      	lsls	r3, r3, #2
 c006b64:	fa02 f303 	lsl.w	r3, r2, r3
 c006b68:	69fa      	ldr	r2, [r7, #28]
 c006b6a:	4313      	orrs	r3, r2
 c006b6c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 c006b6e:	697b      	ldr	r3, [r7, #20]
 c006b70:	08da      	lsrs	r2, r3, #3
 c006b72:	687b      	ldr	r3, [r7, #4]
 c006b74:	3208      	adds	r2, #8
 c006b76:	69f9      	ldr	r1, [r7, #28]
 c006b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c006b7c:	693b      	ldr	r3, [r7, #16]
 c006b7e:	681b      	ldr	r3, [r3, #0]
 c006b80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c006b82:	69bb      	ldr	r3, [r7, #24]
 c006b84:	005b      	lsls	r3, r3, #1
 c006b86:	2203      	movs	r2, #3
 c006b88:	fa02 f303 	lsl.w	r3, r2, r3
 c006b8c:	43db      	mvns	r3, r3
 c006b8e:	69fa      	ldr	r2, [r7, #28]
 c006b90:	4013      	ands	r3, r2
 c006b92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c006b94:	683b      	ldr	r3, [r7, #0]
 c006b96:	685b      	ldr	r3, [r3, #4]
 c006b98:	f003 0203 	and.w	r2, r3, #3
 c006b9c:	69bb      	ldr	r3, [r7, #24]
 c006b9e:	005b      	lsls	r3, r3, #1
 c006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 c006ba4:	69fa      	ldr	r2, [r7, #28]
 c006ba6:	4313      	orrs	r3, r2
 c006ba8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c006baa:	693b      	ldr	r3, [r7, #16]
 c006bac:	69fa      	ldr	r2, [r7, #28]
 c006bae:	601a      	str	r2, [r3, #0]
 c006bb0:	e01e      	b.n	c006bf0 <HAL_GPIO_Init+0x1c4>
 c006bb2:	bf00      	nop
 c006bb4:	56020000 	.word	0x56020000
 c006bb8:	0c00e4f8 	.word	0x0c00e4f8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 c006bbc:	693b      	ldr	r3, [r7, #16]
 c006bbe:	681b      	ldr	r3, [r3, #0]
 c006bc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c006bc2:	69bb      	ldr	r3, [r7, #24]
 c006bc4:	005b      	lsls	r3, r3, #1
 c006bc6:	2203      	movs	r2, #3
 c006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 c006bcc:	43db      	mvns	r3, r3
 c006bce:	69fa      	ldr	r2, [r7, #28]
 c006bd0:	4013      	ands	r3, r2
 c006bd2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c006bd4:	683b      	ldr	r3, [r7, #0]
 c006bd6:	685b      	ldr	r3, [r3, #4]
 c006bd8:	f003 0203 	and.w	r2, r3, #3
 c006bdc:	69bb      	ldr	r3, [r7, #24]
 c006bde:	005b      	lsls	r3, r3, #1
 c006be0:	fa02 f303 	lsl.w	r3, r2, r3
 c006be4:	69fa      	ldr	r2, [r7, #28]
 c006be6:	4313      	orrs	r3, r2
 c006be8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c006bea:	693b      	ldr	r3, [r7, #16]
 c006bec:	69fa      	ldr	r2, [r7, #28]
 c006bee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c006bf0:	683b      	ldr	r3, [r7, #0]
 c006bf2:	685b      	ldr	r3, [r3, #4]
 c006bf4:	2b01      	cmp	r3, #1
 c006bf6:	d00b      	beq.n	c006c10 <HAL_GPIO_Init+0x1e4>
 c006bf8:	683b      	ldr	r3, [r7, #0]
 c006bfa:	685b      	ldr	r3, [r3, #4]
 c006bfc:	2b02      	cmp	r3, #2
 c006bfe:	d007      	beq.n	c006c10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c006c00:	683b      	ldr	r3, [r7, #0]
 c006c02:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c006c04:	2b11      	cmp	r3, #17
 c006c06:	d003      	beq.n	c006c10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c006c08:	683b      	ldr	r3, [r7, #0]
 c006c0a:	685b      	ldr	r3, [r3, #4]
 c006c0c:	2b12      	cmp	r3, #18
 c006c0e:	d130      	bne.n	c006c72 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 c006c10:	693b      	ldr	r3, [r7, #16]
 c006c12:	689b      	ldr	r3, [r3, #8]
 c006c14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c006c16:	69bb      	ldr	r3, [r7, #24]
 c006c18:	005b      	lsls	r3, r3, #1
 c006c1a:	2203      	movs	r2, #3
 c006c1c:	fa02 f303 	lsl.w	r3, r2, r3
 c006c20:	43db      	mvns	r3, r3
 c006c22:	69fa      	ldr	r2, [r7, #28]
 c006c24:	4013      	ands	r3, r2
 c006c26:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c006c28:	683b      	ldr	r3, [r7, #0]
 c006c2a:	68da      	ldr	r2, [r3, #12]
 c006c2c:	69bb      	ldr	r3, [r7, #24]
 c006c2e:	005b      	lsls	r3, r3, #1
 c006c30:	fa02 f303 	lsl.w	r3, r2, r3
 c006c34:	69fa      	ldr	r2, [r7, #28]
 c006c36:	4313      	orrs	r3, r2
 c006c38:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 c006c3a:	693b      	ldr	r3, [r7, #16]
 c006c3c:	69fa      	ldr	r2, [r7, #28]
 c006c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 c006c40:	693b      	ldr	r3, [r7, #16]
 c006c42:	685b      	ldr	r3, [r3, #4]
 c006c44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 c006c46:	2201      	movs	r2, #1
 c006c48:	69bb      	ldr	r3, [r7, #24]
 c006c4a:	fa02 f303 	lsl.w	r3, r2, r3
 c006c4e:	43db      	mvns	r3, r3
 c006c50:	69fa      	ldr	r2, [r7, #28]
 c006c52:	4013      	ands	r3, r2
 c006c54:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 c006c56:	683b      	ldr	r3, [r7, #0]
 c006c58:	685b      	ldr	r3, [r3, #4]
 c006c5a:	091b      	lsrs	r3, r3, #4
 c006c5c:	f003 0201 	and.w	r2, r3, #1
 c006c60:	69bb      	ldr	r3, [r7, #24]
 c006c62:	fa02 f303 	lsl.w	r3, r2, r3
 c006c66:	69fa      	ldr	r2, [r7, #28]
 c006c68:	4313      	orrs	r3, r2
 c006c6a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 c006c6c:	693b      	ldr	r3, [r7, #16]
 c006c6e:	69fa      	ldr	r2, [r7, #28]
 c006c70:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 c006c72:	683b      	ldr	r3, [r7, #0]
 c006c74:	685b      	ldr	r3, [r3, #4]
 c006c76:	2b03      	cmp	r3, #3
 c006c78:	d107      	bne.n	c006c8a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 c006c7a:	683b      	ldr	r3, [r7, #0]
 c006c7c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 c006c7e:	2b03      	cmp	r3, #3
 c006c80:	d11b      	bne.n	c006cba <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 c006c82:	683b      	ldr	r3, [r7, #0]
 c006c84:	689b      	ldr	r3, [r3, #8]
 c006c86:	2b01      	cmp	r3, #1
 c006c88:	d017      	beq.n	c006cba <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 c006c8a:	693b      	ldr	r3, [r7, #16]
 c006c8c:	68db      	ldr	r3, [r3, #12]
 c006c8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c006c90:	69bb      	ldr	r3, [r7, #24]
 c006c92:	005b      	lsls	r3, r3, #1
 c006c94:	2203      	movs	r2, #3
 c006c96:	fa02 f303 	lsl.w	r3, r2, r3
 c006c9a:	43db      	mvns	r3, r3
 c006c9c:	69fa      	ldr	r2, [r7, #28]
 c006c9e:	4013      	ands	r3, r2
 c006ca0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c006ca2:	683b      	ldr	r3, [r7, #0]
 c006ca4:	689a      	ldr	r2, [r3, #8]
 c006ca6:	69bb      	ldr	r3, [r7, #24]
 c006ca8:	005b      	lsls	r3, r3, #1
 c006caa:	fa02 f303 	lsl.w	r3, r2, r3
 c006cae:	69fa      	ldr	r2, [r7, #28]
 c006cb0:	4313      	orrs	r3, r2
 c006cb2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 c006cb4:	693b      	ldr	r3, [r7, #16]
 c006cb6:	69fa      	ldr	r2, [r7, #28]
 c006cb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c006cba:	683b      	ldr	r3, [r7, #0]
 c006cbc:	685b      	ldr	r3, [r3, #4]
 c006cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c006cc2:	2b00      	cmp	r3, #0
 c006cc4:	d07c      	beq.n	c006dc0 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c006cc6:	4a47      	ldr	r2, [pc, #284]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006cc8:	697b      	ldr	r3, [r7, #20]
 c006cca:	089b      	lsrs	r3, r3, #2
 c006ccc:	3318      	adds	r3, #24
 c006cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006cd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c006cd4:	697b      	ldr	r3, [r7, #20]
 c006cd6:	f003 0303 	and.w	r3, r3, #3
 c006cda:	00db      	lsls	r3, r3, #3
 c006cdc:	220f      	movs	r2, #15
 c006cde:	fa02 f303 	lsl.w	r3, r2, r3
 c006ce2:	43db      	mvns	r3, r3
 c006ce4:	69fa      	ldr	r2, [r7, #28]
 c006ce6:	4013      	ands	r3, r2
 c006ce8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c006cea:	687b      	ldr	r3, [r7, #4]
 c006cec:	0a9a      	lsrs	r2, r3, #10
 c006cee:	4b3e      	ldr	r3, [pc, #248]	@ (c006de8 <HAL_GPIO_Init+0x3bc>)
 c006cf0:	4013      	ands	r3, r2
 c006cf2:	697a      	ldr	r2, [r7, #20]
 c006cf4:	f002 0203 	and.w	r2, r2, #3
 c006cf8:	00d2      	lsls	r2, r2, #3
 c006cfa:	4093      	lsls	r3, r2
 c006cfc:	69fa      	ldr	r2, [r7, #28]
 c006cfe:	4313      	orrs	r3, r2
 c006d00:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 c006d02:	4938      	ldr	r1, [pc, #224]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d04:	697b      	ldr	r3, [r7, #20]
 c006d06:	089b      	lsrs	r3, r3, #2
 c006d08:	3318      	adds	r3, #24
 c006d0a:	69fa      	ldr	r2, [r7, #28]
 c006d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c006d10:	4b34      	ldr	r3, [pc, #208]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d12:	681b      	ldr	r3, [r3, #0]
 c006d14:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c006d16:	68fb      	ldr	r3, [r7, #12]
 c006d18:	43db      	mvns	r3, r3
 c006d1a:	69fa      	ldr	r2, [r7, #28]
 c006d1c:	4013      	ands	r3, r2
 c006d1e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c006d20:	683b      	ldr	r3, [r7, #0]
 c006d22:	685b      	ldr	r3, [r3, #4]
 c006d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 c006d28:	2b00      	cmp	r3, #0
 c006d2a:	d003      	beq.n	c006d34 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 c006d2c:	69fa      	ldr	r2, [r7, #28]
 c006d2e:	68fb      	ldr	r3, [r7, #12]
 c006d30:	4313      	orrs	r3, r2
 c006d32:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 c006d34:	4a2b      	ldr	r2, [pc, #172]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d36:	69fb      	ldr	r3, [r7, #28]
 c006d38:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c006d3a:	4b2a      	ldr	r3, [pc, #168]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d3c:	685b      	ldr	r3, [r3, #4]
 c006d3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c006d40:	68fb      	ldr	r3, [r7, #12]
 c006d42:	43db      	mvns	r3, r3
 c006d44:	69fa      	ldr	r2, [r7, #28]
 c006d46:	4013      	ands	r3, r2
 c006d48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c006d4a:	683b      	ldr	r3, [r7, #0]
 c006d4c:	685b      	ldr	r3, [r3, #4]
 c006d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c006d52:	2b00      	cmp	r3, #0
 c006d54:	d003      	beq.n	c006d5e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 c006d56:	69fa      	ldr	r2, [r7, #28]
 c006d58:	68fb      	ldr	r3, [r7, #12]
 c006d5a:	4313      	orrs	r3, r2
 c006d5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 c006d5e:	4a21      	ldr	r2, [pc, #132]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d60:	69fb      	ldr	r3, [r7, #28]
 c006d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c006d64:	4b1f      	ldr	r3, [pc, #124]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c006d6a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c006d6c:	68fb      	ldr	r3, [r7, #12]
 c006d6e:	43db      	mvns	r3, r3
 c006d70:	69fa      	ldr	r2, [r7, #28]
 c006d72:	4013      	ands	r3, r2
 c006d74:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c006d76:	683b      	ldr	r3, [r7, #0]
 c006d78:	685b      	ldr	r3, [r3, #4]
 c006d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c006d7e:	2b00      	cmp	r3, #0
 c006d80:	d003      	beq.n	c006d8a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 c006d82:	69fa      	ldr	r2, [r7, #28]
 c006d84:	68fb      	ldr	r3, [r7, #12]
 c006d86:	4313      	orrs	r3, r2
 c006d88:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 c006d8a:	4a16      	ldr	r2, [pc, #88]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d8c:	69fb      	ldr	r3, [r7, #28]
 c006d8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 c006d92:	4b14      	ldr	r3, [pc, #80]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c006d98:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c006d9a:	68fb      	ldr	r3, [r7, #12]
 c006d9c:	43db      	mvns	r3, r3
 c006d9e:	69fa      	ldr	r2, [r7, #28]
 c006da0:	4013      	ands	r3, r2
 c006da2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c006da4:	683b      	ldr	r3, [r7, #0]
 c006da6:	685b      	ldr	r3, [r3, #4]
 c006da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c006dac:	2b00      	cmp	r3, #0
 c006dae:	d003      	beq.n	c006db8 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 c006db0:	69fa      	ldr	r2, [r7, #28]
 c006db2:	68fb      	ldr	r3, [r7, #12]
 c006db4:	4313      	orrs	r3, r2
 c006db6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 c006db8:	4a0a      	ldr	r2, [pc, #40]	@ (c006de4 <HAL_GPIO_Init+0x3b8>)
 c006dba:	69fb      	ldr	r3, [r7, #28]
 c006dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 c006dc0:	697b      	ldr	r3, [r7, #20]
 c006dc2:	3301      	adds	r3, #1
 c006dc4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c006dc6:	683b      	ldr	r3, [r7, #0]
 c006dc8:	681a      	ldr	r2, [r3, #0]
 c006dca:	697b      	ldr	r3, [r7, #20]
 c006dcc:	fa22 f303 	lsr.w	r3, r2, r3
 c006dd0:	2b00      	cmp	r3, #0
 c006dd2:	f47f ae35 	bne.w	c006a40 <HAL_GPIO_Init+0x14>
  }
}
 c006dd6:	bf00      	nop
 c006dd8:	bf00      	nop
 c006dda:	3724      	adds	r7, #36	@ 0x24
 c006ddc:	46bd      	mov	sp, r7
 c006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006de2:	4770      	bx	lr
 c006de4:	56022000 	.word	0x56022000
 c006de8:	002b7f7f 	.word	0x002b7f7f

0c006dec <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c006dec:	b480      	push	{r7}
 c006dee:	b085      	sub	sp, #20
 c006df0:	af00      	add	r7, sp, #0
 c006df2:	6078      	str	r0, [r7, #4]
 c006df4:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c006df6:	683b      	ldr	r3, [r7, #0]
 c006df8:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 c006dfc:	d234      	bcs.n	c006e68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c006dfe:	687b      	ldr	r3, [r7, #4]
 c006e00:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c006e02:	2b03      	cmp	r3, #3
 c006e04:	d809      	bhi.n	c006e1a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2e>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c006e06:	687b      	ldr	r3, [r7, #4]
 c006e08:	0f1b      	lsrs	r3, r3, #28
 c006e0a:	015a      	lsls	r2, r3, #5
 c006e0c:	687b      	ldr	r3, [r7, #4]
 c006e0e:	f003 031f 	and.w	r3, r3, #31
 c006e12:	4413      	add	r3, r2
 c006e14:	2b6c      	cmp	r3, #108	@ 0x6c
 c006e16:	d827      	bhi.n	c006e68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c006e18:	e009      	b.n	c006e2e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x42>
 c006e1a:	687b      	ldr	r3, [r7, #4]
 c006e1c:	0f1b      	lsrs	r3, r3, #28
 c006e1e:	3b01      	subs	r3, #1
 c006e20:	015a      	lsls	r2, r3, #5
 c006e22:	687b      	ldr	r3, [r7, #4]
 c006e24:	f003 031f 	and.w	r3, r3, #31
 c006e28:	4413      	add	r3, r2
 c006e2a:	2b6c      	cmp	r3, #108	@ 0x6c
 c006e2c:	d81c      	bhi.n	c006e68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c006e2e:	687b      	ldr	r3, [r7, #4]
 c006e30:	f003 0320 	and.w	r3, r3, #32
 c006e34:	2b00      	cmp	r3, #0
 c006e36:	d019      	beq.n	c006e6c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c006e38:	687b      	ldr	r3, [r7, #4]
 c006e3a:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c006e3c:	2b03      	cmp	r3, #3
 c006e3e:	d809      	bhi.n	c006e54 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x68>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c006e40:	687b      	ldr	r3, [r7, #4]
 c006e42:	0f1b      	lsrs	r3, r3, #28
 c006e44:	015a      	lsls	r2, r3, #5
 c006e46:	687b      	ldr	r3, [r7, #4]
 c006e48:	f003 031f 	and.w	r3, r3, #31
 c006e4c:	4413      	add	r3, r2
 c006e4e:	2b00      	cmp	r3, #0
 c006e50:	d10a      	bne.n	c006e68 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c006e52:	e00b      	b.n	c006e6c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
 c006e54:	687b      	ldr	r3, [r7, #4]
 c006e56:	0f1b      	lsrs	r3, r3, #28
 c006e58:	3b01      	subs	r3, #1
 c006e5a:	015a      	lsls	r2, r3, #5
 c006e5c:	687b      	ldr	r3, [r7, #4]
 c006e5e:	f003 031f 	and.w	r3, r3, #31
 c006e62:	4413      	add	r3, r2
 c006e64:	2b00      	cmp	r3, #0
 c006e66:	d001      	beq.n	c006e6c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
  {
    return HAL_ERROR;
 c006e68:	2301      	movs	r3, #1
 c006e6a:	e116      	b.n	c00709a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ae>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c006e6c:	687b      	ldr	r3, [r7, #4]
 c006e6e:	f003 0320 	and.w	r3, r3, #32
 c006e72:	2b00      	cmp	r3, #0
 c006e74:	f000 8096 	beq.w	c006fa4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1b8>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c006e78:	683a      	ldr	r2, [r7, #0]
 c006e7a:	f240 1301 	movw	r3, #257	@ 0x101
 c006e7e:	4013      	ands	r3, r2
 c006e80:	f240 1201 	movw	r2, #257	@ 0x101
 c006e84:	4293      	cmp	r3, r2
 c006e86:	d120      	bne.n	c006eca <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xde>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c006e88:	4b87      	ldr	r3, [pc, #540]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006e8a:	691b      	ldr	r3, [r3, #16]
 c006e8c:	4a86      	ldr	r2, [pc, #536]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006e8e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c006e92:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c006e96:	6113      	str	r3, [r2, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c006e98:	4b83      	ldr	r3, [pc, #524]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006e9a:	695b      	ldr	r3, [r3, #20]
 c006e9c:	4a82      	ldr	r2, [pc, #520]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006e9e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c006ea2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c006ea6:	6153      	str	r3, [r2, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c006ea8:	4b7f      	ldr	r3, [pc, #508]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006eaa:	699b      	ldr	r3, [r3, #24]
 c006eac:	4a7e      	ldr	r2, [pc, #504]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006eae:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c006eb2:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c006eb6:	6193      	str	r3, [r2, #24]
      SET_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c006eb8:	4b7c      	ldr	r3, [pc, #496]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006eba:	691b      	ldr	r3, [r3, #16]
 c006ebc:	4a7b      	ldr	r2, [pc, #492]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006ebe:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c006ec2:	f043 031f 	orr.w	r3, r3, #31
 c006ec6:	6113      	str	r3, [r2, #16]
 c006ec8:	e020      	b.n	c006f0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c006eca:	683b      	ldr	r3, [r7, #0]
 c006ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c006ed0:	2b00      	cmp	r3, #0
 c006ed2:	d01b      	beq.n	c006f0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c006ed4:	4b74      	ldr	r3, [pc, #464]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006ed6:	691b      	ldr	r3, [r3, #16]
 c006ed8:	4a73      	ldr	r2, [pc, #460]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006eda:	0d1b      	lsrs	r3, r3, #20
 c006edc:	051b      	lsls	r3, r3, #20
 c006ede:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c006ee0:	4b71      	ldr	r3, [pc, #452]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006ee2:	695b      	ldr	r3, [r3, #20]
 c006ee4:	4a70      	ldr	r2, [pc, #448]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006ee6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c006eea:	f023 0301 	bic.w	r3, r3, #1
 c006eee:	6153      	str	r3, [r2, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c006ef0:	4b6d      	ldr	r3, [pc, #436]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006ef2:	699b      	ldr	r3, [r3, #24]
 c006ef4:	4a6c      	ldr	r2, [pc, #432]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006ef6:	0ddb      	lsrs	r3, r3, #23
 c006ef8:	05db      	lsls	r3, r3, #23
 c006efa:	6193      	str	r3, [r2, #24]
      CLEAR_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c006efc:	4b6b      	ldr	r3, [pc, #428]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006efe:	691b      	ldr	r3, [r3, #16]
 c006f00:	4a6a      	ldr	r2, [pc, #424]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006f02:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c006f06:	f023 031f 	bic.w	r3, r3, #31
 c006f0a:	6113      	str	r3, [r2, #16]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c006f0c:	683a      	ldr	r2, [r7, #0]
 c006f0e:	f240 2302 	movw	r3, #514	@ 0x202
 c006f12:	4013      	ands	r3, r2
 c006f14:	f240 2202 	movw	r2, #514	@ 0x202
 c006f18:	4293      	cmp	r3, r2
 c006f1a:	d120      	bne.n	c006f5e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c006f1c:	4b62      	ldr	r3, [pc, #392]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f1e:	6a1b      	ldr	r3, [r3, #32]
 c006f20:	4a61      	ldr	r2, [pc, #388]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f22:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c006f26:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c006f2a:	6213      	str	r3, [r2, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c006f2c:	4b5e      	ldr	r3, [pc, #376]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c006f30:	4a5d      	ldr	r2, [pc, #372]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f32:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c006f36:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c006f3a:	6253      	str	r3, [r2, #36]	@ 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c006f3c:	4b5a      	ldr	r3, [pc, #360]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006f40:	4a59      	ldr	r2, [pc, #356]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f42:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c006f46:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c006f4a:	6293      	str	r3, [r2, #40]	@ 0x28
      SET_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c006f4c:	4b57      	ldr	r3, [pc, #348]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006f4e:	6a1b      	ldr	r3, [r3, #32]
 c006f50:	4a56      	ldr	r2, [pc, #344]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006f52:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c006f56:	f043 031f 	orr.w	r3, r3, #31
 c006f5a:	6213      	str	r3, [r2, #32]
 c006f5c:	e09c      	b.n	c007098 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c006f5e:	683b      	ldr	r3, [r7, #0]
 c006f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c006f64:	2b00      	cmp	r3, #0
 c006f66:	f000 8097 	beq.w	c007098 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c006f6a:	4b4f      	ldr	r3, [pc, #316]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f6c:	6a1b      	ldr	r3, [r3, #32]
 c006f6e:	4a4e      	ldr	r2, [pc, #312]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f70:	0d1b      	lsrs	r3, r3, #20
 c006f72:	051b      	lsls	r3, r3, #20
 c006f74:	6213      	str	r3, [r2, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c006f76:	4b4c      	ldr	r3, [pc, #304]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c006f7a:	4a4b      	ldr	r2, [pc, #300]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f7c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c006f80:	f023 0301 	bic.w	r3, r3, #1
 c006f84:	6253      	str	r3, [r2, #36]	@ 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c006f86:	4b48      	ldr	r3, [pc, #288]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006f8a:	4a47      	ldr	r2, [pc, #284]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006f8c:	0ddb      	lsrs	r3, r3, #23
 c006f8e:	05db      	lsls	r3, r3, #23
 c006f90:	6293      	str	r3, [r2, #40]	@ 0x28
      CLEAR_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c006f92:	4b46      	ldr	r3, [pc, #280]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006f94:	6a1b      	ldr	r3, [r3, #32]
 c006f96:	4a45      	ldr	r2, [pc, #276]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006f98:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c006f9c:	f023 031f 	bic.w	r3, r3, #31
 c006fa0:	6213      	str	r3, [r2, #32]
 c006fa2:	e079      	b.n	c007098 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c006fa4:	687b      	ldr	r3, [r7, #4]
 c006fa6:	0f1b      	lsrs	r3, r3, #28
 c006fa8:	2b03      	cmp	r3, #3
 c006faa:	d801      	bhi.n	c006fb0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c4>
 c006fac:	4b3e      	ldr	r3, [pc, #248]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c006fae:	e000      	b.n	c006fb2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c6>
 c006fb0:	4b3e      	ldr	r3, [pc, #248]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c006fb2:	3310      	adds	r3, #16
 c006fb4:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c006fb6:	687b      	ldr	r3, [r7, #4]
 c006fb8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c006fbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c006fc0:	d803      	bhi.n	c006fca <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1de>
 c006fc2:	687b      	ldr	r3, [r7, #4]
 c006fc4:	0f1b      	lsrs	r3, r3, #28
 c006fc6:	009b      	lsls	r3, r3, #2
 c006fc8:	e003      	b.n	c006fd2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e6>
 c006fca:	687b      	ldr	r3, [r7, #4]
 c006fcc:	0f1b      	lsrs	r3, r3, #28
 c006fce:	3b04      	subs	r3, #4
 c006fd0:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c006fd2:	4413      	add	r3, r2
 c006fd4:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c006fd6:	683a      	ldr	r2, [r7, #0]
 c006fd8:	f240 1301 	movw	r3, #257	@ 0x101
 c006fdc:	4013      	ands	r3, r2
 c006fde:	f240 1201 	movw	r2, #257	@ 0x101
 c006fe2:	4293      	cmp	r3, r2
 c006fe4:	d10a      	bne.n	c006ffc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x210>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c006fe6:	68fb      	ldr	r3, [r7, #12]
 c006fe8:	6819      	ldr	r1, [r3, #0]
 c006fea:	687b      	ldr	r3, [r7, #4]
 c006fec:	f003 031f 	and.w	r3, r3, #31
 c006ff0:	2201      	movs	r2, #1
 c006ff2:	409a      	lsls	r2, r3
 c006ff4:	68fb      	ldr	r3, [r7, #12]
 c006ff6:	430a      	orrs	r2, r1
 c006ff8:	601a      	str	r2, [r3, #0]
 c006ffa:	e010      	b.n	c00701e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c006ffc:	683b      	ldr	r3, [r7, #0]
 c006ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c007002:	2b00      	cmp	r3, #0
 c007004:	d00b      	beq.n	c00701e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c007006:	68fb      	ldr	r3, [r7, #12]
 c007008:	6819      	ldr	r1, [r3, #0]
 c00700a:	687b      	ldr	r3, [r7, #4]
 c00700c:	f003 031f 	and.w	r3, r3, #31
 c007010:	2201      	movs	r2, #1
 c007012:	fa02 f303 	lsl.w	r3, r2, r3
 c007016:	43da      	mvns	r2, r3
 c007018:	68fb      	ldr	r3, [r7, #12]
 c00701a:	400a      	ands	r2, r1
 c00701c:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c00701e:	687b      	ldr	r3, [r7, #4]
 c007020:	0f1b      	lsrs	r3, r3, #28
 c007022:	2b03      	cmp	r3, #3
 c007024:	d801      	bhi.n	c00702a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x23e>
 c007026:	4b20      	ldr	r3, [pc, #128]	@ (c0070a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c007028:	e000      	b.n	c00702c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x240>
 c00702a:	4b20      	ldr	r3, [pc, #128]	@ (c0070ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c00702c:	3320      	adds	r3, #32
 c00702e:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c007030:	687b      	ldr	r3, [r7, #4]
 c007032:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c007036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c00703a:	d803      	bhi.n	c007044 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x258>
 c00703c:	687b      	ldr	r3, [r7, #4]
 c00703e:	0f1b      	lsrs	r3, r3, #28
 c007040:	009b      	lsls	r3, r3, #2
 c007042:	e003      	b.n	c00704c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x260>
 c007044:	687b      	ldr	r3, [r7, #4]
 c007046:	0f1b      	lsrs	r3, r3, #28
 c007048:	3b04      	subs	r3, #4
 c00704a:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c00704c:	4413      	add	r3, r2
 c00704e:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c007050:	683a      	ldr	r2, [r7, #0]
 c007052:	f240 2302 	movw	r3, #514	@ 0x202
 c007056:	4013      	ands	r3, r2
 c007058:	f240 2202 	movw	r2, #514	@ 0x202
 c00705c:	4293      	cmp	r3, r2
 c00705e:	d10a      	bne.n	c007076 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x28a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c007060:	68fb      	ldr	r3, [r7, #12]
 c007062:	6819      	ldr	r1, [r3, #0]
 c007064:	687b      	ldr	r3, [r7, #4]
 c007066:	f003 031f 	and.w	r3, r3, #31
 c00706a:	2201      	movs	r2, #1
 c00706c:	409a      	lsls	r2, r3
 c00706e:	68fb      	ldr	r3, [r7, #12]
 c007070:	430a      	orrs	r2, r1
 c007072:	601a      	str	r2, [r3, #0]
 c007074:	e010      	b.n	c007098 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c007076:	683b      	ldr	r3, [r7, #0]
 c007078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c00707c:	2b00      	cmp	r3, #0
 c00707e:	d00b      	beq.n	c007098 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c007080:	68fb      	ldr	r3, [r7, #12]
 c007082:	6819      	ldr	r1, [r3, #0]
 c007084:	687b      	ldr	r3, [r7, #4]
 c007086:	f003 031f 	and.w	r3, r3, #31
 c00708a:	2201      	movs	r2, #1
 c00708c:	fa02 f303 	lsl.w	r3, r2, r3
 c007090:	43da      	mvns	r2, r3
 c007092:	68fb      	ldr	r3, [r7, #12]
 c007094:	400a      	ands	r2, r1
 c007096:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c007098:	2300      	movs	r3, #0
}
 c00709a:	4618      	mov	r0, r3
 c00709c:	3714      	adds	r7, #20
 c00709e:	46bd      	mov	sp, r7
 c0070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0070a4:	4770      	bx	lr
 c0070a6:	bf00      	nop
 c0070a8:	50032400 	.word	0x50032400
 c0070ac:	56023000 	.word	0x56023000

0c0070b0 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0070b0:	b480      	push	{r7}
 c0070b2:	b089      	sub	sp, #36	@ 0x24
 c0070b4:	af00      	add	r7, sp, #0
 c0070b6:	6078      	str	r0, [r7, #4]
 c0070b8:	6039      	str	r1, [r7, #0]
  uint32_t mem_size;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0070ba:	687b      	ldr	r3, [r7, #4]
 c0070bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c0070c0:	d01b      	beq.n	c0070fa <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c0070c2:	687b      	ldr	r3, [r7, #4]
 c0070c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c0070c8:	d017      	beq.n	c0070fa <HAL_GTZC_MPCBB_ConfigMem+0x4a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c0070ca:	687b      	ldr	r3, [r7, #4]
 c0070cc:	4a5c      	ldr	r2, [pc, #368]	@ (c007240 <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c0070ce:	4293      	cmp	r3, r2
 c0070d0:	d013      	beq.n	c0070fa <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c0070d2:	687b      	ldr	r3, [r7, #4]
 c0070d4:	4a5b      	ldr	r2, [pc, #364]	@ (c007244 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c0070d6:	4293      	cmp	r3, r2
 c0070d8:	d00f      	beq.n	c0070fa <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#if defined (SRAM3_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c0070da:	687b      	ldr	r3, [r7, #4]
 c0070dc:	4a5a      	ldr	r2, [pc, #360]	@ (c007248 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c0070de:	4293      	cmp	r3, r2
 c0070e0:	d00b      	beq.n	c0070fa <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c0070e2:	687b      	ldr	r3, [r7, #4]
 c0070e4:	4a59      	ldr	r2, [pc, #356]	@ (c00724c <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c0070e6:	4293      	cmp	r3, r2
 c0070e8:	d007      	beq.n	c0070fa <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#endif /* SRAM3_BASE */
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c0070ea:	687b      	ldr	r3, [r7, #4]
 c0070ec:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c0070f0:	d003      	beq.n	c0070fa <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c0070f2:	687b      	ldr	r3, [r7, #4]
 c0070f4:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c0070f8:	d111      	bne.n	c00711e <HAL_GTZC_MPCBB_ConfigMem+0x6e>
#endif /* SRAM5_BASE */
#if defined (SRAM6_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM6, MemBaseAddress))
#endif /* SRAM6_BASE */
      )
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0070fa:	683b      	ldr	r3, [r7, #0]
 c0070fc:	681b      	ldr	r3, [r3, #0]
 c0070fe:	2b00      	cmp	r3, #0
 c007100:	d004      	beq.n	c00710c <HAL_GTZC_MPCBB_ConfigMem+0x5c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c007102:	683b      	ldr	r3, [r7, #0]
 c007104:	681b      	ldr	r3, [r3, #0]
 c007106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c00710a:	d108      	bne.n	c00711e <HAL_GTZC_MPCBB_ConfigMem+0x6e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c00710c:	683b      	ldr	r3, [r7, #0]
 c00710e:	685b      	ldr	r3, [r3, #4]
 c007110:	2b00      	cmp	r3, #0
 c007112:	d006      	beq.n	c007122 <HAL_GTZC_MPCBB_ConfigMem+0x72>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c007114:	683b      	ldr	r3, [r7, #0]
 c007116:	685b      	ldr	r3, [r3, #4]
 c007118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c00711c:	d001      	beq.n	c007122 <HAL_GTZC_MPCBB_ConfigMem+0x72>
  {
    return HAL_ERROR;
 c00711e:	2301      	movs	r3, #1
 c007120:	e088      	b.n	c007234 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c007122:	687b      	ldr	r3, [r7, #4]
 c007124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c007128:	d003      	beq.n	c007132 <HAL_GTZC_MPCBB_ConfigMem+0x82>
 c00712a:	687b      	ldr	r3, [r7, #4]
 c00712c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c007130:	d105      	bne.n	c00713e <HAL_GTZC_MPCBB_ConfigMem+0x8e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c007132:	4b47      	ldr	r3, [pc, #284]	@ (c007250 <HAL_GTZC_MPCBB_ConfigMem+0x1a0>)
 c007134:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c007136:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 c00713a:	61bb      	str	r3, [r7, #24]
 c00713c:	e02b      	b.n	c007196 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c00713e:	687b      	ldr	r3, [r7, #4]
 c007140:	4a3f      	ldr	r2, [pc, #252]	@ (c007240 <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c007142:	4293      	cmp	r3, r2
 c007144:	d003      	beq.n	c00714e <HAL_GTZC_MPCBB_ConfigMem+0x9e>
 c007146:	687b      	ldr	r3, [r7, #4]
 c007148:	4a3e      	ldr	r2, [pc, #248]	@ (c007244 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c00714a:	4293      	cmp	r3, r2
 c00714c:	d105      	bne.n	c00715a <HAL_GTZC_MPCBB_ConfigMem+0xaa>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c00714e:	4b41      	ldr	r3, [pc, #260]	@ (c007254 <HAL_GTZC_MPCBB_ConfigMem+0x1a4>)
 c007150:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c007152:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c007156:	61bb      	str	r3, [r7, #24]
 c007158:	e01d      	b.n	c007196 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#if defined (SRAM3_BASE)
  else if (IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c00715a:	687b      	ldr	r3, [r7, #4]
 c00715c:	4a3a      	ldr	r2, [pc, #232]	@ (c007248 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c00715e:	4293      	cmp	r3, r2
 c007160:	d003      	beq.n	c00716a <HAL_GTZC_MPCBB_ConfigMem+0xba>
 c007162:	687b      	ldr	r3, [r7, #4]
 c007164:	4a39      	ldr	r2, [pc, #228]	@ (c00724c <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c007166:	4293      	cmp	r3, r2
 c007168:	d105      	bne.n	c007176 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c00716a:	4b3b      	ldr	r3, [pc, #236]	@ (c007258 <HAL_GTZC_MPCBB_ConfigMem+0x1a8>)
 c00716c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c00716e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 c007172:	61bb      	str	r3, [r7, #24]
 c007174:	e00f      	b.n	c007196 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#endif /* SRAM3_BASE */
  else if (IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c007176:	687b      	ldr	r3, [r7, #4]
 c007178:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c00717c:	d003      	beq.n	c007186 <HAL_GTZC_MPCBB_ConfigMem+0xd6>
 c00717e:	687b      	ldr	r3, [r7, #4]
 c007180:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c007184:	d105      	bne.n	c007192 <HAL_GTZC_MPCBB_ConfigMem+0xe2>
  {
    mpcbb_ptr = GTZC_MPCBB4;
 c007186:	4b35      	ldr	r3, [pc, #212]	@ (c00725c <HAL_GTZC_MPCBB_ConfigMem+0x1ac>)
 c007188:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM4);
 c00718a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 c00718e:	61bb      	str	r3, [r7, #24]
 c007190:	e001      	b.n	c007196 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
    mem_size = GTZC_MEM_SIZE(SRAM6);
  }
#endif /* SRAM6_BASE */
  else
  {
    return HAL_ERROR;
 c007192:	2301      	movs	r3, #1
 c007194:	e04e      	b.n	c007234 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c007196:	69bb      	ldr	r3, [r7, #24]
 c007198:	0b9b      	lsrs	r3, r3, #14
 c00719a:	613b      	str	r3, [r7, #16]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c00719c:	2300      	movs	r3, #0
 c00719e:	617b      	str	r3, [r7, #20]
 c0071a0:	e00c      	b.n	c0071bc <HAL_GTZC_MPCBB_ConfigMem+0x10c>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c0071a2:	683b      	ldr	r3, [r7, #0]
 c0071a4:	697a      	ldr	r2, [r7, #20]
 c0071a6:	3222      	adds	r2, #34	@ 0x22
 c0071a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0071ac:	69fb      	ldr	r3, [r7, #28]
 c0071ae:	697a      	ldr	r2, [r7, #20]
 c0071b0:	3280      	adds	r2, #128	@ 0x80
 c0071b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0071b6:	697b      	ldr	r3, [r7, #20]
 c0071b8:	3301      	adds	r3, #1
 c0071ba:	617b      	str	r3, [r7, #20]
 c0071bc:	697a      	ldr	r2, [r7, #20]
 c0071be:	693b      	ldr	r3, [r7, #16]
 c0071c0:	429a      	cmp	r2, r3
 c0071c2:	d3ee      	bcc.n	c0071a2 <HAL_GTZC_MPCBB_ConfigMem+0xf2>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c0071c4:	2300      	movs	r3, #0
 c0071c6:	617b      	str	r3, [r7, #20]
 c0071c8:	e00c      	b.n	c0071e4 <HAL_GTZC_MPCBB_ConfigMem+0x134>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c0071ca:	683b      	ldr	r3, [r7, #0]
 c0071cc:	697a      	ldr	r2, [r7, #20]
 c0071ce:	3202      	adds	r2, #2
 c0071d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0071d4:	69fb      	ldr	r3, [r7, #28]
 c0071d6:	697a      	ldr	r2, [r7, #20]
 c0071d8:	3240      	adds	r2, #64	@ 0x40
 c0071da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0071de:	697b      	ldr	r3, [r7, #20]
 c0071e0:	3301      	adds	r3, #1
 c0071e2:	617b      	str	r3, [r7, #20]
 c0071e4:	697a      	ldr	r2, [r7, #20]
 c0071e6:	693b      	ldr	r3, [r7, #16]
 c0071e8:	429a      	cmp	r2, r3
 c0071ea:	d3ee      	bcc.n	c0071ca <HAL_GTZC_MPCBB_ConfigMem+0x11a>
    MODIFY_REG(mpcbb_ptr->CFGLOCKR2, 0x000FFFFFUL, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[1]);
  }
  else
#endif /* GTZC_MPCBB_CFGLOCKR2_SPLCK32_Msk */
  {
    size_mask = (1UL << (size_in_superblocks & 0x1FU)) - 1U;
 c0071ec:	693b      	ldr	r3, [r7, #16]
 c0071ee:	f003 031f 	and.w	r3, r3, #31
 c0071f2:	2201      	movs	r2, #1
 c0071f4:	fa02 f303 	lsl.w	r3, r2, r3
 c0071f8:	3b01      	subs	r3, #1
 c0071fa:	60fb      	str	r3, [r7, #12]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0071fc:	69fb      	ldr	r3, [r7, #28]
 c0071fe:	691a      	ldr	r2, [r3, #16]
 c007200:	68fb      	ldr	r3, [r7, #12]
 c007202:	43db      	mvns	r3, r3
 c007204:	401a      	ands	r2, r3
 c007206:	683b      	ldr	r3, [r7, #0]
 c007208:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c00720c:	431a      	orrs	r2, r3
 c00720e:	69fb      	ldr	r3, [r7, #28]
 c007210:	611a      	str	r2, [r3, #16]

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c007212:	683b      	ldr	r3, [r7, #0]
 c007214:	685b      	ldr	r3, [r3, #4]
 c007216:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c007218:	683b      	ldr	r3, [r7, #0]
 c00721a:	681b      	ldr	r3, [r3, #0]
 c00721c:	68ba      	ldr	r2, [r7, #8]
 c00721e:	4313      	orrs	r3, r2
 c007220:	60bb      	str	r3, [r7, #8]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c007222:	69fb      	ldr	r3, [r7, #28]
 c007224:	681b      	ldr	r3, [r3, #0]
 c007226:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 c00722a:	68bb      	ldr	r3, [r7, #8]
 c00722c:	431a      	orrs	r2, r3
 c00722e:	69fb      	ldr	r3, [r7, #28]
 c007230:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c007232:	2300      	movs	r3, #0
}
 c007234:	4618      	mov	r0, r3
 c007236:	3724      	adds	r7, #36	@ 0x24
 c007238:	46bd      	mov	sp, r7
 c00723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00723e:	4770      	bx	lr
 c007240:	20030000 	.word	0x20030000
 c007244:	30030000 	.word	0x30030000
 c007248:	20040000 	.word	0x20040000
 c00724c:	30040000 	.word	0x30040000
 c007250:	50032c00 	.word	0x50032c00
 c007254:	50033000 	.word	0x50033000
 c007258:	50033400 	.word	0x50033400
 c00725c:	56023800 	.word	0x56023800

0c007260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 c007260:	b580      	push	{r7, lr}
 c007262:	b082      	sub	sp, #8
 c007264:	af00      	add	r7, sp, #0
 c007266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 c007268:	687b      	ldr	r3, [r7, #4]
 c00726a:	2b00      	cmp	r3, #0
 c00726c:	d101      	bne.n	c007272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 c00726e:	2301      	movs	r3, #1
 c007270:	e08d      	b.n	c00738e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 c007272:	687b      	ldr	r3, [r7, #4]
 c007274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 c007278:	b2db      	uxtb	r3, r3
 c00727a:	2b00      	cmp	r3, #0
 c00727c:	d106      	bne.n	c00728c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 c00727e:	687b      	ldr	r3, [r7, #4]
 c007280:	2200      	movs	r2, #0
 c007282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 c007286:	6878      	ldr	r0, [r7, #4]
 c007288:	f7fe fa02 	bl	c005690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 c00728c:	687b      	ldr	r3, [r7, #4]
 c00728e:	2224      	movs	r2, #36	@ 0x24
 c007290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 c007294:	687b      	ldr	r3, [r7, #4]
 c007296:	681b      	ldr	r3, [r3, #0]
 c007298:	681a      	ldr	r2, [r3, #0]
 c00729a:	687b      	ldr	r3, [r7, #4]
 c00729c:	681b      	ldr	r3, [r3, #0]
 c00729e:	f022 0201 	bic.w	r2, r2, #1
 c0072a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 c0072a4:	687b      	ldr	r3, [r7, #4]
 c0072a6:	685a      	ldr	r2, [r3, #4]
 c0072a8:	687b      	ldr	r3, [r7, #4]
 c0072aa:	681b      	ldr	r3, [r3, #0]
 c0072ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 c0072b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 c0072b2:	687b      	ldr	r3, [r7, #4]
 c0072b4:	681b      	ldr	r3, [r3, #0]
 c0072b6:	689a      	ldr	r2, [r3, #8]
 c0072b8:	687b      	ldr	r3, [r7, #4]
 c0072ba:	681b      	ldr	r3, [r3, #0]
 c0072bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 c0072c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 c0072c2:	687b      	ldr	r3, [r7, #4]
 c0072c4:	68db      	ldr	r3, [r3, #12]
 c0072c6:	2b01      	cmp	r3, #1
 c0072c8:	d107      	bne.n	c0072da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 c0072ca:	687b      	ldr	r3, [r7, #4]
 c0072cc:	689a      	ldr	r2, [r3, #8]
 c0072ce:	687b      	ldr	r3, [r7, #4]
 c0072d0:	681b      	ldr	r3, [r3, #0]
 c0072d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 c0072d6:	609a      	str	r2, [r3, #8]
 c0072d8:	e006      	b.n	c0072e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 c0072da:	687b      	ldr	r3, [r7, #4]
 c0072dc:	689a      	ldr	r2, [r3, #8]
 c0072de:	687b      	ldr	r3, [r7, #4]
 c0072e0:	681b      	ldr	r3, [r3, #0]
 c0072e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 c0072e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 c0072e8:	687b      	ldr	r3, [r7, #4]
 c0072ea:	68db      	ldr	r3, [r3, #12]
 c0072ec:	2b02      	cmp	r3, #2
 c0072ee:	d108      	bne.n	c007302 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 c0072f0:	687b      	ldr	r3, [r7, #4]
 c0072f2:	681b      	ldr	r3, [r3, #0]
 c0072f4:	685a      	ldr	r2, [r3, #4]
 c0072f6:	687b      	ldr	r3, [r7, #4]
 c0072f8:	681b      	ldr	r3, [r3, #0]
 c0072fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 c0072fe:	605a      	str	r2, [r3, #4]
 c007300:	e007      	b.n	c007312 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 c007302:	687b      	ldr	r3, [r7, #4]
 c007304:	681b      	ldr	r3, [r3, #0]
 c007306:	685a      	ldr	r2, [r3, #4]
 c007308:	687b      	ldr	r3, [r7, #4]
 c00730a:	681b      	ldr	r3, [r3, #0]
 c00730c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 c007310:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 c007312:	687b      	ldr	r3, [r7, #4]
 c007314:	681b      	ldr	r3, [r3, #0]
 c007316:	685b      	ldr	r3, [r3, #4]
 c007318:	687a      	ldr	r2, [r7, #4]
 c00731a:	6812      	ldr	r2, [r2, #0]
 c00731c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 c007320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 c007324:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 c007326:	687b      	ldr	r3, [r7, #4]
 c007328:	681b      	ldr	r3, [r3, #0]
 c00732a:	68da      	ldr	r2, [r3, #12]
 c00732c:	687b      	ldr	r3, [r7, #4]
 c00732e:	681b      	ldr	r3, [r3, #0]
 c007330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 c007334:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 c007336:	687b      	ldr	r3, [r7, #4]
 c007338:	691a      	ldr	r2, [r3, #16]
 c00733a:	687b      	ldr	r3, [r7, #4]
 c00733c:	695b      	ldr	r3, [r3, #20]
 c00733e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 c007342:	687b      	ldr	r3, [r7, #4]
 c007344:	699b      	ldr	r3, [r3, #24]
 c007346:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 c007348:	687b      	ldr	r3, [r7, #4]
 c00734a:	681b      	ldr	r3, [r3, #0]
 c00734c:	430a      	orrs	r2, r1
 c00734e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 c007350:	687b      	ldr	r3, [r7, #4]
 c007352:	69d9      	ldr	r1, [r3, #28]
 c007354:	687b      	ldr	r3, [r7, #4]
 c007356:	6a1a      	ldr	r2, [r3, #32]
 c007358:	687b      	ldr	r3, [r7, #4]
 c00735a:	681b      	ldr	r3, [r3, #0]
 c00735c:	430a      	orrs	r2, r1
 c00735e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 c007360:	687b      	ldr	r3, [r7, #4]
 c007362:	681b      	ldr	r3, [r3, #0]
 c007364:	681a      	ldr	r2, [r3, #0]
 c007366:	687b      	ldr	r3, [r7, #4]
 c007368:	681b      	ldr	r3, [r3, #0]
 c00736a:	f042 0201 	orr.w	r2, r2, #1
 c00736e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 c007370:	687b      	ldr	r3, [r7, #4]
 c007372:	2200      	movs	r2, #0
 c007374:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 c007376:	687b      	ldr	r3, [r7, #4]
 c007378:	2220      	movs	r2, #32
 c00737a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 c00737e:	687b      	ldr	r3, [r7, #4]
 c007380:	2200      	movs	r2, #0
 c007382:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 c007384:	687b      	ldr	r3, [r7, #4]
 c007386:	2200      	movs	r2, #0
 c007388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 c00738c:	2300      	movs	r3, #0
}
 c00738e:	4618      	mov	r0, r3
 c007390:	3708      	adds	r7, #8
 c007392:	46bd      	mov	sp, r7
 c007394:	bd80      	pop	{r7, pc}

0c007396 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 c007396:	b480      	push	{r7}
 c007398:	b083      	sub	sp, #12
 c00739a:	af00      	add	r7, sp, #0
 c00739c:	6078      	str	r0, [r7, #4]
 c00739e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 c0073a0:	687b      	ldr	r3, [r7, #4]
 c0073a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 c0073a6:	b2db      	uxtb	r3, r3
 c0073a8:	2b20      	cmp	r3, #32
 c0073aa:	d138      	bne.n	c00741e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c0073ac:	687b      	ldr	r3, [r7, #4]
 c0073ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 c0073b2:	2b01      	cmp	r3, #1
 c0073b4:	d101      	bne.n	c0073ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 c0073b6:	2302      	movs	r3, #2
 c0073b8:	e032      	b.n	c007420 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 c0073ba:	687b      	ldr	r3, [r7, #4]
 c0073bc:	2201      	movs	r2, #1
 c0073be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 c0073c2:	687b      	ldr	r3, [r7, #4]
 c0073c4:	2224      	movs	r2, #36	@ 0x24
 c0073c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 c0073ca:	687b      	ldr	r3, [r7, #4]
 c0073cc:	681b      	ldr	r3, [r3, #0]
 c0073ce:	681a      	ldr	r2, [r3, #0]
 c0073d0:	687b      	ldr	r3, [r7, #4]
 c0073d2:	681b      	ldr	r3, [r3, #0]
 c0073d4:	f022 0201 	bic.w	r2, r2, #1
 c0073d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 c0073da:	687b      	ldr	r3, [r7, #4]
 c0073dc:	681b      	ldr	r3, [r3, #0]
 c0073de:	681a      	ldr	r2, [r3, #0]
 c0073e0:	687b      	ldr	r3, [r7, #4]
 c0073e2:	681b      	ldr	r3, [r3, #0]
 c0073e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 c0073e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 c0073ea:	687b      	ldr	r3, [r7, #4]
 c0073ec:	681b      	ldr	r3, [r3, #0]
 c0073ee:	6819      	ldr	r1, [r3, #0]
 c0073f0:	687b      	ldr	r3, [r7, #4]
 c0073f2:	681b      	ldr	r3, [r3, #0]
 c0073f4:	683a      	ldr	r2, [r7, #0]
 c0073f6:	430a      	orrs	r2, r1
 c0073f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 c0073fa:	687b      	ldr	r3, [r7, #4]
 c0073fc:	681b      	ldr	r3, [r3, #0]
 c0073fe:	681a      	ldr	r2, [r3, #0]
 c007400:	687b      	ldr	r3, [r7, #4]
 c007402:	681b      	ldr	r3, [r3, #0]
 c007404:	f042 0201 	orr.w	r2, r2, #1
 c007408:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 c00740a:	687b      	ldr	r3, [r7, #4]
 c00740c:	2220      	movs	r2, #32
 c00740e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c007412:	687b      	ldr	r3, [r7, #4]
 c007414:	2200      	movs	r2, #0
 c007416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 c00741a:	2300      	movs	r3, #0
 c00741c:	e000      	b.n	c007420 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 c00741e:	2302      	movs	r3, #2
  }
}
 c007420:	4618      	mov	r0, r3
 c007422:	370c      	adds	r7, #12
 c007424:	46bd      	mov	sp, r7
 c007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00742a:	4770      	bx	lr

0c00742c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 c00742c:	b480      	push	{r7}
 c00742e:	b085      	sub	sp, #20
 c007430:	af00      	add	r7, sp, #0
 c007432:	6078      	str	r0, [r7, #4]
 c007434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 c007436:	687b      	ldr	r3, [r7, #4]
 c007438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 c00743c:	b2db      	uxtb	r3, r3
 c00743e:	2b20      	cmp	r3, #32
 c007440:	d139      	bne.n	c0074b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 c007442:	687b      	ldr	r3, [r7, #4]
 c007444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 c007448:	2b01      	cmp	r3, #1
 c00744a:	d101      	bne.n	c007450 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 c00744c:	2302      	movs	r3, #2
 c00744e:	e033      	b.n	c0074b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 c007450:	687b      	ldr	r3, [r7, #4]
 c007452:	2201      	movs	r2, #1
 c007454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 c007458:	687b      	ldr	r3, [r7, #4]
 c00745a:	2224      	movs	r2, #36	@ 0x24
 c00745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 c007460:	687b      	ldr	r3, [r7, #4]
 c007462:	681b      	ldr	r3, [r3, #0]
 c007464:	681a      	ldr	r2, [r3, #0]
 c007466:	687b      	ldr	r3, [r7, #4]
 c007468:	681b      	ldr	r3, [r3, #0]
 c00746a:	f022 0201 	bic.w	r2, r2, #1
 c00746e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 c007470:	687b      	ldr	r3, [r7, #4]
 c007472:	681b      	ldr	r3, [r3, #0]
 c007474:	681b      	ldr	r3, [r3, #0]
 c007476:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 c007478:	68fb      	ldr	r3, [r7, #12]
 c00747a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c00747e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 c007480:	683b      	ldr	r3, [r7, #0]
 c007482:	021b      	lsls	r3, r3, #8
 c007484:	68fa      	ldr	r2, [r7, #12]
 c007486:	4313      	orrs	r3, r2
 c007488:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 c00748a:	687b      	ldr	r3, [r7, #4]
 c00748c:	681b      	ldr	r3, [r3, #0]
 c00748e:	68fa      	ldr	r2, [r7, #12]
 c007490:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 c007492:	687b      	ldr	r3, [r7, #4]
 c007494:	681b      	ldr	r3, [r3, #0]
 c007496:	681a      	ldr	r2, [r3, #0]
 c007498:	687b      	ldr	r3, [r7, #4]
 c00749a:	681b      	ldr	r3, [r3, #0]
 c00749c:	f042 0201 	orr.w	r2, r2, #1
 c0074a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 c0074a2:	687b      	ldr	r3, [r7, #4]
 c0074a4:	2220      	movs	r2, #32
 c0074a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 c0074aa:	687b      	ldr	r3, [r7, #4]
 c0074ac:	2200      	movs	r2, #0
 c0074ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 c0074b2:	2300      	movs	r3, #0
 c0074b4:	e000      	b.n	c0074b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 c0074b6:	2302      	movs	r3, #2
  }
}
 c0074b8:	4618      	mov	r0, r3
 c0074ba:	3714      	adds	r7, #20
 c0074bc:	46bd      	mov	sp, r7
 c0074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0074c2:	4770      	bx	lr

0c0074c4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c0074c4:	b480      	push	{r7}
 c0074c6:	b085      	sub	sp, #20
 c0074c8:	af00      	add	r7, sp, #0
 c0074ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c0074cc:	2300      	movs	r3, #0
 c0074ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c0074d0:	4b0b      	ldr	r3, [pc, #44]	@ (c007500 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0074d2:	681b      	ldr	r3, [r3, #0]
 c0074d4:	f003 0301 	and.w	r3, r3, #1
 c0074d8:	2b00      	cmp	r3, #0
 c0074da:	d002      	beq.n	c0074e2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c0074dc:	2301      	movs	r3, #1
 c0074de:	73fb      	strb	r3, [r7, #15]
 c0074e0:	e007      	b.n	c0074f2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c0074e2:	4b07      	ldr	r3, [pc, #28]	@ (c007500 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0074e4:	681b      	ldr	r3, [r3, #0]
 c0074e6:	f023 0204 	bic.w	r2, r3, #4
 c0074ea:	4905      	ldr	r1, [pc, #20]	@ (c007500 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0074ec:	687b      	ldr	r3, [r7, #4]
 c0074ee:	4313      	orrs	r3, r2
 c0074f0:	600b      	str	r3, [r1, #0]
  }

  return status;
 c0074f2:	7bfb      	ldrb	r3, [r7, #15]
}
 c0074f4:	4618      	mov	r0, r3
 c0074f6:	3714      	adds	r7, #20
 c0074f8:	46bd      	mov	sp, r7
 c0074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0074fe:	4770      	bx	lr
 c007500:	50030400 	.word	0x50030400

0c007504 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c007504:	b480      	push	{r7}
 c007506:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c007508:	4b05      	ldr	r3, [pc, #20]	@ (c007520 <HAL_ICACHE_Enable+0x1c>)
 c00750a:	681b      	ldr	r3, [r3, #0]
 c00750c:	4a04      	ldr	r2, [pc, #16]	@ (c007520 <HAL_ICACHE_Enable+0x1c>)
 c00750e:	f043 0301 	orr.w	r3, r3, #1
 c007512:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c007514:	2300      	movs	r3, #0
}
 c007516:	4618      	mov	r0, r3
 c007518:	46bd      	mov	sp, r7
 c00751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00751e:	4770      	bx	lr
 c007520:	50030400 	.word	0x50030400

0c007524 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 c007524:	b580      	push	{r7, lr}
 c007526:	b084      	sub	sp, #16
 c007528:	af00      	add	r7, sp, #0
 c00752a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c00752c:	2300      	movs	r3, #0
 c00752e:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 c007530:	687b      	ldr	r3, [r7, #4]
 c007532:	2b00      	cmp	r3, #0
 c007534:	d102      	bne.n	c00753c <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 c007536:	2301      	movs	r3, #1
 c007538:	73fb      	strb	r3, [r7, #15]
 c00753a:	e141      	b.n	c0077c0 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 c00753c:	687b      	ldr	r3, [r7, #4]
 c00753e:	681b      	ldr	r3, [r3, #0]
 c007540:	4618      	mov	r0, r3
 c007542:	f000 f947 	bl	c0077d4 <MDF_GetHandleNumberFromInstance>
 c007546:	4603      	mov	r3, r0
 c007548:	4a86      	ldr	r2, [pc, #536]	@ (c007764 <HAL_MDF_Init+0x240>)
 c00754a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00754e:	2b00      	cmp	r3, #0
 c007550:	d002      	beq.n	c007558 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 c007552:	2301      	movs	r3, #1
 c007554:	73fb      	strb	r3, [r7, #15]
 c007556:	e133      	b.n	c0077c0 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 c007558:	6878      	ldr	r0, [r7, #4]
 c00755a:	f7fe f82f 	bl	c0055bc <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 c00755e:	4b82      	ldr	r3, [pc, #520]	@ (c007768 <HAL_MDF_Init+0x244>)
 c007560:	681b      	ldr	r3, [r3, #0]
 c007562:	2b00      	cmp	r3, #0
 c007564:	d11d      	bne.n	c0075a2 <HAL_MDF_Init+0x7e>
 c007566:	687b      	ldr	r3, [r7, #4]
 c007568:	681b      	ldr	r3, [r3, #0]
 c00756a:	4a80      	ldr	r2, [pc, #512]	@ (c00776c <HAL_MDF_Init+0x248>)
 c00756c:	4293      	cmp	r3, r2
 c00756e:	d023      	beq.n	c0075b8 <HAL_MDF_Init+0x94>
 c007570:	687b      	ldr	r3, [r7, #4]
 c007572:	681b      	ldr	r3, [r3, #0]
 c007574:	4a7e      	ldr	r2, [pc, #504]	@ (c007770 <HAL_MDF_Init+0x24c>)
 c007576:	4293      	cmp	r3, r2
 c007578:	d01e      	beq.n	c0075b8 <HAL_MDF_Init+0x94>
 c00757a:	687b      	ldr	r3, [r7, #4]
 c00757c:	681b      	ldr	r3, [r3, #0]
 c00757e:	4a7d      	ldr	r2, [pc, #500]	@ (c007774 <HAL_MDF_Init+0x250>)
 c007580:	4293      	cmp	r3, r2
 c007582:	d019      	beq.n	c0075b8 <HAL_MDF_Init+0x94>
 c007584:	687b      	ldr	r3, [r7, #4]
 c007586:	681b      	ldr	r3, [r3, #0]
 c007588:	4a7b      	ldr	r2, [pc, #492]	@ (c007778 <HAL_MDF_Init+0x254>)
 c00758a:	4293      	cmp	r3, r2
 c00758c:	d014      	beq.n	c0075b8 <HAL_MDF_Init+0x94>
 c00758e:	687b      	ldr	r3, [r7, #4]
 c007590:	681b      	ldr	r3, [r3, #0]
 c007592:	4a7a      	ldr	r2, [pc, #488]	@ (c00777c <HAL_MDF_Init+0x258>)
 c007594:	4293      	cmp	r3, r2
 c007596:	d00f      	beq.n	c0075b8 <HAL_MDF_Init+0x94>
 c007598:	687b      	ldr	r3, [r7, #4]
 c00759a:	681b      	ldr	r3, [r3, #0]
 c00759c:	4a78      	ldr	r2, [pc, #480]	@ (c007780 <HAL_MDF_Init+0x25c>)
 c00759e:	4293      	cmp	r3, r2
 c0075a0:	d00a      	beq.n	c0075b8 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 c0075a2:	4b78      	ldr	r3, [pc, #480]	@ (c007784 <HAL_MDF_Init+0x260>)
 c0075a4:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 c0075a6:	2b00      	cmp	r3, #0
 c0075a8:	f040 8090 	bne.w	c0076cc <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 c0075ac:	687b      	ldr	r3, [r7, #4]
 c0075ae:	681b      	ldr	r3, [r3, #0]
 c0075b0:	4a75      	ldr	r2, [pc, #468]	@ (c007788 <HAL_MDF_Init+0x264>)
 c0075b2:	4293      	cmp	r3, r2
 c0075b4:	f040 808a 	bne.w	c0076cc <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 c0075b8:	687b      	ldr	r3, [r7, #4]
 c0075ba:	681b      	ldr	r3, [r3, #0]
 c0075bc:	4a72      	ldr	r2, [pc, #456]	@ (c007788 <HAL_MDF_Init+0x264>)
 c0075be:	4293      	cmp	r3, r2
 c0075c0:	d101      	bne.n	c0075c6 <HAL_MDF_Init+0xa2>
 c0075c2:	4b72      	ldr	r3, [pc, #456]	@ (c00778c <HAL_MDF_Init+0x268>)
 c0075c4:	e000      	b.n	c0075c8 <HAL_MDF_Init+0xa4>
 c0075c6:	4b72      	ldr	r3, [pc, #456]	@ (c007790 <HAL_MDF_Init+0x26c>)
 c0075c8:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 c0075ca:	68bb      	ldr	r3, [r7, #8]
 c0075cc:	685b      	ldr	r3, [r3, #4]
 c0075ce:	2b00      	cmp	r3, #0
 c0075d0:	da02      	bge.n	c0075d8 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 c0075d2:	2301      	movs	r3, #1
 c0075d4:	73fb      	strb	r3, [r7, #15]
 c0075d6:	e079      	b.n	c0076cc <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 c0075d8:	687b      	ldr	r3, [r7, #4]
 c0075da:	681b      	ldr	r3, [r3, #0]
 c0075dc:	4a63      	ldr	r2, [pc, #396]	@ (c00776c <HAL_MDF_Init+0x248>)
 c0075de:	4293      	cmp	r3, r2
 c0075e0:	d018      	beq.n	c007614 <HAL_MDF_Init+0xf0>
 c0075e2:	687b      	ldr	r3, [r7, #4]
 c0075e4:	681b      	ldr	r3, [r3, #0]
 c0075e6:	4a62      	ldr	r2, [pc, #392]	@ (c007770 <HAL_MDF_Init+0x24c>)
 c0075e8:	4293      	cmp	r3, r2
 c0075ea:	d013      	beq.n	c007614 <HAL_MDF_Init+0xf0>
 c0075ec:	687b      	ldr	r3, [r7, #4]
 c0075ee:	681b      	ldr	r3, [r3, #0]
 c0075f0:	4a60      	ldr	r2, [pc, #384]	@ (c007774 <HAL_MDF_Init+0x250>)
 c0075f2:	4293      	cmp	r3, r2
 c0075f4:	d00e      	beq.n	c007614 <HAL_MDF_Init+0xf0>
 c0075f6:	687b      	ldr	r3, [r7, #4]
 c0075f8:	681b      	ldr	r3, [r3, #0]
 c0075fa:	4a5f      	ldr	r2, [pc, #380]	@ (c007778 <HAL_MDF_Init+0x254>)
 c0075fc:	4293      	cmp	r3, r2
 c0075fe:	d009      	beq.n	c007614 <HAL_MDF_Init+0xf0>
 c007600:	687b      	ldr	r3, [r7, #4]
 c007602:	681b      	ldr	r3, [r3, #0]
 c007604:	4a5d      	ldr	r2, [pc, #372]	@ (c00777c <HAL_MDF_Init+0x258>)
 c007606:	4293      	cmp	r3, r2
 c007608:	d004      	beq.n	c007614 <HAL_MDF_Init+0xf0>
 c00760a:	687b      	ldr	r3, [r7, #4]
 c00760c:	681b      	ldr	r3, [r3, #0]
 c00760e:	4a5c      	ldr	r2, [pc, #368]	@ (c007780 <HAL_MDF_Init+0x25c>)
 c007610:	4293      	cmp	r3, r2
 c007612:	d10d      	bne.n	c007630 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 c007614:	68bb      	ldr	r3, [r7, #8]
 c007616:	681b      	ldr	r3, [r3, #0]
 c007618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 c00761c:	68bb      	ldr	r3, [r7, #8]
 c00761e:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 c007620:	68bb      	ldr	r3, [r7, #8]
 c007622:	681a      	ldr	r2, [r3, #0]
 c007624:	687b      	ldr	r3, [r7, #4]
 c007626:	685b      	ldr	r3, [r3, #4]
 c007628:	011b      	lsls	r3, r3, #4
 c00762a:	431a      	orrs	r2, r3
 c00762c:	68bb      	ldr	r3, [r7, #8]
 c00762e:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 c007630:	68bb      	ldr	r3, [r7, #8]
 c007632:	2200      	movs	r2, #0
 c007634:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 c007636:	68bb      	ldr	r3, [r7, #8]
 c007638:	685a      	ldr	r2, [r3, #4]
 c00763a:	687b      	ldr	r3, [r7, #4]
 c00763c:	689b      	ldr	r3, [r3, #8]
 c00763e:	3b01      	subs	r3, #1
 c007640:	061b      	lsls	r3, r3, #24
 c007642:	431a      	orrs	r2, r3
 c007644:	68bb      	ldr	r3, [r7, #8]
 c007646:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 c007648:	687b      	ldr	r3, [r7, #4]
 c00764a:	7b1b      	ldrb	r3, [r3, #12]
 c00764c:	2b01      	cmp	r3, #1
 c00764e:	d137      	bne.n	c0076c0 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 c007650:	68bb      	ldr	r3, [r7, #8]
 c007652:	685a      	ldr	r2, [r3, #4]
 c007654:	687b      	ldr	r3, [r7, #4]
 c007656:	695b      	ldr	r3, [r3, #20]
 c007658:	3b01      	subs	r3, #1
 c00765a:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 c00765c:	687b      	ldr	r3, [r7, #4]
 c00765e:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 c007660:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 c007662:	687b      	ldr	r3, [r7, #4]
 c007664:	691b      	ldr	r3, [r3, #16]
 c007666:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 c007668:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 c00766a:	431a      	orrs	r2, r3
 c00766c:	68bb      	ldr	r3, [r7, #8]
 c00766e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 c007670:	687b      	ldr	r3, [r7, #4]
 c007672:	7e1b      	ldrb	r3, [r3, #24]
 c007674:	2b01      	cmp	r3, #1
 c007676:	d123      	bne.n	c0076c0 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 c007678:	687b      	ldr	r3, [r7, #4]
 c00767a:	681b      	ldr	r3, [r3, #0]
 c00767c:	4a3b      	ldr	r2, [pc, #236]	@ (c00776c <HAL_MDF_Init+0x248>)
 c00767e:	4293      	cmp	r3, r2
 c007680:	d012      	beq.n	c0076a8 <HAL_MDF_Init+0x184>
 c007682:	687b      	ldr	r3, [r7, #4]
 c007684:	681b      	ldr	r3, [r3, #0]
 c007686:	4a3a      	ldr	r2, [pc, #232]	@ (c007770 <HAL_MDF_Init+0x24c>)
 c007688:	4293      	cmp	r3, r2
 c00768a:	d00d      	beq.n	c0076a8 <HAL_MDF_Init+0x184>
 c00768c:	687b      	ldr	r3, [r7, #4]
 c00768e:	681b      	ldr	r3, [r3, #0]
 c007690:	4a38      	ldr	r2, [pc, #224]	@ (c007774 <HAL_MDF_Init+0x250>)
 c007692:	4293      	cmp	r3, r2
 c007694:	d008      	beq.n	c0076a8 <HAL_MDF_Init+0x184>
 c007696:	687b      	ldr	r3, [r7, #4]
 c007698:	681b      	ldr	r3, [r3, #0]
 c00769a:	4a37      	ldr	r2, [pc, #220]	@ (c007778 <HAL_MDF_Init+0x254>)
 c00769c:	4293      	cmp	r3, r2
 c00769e:	d003      	beq.n	c0076a8 <HAL_MDF_Init+0x184>
 c0076a0:	687b      	ldr	r3, [r7, #4]
 c0076a2:	681b      	ldr	r3, [r3, #0]
 c0076a4:	4a35      	ldr	r2, [pc, #212]	@ (c00777c <HAL_MDF_Init+0x258>)
 c0076a6:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 c0076a8:	68bb      	ldr	r3, [r7, #8]
 c0076aa:	685a      	ldr	r2, [r3, #4]
 c0076ac:	687b      	ldr	r3, [r7, #4]
 c0076ae:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 c0076b0:	687b      	ldr	r3, [r7, #4]
 c0076b2:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 c0076b4:	430b      	orrs	r3, r1
 c0076b6:	4313      	orrs	r3, r2
 c0076b8:	f043 0210 	orr.w	r2, r3, #16
 c0076bc:	68bb      	ldr	r3, [r7, #8]
 c0076be:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 c0076c0:	68bb      	ldr	r3, [r7, #8]
 c0076c2:	685b      	ldr	r3, [r3, #4]
 c0076c4:	f043 0201 	orr.w	r2, r3, #1
 c0076c8:	68bb      	ldr	r3, [r7, #8]
 c0076ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 c0076cc:	7bfb      	ldrb	r3, [r7, #15]
 c0076ce:	2b00      	cmp	r3, #0
 c0076d0:	d128      	bne.n	c007724 <HAL_MDF_Init+0x200>
 c0076d2:	687b      	ldr	r3, [r7, #4]
 c0076d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 c0076d8:	2b01      	cmp	r3, #1
 c0076da:	d123      	bne.n	c007724 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 c0076dc:	687b      	ldr	r3, [r7, #4]
 c0076de:	681b      	ldr	r3, [r3, #0]
 c0076e0:	681b      	ldr	r3, [r3, #0]
 c0076e2:	2b00      	cmp	r3, #0
 c0076e4:	da02      	bge.n	c0076ec <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 c0076e6:	2301      	movs	r3, #1
 c0076e8:	73fb      	strb	r3, [r7, #15]
 c0076ea:	e01b      	b.n	c007724 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 c0076ec:	687b      	ldr	r3, [r7, #4]
 c0076ee:	681b      	ldr	r3, [r3, #0]
 c0076f0:	2200      	movs	r2, #0
 c0076f2:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 c0076f4:	687b      	ldr	r3, [r7, #4]
 c0076f6:	681b      	ldr	r3, [r3, #0]
 c0076f8:	6819      	ldr	r1, [r3, #0]
 c0076fa:	687b      	ldr	r3, [r7, #4]
 c0076fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0076fe:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 c007700:	687b      	ldr	r3, [r7, #4]
 c007702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 c007704:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 c007706:	687b      	ldr	r3, [r7, #4]
 c007708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00770a:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 c00770c:	687b      	ldr	r3, [r7, #4]
 c00770e:	681b      	ldr	r3, [r3, #0]
 c007710:	430a      	orrs	r2, r1
 c007712:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 c007714:	687b      	ldr	r3, [r7, #4]
 c007716:	681b      	ldr	r3, [r3, #0]
 c007718:	681a      	ldr	r2, [r3, #0]
 c00771a:	687b      	ldr	r3, [r7, #4]
 c00771c:	681b      	ldr	r3, [r3, #0]
 c00771e:	f042 0201 	orr.w	r2, r2, #1
 c007722:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 c007724:	7bfb      	ldrb	r3, [r7, #15]
 c007726:	2b00      	cmp	r3, #0
 c007728:	d14a      	bne.n	c0077c0 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 c00772a:	687b      	ldr	r3, [r7, #4]
 c00772c:	681b      	ldr	r3, [r3, #0]
 c00772e:	685a      	ldr	r2, [r3, #4]
 c007730:	687b      	ldr	r3, [r7, #4]
 c007732:	681b      	ldr	r3, [r3, #0]
 c007734:	f022 021f 	bic.w	r2, r2, #31
 c007738:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 c00773a:	687b      	ldr	r3, [r7, #4]
 c00773c:	681b      	ldr	r3, [r3, #0]
 c00773e:	6859      	ldr	r1, [r3, #4]
 c007740:	687b      	ldr	r3, [r7, #4]
 c007742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c007744:	687b      	ldr	r3, [r7, #4]
 c007746:	681b      	ldr	r3, [r3, #0]
 c007748:	430a      	orrs	r2, r1
 c00774a:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 c00774c:	687b      	ldr	r3, [r7, #4]
 c00774e:	681b      	ldr	r3, [r3, #0]
 c007750:	4a0d      	ldr	r2, [pc, #52]	@ (c007788 <HAL_MDF_Init+0x264>)
 c007752:	4293      	cmp	r3, r2
 c007754:	d11e      	bne.n	c007794 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 c007756:	4b0b      	ldr	r3, [pc, #44]	@ (c007784 <HAL_MDF_Init+0x260>)
 c007758:	681b      	ldr	r3, [r3, #0]
 c00775a:	3301      	adds	r3, #1
 c00775c:	4a09      	ldr	r2, [pc, #36]	@ (c007784 <HAL_MDF_Init+0x260>)
 c00775e:	6013      	str	r3, [r2, #0]
 c007760:	e01d      	b.n	c00779e <HAL_MDF_Init+0x27a>
 c007762:	bf00      	nop
 c007764:	30000918 	.word	0x30000918
 c007768:	30000910 	.word	0x30000910
 c00776c:	50025080 	.word	0x50025080
 c007770:	50025100 	.word	0x50025100
 c007774:	50025180 	.word	0x50025180
 c007778:	50025200 	.word	0x50025200
 c00777c:	50025280 	.word	0x50025280
 c007780:	50025300 	.word	0x50025300
 c007784:	30000914 	.word	0x30000914
 c007788:	56024080 	.word	0x56024080
 c00778c:	56024000 	.word	0x56024000
 c007790:	50025000 	.word	0x50025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 c007794:	4b0d      	ldr	r3, [pc, #52]	@ (c0077cc <HAL_MDF_Init+0x2a8>)
 c007796:	681b      	ldr	r3, [r3, #0]
 c007798:	3301      	adds	r3, #1
 c00779a:	4a0c      	ldr	r2, [pc, #48]	@ (c0077cc <HAL_MDF_Init+0x2a8>)
 c00779c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 c00779e:	687b      	ldr	r3, [r7, #4]
 c0077a0:	681b      	ldr	r3, [r3, #0]
 c0077a2:	4618      	mov	r0, r3
 c0077a4:	f000 f816 	bl	c0077d4 <MDF_GetHandleNumberFromInstance>
 c0077a8:	4602      	mov	r2, r0
 c0077aa:	4909      	ldr	r1, [pc, #36]	@ (c0077d0 <HAL_MDF_Init+0x2ac>)
 c0077ac:	687b      	ldr	r3, [r7, #4]
 c0077ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 c0077b2:	687b      	ldr	r3, [r7, #4]
 c0077b4:	2200      	movs	r2, #0
 c0077b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 c0077b8:	687b      	ldr	r3, [r7, #4]
 c0077ba:	2201      	movs	r2, #1
 c0077bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 c0077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 c0077c2:	4618      	mov	r0, r3
 c0077c4:	3710      	adds	r7, #16
 c0077c6:	46bd      	mov	sp, r7
 c0077c8:	bd80      	pop	{r7, pc}
 c0077ca:	bf00      	nop
 c0077cc:	30000910 	.word	0x30000910
 c0077d0:	30000918 	.word	0x30000918

0c0077d4 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 c0077d4:	b480      	push	{r7}
 c0077d6:	b085      	sub	sp, #20
 c0077d8:	af00      	add	r7, sp, #0
 c0077da:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 c0077dc:	687b      	ldr	r3, [r7, #4]
 c0077de:	4a19      	ldr	r2, [pc, #100]	@ (c007844 <MDF_GetHandleNumberFromInstance+0x70>)
 c0077e0:	4293      	cmp	r3, r2
 c0077e2:	d102      	bne.n	c0077ea <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 c0077e4:	2300      	movs	r3, #0
 c0077e6:	60fb      	str	r3, [r7, #12]
 c0077e8:	e024      	b.n	c007834 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 c0077ea:	687b      	ldr	r3, [r7, #4]
 c0077ec:	4a16      	ldr	r2, [pc, #88]	@ (c007848 <MDF_GetHandleNumberFromInstance+0x74>)
 c0077ee:	4293      	cmp	r3, r2
 c0077f0:	d102      	bne.n	c0077f8 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 c0077f2:	2301      	movs	r3, #1
 c0077f4:	60fb      	str	r3, [r7, #12]
 c0077f6:	e01d      	b.n	c007834 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 c0077f8:	687b      	ldr	r3, [r7, #4]
 c0077fa:	4a14      	ldr	r2, [pc, #80]	@ (c00784c <MDF_GetHandleNumberFromInstance+0x78>)
 c0077fc:	4293      	cmp	r3, r2
 c0077fe:	d102      	bne.n	c007806 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 c007800:	2302      	movs	r3, #2
 c007802:	60fb      	str	r3, [r7, #12]
 c007804:	e016      	b.n	c007834 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 c007806:	687b      	ldr	r3, [r7, #4]
 c007808:	4a11      	ldr	r2, [pc, #68]	@ (c007850 <MDF_GetHandleNumberFromInstance+0x7c>)
 c00780a:	4293      	cmp	r3, r2
 c00780c:	d102      	bne.n	c007814 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 c00780e:	2303      	movs	r3, #3
 c007810:	60fb      	str	r3, [r7, #12]
 c007812:	e00f      	b.n	c007834 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 c007814:	687b      	ldr	r3, [r7, #4]
 c007816:	4a0f      	ldr	r2, [pc, #60]	@ (c007854 <MDF_GetHandleNumberFromInstance+0x80>)
 c007818:	4293      	cmp	r3, r2
 c00781a:	d102      	bne.n	c007822 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 c00781c:	2304      	movs	r3, #4
 c00781e:	60fb      	str	r3, [r7, #12]
 c007820:	e008      	b.n	c007834 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 c007822:	687b      	ldr	r3, [r7, #4]
 c007824:	4a0c      	ldr	r2, [pc, #48]	@ (c007858 <MDF_GetHandleNumberFromInstance+0x84>)
 c007826:	4293      	cmp	r3, r2
 c007828:	d102      	bne.n	c007830 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 c00782a:	2305      	movs	r3, #5
 c00782c:	60fb      	str	r3, [r7, #12]
 c00782e:	e001      	b.n	c007834 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 c007830:	2306      	movs	r3, #6
 c007832:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 c007834:	68fb      	ldr	r3, [r7, #12]
}
 c007836:	4618      	mov	r0, r3
 c007838:	3714      	adds	r7, #20
 c00783a:	46bd      	mov	sp, r7
 c00783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007840:	4770      	bx	lr
 c007842:	bf00      	nop
 c007844:	50025080 	.word	0x50025080
 c007848:	50025100 	.word	0x50025100
 c00784c:	50025180 	.word	0x50025180
 c007850:	50025200 	.word	0x50025200
 c007854:	50025280 	.word	0x50025280
 c007858:	50025300 	.word	0x50025300

0c00785c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 c00785c:	b480      	push	{r7}
 c00785e:	b083      	sub	sp, #12
 c007860:	af00      	add	r7, sp, #0
 c007862:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 c007864:	687b      	ldr	r3, [r7, #4]
 c007866:	681b      	ldr	r3, [r3, #0]
 c007868:	f043 0201 	orr.w	r2, r3, #1
 c00786c:	687b      	ldr	r3, [r7, #4]
 c00786e:	601a      	str	r2, [r3, #0]
}
 c007870:	bf00      	nop
 c007872:	370c      	adds	r7, #12
 c007874:	46bd      	mov	sp, r7
 c007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00787a:	4770      	bx	lr

0c00787c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 c00787c:	b580      	push	{r7, lr}
 c00787e:	b086      	sub	sp, #24
 c007880:	af02      	add	r7, sp, #8
 c007882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c007884:	2300      	movs	r3, #0
 c007886:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 c007888:	f7fe febc 	bl	c006604 <HAL_GetTick>
 c00788c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 c00788e:	687b      	ldr	r3, [r7, #4]
 c007890:	2b00      	cmp	r3, #0
 c007892:	d102      	bne.n	c00789a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 c007894:	2301      	movs	r3, #1
 c007896:	73fb      	strb	r3, [r7, #15]
 c007898:	e0a5      	b.n	c0079e6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 c00789a:	687b      	ldr	r3, [r7, #4]
 c00789c:	2200      	movs	r2, #0
 c00789e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 c0078a0:	687b      	ldr	r3, [r7, #4]
 c0078a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c0078a4:	2b00      	cmp	r3, #0
 c0078a6:	f040 809e 	bne.w	c0079e6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 c0078aa:	6878      	ldr	r0, [r7, #4]
 c0078ac:	f7fd ffaa 	bl	c005804 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 c0078b0:	f241 3188 	movw	r1, #5000	@ 0x1388
 c0078b4:	6878      	ldr	r0, [r7, #4]
 c0078b6:	f000 f912 	bl	c007ade <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 c0078ba:	687b      	ldr	r3, [r7, #4]
 c0078bc:	681b      	ldr	r3, [r3, #0]
 c0078be:	689a      	ldr	r2, [r3, #8]
 c0078c0:	4b4b      	ldr	r3, [pc, #300]	@ (c0079f0 <HAL_OSPI_Init+0x174>)
 c0078c2:	4013      	ands	r3, r2
 c0078c4:	687a      	ldr	r2, [r7, #4]
 c0078c6:	68d1      	ldr	r1, [r2, #12]
 c0078c8:	687a      	ldr	r2, [r7, #4]
 c0078ca:	6912      	ldr	r2, [r2, #16]
 c0078cc:	3a01      	subs	r2, #1
 c0078ce:	0412      	lsls	r2, r2, #16
 c0078d0:	4311      	orrs	r1, r2
 c0078d2:	687a      	ldr	r2, [r7, #4]
 c0078d4:	6952      	ldr	r2, [r2, #20]
 c0078d6:	3a01      	subs	r2, #1
 c0078d8:	0212      	lsls	r2, r2, #8
 c0078da:	4311      	orrs	r1, r2
 c0078dc:	687a      	ldr	r2, [r7, #4]
 c0078de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 c0078e0:	4311      	orrs	r1, r2
 c0078e2:	687a      	ldr	r2, [r7, #4]
 c0078e4:	69d2      	ldr	r2, [r2, #28]
 c0078e6:	4311      	orrs	r1, r2
 c0078e8:	687a      	ldr	r2, [r7, #4]
 c0078ea:	6812      	ldr	r2, [r2, #0]
 c0078ec:	430b      	orrs	r3, r1
 c0078ee:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 c0078f0:	687b      	ldr	r3, [r7, #4]
 c0078f2:	681b      	ldr	r3, [r3, #0]
 c0078f4:	68db      	ldr	r3, [r3, #12]
 c0078f6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 c0078fa:	687b      	ldr	r3, [r7, #4]
 c0078fc:	6a1a      	ldr	r2, [r3, #32]
 c0078fe:	687b      	ldr	r3, [r7, #4]
 c007900:	681b      	ldr	r3, [r3, #0]
 c007902:	430a      	orrs	r2, r1
 c007904:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 c007906:	687b      	ldr	r3, [r7, #4]
 c007908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00790a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 c00790c:	687b      	ldr	r3, [r7, #4]
 c00790e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 c007910:	687b      	ldr	r3, [r7, #4]
 c007912:	681b      	ldr	r3, [r3, #0]
 c007914:	430a      	orrs	r2, r1
 c007916:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 c007918:	687b      	ldr	r3, [r7, #4]
 c00791a:	681b      	ldr	r3, [r3, #0]
 c00791c:	687a      	ldr	r2, [r7, #4]
 c00791e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 c007920:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 c007922:	687b      	ldr	r3, [r7, #4]
 c007924:	681b      	ldr	r3, [r3, #0]
 c007926:	681b      	ldr	r3, [r3, #0]
 c007928:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 c00792c:	687b      	ldr	r3, [r7, #4]
 c00792e:	685b      	ldr	r3, [r3, #4]
 c007930:	3b01      	subs	r3, #1
 c007932:	021a      	lsls	r2, r3, #8
 c007934:	687b      	ldr	r3, [r7, #4]
 c007936:	681b      	ldr	r3, [r3, #0]
 c007938:	430a      	orrs	r2, r1
 c00793a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 c00793c:	687b      	ldr	r3, [r7, #4]
 c00793e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c007940:	9300      	str	r3, [sp, #0]
 c007942:	68bb      	ldr	r3, [r7, #8]
 c007944:	2200      	movs	r2, #0
 c007946:	2120      	movs	r1, #32
 c007948:	6878      	ldr	r0, [r7, #4]
 c00794a:	f000 fdcd 	bl	c0084e8 <OSPI_WaitFlagStateUntilTimeout>
 c00794e:	4603      	mov	r3, r0
 c007950:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 c007952:	7bfb      	ldrb	r3, [r7, #15]
 c007954:	2b00      	cmp	r3, #0
 c007956:	d146      	bne.n	c0079e6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 c007958:	687b      	ldr	r3, [r7, #4]
 c00795a:	681b      	ldr	r3, [r3, #0]
 c00795c:	68db      	ldr	r3, [r3, #12]
 c00795e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 c007962:	687b      	ldr	r3, [r7, #4]
 c007964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c007966:	1e5a      	subs	r2, r3, #1
 c007968:	687b      	ldr	r3, [r7, #4]
 c00796a:	681b      	ldr	r3, [r3, #0]
 c00796c:	430a      	orrs	r2, r1
 c00796e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 c007970:	687b      	ldr	r3, [r7, #4]
 c007972:	681b      	ldr	r3, [r3, #0]
 c007974:	681b      	ldr	r3, [r3, #0]
 c007976:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 c00797a:	687b      	ldr	r3, [r7, #4]
 c00797c:	689a      	ldr	r2, [r3, #8]
 c00797e:	687b      	ldr	r3, [r7, #4]
 c007980:	681b      	ldr	r3, [r3, #0]
 c007982:	430a      	orrs	r2, r1
 c007984:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 c007986:	687b      	ldr	r3, [r7, #4]
 c007988:	681b      	ldr	r3, [r3, #0]
 c00798a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c00798e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 c007992:	687b      	ldr	r3, [r7, #4]
 c007994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 c007996:	687b      	ldr	r3, [r7, #4]
 c007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00799a:	431a      	orrs	r2, r3
 c00799c:	687b      	ldr	r3, [r7, #4]
 c00799e:	681b      	ldr	r3, [r3, #0]
 c0079a0:	430a      	orrs	r2, r1
 c0079a2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 c0079a6:	687b      	ldr	r3, [r7, #4]
 c0079a8:	681b      	ldr	r3, [r3, #0]
 c0079aa:	681a      	ldr	r2, [r3, #0]
 c0079ac:	687b      	ldr	r3, [r7, #4]
 c0079ae:	681b      	ldr	r3, [r3, #0]
 c0079b0:	f042 0201 	orr.w	r2, r2, #1
 c0079b4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 c0079b6:	687b      	ldr	r3, [r7, #4]
 c0079b8:	699b      	ldr	r3, [r3, #24]
 c0079ba:	2b02      	cmp	r3, #2
 c0079bc:	d107      	bne.n	c0079ce <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 c0079be:	687b      	ldr	r3, [r7, #4]
 c0079c0:	681b      	ldr	r3, [r3, #0]
 c0079c2:	689a      	ldr	r2, [r3, #8]
 c0079c4:	687b      	ldr	r3, [r7, #4]
 c0079c6:	681b      	ldr	r3, [r3, #0]
 c0079c8:	f042 0202 	orr.w	r2, r2, #2
 c0079cc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 c0079ce:	687b      	ldr	r3, [r7, #4]
 c0079d0:	68db      	ldr	r3, [r3, #12]
 c0079d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c0079d6:	d103      	bne.n	c0079e0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 c0079d8:	687b      	ldr	r3, [r7, #4]
 c0079da:	2201      	movs	r2, #1
 c0079dc:	651a      	str	r2, [r3, #80]	@ 0x50
 c0079de:	e002      	b.n	c0079e6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 c0079e0:	687b      	ldr	r3, [r7, #4]
 c0079e2:	2202      	movs	r2, #2
 c0079e4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 c0079e6:	7bfb      	ldrb	r3, [r7, #15]
}
 c0079e8:	4618      	mov	r0, r3
 c0079ea:	3710      	adds	r7, #16
 c0079ec:	46bd      	mov	sp, r7
 c0079ee:	bd80      	pop	{r7, pc}
 c0079f0:	f8e0c0f4 	.word	0xf8e0c0f4

0c0079f4 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 c0079f4:	b580      	push	{r7, lr}
 c0079f6:	b088      	sub	sp, #32
 c0079f8:	af02      	add	r7, sp, #8
 c0079fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c0079fc:	2300      	movs	r3, #0
 c0079fe:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 c007a00:	f7fe fe00 	bl	c006604 <HAL_GetTick>
 c007a04:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 c007a06:	687b      	ldr	r3, [r7, #4]
 c007a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c007a0a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 c007a0c:	68fb      	ldr	r3, [r7, #12]
 c007a0e:	f003 0308 	and.w	r3, r3, #8
 c007a12:	2b00      	cmp	r3, #0
 c007a14:	d104      	bne.n	c007a20 <HAL_OSPI_Abort+0x2c>
 c007a16:	68fb      	ldr	r3, [r7, #12]
 c007a18:	f003 0304 	and.w	r3, r3, #4
 c007a1c:	2b00      	cmp	r3, #0
 c007a1e:	d052      	beq.n	c007ac6 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 c007a20:	687b      	ldr	r3, [r7, #4]
 c007a22:	681b      	ldr	r3, [r3, #0]
 c007a24:	681b      	ldr	r3, [r3, #0]
 c007a26:	f003 0304 	and.w	r3, r3, #4
 c007a2a:	2b00      	cmp	r3, #0
 c007a2c:	d014      	beq.n	c007a58 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 c007a2e:	687b      	ldr	r3, [r7, #4]
 c007a30:	681b      	ldr	r3, [r3, #0]
 c007a32:	681a      	ldr	r2, [r3, #0]
 c007a34:	687b      	ldr	r3, [r7, #4]
 c007a36:	681b      	ldr	r3, [r3, #0]
 c007a38:	f022 0204 	bic.w	r2, r2, #4
 c007a3c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 c007a3e:	687b      	ldr	r3, [r7, #4]
 c007a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c007a42:	4618      	mov	r0, r3
 c007a44:	f7fe ff76 	bl	c006934 <HAL_DMA_Abort>
 c007a48:	4603      	mov	r3, r0
 c007a4a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 c007a4c:	7dfb      	ldrb	r3, [r7, #23]
 c007a4e:	2b00      	cmp	r3, #0
 c007a50:	d002      	beq.n	c007a58 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 c007a52:	687b      	ldr	r3, [r7, #4]
 c007a54:	2204      	movs	r2, #4
 c007a56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c007a58:	687b      	ldr	r3, [r7, #4]
 c007a5a:	681b      	ldr	r3, [r3, #0]
 c007a5c:	6a1b      	ldr	r3, [r3, #32]
 c007a5e:	f003 0320 	and.w	r3, r3, #32
 c007a62:	2b00      	cmp	r3, #0
 c007a64:	d02b      	beq.n	c007abe <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 c007a66:	687b      	ldr	r3, [r7, #4]
 c007a68:	681b      	ldr	r3, [r3, #0]
 c007a6a:	681a      	ldr	r2, [r3, #0]
 c007a6c:	687b      	ldr	r3, [r7, #4]
 c007a6e:	681b      	ldr	r3, [r3, #0]
 c007a70:	f042 0202 	orr.w	r2, r2, #2
 c007a74:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 c007a76:	687b      	ldr	r3, [r7, #4]
 c007a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c007a7a:	9300      	str	r3, [sp, #0]
 c007a7c:	693b      	ldr	r3, [r7, #16]
 c007a7e:	2201      	movs	r2, #1
 c007a80:	2102      	movs	r1, #2
 c007a82:	6878      	ldr	r0, [r7, #4]
 c007a84:	f000 fd30 	bl	c0084e8 <OSPI_WaitFlagStateUntilTimeout>
 c007a88:	4603      	mov	r3, r0
 c007a8a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 c007a8c:	7dfb      	ldrb	r3, [r7, #23]
 c007a8e:	2b00      	cmp	r3, #0
 c007a90:	d11f      	bne.n	c007ad2 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 c007a92:	687b      	ldr	r3, [r7, #4]
 c007a94:	681b      	ldr	r3, [r3, #0]
 c007a96:	2202      	movs	r2, #2
 c007a98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 c007a9a:	687b      	ldr	r3, [r7, #4]
 c007a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c007a9e:	9300      	str	r3, [sp, #0]
 c007aa0:	693b      	ldr	r3, [r7, #16]
 c007aa2:	2200      	movs	r2, #0
 c007aa4:	2120      	movs	r1, #32
 c007aa6:	6878      	ldr	r0, [r7, #4]
 c007aa8:	f000 fd1e 	bl	c0084e8 <OSPI_WaitFlagStateUntilTimeout>
 c007aac:	4603      	mov	r3, r0
 c007aae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 c007ab0:	7dfb      	ldrb	r3, [r7, #23]
 c007ab2:	2b00      	cmp	r3, #0
 c007ab4:	d10d      	bne.n	c007ad2 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 c007ab6:	687b      	ldr	r3, [r7, #4]
 c007ab8:	2202      	movs	r2, #2
 c007aba:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c007abc:	e009      	b.n	c007ad2 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 c007abe:	687b      	ldr	r3, [r7, #4]
 c007ac0:	2202      	movs	r2, #2
 c007ac2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c007ac4:	e005      	b.n	c007ad2 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 c007ac6:	2301      	movs	r3, #1
 c007ac8:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 c007aca:	687b      	ldr	r3, [r7, #4]
 c007acc:	2210      	movs	r2, #16
 c007ace:	655a      	str	r2, [r3, #84]	@ 0x54
 c007ad0:	e000      	b.n	c007ad4 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 c007ad2:	bf00      	nop
  }

  /* Return function status */
  return status;
 c007ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 c007ad6:	4618      	mov	r0, r3
 c007ad8:	3718      	adds	r7, #24
 c007ada:	46bd      	mov	sp, r7
 c007adc:	bd80      	pop	{r7, pc}

0c007ade <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 c007ade:	b480      	push	{r7}
 c007ae0:	b083      	sub	sp, #12
 c007ae2:	af00      	add	r7, sp, #0
 c007ae4:	6078      	str	r0, [r7, #4]
 c007ae6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 c007ae8:	687b      	ldr	r3, [r7, #4]
 c007aea:	683a      	ldr	r2, [r7, #0]
 c007aec:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 c007aee:	2300      	movs	r3, #0
}
 c007af0:	4618      	mov	r0, r3
 c007af2:	370c      	adds	r7, #12
 c007af4:	46bd      	mov	sp, r7
 c007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007afa:	4770      	bx	lr

0c007afc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 c007afc:	b580      	push	{r7, lr}
 c007afe:	b094      	sub	sp, #80	@ 0x50
 c007b00:	af00      	add	r7, sp, #0
 c007b02:	60f8      	str	r0, [r7, #12]
 c007b04:	60b9      	str	r1, [r7, #8]
 c007b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c007b08:	2300      	movs	r3, #0
 c007b0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 c007b0e:	2300      	movs	r3, #0
 c007b10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 c007b14:	68fb      	ldr	r3, [r7, #12]
 c007b16:	681b      	ldr	r3, [r3, #0]
 c007b18:	4a9d      	ldr	r2, [pc, #628]	@ (c007d90 <HAL_OSPIM_Config+0x294>)
 c007b1a:	4293      	cmp	r3, r2
 c007b1c:	d105      	bne.n	c007b2a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 c007b1e:	2300      	movs	r3, #0
 c007b20:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 c007b22:	2301      	movs	r3, #1
 c007b24:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 c007b28:	e004      	b.n	c007b34 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 c007b2a:	2301      	movs	r3, #1
 c007b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 c007b2e:	2300      	movs	r3, #0
 c007b30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 c007b34:	2300      	movs	r3, #0
 c007b36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c007b3a:	e01d      	b.n	c007b78 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 c007b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 c007b40:	3301      	adds	r3, #1
 c007b42:	b2d8      	uxtb	r0, r3
 c007b44:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 c007b48:	f107 0114 	add.w	r1, r7, #20
 c007b4c:	4613      	mov	r3, r2
 c007b4e:	005b      	lsls	r3, r3, #1
 c007b50:	4413      	add	r3, r2
 c007b52:	00db      	lsls	r3, r3, #3
 c007b54:	440b      	add	r3, r1
 c007b56:	4619      	mov	r1, r3
 c007b58:	f000 fd06 	bl	c008568 <OSPIM_GetConfig>
 c007b5c:	4603      	mov	r3, r0
 c007b5e:	2b00      	cmp	r3, #0
 c007b60:	d005      	beq.n	c007b6e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 c007b62:	2301      	movs	r3, #1
 c007b64:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 c007b68:	68fb      	ldr	r3, [r7, #12]
 c007b6a:	2208      	movs	r2, #8
 c007b6c:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 c007b6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 c007b72:	3301      	adds	r3, #1
 c007b74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c007b78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 c007b7c:	2b01      	cmp	r3, #1
 c007b7e:	d9dd      	bls.n	c007b3c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 c007b80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 c007b84:	2b00      	cmp	r3, #0
 c007b86:	f040 84a2 	bne.w	c0084ce <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 c007b8a:	4b81      	ldr	r3, [pc, #516]	@ (c007d90 <HAL_OSPIM_Config+0x294>)
 c007b8c:	681b      	ldr	r3, [r3, #0]
 c007b8e:	f003 0301 	and.w	r3, r3, #1
 c007b92:	2b00      	cmp	r3, #0
 c007b94:	d00b      	beq.n	c007bae <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 c007b96:	4b7e      	ldr	r3, [pc, #504]	@ (c007d90 <HAL_OSPIM_Config+0x294>)
 c007b98:	681b      	ldr	r3, [r3, #0]
 c007b9a:	4a7d      	ldr	r2, [pc, #500]	@ (c007d90 <HAL_OSPIM_Config+0x294>)
 c007b9c:	f023 0301 	bic.w	r3, r3, #1
 c007ba0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 c007ba2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 c007ba6:	f043 0301 	orr.w	r3, r3, #1
 c007baa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 c007bae:	4b79      	ldr	r3, [pc, #484]	@ (c007d94 <HAL_OSPIM_Config+0x298>)
 c007bb0:	681b      	ldr	r3, [r3, #0]
 c007bb2:	f003 0301 	and.w	r3, r3, #1
 c007bb6:	2b00      	cmp	r3, #0
 c007bb8:	d00b      	beq.n	c007bd2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 c007bba:	4b76      	ldr	r3, [pc, #472]	@ (c007d94 <HAL_OSPIM_Config+0x298>)
 c007bbc:	681b      	ldr	r3, [r3, #0]
 c007bbe:	4a75      	ldr	r2, [pc, #468]	@ (c007d94 <HAL_OSPIM_Config+0x298>)
 c007bc0:	f023 0301 	bic.w	r3, r3, #1
 c007bc4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 c007bc6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 c007bca:	f043 0302 	orr.w	r3, r3, #2
 c007bce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 c007bd2:	4971      	ldr	r1, [pc, #452]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007bd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007bd6:	4613      	mov	r3, r2
 c007bd8:	005b      	lsls	r3, r3, #1
 c007bda:	4413      	add	r3, r2
 c007bdc:	00db      	lsls	r3, r3, #3
 c007bde:	3350      	adds	r3, #80	@ 0x50
 c007be0:	443b      	add	r3, r7
 c007be2:	3b34      	subs	r3, #52	@ 0x34
 c007be4:	681b      	ldr	r3, [r3, #0]
 c007be6:	3b01      	subs	r3, #1
 c007be8:	009b      	lsls	r3, r3, #2
 c007bea:	440b      	add	r3, r1
 c007bec:	6859      	ldr	r1, [r3, #4]
 c007bee:	486a      	ldr	r0, [pc, #424]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007bf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007bf2:	4613      	mov	r3, r2
 c007bf4:	005b      	lsls	r3, r3, #1
 c007bf6:	4413      	add	r3, r2
 c007bf8:	00db      	lsls	r3, r3, #3
 c007bfa:	3350      	adds	r3, #80	@ 0x50
 c007bfc:	443b      	add	r3, r7
 c007bfe:	3b34      	subs	r3, #52	@ 0x34
 c007c00:	681b      	ldr	r3, [r3, #0]
 c007c02:	3b01      	subs	r3, #1
 c007c04:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 c007c08:	009b      	lsls	r3, r3, #2
 c007c0a:	4403      	add	r3, r0
 c007c0c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 c007c0e:	4b62      	ldr	r3, [pc, #392]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007c10:	681b      	ldr	r3, [r3, #0]
 c007c12:	f003 0301 	and.w	r3, r3, #1
 c007c16:	2b00      	cmp	r3, #0
 c007c18:	f000 80c0 	beq.w	c007d9c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 c007c1c:	4b5e      	ldr	r3, [pc, #376]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007c1e:	681b      	ldr	r3, [r3, #0]
 c007c20:	4a5d      	ldr	r2, [pc, #372]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007c22:	f023 0301 	bic.w	r3, r3, #1
 c007c26:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 c007c28:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 c007c2c:	2b01      	cmp	r3, #1
 c007c2e:	f040 8162 	bne.w	c007ef6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 c007c32:	4959      	ldr	r1, [pc, #356]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007c34:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007c38:	4613      	mov	r3, r2
 c007c3a:	005b      	lsls	r3, r3, #1
 c007c3c:	4413      	add	r3, r2
 c007c3e:	00db      	lsls	r3, r3, #3
 c007c40:	3350      	adds	r3, #80	@ 0x50
 c007c42:	443b      	add	r3, r7
 c007c44:	3b3c      	subs	r3, #60	@ 0x3c
 c007c46:	681b      	ldr	r3, [r3, #0]
 c007c48:	3b01      	subs	r3, #1
 c007c4a:	009b      	lsls	r3, r3, #2
 c007c4c:	440b      	add	r3, r1
 c007c4e:	6859      	ldr	r1, [r3, #4]
 c007c50:	4851      	ldr	r0, [pc, #324]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007c52:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007c56:	4613      	mov	r3, r2
 c007c58:	005b      	lsls	r3, r3, #1
 c007c5a:	4413      	add	r3, r2
 c007c5c:	00db      	lsls	r3, r3, #3
 c007c5e:	3350      	adds	r3, #80	@ 0x50
 c007c60:	443b      	add	r3, r7
 c007c62:	3b3c      	subs	r3, #60	@ 0x3c
 c007c64:	681b      	ldr	r3, [r3, #0]
 c007c66:	3b01      	subs	r3, #1
 c007c68:	f041 0202 	orr.w	r2, r1, #2
 c007c6c:	009b      	lsls	r3, r3, #2
 c007c6e:	4403      	add	r3, r0
 c007c70:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 c007c72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007c76:	4613      	mov	r3, r2
 c007c78:	005b      	lsls	r3, r3, #1
 c007c7a:	4413      	add	r3, r2
 c007c7c:	00db      	lsls	r3, r3, #3
 c007c7e:	3350      	adds	r3, #80	@ 0x50
 c007c80:	443b      	add	r3, r7
 c007c82:	3b38      	subs	r3, #56	@ 0x38
 c007c84:	681b      	ldr	r3, [r3, #0]
 c007c86:	2b00      	cmp	r3, #0
 c007c88:	d01f      	beq.n	c007cca <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 c007c8a:	4943      	ldr	r1, [pc, #268]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007c8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007c90:	4613      	mov	r3, r2
 c007c92:	005b      	lsls	r3, r3, #1
 c007c94:	4413      	add	r3, r2
 c007c96:	00db      	lsls	r3, r3, #3
 c007c98:	3350      	adds	r3, #80	@ 0x50
 c007c9a:	443b      	add	r3, r7
 c007c9c:	3b38      	subs	r3, #56	@ 0x38
 c007c9e:	681b      	ldr	r3, [r3, #0]
 c007ca0:	3b01      	subs	r3, #1
 c007ca2:	009b      	lsls	r3, r3, #2
 c007ca4:	440b      	add	r3, r1
 c007ca6:	6859      	ldr	r1, [r3, #4]
 c007ca8:	483b      	ldr	r0, [pc, #236]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007caa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007cae:	4613      	mov	r3, r2
 c007cb0:	005b      	lsls	r3, r3, #1
 c007cb2:	4413      	add	r3, r2
 c007cb4:	00db      	lsls	r3, r3, #3
 c007cb6:	3350      	adds	r3, #80	@ 0x50
 c007cb8:	443b      	add	r3, r7
 c007cba:	3b38      	subs	r3, #56	@ 0x38
 c007cbc:	681b      	ldr	r3, [r3, #0]
 c007cbe:	3b01      	subs	r3, #1
 c007cc0:	f041 0220 	orr.w	r2, r1, #32
 c007cc4:	009b      	lsls	r3, r3, #2
 c007cc6:	4403      	add	r3, r0
 c007cc8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 c007cca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007cce:	4613      	mov	r3, r2
 c007cd0:	005b      	lsls	r3, r3, #1
 c007cd2:	4413      	add	r3, r2
 c007cd4:	00db      	lsls	r3, r3, #3
 c007cd6:	3350      	adds	r3, #80	@ 0x50
 c007cd8:	443b      	add	r3, r7
 c007cda:	3b30      	subs	r3, #48	@ 0x30
 c007cdc:	681b      	ldr	r3, [r3, #0]
 c007cde:	2b00      	cmp	r3, #0
 c007ce0:	d023      	beq.n	c007d2a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 c007ce2:	492d      	ldr	r1, [pc, #180]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007ce4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007ce8:	4613      	mov	r3, r2
 c007cea:	005b      	lsls	r3, r3, #1
 c007cec:	4413      	add	r3, r2
 c007cee:	00db      	lsls	r3, r3, #3
 c007cf0:	3350      	adds	r3, #80	@ 0x50
 c007cf2:	443b      	add	r3, r7
 c007cf4:	3b30      	subs	r3, #48	@ 0x30
 c007cf6:	681b      	ldr	r3, [r3, #0]
 c007cf8:	3b01      	subs	r3, #1
 c007cfa:	f003 0301 	and.w	r3, r3, #1
 c007cfe:	009b      	lsls	r3, r3, #2
 c007d00:	440b      	add	r3, r1
 c007d02:	6859      	ldr	r1, [r3, #4]
 c007d04:	4824      	ldr	r0, [pc, #144]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007d06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007d0a:	4613      	mov	r3, r2
 c007d0c:	005b      	lsls	r3, r3, #1
 c007d0e:	4413      	add	r3, r2
 c007d10:	00db      	lsls	r3, r3, #3
 c007d12:	3350      	adds	r3, #80	@ 0x50
 c007d14:	443b      	add	r3, r7
 c007d16:	3b30      	subs	r3, #48	@ 0x30
 c007d18:	681b      	ldr	r3, [r3, #0]
 c007d1a:	3b01      	subs	r3, #1
 c007d1c:	f003 0301 	and.w	r3, r3, #1
 c007d20:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 c007d24:	009b      	lsls	r3, r3, #2
 c007d26:	4403      	add	r3, r0
 c007d28:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 c007d2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007d2e:	4613      	mov	r3, r2
 c007d30:	005b      	lsls	r3, r3, #1
 c007d32:	4413      	add	r3, r2
 c007d34:	00db      	lsls	r3, r3, #3
 c007d36:	3350      	adds	r3, #80	@ 0x50
 c007d38:	443b      	add	r3, r7
 c007d3a:	3b2c      	subs	r3, #44	@ 0x2c
 c007d3c:	681b      	ldr	r3, [r3, #0]
 c007d3e:	2b00      	cmp	r3, #0
 c007d40:	f000 80d9 	beq.w	c007ef6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 c007d44:	4914      	ldr	r1, [pc, #80]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007d46:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007d4a:	4613      	mov	r3, r2
 c007d4c:	005b      	lsls	r3, r3, #1
 c007d4e:	4413      	add	r3, r2
 c007d50:	00db      	lsls	r3, r3, #3
 c007d52:	3350      	adds	r3, #80	@ 0x50
 c007d54:	443b      	add	r3, r7
 c007d56:	3b2c      	subs	r3, #44	@ 0x2c
 c007d58:	681b      	ldr	r3, [r3, #0]
 c007d5a:	3b01      	subs	r3, #1
 c007d5c:	f003 0301 	and.w	r3, r3, #1
 c007d60:	009b      	lsls	r3, r3, #2
 c007d62:	440b      	add	r3, r1
 c007d64:	6859      	ldr	r1, [r3, #4]
 c007d66:	480c      	ldr	r0, [pc, #48]	@ (c007d98 <HAL_OSPIM_Config+0x29c>)
 c007d68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007d6c:	4613      	mov	r3, r2
 c007d6e:	005b      	lsls	r3, r3, #1
 c007d70:	4413      	add	r3, r2
 c007d72:	00db      	lsls	r3, r3, #3
 c007d74:	3350      	adds	r3, #80	@ 0x50
 c007d76:	443b      	add	r3, r7
 c007d78:	3b2c      	subs	r3, #44	@ 0x2c
 c007d7a:	681b      	ldr	r3, [r3, #0]
 c007d7c:	3b01      	subs	r3, #1
 c007d7e:	f003 0301 	and.w	r3, r3, #1
 c007d82:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 c007d86:	009b      	lsls	r3, r3, #2
 c007d88:	4403      	add	r3, r0
 c007d8a:	605a      	str	r2, [r3, #4]
 c007d8c:	e0b3      	b.n	c007ef6 <HAL_OSPIM_Config+0x3fa>
 c007d8e:	bf00      	nop
 c007d90:	520d1400 	.word	0x520d1400
 c007d94:	520d2400 	.word	0x520d2400
 c007d98:	520c4000 	.word	0x520c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 c007d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007d9e:	4613      	mov	r3, r2
 c007da0:	005b      	lsls	r3, r3, #1
 c007da2:	4413      	add	r3, r2
 c007da4:	00db      	lsls	r3, r3, #3
 c007da6:	3350      	adds	r3, #80	@ 0x50
 c007da8:	443b      	add	r3, r7
 c007daa:	3b3c      	subs	r3, #60	@ 0x3c
 c007dac:	681b      	ldr	r3, [r3, #0]
 c007dae:	2b00      	cmp	r3, #0
 c007db0:	f000 80a1 	beq.w	c007ef6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 c007db4:	4995      	ldr	r1, [pc, #596]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007db6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007db8:	4613      	mov	r3, r2
 c007dba:	005b      	lsls	r3, r3, #1
 c007dbc:	4413      	add	r3, r2
 c007dbe:	00db      	lsls	r3, r3, #3
 c007dc0:	3350      	adds	r3, #80	@ 0x50
 c007dc2:	443b      	add	r3, r7
 c007dc4:	3b3c      	subs	r3, #60	@ 0x3c
 c007dc6:	681b      	ldr	r3, [r3, #0]
 c007dc8:	3b01      	subs	r3, #1
 c007dca:	009b      	lsls	r3, r3, #2
 c007dcc:	440b      	add	r3, r1
 c007dce:	6859      	ldr	r1, [r3, #4]
 c007dd0:	488e      	ldr	r0, [pc, #568]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007dd4:	4613      	mov	r3, r2
 c007dd6:	005b      	lsls	r3, r3, #1
 c007dd8:	4413      	add	r3, r2
 c007dda:	00db      	lsls	r3, r3, #3
 c007ddc:	3350      	adds	r3, #80	@ 0x50
 c007dde:	443b      	add	r3, r7
 c007de0:	3b3c      	subs	r3, #60	@ 0x3c
 c007de2:	681b      	ldr	r3, [r3, #0]
 c007de4:	3b01      	subs	r3, #1
 c007de6:	f021 0201 	bic.w	r2, r1, #1
 c007dea:	009b      	lsls	r3, r3, #2
 c007dec:	4403      	add	r3, r0
 c007dee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 c007df0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007df2:	4613      	mov	r3, r2
 c007df4:	005b      	lsls	r3, r3, #1
 c007df6:	4413      	add	r3, r2
 c007df8:	00db      	lsls	r3, r3, #3
 c007dfa:	3350      	adds	r3, #80	@ 0x50
 c007dfc:	443b      	add	r3, r7
 c007dfe:	3b38      	subs	r3, #56	@ 0x38
 c007e00:	681b      	ldr	r3, [r3, #0]
 c007e02:	2b00      	cmp	r3, #0
 c007e04:	d01d      	beq.n	c007e42 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 c007e06:	4981      	ldr	r1, [pc, #516]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007e0a:	4613      	mov	r3, r2
 c007e0c:	005b      	lsls	r3, r3, #1
 c007e0e:	4413      	add	r3, r2
 c007e10:	00db      	lsls	r3, r3, #3
 c007e12:	3350      	adds	r3, #80	@ 0x50
 c007e14:	443b      	add	r3, r7
 c007e16:	3b38      	subs	r3, #56	@ 0x38
 c007e18:	681b      	ldr	r3, [r3, #0]
 c007e1a:	3b01      	subs	r3, #1
 c007e1c:	009b      	lsls	r3, r3, #2
 c007e1e:	440b      	add	r3, r1
 c007e20:	6859      	ldr	r1, [r3, #4]
 c007e22:	487a      	ldr	r0, [pc, #488]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007e26:	4613      	mov	r3, r2
 c007e28:	005b      	lsls	r3, r3, #1
 c007e2a:	4413      	add	r3, r2
 c007e2c:	00db      	lsls	r3, r3, #3
 c007e2e:	3350      	adds	r3, #80	@ 0x50
 c007e30:	443b      	add	r3, r7
 c007e32:	3b38      	subs	r3, #56	@ 0x38
 c007e34:	681b      	ldr	r3, [r3, #0]
 c007e36:	3b01      	subs	r3, #1
 c007e38:	f021 0210 	bic.w	r2, r1, #16
 c007e3c:	009b      	lsls	r3, r3, #2
 c007e3e:	4403      	add	r3, r0
 c007e40:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 c007e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007e44:	4613      	mov	r3, r2
 c007e46:	005b      	lsls	r3, r3, #1
 c007e48:	4413      	add	r3, r2
 c007e4a:	00db      	lsls	r3, r3, #3
 c007e4c:	3350      	adds	r3, #80	@ 0x50
 c007e4e:	443b      	add	r3, r7
 c007e50:	3b30      	subs	r3, #48	@ 0x30
 c007e52:	681b      	ldr	r3, [r3, #0]
 c007e54:	2b00      	cmp	r3, #0
 c007e56:	d021      	beq.n	c007e9c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 c007e58:	496c      	ldr	r1, [pc, #432]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007e5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007e5c:	4613      	mov	r3, r2
 c007e5e:	005b      	lsls	r3, r3, #1
 c007e60:	4413      	add	r3, r2
 c007e62:	00db      	lsls	r3, r3, #3
 c007e64:	3350      	adds	r3, #80	@ 0x50
 c007e66:	443b      	add	r3, r7
 c007e68:	3b30      	subs	r3, #48	@ 0x30
 c007e6a:	681b      	ldr	r3, [r3, #0]
 c007e6c:	3b01      	subs	r3, #1
 c007e6e:	f003 0301 	and.w	r3, r3, #1
 c007e72:	009b      	lsls	r3, r3, #2
 c007e74:	440b      	add	r3, r1
 c007e76:	6859      	ldr	r1, [r3, #4]
 c007e78:	4864      	ldr	r0, [pc, #400]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007e7c:	4613      	mov	r3, r2
 c007e7e:	005b      	lsls	r3, r3, #1
 c007e80:	4413      	add	r3, r2
 c007e82:	00db      	lsls	r3, r3, #3
 c007e84:	3350      	adds	r3, #80	@ 0x50
 c007e86:	443b      	add	r3, r7
 c007e88:	3b30      	subs	r3, #48	@ 0x30
 c007e8a:	681b      	ldr	r3, [r3, #0]
 c007e8c:	3b01      	subs	r3, #1
 c007e8e:	f003 0301 	and.w	r3, r3, #1
 c007e92:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 c007e96:	009b      	lsls	r3, r3, #2
 c007e98:	4403      	add	r3, r0
 c007e9a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 c007e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007e9e:	4613      	mov	r3, r2
 c007ea0:	005b      	lsls	r3, r3, #1
 c007ea2:	4413      	add	r3, r2
 c007ea4:	00db      	lsls	r3, r3, #3
 c007ea6:	3350      	adds	r3, #80	@ 0x50
 c007ea8:	443b      	add	r3, r7
 c007eaa:	3b2c      	subs	r3, #44	@ 0x2c
 c007eac:	681b      	ldr	r3, [r3, #0]
 c007eae:	2b00      	cmp	r3, #0
 c007eb0:	d021      	beq.n	c007ef6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 c007eb2:	4956      	ldr	r1, [pc, #344]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007eb6:	4613      	mov	r3, r2
 c007eb8:	005b      	lsls	r3, r3, #1
 c007eba:	4413      	add	r3, r2
 c007ebc:	00db      	lsls	r3, r3, #3
 c007ebe:	3350      	adds	r3, #80	@ 0x50
 c007ec0:	443b      	add	r3, r7
 c007ec2:	3b2c      	subs	r3, #44	@ 0x2c
 c007ec4:	681b      	ldr	r3, [r3, #0]
 c007ec6:	3b01      	subs	r3, #1
 c007ec8:	f003 0301 	and.w	r3, r3, #1
 c007ecc:	009b      	lsls	r3, r3, #2
 c007ece:	440b      	add	r3, r1
 c007ed0:	6859      	ldr	r1, [r3, #4]
 c007ed2:	484e      	ldr	r0, [pc, #312]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007ed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c007ed6:	4613      	mov	r3, r2
 c007ed8:	005b      	lsls	r3, r3, #1
 c007eda:	4413      	add	r3, r2
 c007edc:	00db      	lsls	r3, r3, #3
 c007ede:	3350      	adds	r3, #80	@ 0x50
 c007ee0:	443b      	add	r3, r7
 c007ee2:	3b2c      	subs	r3, #44	@ 0x2c
 c007ee4:	681b      	ldr	r3, [r3, #0]
 c007ee6:	3b01      	subs	r3, #1
 c007ee8:	f003 0301 	and.w	r3, r3, #1
 c007eec:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 c007ef0:	009b      	lsls	r3, r3, #2
 c007ef2:	4403      	add	r3, r0
 c007ef4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 c007ef6:	68bb      	ldr	r3, [r7, #8]
 c007ef8:	6819      	ldr	r1, [r3, #0]
 c007efa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007efe:	4613      	mov	r3, r2
 c007f00:	005b      	lsls	r3, r3, #1
 c007f02:	4413      	add	r3, r2
 c007f04:	00db      	lsls	r3, r3, #3
 c007f06:	3350      	adds	r3, #80	@ 0x50
 c007f08:	443b      	add	r3, r7
 c007f0a:	3b3c      	subs	r3, #60	@ 0x3c
 c007f0c:	681b      	ldr	r3, [r3, #0]
 c007f0e:	4299      	cmp	r1, r3
 c007f10:	d03c      	beq.n	c007f8c <HAL_OSPIM_Config+0x490>
 c007f12:	68bb      	ldr	r3, [r7, #8]
 c007f14:	6899      	ldr	r1, [r3, #8]
 c007f16:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007f1a:	4613      	mov	r3, r2
 c007f1c:	005b      	lsls	r3, r3, #1
 c007f1e:	4413      	add	r3, r2
 c007f20:	00db      	lsls	r3, r3, #3
 c007f22:	3350      	adds	r3, #80	@ 0x50
 c007f24:	443b      	add	r3, r7
 c007f26:	3b34      	subs	r3, #52	@ 0x34
 c007f28:	681b      	ldr	r3, [r3, #0]
 c007f2a:	4299      	cmp	r1, r3
 c007f2c:	d02e      	beq.n	c007f8c <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 c007f2e:	68bb      	ldr	r3, [r7, #8]
 c007f30:	6859      	ldr	r1, [r3, #4]
 c007f32:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007f36:	4613      	mov	r3, r2
 c007f38:	005b      	lsls	r3, r3, #1
 c007f3a:	4413      	add	r3, r2
 c007f3c:	00db      	lsls	r3, r3, #3
 c007f3e:	3350      	adds	r3, #80	@ 0x50
 c007f40:	443b      	add	r3, r7
 c007f42:	3b38      	subs	r3, #56	@ 0x38
 c007f44:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 c007f46:	4299      	cmp	r1, r3
 c007f48:	d103      	bne.n	c007f52 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 c007f4a:	68bb      	ldr	r3, [r7, #8]
 c007f4c:	685b      	ldr	r3, [r3, #4]
 c007f4e:	2b00      	cmp	r3, #0
 c007f50:	d11c      	bne.n	c007f8c <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 c007f52:	68bb      	ldr	r3, [r7, #8]
 c007f54:	68d9      	ldr	r1, [r3, #12]
 c007f56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007f5a:	4613      	mov	r3, r2
 c007f5c:	005b      	lsls	r3, r3, #1
 c007f5e:	4413      	add	r3, r2
 c007f60:	00db      	lsls	r3, r3, #3
 c007f62:	3350      	adds	r3, #80	@ 0x50
 c007f64:	443b      	add	r3, r7
 c007f66:	3b30      	subs	r3, #48	@ 0x30
 c007f68:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 c007f6a:	4299      	cmp	r1, r3
 c007f6c:	d00e      	beq.n	c007f8c <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 c007f6e:	68bb      	ldr	r3, [r7, #8]
 c007f70:	6919      	ldr	r1, [r3, #16]
 c007f72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007f76:	4613      	mov	r3, r2
 c007f78:	005b      	lsls	r3, r3, #1
 c007f7a:	4413      	add	r3, r2
 c007f7c:	00db      	lsls	r3, r3, #3
 c007f7e:	3350      	adds	r3, #80	@ 0x50
 c007f80:	443b      	add	r3, r7
 c007f82:	3b2c      	subs	r3, #44	@ 0x2c
 c007f84:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 c007f86:	4299      	cmp	r1, r3
 c007f88:	f040 810e 	bne.w	c0081a8 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 c007f8c:	68bb      	ldr	r3, [r7, #8]
 c007f8e:	6819      	ldr	r1, [r3, #0]
 c007f90:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007f94:	4613      	mov	r3, r2
 c007f96:	005b      	lsls	r3, r3, #1
 c007f98:	4413      	add	r3, r2
 c007f9a:	00db      	lsls	r3, r3, #3
 c007f9c:	3350      	adds	r3, #80	@ 0x50
 c007f9e:	443b      	add	r3, r7
 c007fa0:	3b3c      	subs	r3, #60	@ 0x3c
 c007fa2:	681b      	ldr	r3, [r3, #0]
 c007fa4:	4299      	cmp	r1, r3
 c007fa6:	d133      	bne.n	c008010 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 c007fa8:	68bb      	ldr	r3, [r7, #8]
 c007faa:	6859      	ldr	r1, [r3, #4]
 c007fac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007fb0:	4613      	mov	r3, r2
 c007fb2:	005b      	lsls	r3, r3, #1
 c007fb4:	4413      	add	r3, r2
 c007fb6:	00db      	lsls	r3, r3, #3
 c007fb8:	3350      	adds	r3, #80	@ 0x50
 c007fba:	443b      	add	r3, r7
 c007fbc:	3b38      	subs	r3, #56	@ 0x38
 c007fbe:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 c007fc0:	4299      	cmp	r1, r3
 c007fc2:	d125      	bne.n	c008010 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 c007fc4:	68bb      	ldr	r3, [r7, #8]
 c007fc6:	68d9      	ldr	r1, [r3, #12]
 c007fc8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007fcc:	4613      	mov	r3, r2
 c007fce:	005b      	lsls	r3, r3, #1
 c007fd0:	4413      	add	r3, r2
 c007fd2:	00db      	lsls	r3, r3, #3
 c007fd4:	3350      	adds	r3, #80	@ 0x50
 c007fd6:	443b      	add	r3, r7
 c007fd8:	3b30      	subs	r3, #48	@ 0x30
 c007fda:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 c007fdc:	4299      	cmp	r1, r3
 c007fde:	d117      	bne.n	c008010 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 c007fe0:	68bb      	ldr	r3, [r7, #8]
 c007fe2:	6919      	ldr	r1, [r3, #16]
 c007fe4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c007fe8:	4613      	mov	r3, r2
 c007fea:	005b      	lsls	r3, r3, #1
 c007fec:	4413      	add	r3, r2
 c007fee:	00db      	lsls	r3, r3, #3
 c007ff0:	3350      	adds	r3, #80	@ 0x50
 c007ff2:	443b      	add	r3, r7
 c007ff4:	3b2c      	subs	r3, #44	@ 0x2c
 c007ff6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 c007ff8:	4299      	cmp	r1, r3
 c007ffa:	d109      	bne.n	c008010 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 c007ffc:	4b03      	ldr	r3, [pc, #12]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c007ffe:	681b      	ldr	r3, [r3, #0]
 c008000:	4a02      	ldr	r2, [pc, #8]	@ (c00800c <HAL_OSPIM_Config+0x510>)
 c008002:	f043 0301 	orr.w	r3, r3, #1
 c008006:	6013      	str	r3, [r2, #0]
 c008008:	e0ce      	b.n	c0081a8 <HAL_OSPIM_Config+0x6ac>
 c00800a:	bf00      	nop
 c00800c:	520c4000 	.word	0x520c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 c008010:	49a4      	ldr	r1, [pc, #656]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008012:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c008016:	4613      	mov	r3, r2
 c008018:	005b      	lsls	r3, r3, #1
 c00801a:	4413      	add	r3, r2
 c00801c:	00db      	lsls	r3, r3, #3
 c00801e:	3350      	adds	r3, #80	@ 0x50
 c008020:	443b      	add	r3, r7
 c008022:	3b3c      	subs	r3, #60	@ 0x3c
 c008024:	681b      	ldr	r3, [r3, #0]
 c008026:	3b01      	subs	r3, #1
 c008028:	009b      	lsls	r3, r3, #2
 c00802a:	440b      	add	r3, r1
 c00802c:	6859      	ldr	r1, [r3, #4]
 c00802e:	489d      	ldr	r0, [pc, #628]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008030:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c008034:	4613      	mov	r3, r2
 c008036:	005b      	lsls	r3, r3, #1
 c008038:	4413      	add	r3, r2
 c00803a:	00db      	lsls	r3, r3, #3
 c00803c:	3350      	adds	r3, #80	@ 0x50
 c00803e:	443b      	add	r3, r7
 c008040:	3b3c      	subs	r3, #60	@ 0x3c
 c008042:	681b      	ldr	r3, [r3, #0]
 c008044:	3b01      	subs	r3, #1
 c008046:	f021 0201 	bic.w	r2, r1, #1
 c00804a:	009b      	lsls	r3, r3, #2
 c00804c:	4403      	add	r3, r0
 c00804e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 c008050:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c008054:	4613      	mov	r3, r2
 c008056:	005b      	lsls	r3, r3, #1
 c008058:	4413      	add	r3, r2
 c00805a:	00db      	lsls	r3, r3, #3
 c00805c:	3350      	adds	r3, #80	@ 0x50
 c00805e:	443b      	add	r3, r7
 c008060:	3b38      	subs	r3, #56	@ 0x38
 c008062:	681b      	ldr	r3, [r3, #0]
 c008064:	2b00      	cmp	r3, #0
 c008066:	d01f      	beq.n	c0080a8 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 c008068:	498e      	ldr	r1, [pc, #568]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c00806a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c00806e:	4613      	mov	r3, r2
 c008070:	005b      	lsls	r3, r3, #1
 c008072:	4413      	add	r3, r2
 c008074:	00db      	lsls	r3, r3, #3
 c008076:	3350      	adds	r3, #80	@ 0x50
 c008078:	443b      	add	r3, r7
 c00807a:	3b38      	subs	r3, #56	@ 0x38
 c00807c:	681b      	ldr	r3, [r3, #0]
 c00807e:	3b01      	subs	r3, #1
 c008080:	009b      	lsls	r3, r3, #2
 c008082:	440b      	add	r3, r1
 c008084:	6859      	ldr	r1, [r3, #4]
 c008086:	4887      	ldr	r0, [pc, #540]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008088:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c00808c:	4613      	mov	r3, r2
 c00808e:	005b      	lsls	r3, r3, #1
 c008090:	4413      	add	r3, r2
 c008092:	00db      	lsls	r3, r3, #3
 c008094:	3350      	adds	r3, #80	@ 0x50
 c008096:	443b      	add	r3, r7
 c008098:	3b38      	subs	r3, #56	@ 0x38
 c00809a:	681b      	ldr	r3, [r3, #0]
 c00809c:	3b01      	subs	r3, #1
 c00809e:	f021 0210 	bic.w	r2, r1, #16
 c0080a2:	009b      	lsls	r3, r3, #2
 c0080a4:	4403      	add	r3, r0
 c0080a6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 c0080a8:	497e      	ldr	r1, [pc, #504]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c0080aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c0080ae:	4613      	mov	r3, r2
 c0080b0:	005b      	lsls	r3, r3, #1
 c0080b2:	4413      	add	r3, r2
 c0080b4:	00db      	lsls	r3, r3, #3
 c0080b6:	3350      	adds	r3, #80	@ 0x50
 c0080b8:	443b      	add	r3, r7
 c0080ba:	3b34      	subs	r3, #52	@ 0x34
 c0080bc:	681b      	ldr	r3, [r3, #0]
 c0080be:	3b01      	subs	r3, #1
 c0080c0:	009b      	lsls	r3, r3, #2
 c0080c2:	440b      	add	r3, r1
 c0080c4:	6859      	ldr	r1, [r3, #4]
 c0080c6:	4877      	ldr	r0, [pc, #476]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c0080c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c0080cc:	4613      	mov	r3, r2
 c0080ce:	005b      	lsls	r3, r3, #1
 c0080d0:	4413      	add	r3, r2
 c0080d2:	00db      	lsls	r3, r3, #3
 c0080d4:	3350      	adds	r3, #80	@ 0x50
 c0080d6:	443b      	add	r3, r7
 c0080d8:	3b34      	subs	r3, #52	@ 0x34
 c0080da:	681b      	ldr	r3, [r3, #0]
 c0080dc:	3b01      	subs	r3, #1
 c0080de:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 c0080e2:	009b      	lsls	r3, r3, #2
 c0080e4:	4403      	add	r3, r0
 c0080e6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 c0080e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c0080ec:	4613      	mov	r3, r2
 c0080ee:	005b      	lsls	r3, r3, #1
 c0080f0:	4413      	add	r3, r2
 c0080f2:	00db      	lsls	r3, r3, #3
 c0080f4:	3350      	adds	r3, #80	@ 0x50
 c0080f6:	443b      	add	r3, r7
 c0080f8:	3b30      	subs	r3, #48	@ 0x30
 c0080fa:	681b      	ldr	r3, [r3, #0]
 c0080fc:	2b00      	cmp	r3, #0
 c0080fe:	d023      	beq.n	c008148 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 c008100:	4968      	ldr	r1, [pc, #416]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008102:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c008106:	4613      	mov	r3, r2
 c008108:	005b      	lsls	r3, r3, #1
 c00810a:	4413      	add	r3, r2
 c00810c:	00db      	lsls	r3, r3, #3
 c00810e:	3350      	adds	r3, #80	@ 0x50
 c008110:	443b      	add	r3, r7
 c008112:	3b30      	subs	r3, #48	@ 0x30
 c008114:	681b      	ldr	r3, [r3, #0]
 c008116:	3b01      	subs	r3, #1
 c008118:	f003 0301 	and.w	r3, r3, #1
 c00811c:	009b      	lsls	r3, r3, #2
 c00811e:	440b      	add	r3, r1
 c008120:	6859      	ldr	r1, [r3, #4]
 c008122:	4860      	ldr	r0, [pc, #384]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008124:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c008128:	4613      	mov	r3, r2
 c00812a:	005b      	lsls	r3, r3, #1
 c00812c:	4413      	add	r3, r2
 c00812e:	00db      	lsls	r3, r3, #3
 c008130:	3350      	adds	r3, #80	@ 0x50
 c008132:	443b      	add	r3, r7
 c008134:	3b30      	subs	r3, #48	@ 0x30
 c008136:	681b      	ldr	r3, [r3, #0]
 c008138:	3b01      	subs	r3, #1
 c00813a:	f003 0301 	and.w	r3, r3, #1
 c00813e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 c008142:	009b      	lsls	r3, r3, #2
 c008144:	4403      	add	r3, r0
 c008146:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 c008148:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c00814c:	4613      	mov	r3, r2
 c00814e:	005b      	lsls	r3, r3, #1
 c008150:	4413      	add	r3, r2
 c008152:	00db      	lsls	r3, r3, #3
 c008154:	3350      	adds	r3, #80	@ 0x50
 c008156:	443b      	add	r3, r7
 c008158:	3b2c      	subs	r3, #44	@ 0x2c
 c00815a:	681b      	ldr	r3, [r3, #0]
 c00815c:	2b00      	cmp	r3, #0
 c00815e:	d023      	beq.n	c0081a8 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 c008160:	4950      	ldr	r1, [pc, #320]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008162:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c008166:	4613      	mov	r3, r2
 c008168:	005b      	lsls	r3, r3, #1
 c00816a:	4413      	add	r3, r2
 c00816c:	00db      	lsls	r3, r3, #3
 c00816e:	3350      	adds	r3, #80	@ 0x50
 c008170:	443b      	add	r3, r7
 c008172:	3b2c      	subs	r3, #44	@ 0x2c
 c008174:	681b      	ldr	r3, [r3, #0]
 c008176:	3b01      	subs	r3, #1
 c008178:	f003 0301 	and.w	r3, r3, #1
 c00817c:	009b      	lsls	r3, r3, #2
 c00817e:	440b      	add	r3, r1
 c008180:	6859      	ldr	r1, [r3, #4]
 c008182:	4848      	ldr	r0, [pc, #288]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008184:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 c008188:	4613      	mov	r3, r2
 c00818a:	005b      	lsls	r3, r3, #1
 c00818c:	4413      	add	r3, r2
 c00818e:	00db      	lsls	r3, r3, #3
 c008190:	3350      	adds	r3, #80	@ 0x50
 c008192:	443b      	add	r3, r7
 c008194:	3b2c      	subs	r3, #44	@ 0x2c
 c008196:	681b      	ldr	r3, [r3, #0]
 c008198:	3b01      	subs	r3, #1
 c00819a:	f003 0301 	and.w	r3, r3, #1
 c00819e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 c0081a2:	009b      	lsls	r3, r3, #2
 c0081a4:	4403      	add	r3, r0
 c0081a6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 c0081a8:	4a3e      	ldr	r2, [pc, #248]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c0081aa:	68bb      	ldr	r3, [r7, #8]
 c0081ac:	689b      	ldr	r3, [r3, #8]
 c0081ae:	3b01      	subs	r3, #1
 c0081b0:	009b      	lsls	r3, r3, #2
 c0081b2:	4413      	add	r3, r2
 c0081b4:	685b      	ldr	r3, [r3, #4]
 c0081b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 c0081ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0081bc:	025b      	lsls	r3, r3, #9
 c0081be:	431a      	orrs	r2, r3
 c0081c0:	4938      	ldr	r1, [pc, #224]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c0081c2:	68bb      	ldr	r3, [r7, #8]
 c0081c4:	689b      	ldr	r3, [r3, #8]
 c0081c6:	3b01      	subs	r3, #1
 c0081c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 c0081cc:	009b      	lsls	r3, r3, #2
 c0081ce:	440b      	add	r3, r1
 c0081d0:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 c0081d2:	68bb      	ldr	r3, [r7, #8]
 c0081d4:	695b      	ldr	r3, [r3, #20]
 c0081d6:	2b00      	cmp	r3, #0
 c0081d8:	d018      	beq.n	c00820c <HAL_OSPIM_Config+0x710>
 c0081da:	68bb      	ldr	r3, [r7, #8]
 c0081dc:	695b      	ldr	r3, [r3, #20]
 c0081de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c0081e2:	d813      	bhi.n	c00820c <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 c0081e4:	68bb      	ldr	r3, [r7, #8]
 c0081e6:	695b      	ldr	r3, [r3, #20]
 c0081e8:	1e5a      	subs	r2, r3, #1
 c0081ea:	4b2e      	ldr	r3, [pc, #184]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c0081ec:	681b      	ldr	r3, [r3, #0]
 c0081ee:	0c1b      	lsrs	r3, r3, #16
 c0081f0:	b2db      	uxtb	r3, r3
 c0081f2:	429a      	cmp	r2, r3
 c0081f4:	d90a      	bls.n	c00820c <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 c0081f6:	4b2b      	ldr	r3, [pc, #172]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c0081f8:	681b      	ldr	r3, [r3, #0]
 c0081fa:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 c0081fe:	68bb      	ldr	r3, [r7, #8]
 c008200:	695b      	ldr	r3, [r3, #20]
 c008202:	3b01      	subs	r3, #1
 c008204:	041b      	lsls	r3, r3, #16
 c008206:	4927      	ldr	r1, [pc, #156]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008208:	4313      	orrs	r3, r2
 c00820a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 c00820c:	4b25      	ldr	r3, [pc, #148]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c00820e:	681b      	ldr	r3, [r3, #0]
 c008210:	f003 0301 	and.w	r3, r3, #1
 c008214:	2b00      	cmp	r3, #0
 c008216:	f000 809a 	beq.w	c00834e <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 c00821a:	4a22      	ldr	r2, [pc, #136]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c00821c:	68bb      	ldr	r3, [r7, #8]
 c00821e:	681b      	ldr	r3, [r3, #0]
 c008220:	3b01      	subs	r3, #1
 c008222:	009b      	lsls	r3, r3, #2
 c008224:	4413      	add	r3, r2
 c008226:	685b      	ldr	r3, [r3, #4]
 c008228:	f023 0203 	bic.w	r2, r3, #3
 c00822c:	491d      	ldr	r1, [pc, #116]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c00822e:	68bb      	ldr	r3, [r7, #8]
 c008230:	681b      	ldr	r3, [r3, #0]
 c008232:	3b01      	subs	r3, #1
 c008234:	f042 0201 	orr.w	r2, r2, #1
 c008238:	009b      	lsls	r3, r3, #2
 c00823a:	440b      	add	r3, r1
 c00823c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 c00823e:	68bb      	ldr	r3, [r7, #8]
 c008240:	685b      	ldr	r3, [r3, #4]
 c008242:	2b00      	cmp	r3, #0
 c008244:	d011      	beq.n	c00826a <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 c008246:	4a17      	ldr	r2, [pc, #92]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008248:	68bb      	ldr	r3, [r7, #8]
 c00824a:	685b      	ldr	r3, [r3, #4]
 c00824c:	3b01      	subs	r3, #1
 c00824e:	009b      	lsls	r3, r3, #2
 c008250:	4413      	add	r3, r2
 c008252:	685b      	ldr	r3, [r3, #4]
 c008254:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 c008258:	4912      	ldr	r1, [pc, #72]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c00825a:	68bb      	ldr	r3, [r7, #8]
 c00825c:	685b      	ldr	r3, [r3, #4]
 c00825e:	3b01      	subs	r3, #1
 c008260:	f042 0210 	orr.w	r2, r2, #16
 c008264:	009b      	lsls	r3, r3, #2
 c008266:	440b      	add	r3, r1
 c008268:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 c00826a:	68bb      	ldr	r3, [r7, #8]
 c00826c:	68db      	ldr	r3, [r3, #12]
 c00826e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c008272:	2b00      	cmp	r3, #0
 c008274:	d018      	beq.n	c0082a8 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 c008276:	4a0b      	ldr	r2, [pc, #44]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c008278:	68bb      	ldr	r3, [r7, #8]
 c00827a:	68db      	ldr	r3, [r3, #12]
 c00827c:	3b01      	subs	r3, #1
 c00827e:	f003 0301 	and.w	r3, r3, #1
 c008282:	009b      	lsls	r3, r3, #2
 c008284:	4413      	add	r3, r2
 c008286:	685b      	ldr	r3, [r3, #4]
 c008288:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c00828c:	4905      	ldr	r1, [pc, #20]	@ (c0082a4 <HAL_OSPIM_Config+0x7a8>)
 c00828e:	68bb      	ldr	r3, [r7, #8]
 c008290:	68db      	ldr	r3, [r3, #12]
 c008292:	3b01      	subs	r3, #1
 c008294:	f003 0301 	and.w	r3, r3, #1
 c008298:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 c00829c:	009b      	lsls	r3, r3, #2
 c00829e:	440b      	add	r3, r1
 c0082a0:	605a      	str	r2, [r3, #4]
 c0082a2:	e01b      	b.n	c0082dc <HAL_OSPIM_Config+0x7e0>
 c0082a4:	520c4000 	.word	0x520c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 c0082a8:	68bb      	ldr	r3, [r7, #8]
 c0082aa:	68db      	ldr	r3, [r3, #12]
 c0082ac:	2b00      	cmp	r3, #0
 c0082ae:	d015      	beq.n	c0082dc <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 c0082b0:	4a8a      	ldr	r2, [pc, #552]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c0082b2:	68bb      	ldr	r3, [r7, #8]
 c0082b4:	68db      	ldr	r3, [r3, #12]
 c0082b6:	3b01      	subs	r3, #1
 c0082b8:	f003 0301 	and.w	r3, r3, #1
 c0082bc:	009b      	lsls	r3, r3, #2
 c0082be:	4413      	add	r3, r2
 c0082c0:	685b      	ldr	r3, [r3, #4]
 c0082c2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 c0082c6:	4985      	ldr	r1, [pc, #532]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c0082c8:	68bb      	ldr	r3, [r7, #8]
 c0082ca:	68db      	ldr	r3, [r3, #12]
 c0082cc:	3b01      	subs	r3, #1
 c0082ce:	f003 0301 	and.w	r3, r3, #1
 c0082d2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 c0082d6:	009b      	lsls	r3, r3, #2
 c0082d8:	440b      	add	r3, r1
 c0082da:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 c0082dc:	68bb      	ldr	r3, [r7, #8]
 c0082de:	691b      	ldr	r3, [r3, #16]
 c0082e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c0082e4:	2b00      	cmp	r3, #0
 c0082e6:	d016      	beq.n	c008316 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 c0082e8:	4a7c      	ldr	r2, [pc, #496]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c0082ea:	68bb      	ldr	r3, [r7, #8]
 c0082ec:	691b      	ldr	r3, [r3, #16]
 c0082ee:	3b01      	subs	r3, #1
 c0082f0:	f003 0301 	and.w	r3, r3, #1
 c0082f4:	009b      	lsls	r3, r3, #2
 c0082f6:	4413      	add	r3, r2
 c0082f8:	685b      	ldr	r3, [r3, #4]
 c0082fa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c0082fe:	4977      	ldr	r1, [pc, #476]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008300:	68bb      	ldr	r3, [r7, #8]
 c008302:	691b      	ldr	r3, [r3, #16]
 c008304:	3b01      	subs	r3, #1
 c008306:	f003 0301 	and.w	r3, r3, #1
 c00830a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 c00830e:	009b      	lsls	r3, r3, #2
 c008310:	440b      	add	r3, r1
 c008312:	605a      	str	r2, [r3, #4]
 c008314:	e0c3      	b.n	c00849e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 c008316:	68bb      	ldr	r3, [r7, #8]
 c008318:	691b      	ldr	r3, [r3, #16]
 c00831a:	2b00      	cmp	r3, #0
 c00831c:	f000 80bf 	beq.w	c00849e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 c008320:	4a6e      	ldr	r2, [pc, #440]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008322:	68bb      	ldr	r3, [r7, #8]
 c008324:	691b      	ldr	r3, [r3, #16]
 c008326:	3b01      	subs	r3, #1
 c008328:	f003 0301 	and.w	r3, r3, #1
 c00832c:	009b      	lsls	r3, r3, #2
 c00832e:	4413      	add	r3, r2
 c008330:	685b      	ldr	r3, [r3, #4]
 c008332:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 c008336:	4969      	ldr	r1, [pc, #420]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008338:	68bb      	ldr	r3, [r7, #8]
 c00833a:	691b      	ldr	r3, [r3, #16]
 c00833c:	3b01      	subs	r3, #1
 c00833e:	f003 0301 	and.w	r3, r3, #1
 c008342:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 c008346:	009b      	lsls	r3, r3, #2
 c008348:	440b      	add	r3, r1
 c00834a:	605a      	str	r2, [r3, #4]
 c00834c:	e0a7      	b.n	c00849e <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 c00834e:	4a63      	ldr	r2, [pc, #396]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008350:	68bb      	ldr	r3, [r7, #8]
 c008352:	681b      	ldr	r3, [r3, #0]
 c008354:	3b01      	subs	r3, #1
 c008356:	009b      	lsls	r3, r3, #2
 c008358:	4413      	add	r3, r2
 c00835a:	685b      	ldr	r3, [r3, #4]
 c00835c:	f023 0203 	bic.w	r2, r3, #3
 c008360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c008362:	005b      	lsls	r3, r3, #1
 c008364:	431a      	orrs	r2, r3
 c008366:	495d      	ldr	r1, [pc, #372]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008368:	68bb      	ldr	r3, [r7, #8]
 c00836a:	681b      	ldr	r3, [r3, #0]
 c00836c:	3b01      	subs	r3, #1
 c00836e:	f042 0201 	orr.w	r2, r2, #1
 c008372:	009b      	lsls	r3, r3, #2
 c008374:	440b      	add	r3, r1
 c008376:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 c008378:	68bb      	ldr	r3, [r7, #8]
 c00837a:	685b      	ldr	r3, [r3, #4]
 c00837c:	2b00      	cmp	r3, #0
 c00837e:	d014      	beq.n	c0083aa <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 c008380:	4a56      	ldr	r2, [pc, #344]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008382:	68bb      	ldr	r3, [r7, #8]
 c008384:	685b      	ldr	r3, [r3, #4]
 c008386:	3b01      	subs	r3, #1
 c008388:	009b      	lsls	r3, r3, #2
 c00838a:	4413      	add	r3, r2
 c00838c:	685b      	ldr	r3, [r3, #4]
 c00838e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 c008392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c008394:	015b      	lsls	r3, r3, #5
 c008396:	431a      	orrs	r2, r3
 c008398:	4950      	ldr	r1, [pc, #320]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c00839a:	68bb      	ldr	r3, [r7, #8]
 c00839c:	685b      	ldr	r3, [r3, #4]
 c00839e:	3b01      	subs	r3, #1
 c0083a0:	f042 0210 	orr.w	r2, r2, #16
 c0083a4:	009b      	lsls	r3, r3, #2
 c0083a6:	440b      	add	r3, r1
 c0083a8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 c0083aa:	68bb      	ldr	r3, [r7, #8]
 c0083ac:	68db      	ldr	r3, [r3, #12]
 c0083ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c0083b2:	2b00      	cmp	r3, #0
 c0083b4:	d019      	beq.n	c0083ea <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 c0083b6:	4a49      	ldr	r2, [pc, #292]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c0083b8:	68bb      	ldr	r3, [r7, #8]
 c0083ba:	68db      	ldr	r3, [r3, #12]
 c0083bc:	3b01      	subs	r3, #1
 c0083be:	f003 0301 	and.w	r3, r3, #1
 c0083c2:	009b      	lsls	r3, r3, #2
 c0083c4:	4413      	add	r3, r2
 c0083c6:	685b      	ldr	r3, [r3, #4]
 c0083c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c0083cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0083ce:	049b      	lsls	r3, r3, #18
 c0083d0:	431a      	orrs	r2, r3
 c0083d2:	4942      	ldr	r1, [pc, #264]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c0083d4:	68bb      	ldr	r3, [r7, #8]
 c0083d6:	68db      	ldr	r3, [r3, #12]
 c0083d8:	3b01      	subs	r3, #1
 c0083da:	f003 0301 	and.w	r3, r3, #1
 c0083de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 c0083e2:	009b      	lsls	r3, r3, #2
 c0083e4:	440b      	add	r3, r1
 c0083e6:	605a      	str	r2, [r3, #4]
 c0083e8:	e01c      	b.n	c008424 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 c0083ea:	68bb      	ldr	r3, [r7, #8]
 c0083ec:	68db      	ldr	r3, [r3, #12]
 c0083ee:	2b00      	cmp	r3, #0
 c0083f0:	d018      	beq.n	c008424 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 c0083f2:	4a3a      	ldr	r2, [pc, #232]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c0083f4:	68bb      	ldr	r3, [r7, #8]
 c0083f6:	68db      	ldr	r3, [r3, #12]
 c0083f8:	3b01      	subs	r3, #1
 c0083fa:	f003 0301 	and.w	r3, r3, #1
 c0083fe:	009b      	lsls	r3, r3, #2
 c008400:	4413      	add	r3, r2
 c008402:	685b      	ldr	r3, [r3, #4]
 c008404:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 c008408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c00840a:	069b      	lsls	r3, r3, #26
 c00840c:	431a      	orrs	r2, r3
 c00840e:	4933      	ldr	r1, [pc, #204]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008410:	68bb      	ldr	r3, [r7, #8]
 c008412:	68db      	ldr	r3, [r3, #12]
 c008414:	3b01      	subs	r3, #1
 c008416:	f003 0301 	and.w	r3, r3, #1
 c00841a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 c00841e:	009b      	lsls	r3, r3, #2
 c008420:	440b      	add	r3, r1
 c008422:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 c008424:	68bb      	ldr	r3, [r7, #8]
 c008426:	691b      	ldr	r3, [r3, #16]
 c008428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c00842c:	2b00      	cmp	r3, #0
 c00842e:	d019      	beq.n	c008464 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 c008430:	4a2a      	ldr	r2, [pc, #168]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c008432:	68bb      	ldr	r3, [r7, #8]
 c008434:	691b      	ldr	r3, [r3, #16]
 c008436:	3b01      	subs	r3, #1
 c008438:	f003 0301 	and.w	r3, r3, #1
 c00843c:	009b      	lsls	r3, r3, #2
 c00843e:	4413      	add	r3, r2
 c008440:	685b      	ldr	r3, [r3, #4]
 c008442:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c008446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c008448:	049b      	lsls	r3, r3, #18
 c00844a:	431a      	orrs	r2, r3
 c00844c:	4923      	ldr	r1, [pc, #140]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c00844e:	68bb      	ldr	r3, [r7, #8]
 c008450:	691b      	ldr	r3, [r3, #16]
 c008452:	3b01      	subs	r3, #1
 c008454:	f003 0301 	and.w	r3, r3, #1
 c008458:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 c00845c:	009b      	lsls	r3, r3, #2
 c00845e:	440b      	add	r3, r1
 c008460:	605a      	str	r2, [r3, #4]
 c008462:	e01c      	b.n	c00849e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 c008464:	68bb      	ldr	r3, [r7, #8]
 c008466:	691b      	ldr	r3, [r3, #16]
 c008468:	2b00      	cmp	r3, #0
 c00846a:	d018      	beq.n	c00849e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 c00846c:	4a1b      	ldr	r2, [pc, #108]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c00846e:	68bb      	ldr	r3, [r7, #8]
 c008470:	691b      	ldr	r3, [r3, #16]
 c008472:	3b01      	subs	r3, #1
 c008474:	f003 0301 	and.w	r3, r3, #1
 c008478:	009b      	lsls	r3, r3, #2
 c00847a:	4413      	add	r3, r2
 c00847c:	685b      	ldr	r3, [r3, #4]
 c00847e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 c008482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c008484:	069b      	lsls	r3, r3, #26
 c008486:	431a      	orrs	r2, r3
 c008488:	4914      	ldr	r1, [pc, #80]	@ (c0084dc <HAL_OSPIM_Config+0x9e0>)
 c00848a:	68bb      	ldr	r3, [r7, #8]
 c00848c:	691b      	ldr	r3, [r3, #16]
 c00848e:	3b01      	subs	r3, #1
 c008490:	f003 0301 	and.w	r3, r3, #1
 c008494:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 c008498:	009b      	lsls	r3, r3, #2
 c00849a:	440b      	add	r3, r1
 c00849c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 c00849e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 c0084a2:	f003 0301 	and.w	r3, r3, #1
 c0084a6:	2b00      	cmp	r3, #0
 c0084a8:	d005      	beq.n	c0084b6 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 c0084aa:	4b0d      	ldr	r3, [pc, #52]	@ (c0084e0 <HAL_OSPIM_Config+0x9e4>)
 c0084ac:	681b      	ldr	r3, [r3, #0]
 c0084ae:	4a0c      	ldr	r2, [pc, #48]	@ (c0084e0 <HAL_OSPIM_Config+0x9e4>)
 c0084b0:	f043 0301 	orr.w	r3, r3, #1
 c0084b4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 c0084b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 c0084ba:	f003 0302 	and.w	r3, r3, #2
 c0084be:	2b00      	cmp	r3, #0
 c0084c0:	d005      	beq.n	c0084ce <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 c0084c2:	4b08      	ldr	r3, [pc, #32]	@ (c0084e4 <HAL_OSPIM_Config+0x9e8>)
 c0084c4:	681b      	ldr	r3, [r3, #0]
 c0084c6:	4a07      	ldr	r2, [pc, #28]	@ (c0084e4 <HAL_OSPIM_Config+0x9e8>)
 c0084c8:	f043 0301 	orr.w	r3, r3, #1
 c0084cc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 c0084ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 c0084d2:	4618      	mov	r0, r3
 c0084d4:	3750      	adds	r7, #80	@ 0x50
 c0084d6:	46bd      	mov	sp, r7
 c0084d8:	bd80      	pop	{r7, pc}
 c0084da:	bf00      	nop
 c0084dc:	520c4000 	.word	0x520c4000
 c0084e0:	520d1400 	.word	0x520d1400
 c0084e4:	520d2400 	.word	0x520d2400

0c0084e8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 c0084e8:	b580      	push	{r7, lr}
 c0084ea:	b084      	sub	sp, #16
 c0084ec:	af00      	add	r7, sp, #0
 c0084ee:	60f8      	str	r0, [r7, #12]
 c0084f0:	60b9      	str	r1, [r7, #8]
 c0084f2:	603b      	str	r3, [r7, #0]
 c0084f4:	4613      	mov	r3, r2
 c0084f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 c0084f8:	e022      	b.n	c008540 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c0084fa:	69bb      	ldr	r3, [r7, #24]
 c0084fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 c008500:	d01e      	beq.n	c008540 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c008502:	f7fe f87f 	bl	c006604 <HAL_GetTick>
 c008506:	4602      	mov	r2, r0
 c008508:	683b      	ldr	r3, [r7, #0]
 c00850a:	1ad3      	subs	r3, r2, r3
 c00850c:	69ba      	ldr	r2, [r7, #24]
 c00850e:	429a      	cmp	r2, r3
 c008510:	d302      	bcc.n	c008518 <OSPI_WaitFlagStateUntilTimeout+0x30>
 c008512:	69bb      	ldr	r3, [r7, #24]
 c008514:	2b00      	cmp	r3, #0
 c008516:	d113      	bne.n	c008540 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 c008518:	68fb      	ldr	r3, [r7, #12]
 c00851a:	681b      	ldr	r3, [r3, #0]
 c00851c:	6a1a      	ldr	r2, [r3, #32]
 c00851e:	68bb      	ldr	r3, [r7, #8]
 c008520:	401a      	ands	r2, r3
 c008522:	79fb      	ldrb	r3, [r7, #7]
 c008524:	429a      	cmp	r2, r3
 c008526:	d00b      	beq.n	c008540 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 c008528:	68fb      	ldr	r3, [r7, #12]
 c00852a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 c00852e:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 c008530:	68fb      	ldr	r3, [r7, #12]
 c008532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c008534:	f043 0201 	orr.w	r2, r3, #1
 c008538:	68fb      	ldr	r3, [r7, #12]
 c00853a:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 c00853c:	2301      	movs	r3, #1
 c00853e:	e00e      	b.n	c00855e <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 c008540:	68fb      	ldr	r3, [r7, #12]
 c008542:	681b      	ldr	r3, [r3, #0]
 c008544:	6a1a      	ldr	r2, [r3, #32]
 c008546:	68bb      	ldr	r3, [r7, #8]
 c008548:	4013      	ands	r3, r2
 c00854a:	2b00      	cmp	r3, #0
 c00854c:	bf14      	ite	ne
 c00854e:	2301      	movne	r3, #1
 c008550:	2300      	moveq	r3, #0
 c008552:	b2db      	uxtb	r3, r3
 c008554:	461a      	mov	r2, r3
 c008556:	79fb      	ldrb	r3, [r7, #7]
 c008558:	429a      	cmp	r2, r3
 c00855a:	d1ce      	bne.n	c0084fa <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c00855c:	2300      	movs	r3, #0
}
 c00855e:	4618      	mov	r0, r3
 c008560:	3710      	adds	r7, #16
 c008562:	46bd      	mov	sp, r7
 c008564:	bd80      	pop	{r7, pc}
	...

0c008568 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 c008568:	b480      	push	{r7}
 c00856a:	b087      	sub	sp, #28
 c00856c:	af00      	add	r7, sp, #0
 c00856e:	4603      	mov	r3, r0
 c008570:	6039      	str	r1, [r7, #0]
 c008572:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 c008574:	2300      	movs	r3, #0
 c008576:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 c008578:	2300      	movs	r3, #0
 c00857a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 c00857c:	79fb      	ldrb	r3, [r7, #7]
 c00857e:	2b00      	cmp	r3, #0
 c008580:	d005      	beq.n	c00858e <OSPIM_GetConfig+0x26>
 c008582:	79fb      	ldrb	r3, [r7, #7]
 c008584:	2b02      	cmp	r3, #2
 c008586:	d802      	bhi.n	c00858e <OSPIM_GetConfig+0x26>
 c008588:	683b      	ldr	r3, [r7, #0]
 c00858a:	2b00      	cmp	r3, #0
 c00858c:	d102      	bne.n	c008594 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 c00858e:	2301      	movs	r3, #1
 c008590:	75fb      	strb	r3, [r7, #23]
 c008592:	e098      	b.n	c0086c6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 c008594:	683b      	ldr	r3, [r7, #0]
 c008596:	2200      	movs	r2, #0
 c008598:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 c00859a:	683b      	ldr	r3, [r7, #0]
 c00859c:	2200      	movs	r2, #0
 c00859e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 c0085a0:	683b      	ldr	r3, [r7, #0]
 c0085a2:	2200      	movs	r2, #0
 c0085a4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 c0085a6:	683b      	ldr	r3, [r7, #0]
 c0085a8:	2200      	movs	r2, #0
 c0085aa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 c0085ac:	683b      	ldr	r3, [r7, #0]
 c0085ae:	2200      	movs	r2, #0
 c0085b0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 c0085b2:	79fb      	ldrb	r3, [r7, #7]
 c0085b4:	2b02      	cmp	r3, #2
 c0085b6:	d10b      	bne.n	c0085d0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 c0085b8:	4b46      	ldr	r3, [pc, #280]	@ (c0086d4 <OSPIM_GetConfig+0x16c>)
 c0085ba:	681b      	ldr	r3, [r3, #0]
 c0085bc:	f003 0301 	and.w	r3, r3, #1
 c0085c0:	2b00      	cmp	r3, #0
 c0085c2:	d102      	bne.n	c0085ca <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 c0085c4:	4b44      	ldr	r3, [pc, #272]	@ (c0086d8 <OSPIM_GetConfig+0x170>)
 c0085c6:	613b      	str	r3, [r7, #16]
 c0085c8:	e002      	b.n	c0085d0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 c0085ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 c0085ce:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 c0085d0:	2300      	movs	r3, #0
 c0085d2:	60fb      	str	r3, [r7, #12]
 c0085d4:	e074      	b.n	c0086c0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 c0085d6:	4a3f      	ldr	r2, [pc, #252]	@ (c0086d4 <OSPIM_GetConfig+0x16c>)
 c0085d8:	68fb      	ldr	r3, [r7, #12]
 c0085da:	009b      	lsls	r3, r3, #2
 c0085dc:	4413      	add	r3, r2
 c0085de:	685b      	ldr	r3, [r3, #4]
 c0085e0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 c0085e2:	68bb      	ldr	r3, [r7, #8]
 c0085e4:	f003 0301 	and.w	r3, r3, #1
 c0085e8:	2b00      	cmp	r3, #0
 c0085ea:	d00a      	beq.n	c008602 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 c0085ec:	68ba      	ldr	r2, [r7, #8]
 c0085ee:	693b      	ldr	r3, [r7, #16]
 c0085f0:	4053      	eors	r3, r2
 c0085f2:	f003 0302 	and.w	r3, r3, #2
 c0085f6:	2b00      	cmp	r3, #0
 c0085f8:	d103      	bne.n	c008602 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 c0085fa:	68fb      	ldr	r3, [r7, #12]
 c0085fc:	1c5a      	adds	r2, r3, #1
 c0085fe:	683b      	ldr	r3, [r7, #0]
 c008600:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 c008602:	68bb      	ldr	r3, [r7, #8]
 c008604:	f003 0310 	and.w	r3, r3, #16
 c008608:	2b00      	cmp	r3, #0
 c00860a:	d00a      	beq.n	c008622 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 c00860c:	68ba      	ldr	r2, [r7, #8]
 c00860e:	693b      	ldr	r3, [r7, #16]
 c008610:	4053      	eors	r3, r2
 c008612:	f003 0320 	and.w	r3, r3, #32
 c008616:	2b00      	cmp	r3, #0
 c008618:	d103      	bne.n	c008622 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 c00861a:	68fb      	ldr	r3, [r7, #12]
 c00861c:	1c5a      	adds	r2, r3, #1
 c00861e:	683b      	ldr	r3, [r7, #0]
 c008620:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 c008622:	68bb      	ldr	r3, [r7, #8]
 c008624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c008628:	2b00      	cmp	r3, #0
 c00862a:	d00a      	beq.n	c008642 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 c00862c:	68ba      	ldr	r2, [r7, #8]
 c00862e:	693b      	ldr	r3, [r7, #16]
 c008630:	4053      	eors	r3, r2
 c008632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c008636:	2b00      	cmp	r3, #0
 c008638:	d103      	bne.n	c008642 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 c00863a:	68fb      	ldr	r3, [r7, #12]
 c00863c:	1c5a      	adds	r2, r3, #1
 c00863e:	683b      	ldr	r3, [r7, #0]
 c008640:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 c008642:	68bb      	ldr	r3, [r7, #8]
 c008644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c008648:	2b00      	cmp	r3, #0
 c00864a:	d018      	beq.n	c00867e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 c00864c:	68ba      	ldr	r2, [r7, #8]
 c00864e:	693b      	ldr	r3, [r7, #16]
 c008650:	4053      	eors	r3, r2
 c008652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c008656:	2b00      	cmp	r3, #0
 c008658:	d111      	bne.n	c00867e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 c00865a:	68bb      	ldr	r3, [r7, #8]
 c00865c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c008660:	2b00      	cmp	r3, #0
 c008662:	d106      	bne.n	c008672 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 c008664:	68fb      	ldr	r3, [r7, #12]
 c008666:	3301      	adds	r3, #1
 c008668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 c00866c:	683b      	ldr	r3, [r7, #0]
 c00866e:	60da      	str	r2, [r3, #12]
 c008670:	e005      	b.n	c00867e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 c008672:	68fb      	ldr	r3, [r7, #12]
 c008674:	3301      	adds	r3, #1
 c008676:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 c00867a:	683b      	ldr	r3, [r7, #0]
 c00867c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 c00867e:	68bb      	ldr	r3, [r7, #8]
 c008680:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 c008684:	2b00      	cmp	r3, #0
 c008686:	d018      	beq.n	c0086ba <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 c008688:	68ba      	ldr	r2, [r7, #8]
 c00868a:	693b      	ldr	r3, [r7, #16]
 c00868c:	4053      	eors	r3, r2
 c00868e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 c008692:	2b00      	cmp	r3, #0
 c008694:	d111      	bne.n	c0086ba <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 c008696:	68bb      	ldr	r3, [r7, #8]
 c008698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c00869c:	2b00      	cmp	r3, #0
 c00869e:	d106      	bne.n	c0086ae <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 c0086a0:	68fb      	ldr	r3, [r7, #12]
 c0086a2:	3301      	adds	r3, #1
 c0086a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 c0086a8:	683b      	ldr	r3, [r7, #0]
 c0086aa:	611a      	str	r2, [r3, #16]
 c0086ac:	e005      	b.n	c0086ba <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 c0086ae:	68fb      	ldr	r3, [r7, #12]
 c0086b0:	3301      	adds	r3, #1
 c0086b2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 c0086b6:	683b      	ldr	r3, [r7, #0]
 c0086b8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 c0086ba:	68fb      	ldr	r3, [r7, #12]
 c0086bc:	3301      	adds	r3, #1
 c0086be:	60fb      	str	r3, [r7, #12]
 c0086c0:	68fb      	ldr	r3, [r7, #12]
 c0086c2:	2b01      	cmp	r3, #1
 c0086c4:	d987      	bls.n	c0085d6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 c0086c6:	7dfb      	ldrb	r3, [r7, #23]
}
 c0086c8:	4618      	mov	r0, r3
 c0086ca:	371c      	adds	r7, #28
 c0086cc:	46bd      	mov	sp, r7
 c0086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0086d2:	4770      	bx	lr
 c0086d4:	520c4000 	.word	0x520c4000
 c0086d8:	04040222 	.word	0x04040222

0c0086dc <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 c0086dc:	b580      	push	{r7, lr}
 c0086de:	b084      	sub	sp, #16
 c0086e0:	af00      	add	r7, sp, #0
 c0086e2:	6078      	str	r0, [r7, #4]
 c0086e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 c0086e6:	2301      	movs	r3, #1
 c0086e8:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 c0086ea:	687b      	ldr	r3, [r7, #4]
 c0086ec:	681b      	ldr	r3, [r3, #0]
 c0086ee:	689a      	ldr	r2, [r3, #8]
 c0086f0:	687b      	ldr	r3, [r7, #4]
 c0086f2:	681b      	ldr	r3, [r3, #0]
 c0086f4:	f042 0202 	orr.w	r2, r2, #2
 c0086f8:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 c0086fa:	687b      	ldr	r3, [r7, #4]
 c0086fc:	2208      	movs	r2, #8
 c0086fe:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 c008700:	687b      	ldr	r3, [r7, #4]
 c008702:	681b      	ldr	r3, [r3, #0]
 c008704:	4a15      	ldr	r2, [pc, #84]	@ (c00875c <HAL_OSPI_DLYB_SetConfig+0x80>)
 c008706:	4293      	cmp	r3, r2
 c008708:	d109      	bne.n	c00871e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 c00870a:	4815      	ldr	r0, [pc, #84]	@ (c008760 <HAL_OSPI_DLYB_SetConfig+0x84>)
 c00870c:	f7ff f8a6 	bl	c00785c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 c008710:	6839      	ldr	r1, [r7, #0]
 c008712:	4813      	ldr	r0, [pc, #76]	@ (c008760 <HAL_OSPI_DLYB_SetConfig+0x84>)
 c008714:	f005 f872 	bl	c00d7fc <LL_DLYB_SetDelay>
    status = HAL_OK;
 c008718:	2300      	movs	r3, #0
 c00871a:	73fb      	strb	r3, [r7, #15]
 c00871c:	e00d      	b.n	c00873a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 c00871e:	687b      	ldr	r3, [r7, #4]
 c008720:	681b      	ldr	r3, [r3, #0]
 c008722:	4a10      	ldr	r2, [pc, #64]	@ (c008764 <HAL_OSPI_DLYB_SetConfig+0x88>)
 c008724:	4293      	cmp	r3, r2
 c008726:	d108      	bne.n	c00873a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 c008728:	480f      	ldr	r0, [pc, #60]	@ (c008768 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 c00872a:	f7ff f897 	bl	c00785c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 c00872e:	6839      	ldr	r1, [r7, #0]
 c008730:	480d      	ldr	r0, [pc, #52]	@ (c008768 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 c008732:	f005 f863 	bl	c00d7fc <LL_DLYB_SetDelay>
    status = HAL_OK;
 c008736:	2300      	movs	r3, #0
 c008738:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 c00873a:	6878      	ldr	r0, [r7, #4]
 c00873c:	f7ff f95a 	bl	c0079f4 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 c008740:	687b      	ldr	r3, [r7, #4]
 c008742:	681b      	ldr	r3, [r3, #0]
 c008744:	689a      	ldr	r2, [r3, #8]
 c008746:	687b      	ldr	r3, [r7, #4]
 c008748:	681b      	ldr	r3, [r3, #0]
 c00874a:	f022 0202 	bic.w	r2, r2, #2
 c00874e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 c008750:	7bfb      	ldrb	r3, [r7, #15]
}
 c008752:	4618      	mov	r0, r3
 c008754:	3710      	adds	r7, #16
 c008756:	46bd      	mov	sp, r7
 c008758:	bd80      	pop	{r7, pc}
 c00875a:	bf00      	nop
 c00875c:	520d1400 	.word	0x520d1400
 c008760:	520cf000 	.word	0x520cf000
 c008764:	520d2400 	.word	0x520d2400
 c008768:	520cf400 	.word	0x520cf400

0c00876c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 c00876c:	b580      	push	{r7, lr}
 c00876e:	b086      	sub	sp, #24
 c008770:	af02      	add	r7, sp, #8
 c008772:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 c008774:	687b      	ldr	r3, [r7, #4]
 c008776:	2b00      	cmp	r3, #0
 c008778:	d101      	bne.n	c00877e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 c00877a:	2301      	movs	r3, #1
 c00877c:	e108      	b.n	c008990 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 c00877e:	687b      	ldr	r3, [r7, #4]
 c008780:	681b      	ldr	r3, [r3, #0]
 c008782:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 c008784:	687b      	ldr	r3, [r7, #4]
 c008786:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 c00878a:	b2db      	uxtb	r3, r3
 c00878c:	2b00      	cmp	r3, #0
 c00878e:	d106      	bne.n	c00879e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 c008790:	687b      	ldr	r3, [r7, #4]
 c008792:	2200      	movs	r2, #0
 c008794:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 c008798:	6878      	ldr	r0, [r7, #4]
 c00879a:	f7fd fbe5 	bl	c005f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 c00879e:	687b      	ldr	r3, [r7, #4]
 c0087a0:	2203      	movs	r2, #3
 c0087a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 c0087a6:	68bb      	ldr	r3, [r7, #8]
 c0087a8:	4a7b      	ldr	r2, [pc, #492]	@ (c008998 <HAL_PCD_Init+0x22c>)
 c0087aa:	4293      	cmp	r3, r2
 c0087ac:	d102      	bne.n	c0087b4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 c0087ae:	687b      	ldr	r3, [r7, #4]
 c0087b0:	2200      	movs	r2, #0
 c0087b2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 c0087b4:	687b      	ldr	r3, [r7, #4]
 c0087b6:	681b      	ldr	r3, [r3, #0]
 c0087b8:	4618      	mov	r0, r3
 c0087ba:	f005 fa34 	bl	c00dc26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 c0087be:	687b      	ldr	r3, [r7, #4]
 c0087c0:	6818      	ldr	r0, [r3, #0]
 c0087c2:	687b      	ldr	r3, [r7, #4]
 c0087c4:	7c1a      	ldrb	r2, [r3, #16]
 c0087c6:	f88d 2000 	strb.w	r2, [sp]
 c0087ca:	3304      	adds	r3, #4
 c0087cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 c0087ce:	f005 f9fd 	bl	c00dbcc <USB_CoreInit>
 c0087d2:	4603      	mov	r3, r0
 c0087d4:	2b00      	cmp	r3, #0
 c0087d6:	d005      	beq.n	c0087e4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 c0087d8:	687b      	ldr	r3, [r7, #4]
 c0087da:	2202      	movs	r2, #2
 c0087dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 c0087e0:	2301      	movs	r3, #1
 c0087e2:	e0d5      	b.n	c008990 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 c0087e4:	687b      	ldr	r3, [r7, #4]
 c0087e6:	681b      	ldr	r3, [r3, #0]
 c0087e8:	2100      	movs	r1, #0
 c0087ea:	4618      	mov	r0, r3
 c0087ec:	f005 fa2c 	bl	c00dc48 <USB_SetCurrentMode>
 c0087f0:	4603      	mov	r3, r0
 c0087f2:	2b00      	cmp	r3, #0
 c0087f4:	d005      	beq.n	c008802 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 c0087f6:	687b      	ldr	r3, [r7, #4]
 c0087f8:	2202      	movs	r2, #2
 c0087fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 c0087fe:	2301      	movs	r3, #1
 c008800:	e0c6      	b.n	c008990 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c008802:	2300      	movs	r3, #0
 c008804:	73fb      	strb	r3, [r7, #15]
 c008806:	e04a      	b.n	c00889e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 c008808:	7bfa      	ldrb	r2, [r7, #15]
 c00880a:	6879      	ldr	r1, [r7, #4]
 c00880c:	4613      	mov	r3, r2
 c00880e:	00db      	lsls	r3, r3, #3
 c008810:	4413      	add	r3, r2
 c008812:	009b      	lsls	r3, r3, #2
 c008814:	440b      	add	r3, r1
 c008816:	3315      	adds	r3, #21
 c008818:	2201      	movs	r2, #1
 c00881a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 c00881c:	7bfa      	ldrb	r2, [r7, #15]
 c00881e:	6879      	ldr	r1, [r7, #4]
 c008820:	4613      	mov	r3, r2
 c008822:	00db      	lsls	r3, r3, #3
 c008824:	4413      	add	r3, r2
 c008826:	009b      	lsls	r3, r3, #2
 c008828:	440b      	add	r3, r1
 c00882a:	3314      	adds	r3, #20
 c00882c:	7bfa      	ldrb	r2, [r7, #15]
 c00882e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 c008830:	7bfa      	ldrb	r2, [r7, #15]
 c008832:	7bfb      	ldrb	r3, [r7, #15]
 c008834:	b298      	uxth	r0, r3
 c008836:	6879      	ldr	r1, [r7, #4]
 c008838:	4613      	mov	r3, r2
 c00883a:	00db      	lsls	r3, r3, #3
 c00883c:	4413      	add	r3, r2
 c00883e:	009b      	lsls	r3, r3, #2
 c008840:	440b      	add	r3, r1
 c008842:	332e      	adds	r3, #46	@ 0x2e
 c008844:	4602      	mov	r2, r0
 c008846:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 c008848:	7bfa      	ldrb	r2, [r7, #15]
 c00884a:	6879      	ldr	r1, [r7, #4]
 c00884c:	4613      	mov	r3, r2
 c00884e:	00db      	lsls	r3, r3, #3
 c008850:	4413      	add	r3, r2
 c008852:	009b      	lsls	r3, r3, #2
 c008854:	440b      	add	r3, r1
 c008856:	3318      	adds	r3, #24
 c008858:	2200      	movs	r2, #0
 c00885a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 c00885c:	7bfa      	ldrb	r2, [r7, #15]
 c00885e:	6879      	ldr	r1, [r7, #4]
 c008860:	4613      	mov	r3, r2
 c008862:	00db      	lsls	r3, r3, #3
 c008864:	4413      	add	r3, r2
 c008866:	009b      	lsls	r3, r3, #2
 c008868:	440b      	add	r3, r1
 c00886a:	331c      	adds	r3, #28
 c00886c:	2200      	movs	r2, #0
 c00886e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 c008870:	7bfa      	ldrb	r2, [r7, #15]
 c008872:	6879      	ldr	r1, [r7, #4]
 c008874:	4613      	mov	r3, r2
 c008876:	00db      	lsls	r3, r3, #3
 c008878:	4413      	add	r3, r2
 c00887a:	009b      	lsls	r3, r3, #2
 c00887c:	440b      	add	r3, r1
 c00887e:	3320      	adds	r3, #32
 c008880:	2200      	movs	r2, #0
 c008882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 c008884:	7bfa      	ldrb	r2, [r7, #15]
 c008886:	6879      	ldr	r1, [r7, #4]
 c008888:	4613      	mov	r3, r2
 c00888a:	00db      	lsls	r3, r3, #3
 c00888c:	4413      	add	r3, r2
 c00888e:	009b      	lsls	r3, r3, #2
 c008890:	440b      	add	r3, r1
 c008892:	3324      	adds	r3, #36	@ 0x24
 c008894:	2200      	movs	r2, #0
 c008896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c008898:	7bfb      	ldrb	r3, [r7, #15]
 c00889a:	3301      	adds	r3, #1
 c00889c:	73fb      	strb	r3, [r7, #15]
 c00889e:	687b      	ldr	r3, [r7, #4]
 c0088a0:	791b      	ldrb	r3, [r3, #4]
 c0088a2:	7bfa      	ldrb	r2, [r7, #15]
 c0088a4:	429a      	cmp	r2, r3
 c0088a6:	d3af      	bcc.n	c008808 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c0088a8:	2300      	movs	r3, #0
 c0088aa:	73fb      	strb	r3, [r7, #15]
 c0088ac:	e044      	b.n	c008938 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 c0088ae:	7bfa      	ldrb	r2, [r7, #15]
 c0088b0:	6879      	ldr	r1, [r7, #4]
 c0088b2:	4613      	mov	r3, r2
 c0088b4:	00db      	lsls	r3, r3, #3
 c0088b6:	4413      	add	r3, r2
 c0088b8:	009b      	lsls	r3, r3, #2
 c0088ba:	440b      	add	r3, r1
 c0088bc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 c0088c0:	2200      	movs	r2, #0
 c0088c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 c0088c4:	7bfa      	ldrb	r2, [r7, #15]
 c0088c6:	6879      	ldr	r1, [r7, #4]
 c0088c8:	4613      	mov	r3, r2
 c0088ca:	00db      	lsls	r3, r3, #3
 c0088cc:	4413      	add	r3, r2
 c0088ce:	009b      	lsls	r3, r3, #2
 c0088d0:	440b      	add	r3, r1
 c0088d2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 c0088d6:	7bfa      	ldrb	r2, [r7, #15]
 c0088d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 c0088da:	7bfa      	ldrb	r2, [r7, #15]
 c0088dc:	6879      	ldr	r1, [r7, #4]
 c0088de:	4613      	mov	r3, r2
 c0088e0:	00db      	lsls	r3, r3, #3
 c0088e2:	4413      	add	r3, r2
 c0088e4:	009b      	lsls	r3, r3, #2
 c0088e6:	440b      	add	r3, r1
 c0088e8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 c0088ec:	2200      	movs	r2, #0
 c0088ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 c0088f0:	7bfa      	ldrb	r2, [r7, #15]
 c0088f2:	6879      	ldr	r1, [r7, #4]
 c0088f4:	4613      	mov	r3, r2
 c0088f6:	00db      	lsls	r3, r3, #3
 c0088f8:	4413      	add	r3, r2
 c0088fa:	009b      	lsls	r3, r3, #2
 c0088fc:	440b      	add	r3, r1
 c0088fe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 c008902:	2200      	movs	r2, #0
 c008904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 c008906:	7bfa      	ldrb	r2, [r7, #15]
 c008908:	6879      	ldr	r1, [r7, #4]
 c00890a:	4613      	mov	r3, r2
 c00890c:	00db      	lsls	r3, r3, #3
 c00890e:	4413      	add	r3, r2
 c008910:	009b      	lsls	r3, r3, #2
 c008912:	440b      	add	r3, r1
 c008914:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 c008918:	2200      	movs	r2, #0
 c00891a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 c00891c:	7bfa      	ldrb	r2, [r7, #15]
 c00891e:	6879      	ldr	r1, [r7, #4]
 c008920:	4613      	mov	r3, r2
 c008922:	00db      	lsls	r3, r3, #3
 c008924:	4413      	add	r3, r2
 c008926:	009b      	lsls	r3, r3, #2
 c008928:	440b      	add	r3, r1
 c00892a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 c00892e:	2200      	movs	r2, #0
 c008930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 c008932:	7bfb      	ldrb	r3, [r7, #15]
 c008934:	3301      	adds	r3, #1
 c008936:	73fb      	strb	r3, [r7, #15]
 c008938:	687b      	ldr	r3, [r7, #4]
 c00893a:	791b      	ldrb	r3, [r3, #4]
 c00893c:	7bfa      	ldrb	r2, [r7, #15]
 c00893e:	429a      	cmp	r2, r3
 c008940:	d3b5      	bcc.n	c0088ae <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 c008942:	687b      	ldr	r3, [r7, #4]
 c008944:	6818      	ldr	r0, [r3, #0]
 c008946:	687b      	ldr	r3, [r7, #4]
 c008948:	7c1a      	ldrb	r2, [r3, #16]
 c00894a:	f88d 2000 	strb.w	r2, [sp]
 c00894e:	3304      	adds	r3, #4
 c008950:	cb0e      	ldmia	r3, {r1, r2, r3}
 c008952:	f005 f9c5 	bl	c00dce0 <USB_DevInit>
 c008956:	4603      	mov	r3, r0
 c008958:	2b00      	cmp	r3, #0
 c00895a:	d005      	beq.n	c008968 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 c00895c:	687b      	ldr	r3, [r7, #4]
 c00895e:	2202      	movs	r2, #2
 c008960:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 c008964:	2301      	movs	r3, #1
 c008966:	e013      	b.n	c008990 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 c008968:	687b      	ldr	r3, [r7, #4]
 c00896a:	2200      	movs	r2, #0
 c00896c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 c00896e:	687b      	ldr	r3, [r7, #4]
 c008970:	2201      	movs	r2, #1
 c008972:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 c008976:	687b      	ldr	r3, [r7, #4]
 c008978:	7b1b      	ldrb	r3, [r3, #12]
 c00897a:	2b01      	cmp	r3, #1
 c00897c:	d102      	bne.n	c008984 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 c00897e:	6878      	ldr	r0, [r7, #4]
 c008980:	f000 f80c 	bl	c00899c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 c008984:	687b      	ldr	r3, [r7, #4]
 c008986:	681b      	ldr	r3, [r3, #0]
 c008988:	4618      	mov	r0, r3
 c00898a:	f005 fb6e 	bl	c00e06a <USB_DevDisconnect>

  return HAL_OK;
 c00898e:	2300      	movs	r3, #0
}
 c008990:	4618      	mov	r0, r3
 c008992:	3710      	adds	r7, #16
 c008994:	46bd      	mov	sp, r7
 c008996:	bd80      	pop	{r7, pc}
 c008998:	52040000 	.word	0x52040000

0c00899c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 c00899c:	b480      	push	{r7}
 c00899e:	b085      	sub	sp, #20
 c0089a0:	af00      	add	r7, sp, #0
 c0089a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 c0089a4:	687b      	ldr	r3, [r7, #4]
 c0089a6:	681b      	ldr	r3, [r3, #0]
 c0089a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 c0089aa:	687b      	ldr	r3, [r7, #4]
 c0089ac:	2201      	movs	r2, #1
 c0089ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 c0089b2:	687b      	ldr	r3, [r7, #4]
 c0089b4:	2200      	movs	r2, #0
 c0089b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 c0089ba:	68fb      	ldr	r3, [r7, #12]
 c0089bc:	699b      	ldr	r3, [r3, #24]
 c0089be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 c0089c2:	68fb      	ldr	r3, [r7, #12]
 c0089c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 c0089c6:	68fb      	ldr	r3, [r7, #12]
 c0089c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c0089ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c0089ce:	f043 0303 	orr.w	r3, r3, #3
 c0089d2:	68fa      	ldr	r2, [r7, #12]
 c0089d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 c0089d6:	2300      	movs	r3, #0
}
 c0089d8:	4618      	mov	r0, r3
 c0089da:	3714      	adds	r7, #20
 c0089dc:	46bd      	mov	sp, r7
 c0089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0089e2:	4770      	bx	lr

0c0089e4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c0089e4:	b480      	push	{r7}
 c0089e6:	b085      	sub	sp, #20
 c0089e8:	af00      	add	r7, sp, #0
 c0089ea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 c0089ec:	4b39      	ldr	r3, [pc, #228]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0089ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0089f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 c0089f4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0089f6:	68ba      	ldr	r2, [r7, #8]
 c0089f8:	687b      	ldr	r3, [r7, #4]
 c0089fa:	429a      	cmp	r2, r3
 c0089fc:	d10b      	bne.n	c008a16 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c0089fe:	687b      	ldr	r3, [r7, #4]
 c008a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c008a04:	d905      	bls.n	c008a12 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c008a06:	4b33      	ldr	r3, [pc, #204]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008a08:	68db      	ldr	r3, [r3, #12]
 c008a0a:	4a32      	ldr	r2, [pc, #200]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c008a10:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 c008a12:	2300      	movs	r3, #0
 c008a14:	e057      	b.n	c008ac6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c008a16:	687b      	ldr	r3, [r7, #4]
 c008a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c008a1c:	d90a      	bls.n	c008a34 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 c008a1e:	4b2d      	ldr	r3, [pc, #180]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008a20:	68db      	ldr	r3, [r3, #12]
 c008a22:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c008a26:	687b      	ldr	r3, [r7, #4]
 c008a28:	4313      	orrs	r3, r2
 c008a2a:	4a2a      	ldr	r2, [pc, #168]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c008a30:	60d3      	str	r3, [r2, #12]
 c008a32:	e007      	b.n	c008a44 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 c008a34:	4b27      	ldr	r3, [pc, #156]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008a36:	68db      	ldr	r3, [r3, #12]
 c008a38:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c008a3c:	4925      	ldr	r1, [pc, #148]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008a3e:	687b      	ldr	r3, [r7, #4]
 c008a40:	4313      	orrs	r3, r2
 c008a42:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c008a44:	4b24      	ldr	r3, [pc, #144]	@ (c008ad8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c008a46:	681b      	ldr	r3, [r3, #0]
 c008a48:	4a24      	ldr	r2, [pc, #144]	@ (c008adc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c008a4a:	fba2 2303 	umull	r2, r3, r2, r3
 c008a4e:	099b      	lsrs	r3, r3, #6
 c008a50:	2232      	movs	r2, #50	@ 0x32
 c008a52:	fb02 f303 	mul.w	r3, r2, r3
 c008a56:	4a21      	ldr	r2, [pc, #132]	@ (c008adc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c008a58:	fba2 2303 	umull	r2, r3, r2, r3
 c008a5c:	099b      	lsrs	r3, r3, #6
 c008a5e:	3301      	adds	r3, #1
 c008a60:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c008a62:	e002      	b.n	c008a6a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 c008a64:	68fb      	ldr	r3, [r7, #12]
 c008a66:	3b01      	subs	r3, #1
 c008a68:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c008a6a:	4b1a      	ldr	r3, [pc, #104]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008a6c:	68db      	ldr	r3, [r3, #12]
 c008a6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c008a72:	2b00      	cmp	r3, #0
 c008a74:	d102      	bne.n	c008a7c <HAL_PWREx_ControlVoltageScaling+0x98>
 c008a76:	68fb      	ldr	r3, [r7, #12]
 c008a78:	2b00      	cmp	r3, #0
 c008a7a:	d1f3      	bne.n	c008a64 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 c008a7c:	68fb      	ldr	r3, [r7, #12]
 c008a7e:	2b00      	cmp	r3, #0
 c008a80:	d01b      	beq.n	c008aba <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c008a82:	4b15      	ldr	r3, [pc, #84]	@ (c008ad8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c008a84:	681b      	ldr	r3, [r3, #0]
 c008a86:	4a15      	ldr	r2, [pc, #84]	@ (c008adc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c008a88:	fba2 2303 	umull	r2, r3, r2, r3
 c008a8c:	099b      	lsrs	r3, r3, #6
 c008a8e:	2232      	movs	r2, #50	@ 0x32
 c008a90:	fb02 f303 	mul.w	r3, r2, r3
 c008a94:	4a11      	ldr	r2, [pc, #68]	@ (c008adc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c008a96:	fba2 2303 	umull	r2, r3, r2, r3
 c008a9a:	099b      	lsrs	r3, r3, #6
 c008a9c:	3301      	adds	r3, #1
 c008a9e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c008aa0:	e002      	b.n	c008aa8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 c008aa2:	68fb      	ldr	r3, [r7, #12]
 c008aa4:	3b01      	subs	r3, #1
 c008aa6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c008aa8:	4b0a      	ldr	r3, [pc, #40]	@ (c008ad4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c008aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c008aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c008ab0:	2b00      	cmp	r3, #0
 c008ab2:	d102      	bne.n	c008aba <HAL_PWREx_ControlVoltageScaling+0xd6>
 c008ab4:	68fb      	ldr	r3, [r7, #12]
 c008ab6:	2b00      	cmp	r3, #0
 c008ab8:	d1f3      	bne.n	c008aa2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c008aba:	68fb      	ldr	r3, [r7, #12]
 c008abc:	2b00      	cmp	r3, #0
 c008abe:	d101      	bne.n	c008ac4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 c008ac0:	2303      	movs	r3, #3
 c008ac2:	e000      	b.n	c008ac6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 c008ac4:	2300      	movs	r3, #0
}
 c008ac6:	4618      	mov	r0, r3
 c008ac8:	3714      	adds	r7, #20
 c008aca:	46bd      	mov	sp, r7
 c008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008ad0:	4770      	bx	lr
 c008ad2:	bf00      	nop
 c008ad4:	56020800 	.word	0x56020800
 c008ad8:	30000000 	.word	0x30000000
 c008adc:	10624dd3 	.word	0x10624dd3

0c008ae0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c008ae0:	b480      	push	{r7}
 c008ae2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 c008ae4:	4b04      	ldr	r3, [pc, #16]	@ (c008af8 <HAL_PWREx_GetVoltageRange+0x18>)
 c008ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c008ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 c008aec:	4618      	mov	r0, r3
 c008aee:	46bd      	mov	sp, r7
 c008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008af4:	4770      	bx	lr
 c008af6:	bf00      	nop
 c008af8:	56020800 	.word	0x56020800

0c008afc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 c008afc:	b480      	push	{r7}
 c008afe:	b085      	sub	sp, #20
 c008b00:	af00      	add	r7, sp, #0
 c008b02:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c008b04:	4b22      	ldr	r3, [pc, #136]	@ (c008b90 <HAL_PWREx_ConfigSupply+0x94>)
 c008b06:	681b      	ldr	r3, [r3, #0]
 c008b08:	4a22      	ldr	r2, [pc, #136]	@ (c008b94 <HAL_PWREx_ConfigSupply+0x98>)
 c008b0a:	fba2 2303 	umull	r2, r3, r2, r3
 c008b0e:	099b      	lsrs	r3, r3, #6
 c008b10:	2232      	movs	r2, #50	@ 0x32
 c008b12:	fb02 f303 	mul.w	r3, r2, r3
 c008b16:	4a1f      	ldr	r2, [pc, #124]	@ (c008b94 <HAL_PWREx_ConfigSupply+0x98>)
 c008b18:	fba2 2303 	umull	r2, r3, r2, r3
 c008b1c:	099b      	lsrs	r3, r3, #6
 c008b1e:	3301      	adds	r3, #1
 c008b20:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 c008b22:	687b      	ldr	r3, [r7, #4]
 c008b24:	2b00      	cmp	r3, #0
 c008b26:	d113      	bne.n	c008b50 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c008b28:	4b1b      	ldr	r3, [pc, #108]	@ (c008b98 <HAL_PWREx_ConfigSupply+0x9c>)
 c008b2a:	689b      	ldr	r3, [r3, #8]
 c008b2c:	4a1a      	ldr	r2, [pc, #104]	@ (c008b98 <HAL_PWREx_ConfigSupply+0x9c>)
 c008b2e:	f023 0302 	bic.w	r3, r3, #2
 c008b32:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c008b34:	e002      	b.n	c008b3c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 c008b36:	68fb      	ldr	r3, [r7, #12]
 c008b38:	3b01      	subs	r3, #1
 c008b3a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c008b3c:	4b16      	ldr	r3, [pc, #88]	@ (c008b98 <HAL_PWREx_ConfigSupply+0x9c>)
 c008b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c008b40:	f003 0302 	and.w	r3, r3, #2
 c008b44:	2b02      	cmp	r3, #2
 c008b46:	d116      	bne.n	c008b76 <HAL_PWREx_ConfigSupply+0x7a>
 c008b48:	68fb      	ldr	r3, [r7, #12]
 c008b4a:	2b00      	cmp	r3, #0
 c008b4c:	d1f3      	bne.n	c008b36 <HAL_PWREx_ConfigSupply+0x3a>
 c008b4e:	e012      	b.n	c008b76 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c008b50:	4b11      	ldr	r3, [pc, #68]	@ (c008b98 <HAL_PWREx_ConfigSupply+0x9c>)
 c008b52:	689b      	ldr	r3, [r3, #8]
 c008b54:	4a10      	ldr	r2, [pc, #64]	@ (c008b98 <HAL_PWREx_ConfigSupply+0x9c>)
 c008b56:	f043 0302 	orr.w	r3, r3, #2
 c008b5a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c008b5c:	e002      	b.n	c008b64 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 c008b5e:	68fb      	ldr	r3, [r7, #12]
 c008b60:	3b01      	subs	r3, #1
 c008b62:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c008b64:	4b0c      	ldr	r3, [pc, #48]	@ (c008b98 <HAL_PWREx_ConfigSupply+0x9c>)
 c008b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c008b68:	f003 0302 	and.w	r3, r3, #2
 c008b6c:	2b00      	cmp	r3, #0
 c008b6e:	d102      	bne.n	c008b76 <HAL_PWREx_ConfigSupply+0x7a>
 c008b70:	68fb      	ldr	r3, [r7, #12]
 c008b72:	2b00      	cmp	r3, #0
 c008b74:	d1f3      	bne.n	c008b5e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c008b76:	68fb      	ldr	r3, [r7, #12]
 c008b78:	2b00      	cmp	r3, #0
 c008b7a:	d101      	bne.n	c008b80 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 c008b7c:	2303      	movs	r3, #3
 c008b7e:	e000      	b.n	c008b82 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 c008b80:	2300      	movs	r3, #0
}
 c008b82:	4618      	mov	r0, r3
 c008b84:	3714      	adds	r7, #20
 c008b86:	46bd      	mov	sp, r7
 c008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008b8c:	4770      	bx	lr
 c008b8e:	bf00      	nop
 c008b90:	30000000 	.word	0x30000000
 c008b94:	10624dd3 	.word	0x10624dd3
 c008b98:	56020800 	.word	0x56020800

0c008b9c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 c008b9c:	b480      	push	{r7}
 c008b9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 c008ba0:	4b05      	ldr	r3, [pc, #20]	@ (c008bb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 c008ba2:	691b      	ldr	r3, [r3, #16]
 c008ba4:	4a04      	ldr	r2, [pc, #16]	@ (c008bb8 <HAL_PWREx_EnableVddUSB+0x1c>)
 c008ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c008baa:	6113      	str	r3, [r2, #16]
}
 c008bac:	bf00      	nop
 c008bae:	46bd      	mov	sp, r7
 c008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008bb4:	4770      	bx	lr
 c008bb6:	bf00      	nop
 c008bb8:	56020800 	.word	0x56020800

0c008bbc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c008bbc:	b480      	push	{r7}
 c008bbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 c008bc0:	4b05      	ldr	r3, [pc, #20]	@ (c008bd8 <HAL_PWREx_EnableVddIO2+0x1c>)
 c008bc2:	691b      	ldr	r3, [r3, #16]
 c008bc4:	4a04      	ldr	r2, [pc, #16]	@ (c008bd8 <HAL_PWREx_EnableVddIO2+0x1c>)
 c008bc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 c008bca:	6113      	str	r3, [r2, #16]
}
 c008bcc:	bf00      	nop
 c008bce:	46bd      	mov	sp, r7
 c008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008bd4:	4770      	bx	lr
 c008bd6:	bf00      	nop
 c008bd8:	56020800 	.word	0x56020800

0c008bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 c008bdc:	b580      	push	{r7, lr}
 c008bde:	b08e      	sub	sp, #56	@ 0x38
 c008be0:	af00      	add	r7, sp, #0
 c008be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 c008be4:	2300      	movs	r3, #0
 c008be6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 c008bea:	687b      	ldr	r3, [r7, #4]
 c008bec:	2b00      	cmp	r3, #0
 c008bee:	d102      	bne.n	c008bf6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 c008bf0:	2301      	movs	r3, #1
 c008bf2:	f000 bec8 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c008bf6:	4b99      	ldr	r3, [pc, #612]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008bf8:	69db      	ldr	r3, [r3, #28]
 c008bfa:	f003 030c 	and.w	r3, r3, #12
 c008bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c008c00:	4b96      	ldr	r3, [pc, #600]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c008c04:	f003 0303 	and.w	r3, r3, #3
 c008c08:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c008c0a:	687b      	ldr	r3, [r7, #4]
 c008c0c:	681b      	ldr	r3, [r3, #0]
 c008c0e:	f003 0310 	and.w	r3, r3, #16
 c008c12:	2b00      	cmp	r3, #0
 c008c14:	f000 816c 	beq.w	c008ef0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c008c1a:	2b00      	cmp	r3, #0
 c008c1c:	d007      	beq.n	c008c2e <HAL_RCC_OscConfig+0x52>
 c008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c008c20:	2b0c      	cmp	r3, #12
 c008c22:	f040 80de 	bne.w	c008de2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c008c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c008c28:	2b01      	cmp	r3, #1
 c008c2a:	f040 80da 	bne.w	c008de2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c008c2e:	687b      	ldr	r3, [r7, #4]
 c008c30:	69db      	ldr	r3, [r3, #28]
 c008c32:	2b00      	cmp	r3, #0
 c008c34:	d102      	bne.n	c008c3c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 c008c36:	2301      	movs	r3, #1
 c008c38:	f000 bea5 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c008c3c:	687b      	ldr	r3, [r7, #4]
 c008c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c008c40:	4b86      	ldr	r3, [pc, #536]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c42:	689b      	ldr	r3, [r3, #8]
 c008c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c008c48:	2b00      	cmp	r3, #0
 c008c4a:	d004      	beq.n	c008c56 <HAL_RCC_OscConfig+0x7a>
 c008c4c:	4b83      	ldr	r3, [pc, #524]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c4e:	689b      	ldr	r3, [r3, #8]
 c008c50:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c008c54:	e005      	b.n	c008c62 <HAL_RCC_OscConfig+0x86>
 c008c56:	4b81      	ldr	r3, [pc, #516]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c008c5c:	041b      	lsls	r3, r3, #16
 c008c5e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c008c62:	4293      	cmp	r3, r2
 c008c64:	d255      	bcs.n	c008d12 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c008c68:	2b00      	cmp	r3, #0
 c008c6a:	d10a      	bne.n	c008c82 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c008c6c:	687b      	ldr	r3, [r7, #4]
 c008c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008c70:	4618      	mov	r0, r3
 c008c72:	f001 f9d9 	bl	c00a028 <RCC_SetFlashLatencyFromMSIRange>
 c008c76:	4603      	mov	r3, r0
 c008c78:	2b00      	cmp	r3, #0
 c008c7a:	d002      	beq.n	c008c82 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 c008c7c:	2301      	movs	r3, #1
 c008c7e:	f000 be82 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c008c82:	4b76      	ldr	r3, [pc, #472]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c84:	689b      	ldr	r3, [r3, #8]
 c008c86:	4a75      	ldr	r2, [pc, #468]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c008c8c:	6093      	str	r3, [r2, #8]
 c008c8e:	4b73      	ldr	r3, [pc, #460]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c90:	689b      	ldr	r3, [r3, #8]
 c008c92:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c008c96:	687b      	ldr	r3, [r7, #4]
 c008c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008c9a:	4970      	ldr	r1, [pc, #448]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008c9c:	4313      	orrs	r3, r2
 c008c9e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c008ca0:	687b      	ldr	r3, [r7, #4]
 c008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008ca4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c008ca8:	d309      	bcc.n	c008cbe <HAL_RCC_OscConfig+0xe2>
 c008caa:	4b6c      	ldr	r3, [pc, #432]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008cac:	68db      	ldr	r3, [r3, #12]
 c008cae:	f023 021f 	bic.w	r2, r3, #31
 c008cb2:	687b      	ldr	r3, [r7, #4]
 c008cb4:	6a1b      	ldr	r3, [r3, #32]
 c008cb6:	4969      	ldr	r1, [pc, #420]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008cb8:	4313      	orrs	r3, r2
 c008cba:	60cb      	str	r3, [r1, #12]
 c008cbc:	e07e      	b.n	c008dbc <HAL_RCC_OscConfig+0x1e0>
 c008cbe:	687b      	ldr	r3, [r7, #4]
 c008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008cc2:	2b00      	cmp	r3, #0
 c008cc4:	da0a      	bge.n	c008cdc <HAL_RCC_OscConfig+0x100>
 c008cc6:	4b65      	ldr	r3, [pc, #404]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008cc8:	68db      	ldr	r3, [r3, #12]
 c008cca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c008cce:	687b      	ldr	r3, [r7, #4]
 c008cd0:	6a1b      	ldr	r3, [r3, #32]
 c008cd2:	015b      	lsls	r3, r3, #5
 c008cd4:	4961      	ldr	r1, [pc, #388]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008cd6:	4313      	orrs	r3, r2
 c008cd8:	60cb      	str	r3, [r1, #12]
 c008cda:	e06f      	b.n	c008dbc <HAL_RCC_OscConfig+0x1e0>
 c008cdc:	687b      	ldr	r3, [r7, #4]
 c008cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c008ce4:	d30a      	bcc.n	c008cfc <HAL_RCC_OscConfig+0x120>
 c008ce6:	4b5d      	ldr	r3, [pc, #372]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008ce8:	68db      	ldr	r3, [r3, #12]
 c008cea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c008cee:	687b      	ldr	r3, [r7, #4]
 c008cf0:	6a1b      	ldr	r3, [r3, #32]
 c008cf2:	029b      	lsls	r3, r3, #10
 c008cf4:	4959      	ldr	r1, [pc, #356]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008cf6:	4313      	orrs	r3, r2
 c008cf8:	60cb      	str	r3, [r1, #12]
 c008cfa:	e05f      	b.n	c008dbc <HAL_RCC_OscConfig+0x1e0>
 c008cfc:	4b57      	ldr	r3, [pc, #348]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008cfe:	68db      	ldr	r3, [r3, #12]
 c008d00:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c008d04:	687b      	ldr	r3, [r7, #4]
 c008d06:	6a1b      	ldr	r3, [r3, #32]
 c008d08:	03db      	lsls	r3, r3, #15
 c008d0a:	4954      	ldr	r1, [pc, #336]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d0c:	4313      	orrs	r3, r2
 c008d0e:	60cb      	str	r3, [r1, #12]
 c008d10:	e054      	b.n	c008dbc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c008d12:	4b52      	ldr	r3, [pc, #328]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d14:	689b      	ldr	r3, [r3, #8]
 c008d16:	4a51      	ldr	r2, [pc, #324]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c008d1c:	6093      	str	r3, [r2, #8]
 c008d1e:	4b4f      	ldr	r3, [pc, #316]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d20:	689b      	ldr	r3, [r3, #8]
 c008d22:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c008d26:	687b      	ldr	r3, [r7, #4]
 c008d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008d2a:	494c      	ldr	r1, [pc, #304]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d2c:	4313      	orrs	r3, r2
 c008d2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c008d30:	687b      	ldr	r3, [r7, #4]
 c008d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008d34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c008d38:	d309      	bcc.n	c008d4e <HAL_RCC_OscConfig+0x172>
 c008d3a:	4b48      	ldr	r3, [pc, #288]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d3c:	68db      	ldr	r3, [r3, #12]
 c008d3e:	f023 021f 	bic.w	r2, r3, #31
 c008d42:	687b      	ldr	r3, [r7, #4]
 c008d44:	6a1b      	ldr	r3, [r3, #32]
 c008d46:	4945      	ldr	r1, [pc, #276]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d48:	4313      	orrs	r3, r2
 c008d4a:	60cb      	str	r3, [r1, #12]
 c008d4c:	e028      	b.n	c008da0 <HAL_RCC_OscConfig+0x1c4>
 c008d4e:	687b      	ldr	r3, [r7, #4]
 c008d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008d52:	2b00      	cmp	r3, #0
 c008d54:	da0a      	bge.n	c008d6c <HAL_RCC_OscConfig+0x190>
 c008d56:	4b41      	ldr	r3, [pc, #260]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d58:	68db      	ldr	r3, [r3, #12]
 c008d5a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c008d5e:	687b      	ldr	r3, [r7, #4]
 c008d60:	6a1b      	ldr	r3, [r3, #32]
 c008d62:	015b      	lsls	r3, r3, #5
 c008d64:	493d      	ldr	r1, [pc, #244]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d66:	4313      	orrs	r3, r2
 c008d68:	60cb      	str	r3, [r1, #12]
 c008d6a:	e019      	b.n	c008da0 <HAL_RCC_OscConfig+0x1c4>
 c008d6c:	687b      	ldr	r3, [r7, #4]
 c008d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c008d74:	d30a      	bcc.n	c008d8c <HAL_RCC_OscConfig+0x1b0>
 c008d76:	4b39      	ldr	r3, [pc, #228]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d78:	68db      	ldr	r3, [r3, #12]
 c008d7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c008d7e:	687b      	ldr	r3, [r7, #4]
 c008d80:	6a1b      	ldr	r3, [r3, #32]
 c008d82:	029b      	lsls	r3, r3, #10
 c008d84:	4935      	ldr	r1, [pc, #212]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d86:	4313      	orrs	r3, r2
 c008d88:	60cb      	str	r3, [r1, #12]
 c008d8a:	e009      	b.n	c008da0 <HAL_RCC_OscConfig+0x1c4>
 c008d8c:	4b33      	ldr	r3, [pc, #204]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d8e:	68db      	ldr	r3, [r3, #12]
 c008d90:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c008d94:	687b      	ldr	r3, [r7, #4]
 c008d96:	6a1b      	ldr	r3, [r3, #32]
 c008d98:	03db      	lsls	r3, r3, #15
 c008d9a:	4930      	ldr	r1, [pc, #192]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008d9c:	4313      	orrs	r3, r2
 c008d9e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c008da2:	2b00      	cmp	r3, #0
 c008da4:	d10a      	bne.n	c008dbc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c008da6:	687b      	ldr	r3, [r7, #4]
 c008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008daa:	4618      	mov	r0, r3
 c008dac:	f001 f93c 	bl	c00a028 <RCC_SetFlashLatencyFromMSIRange>
 c008db0:	4603      	mov	r3, r0
 c008db2:	2b00      	cmp	r3, #0
 c008db4:	d002      	beq.n	c008dbc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 c008db6:	2301      	movs	r3, #1
 c008db8:	f000 bde5 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 c008dbc:	f001 f8de 	bl	c009f7c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c008dc0:	4b27      	ldr	r3, [pc, #156]	@ (c008e60 <HAL_RCC_OscConfig+0x284>)
 c008dc2:	681b      	ldr	r3, [r3, #0]
 c008dc4:	4618      	mov	r0, r3
 c008dc6:	f7fd fb93 	bl	c0064f0 <HAL_InitTick>
 c008dca:	4603      	mov	r3, r0
 c008dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 c008dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c008dd4:	2b00      	cmp	r3, #0
 c008dd6:	f000 808a 	beq.w	c008eee <HAL_RCC_OscConfig+0x312>
        {
          return status;
 c008dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c008dde:	f000 bdd2 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c008de2:	687b      	ldr	r3, [r7, #4]
 c008de4:	69db      	ldr	r3, [r3, #28]
 c008de6:	2b00      	cmp	r3, #0
 c008de8:	d066      	beq.n	c008eb8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 c008dea:	4b1c      	ldr	r3, [pc, #112]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008dec:	681b      	ldr	r3, [r3, #0]
 c008dee:	4a1b      	ldr	r2, [pc, #108]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008df0:	f043 0301 	orr.w	r3, r3, #1
 c008df4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c008df6:	f7fd fc05 	bl	c006604 <HAL_GetTick>
 c008dfa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c008dfc:	e009      	b.n	c008e12 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c008dfe:	f7fd fc01 	bl	c006604 <HAL_GetTick>
 c008e02:	4602      	mov	r2, r0
 c008e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c008e06:	1ad3      	subs	r3, r2, r3
 c008e08:	2b02      	cmp	r3, #2
 c008e0a:	d902      	bls.n	c008e12 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 c008e0c:	2303      	movs	r3, #3
 c008e0e:	f000 bdba 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c008e12:	4b12      	ldr	r3, [pc, #72]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008e14:	681b      	ldr	r3, [r3, #0]
 c008e16:	f003 0304 	and.w	r3, r3, #4
 c008e1a:	2b00      	cmp	r3, #0
 c008e1c:	d0ef      	beq.n	c008dfe <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c008e1e:	4b0f      	ldr	r3, [pc, #60]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008e20:	689b      	ldr	r3, [r3, #8]
 c008e22:	4a0e      	ldr	r2, [pc, #56]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008e24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c008e28:	6093      	str	r3, [r2, #8]
 c008e2a:	4b0c      	ldr	r3, [pc, #48]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008e2c:	689b      	ldr	r3, [r3, #8]
 c008e2e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c008e32:	687b      	ldr	r3, [r7, #4]
 c008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008e36:	4909      	ldr	r1, [pc, #36]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008e38:	4313      	orrs	r3, r2
 c008e3a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c008e3c:	687b      	ldr	r3, [r7, #4]
 c008e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008e40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c008e44:	d30e      	bcc.n	c008e64 <HAL_RCC_OscConfig+0x288>
 c008e46:	4b05      	ldr	r3, [pc, #20]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008e48:	68db      	ldr	r3, [r3, #12]
 c008e4a:	f023 021f 	bic.w	r2, r3, #31
 c008e4e:	687b      	ldr	r3, [r7, #4]
 c008e50:	6a1b      	ldr	r3, [r3, #32]
 c008e52:	4902      	ldr	r1, [pc, #8]	@ (c008e5c <HAL_RCC_OscConfig+0x280>)
 c008e54:	4313      	orrs	r3, r2
 c008e56:	60cb      	str	r3, [r1, #12]
 c008e58:	e04a      	b.n	c008ef0 <HAL_RCC_OscConfig+0x314>
 c008e5a:	bf00      	nop
 c008e5c:	56020c00 	.word	0x56020c00
 c008e60:	30000004 	.word	0x30000004
 c008e64:	687b      	ldr	r3, [r7, #4]
 c008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008e68:	2b00      	cmp	r3, #0
 c008e6a:	da0a      	bge.n	c008e82 <HAL_RCC_OscConfig+0x2a6>
 c008e6c:	4b98      	ldr	r3, [pc, #608]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008e6e:	68db      	ldr	r3, [r3, #12]
 c008e70:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c008e74:	687b      	ldr	r3, [r7, #4]
 c008e76:	6a1b      	ldr	r3, [r3, #32]
 c008e78:	015b      	lsls	r3, r3, #5
 c008e7a:	4995      	ldr	r1, [pc, #596]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008e7c:	4313      	orrs	r3, r2
 c008e7e:	60cb      	str	r3, [r1, #12]
 c008e80:	e036      	b.n	c008ef0 <HAL_RCC_OscConfig+0x314>
 c008e82:	687b      	ldr	r3, [r7, #4]
 c008e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c008e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c008e8a:	d30a      	bcc.n	c008ea2 <HAL_RCC_OscConfig+0x2c6>
 c008e8c:	4b90      	ldr	r3, [pc, #576]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008e8e:	68db      	ldr	r3, [r3, #12]
 c008e90:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c008e94:	687b      	ldr	r3, [r7, #4]
 c008e96:	6a1b      	ldr	r3, [r3, #32]
 c008e98:	029b      	lsls	r3, r3, #10
 c008e9a:	498d      	ldr	r1, [pc, #564]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008e9c:	4313      	orrs	r3, r2
 c008e9e:	60cb      	str	r3, [r1, #12]
 c008ea0:	e026      	b.n	c008ef0 <HAL_RCC_OscConfig+0x314>
 c008ea2:	4b8b      	ldr	r3, [pc, #556]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008ea4:	68db      	ldr	r3, [r3, #12]
 c008ea6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c008eaa:	687b      	ldr	r3, [r7, #4]
 c008eac:	6a1b      	ldr	r3, [r3, #32]
 c008eae:	03db      	lsls	r3, r3, #15
 c008eb0:	4987      	ldr	r1, [pc, #540]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008eb2:	4313      	orrs	r3, r2
 c008eb4:	60cb      	str	r3, [r1, #12]
 c008eb6:	e01b      	b.n	c008ef0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 c008eb8:	4b85      	ldr	r3, [pc, #532]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008eba:	681b      	ldr	r3, [r3, #0]
 c008ebc:	4a84      	ldr	r2, [pc, #528]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008ebe:	f023 0301 	bic.w	r3, r3, #1
 c008ec2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c008ec4:	f7fd fb9e 	bl	c006604 <HAL_GetTick>
 c008ec8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c008eca:	e009      	b.n	c008ee0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c008ecc:	f7fd fb9a 	bl	c006604 <HAL_GetTick>
 c008ed0:	4602      	mov	r2, r0
 c008ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c008ed4:	1ad3      	subs	r3, r2, r3
 c008ed6:	2b02      	cmp	r3, #2
 c008ed8:	d902      	bls.n	c008ee0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 c008eda:	2303      	movs	r3, #3
 c008edc:	f000 bd53 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c008ee0:	4b7b      	ldr	r3, [pc, #492]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008ee2:	681b      	ldr	r3, [r3, #0]
 c008ee4:	f003 0304 	and.w	r3, r3, #4
 c008ee8:	2b00      	cmp	r3, #0
 c008eea:	d1ef      	bne.n	c008ecc <HAL_RCC_OscConfig+0x2f0>
 c008eec:	e000      	b.n	c008ef0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c008eee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c008ef0:	687b      	ldr	r3, [r7, #4]
 c008ef2:	681b      	ldr	r3, [r3, #0]
 c008ef4:	f003 0301 	and.w	r3, r3, #1
 c008ef8:	2b00      	cmp	r3, #0
 c008efa:	f000 808b 	beq.w	c009014 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c008f00:	2b08      	cmp	r3, #8
 c008f02:	d005      	beq.n	c008f10 <HAL_RCC_OscConfig+0x334>
 c008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c008f06:	2b0c      	cmp	r3, #12
 c008f08:	d109      	bne.n	c008f1e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c008f0c:	2b03      	cmp	r3, #3
 c008f0e:	d106      	bne.n	c008f1e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 c008f10:	687b      	ldr	r3, [r7, #4]
 c008f12:	685b      	ldr	r3, [r3, #4]
 c008f14:	2b00      	cmp	r3, #0
 c008f16:	d17d      	bne.n	c009014 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 c008f18:	2301      	movs	r3, #1
 c008f1a:	f000 bd34 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 c008f1e:	687b      	ldr	r3, [r7, #4]
 c008f20:	685b      	ldr	r3, [r3, #4]
 c008f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c008f26:	d106      	bne.n	c008f36 <HAL_RCC_OscConfig+0x35a>
 c008f28:	4b69      	ldr	r3, [pc, #420]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f2a:	681b      	ldr	r3, [r3, #0]
 c008f2c:	4a68      	ldr	r2, [pc, #416]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c008f32:	6013      	str	r3, [r2, #0]
 c008f34:	e041      	b.n	c008fba <HAL_RCC_OscConfig+0x3de>
 c008f36:	687b      	ldr	r3, [r7, #4]
 c008f38:	685b      	ldr	r3, [r3, #4]
 c008f3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 c008f3e:	d112      	bne.n	c008f66 <HAL_RCC_OscConfig+0x38a>
 c008f40:	4b63      	ldr	r3, [pc, #396]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f42:	681b      	ldr	r3, [r3, #0]
 c008f44:	4a62      	ldr	r2, [pc, #392]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c008f4a:	6013      	str	r3, [r2, #0]
 c008f4c:	4b60      	ldr	r3, [pc, #384]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f4e:	681b      	ldr	r3, [r3, #0]
 c008f50:	4a5f      	ldr	r2, [pc, #380]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c008f56:	6013      	str	r3, [r2, #0]
 c008f58:	4b5d      	ldr	r3, [pc, #372]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f5a:	681b      	ldr	r3, [r3, #0]
 c008f5c:	4a5c      	ldr	r2, [pc, #368]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c008f62:	6013      	str	r3, [r2, #0]
 c008f64:	e029      	b.n	c008fba <HAL_RCC_OscConfig+0x3de>
 c008f66:	687b      	ldr	r3, [r7, #4]
 c008f68:	685b      	ldr	r3, [r3, #4]
 c008f6a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 c008f6e:	d112      	bne.n	c008f96 <HAL_RCC_OscConfig+0x3ba>
 c008f70:	4b57      	ldr	r3, [pc, #348]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f72:	681b      	ldr	r3, [r3, #0]
 c008f74:	4a56      	ldr	r2, [pc, #344]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c008f7a:	6013      	str	r3, [r2, #0]
 c008f7c:	4b54      	ldr	r3, [pc, #336]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f7e:	681b      	ldr	r3, [r3, #0]
 c008f80:	4a53      	ldr	r2, [pc, #332]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c008f86:	6013      	str	r3, [r2, #0]
 c008f88:	4b51      	ldr	r3, [pc, #324]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f8a:	681b      	ldr	r3, [r3, #0]
 c008f8c:	4a50      	ldr	r2, [pc, #320]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c008f92:	6013      	str	r3, [r2, #0]
 c008f94:	e011      	b.n	c008fba <HAL_RCC_OscConfig+0x3de>
 c008f96:	4b4e      	ldr	r3, [pc, #312]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f98:	681b      	ldr	r3, [r3, #0]
 c008f9a:	4a4d      	ldr	r2, [pc, #308]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c008fa0:	6013      	str	r3, [r2, #0]
 c008fa2:	4b4b      	ldr	r3, [pc, #300]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008fa4:	681b      	ldr	r3, [r3, #0]
 c008fa6:	4a4a      	ldr	r2, [pc, #296]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008fa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c008fac:	6013      	str	r3, [r2, #0]
 c008fae:	4b48      	ldr	r3, [pc, #288]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008fb0:	681b      	ldr	r3, [r3, #0]
 c008fb2:	4a47      	ldr	r2, [pc, #284]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008fb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c008fb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c008fba:	687b      	ldr	r3, [r7, #4]
 c008fbc:	685b      	ldr	r3, [r3, #4]
 c008fbe:	2b00      	cmp	r3, #0
 c008fc0:	d014      	beq.n	c008fec <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 c008fc2:	f7fd fb1f 	bl	c006604 <HAL_GetTick>
 c008fc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c008fc8:	e009      	b.n	c008fde <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c008fca:	f7fd fb1b 	bl	c006604 <HAL_GetTick>
 c008fce:	4602      	mov	r2, r0
 c008fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c008fd2:	1ad3      	subs	r3, r2, r3
 c008fd4:	2b64      	cmp	r3, #100	@ 0x64
 c008fd6:	d902      	bls.n	c008fde <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 c008fd8:	2303      	movs	r3, #3
 c008fda:	f000 bcd4 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c008fde:	4b3c      	ldr	r3, [pc, #240]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c008fe0:	681b      	ldr	r3, [r3, #0]
 c008fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c008fe6:	2b00      	cmp	r3, #0
 c008fe8:	d0ef      	beq.n	c008fca <HAL_RCC_OscConfig+0x3ee>
 c008fea:	e013      	b.n	c009014 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 c008fec:	f7fd fb0a 	bl	c006604 <HAL_GetTick>
 c008ff0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c008ff2:	e009      	b.n	c009008 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c008ff4:	f7fd fb06 	bl	c006604 <HAL_GetTick>
 c008ff8:	4602      	mov	r2, r0
 c008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c008ffc:	1ad3      	subs	r3, r2, r3
 c008ffe:	2b64      	cmp	r3, #100	@ 0x64
 c009000:	d902      	bls.n	c009008 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 c009002:	2303      	movs	r3, #3
 c009004:	f000 bcbf 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c009008:	4b31      	ldr	r3, [pc, #196]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c00900a:	681b      	ldr	r3, [r3, #0]
 c00900c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c009010:	2b00      	cmp	r3, #0
 c009012:	d1ef      	bne.n	c008ff4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c009014:	687b      	ldr	r3, [r7, #4]
 c009016:	681b      	ldr	r3, [r3, #0]
 c009018:	f003 0302 	and.w	r3, r3, #2
 c00901c:	2b00      	cmp	r3, #0
 c00901e:	d05f      	beq.n	c0090e0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c009022:	2b04      	cmp	r3, #4
 c009024:	d005      	beq.n	c009032 <HAL_RCC_OscConfig+0x456>
 c009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c009028:	2b0c      	cmp	r3, #12
 c00902a:	d114      	bne.n	c009056 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00902c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00902e:	2b02      	cmp	r3, #2
 c009030:	d111      	bne.n	c009056 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c009032:	687b      	ldr	r3, [r7, #4]
 c009034:	68db      	ldr	r3, [r3, #12]
 c009036:	2b00      	cmp	r3, #0
 c009038:	d102      	bne.n	c009040 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 c00903a:	2301      	movs	r3, #1
 c00903c:	f000 bca3 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c009040:	4b23      	ldr	r3, [pc, #140]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c009042:	691b      	ldr	r3, [r3, #16]
 c009044:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c009048:	687b      	ldr	r3, [r7, #4]
 c00904a:	691b      	ldr	r3, [r3, #16]
 c00904c:	041b      	lsls	r3, r3, #16
 c00904e:	4920      	ldr	r1, [pc, #128]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c009050:	4313      	orrs	r3, r2
 c009052:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c009054:	e044      	b.n	c0090e0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c009056:	687b      	ldr	r3, [r7, #4]
 c009058:	68db      	ldr	r3, [r3, #12]
 c00905a:	2b00      	cmp	r3, #0
 c00905c:	d024      	beq.n	c0090a8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 c00905e:	4b1c      	ldr	r3, [pc, #112]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c009060:	681b      	ldr	r3, [r3, #0]
 c009062:	4a1b      	ldr	r2, [pc, #108]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c009064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c009068:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00906a:	f7fd facb 	bl	c006604 <HAL_GetTick>
 c00906e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c009070:	e009      	b.n	c009086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c009072:	f7fd fac7 	bl	c006604 <HAL_GetTick>
 c009076:	4602      	mov	r2, r0
 c009078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00907a:	1ad3      	subs	r3, r2, r3
 c00907c:	2b02      	cmp	r3, #2
 c00907e:	d902      	bls.n	c009086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 c009080:	2303      	movs	r3, #3
 c009082:	f000 bc80 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c009086:	4b12      	ldr	r3, [pc, #72]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c009088:	681b      	ldr	r3, [r3, #0]
 c00908a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00908e:	2b00      	cmp	r3, #0
 c009090:	d0ef      	beq.n	c009072 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c009092:	4b0f      	ldr	r3, [pc, #60]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c009094:	691b      	ldr	r3, [r3, #16]
 c009096:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c00909a:	687b      	ldr	r3, [r7, #4]
 c00909c:	691b      	ldr	r3, [r3, #16]
 c00909e:	041b      	lsls	r3, r3, #16
 c0090a0:	490b      	ldr	r1, [pc, #44]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c0090a2:	4313      	orrs	r3, r2
 c0090a4:	610b      	str	r3, [r1, #16]
 c0090a6:	e01b      	b.n	c0090e0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 c0090a8:	4b09      	ldr	r3, [pc, #36]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c0090aa:	681b      	ldr	r3, [r3, #0]
 c0090ac:	4a08      	ldr	r2, [pc, #32]	@ (c0090d0 <HAL_RCC_OscConfig+0x4f4>)
 c0090ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c0090b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0090b4:	f7fd faa6 	bl	c006604 <HAL_GetTick>
 c0090b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0090ba:	e00b      	b.n	c0090d4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0090bc:	f7fd faa2 	bl	c006604 <HAL_GetTick>
 c0090c0:	4602      	mov	r2, r0
 c0090c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0090c4:	1ad3      	subs	r3, r2, r3
 c0090c6:	2b02      	cmp	r3, #2
 c0090c8:	d904      	bls.n	c0090d4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 c0090ca:	2303      	movs	r3, #3
 c0090cc:	f000 bc5b 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
 c0090d0:	56020c00 	.word	0x56020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0090d4:	4baf      	ldr	r3, [pc, #700]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0090d6:	681b      	ldr	r3, [r3, #0]
 c0090d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0090dc:	2b00      	cmp	r3, #0
 c0090de:	d1ed      	bne.n	c0090bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0090e0:	687b      	ldr	r3, [r7, #4]
 c0090e2:	681b      	ldr	r3, [r3, #0]
 c0090e4:	f003 0308 	and.w	r3, r3, #8
 c0090e8:	2b00      	cmp	r3, #0
 c0090ea:	f000 80c8 	beq.w	c00927e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 c0090ee:	2300      	movs	r3, #0
 c0090f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c0090f4:	4ba7      	ldr	r3, [pc, #668]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0090f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0090fa:	f003 0304 	and.w	r3, r3, #4
 c0090fe:	2b00      	cmp	r3, #0
 c009100:	d111      	bne.n	c009126 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c009102:	4ba4      	ldr	r3, [pc, #656]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009108:	4aa2      	ldr	r2, [pc, #648]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c00910a:	f043 0304 	orr.w	r3, r3, #4
 c00910e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c009112:	4ba0      	ldr	r3, [pc, #640]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009118:	f003 0304 	and.w	r3, r3, #4
 c00911c:	617b      	str	r3, [r7, #20]
 c00911e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 c009120:	2301      	movs	r3, #1
 c009122:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c009126:	4b9c      	ldr	r3, [pc, #624]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c009128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00912a:	f003 0301 	and.w	r3, r3, #1
 c00912e:	2b00      	cmp	r3, #0
 c009130:	d119      	bne.n	c009166 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c009132:	4b99      	ldr	r3, [pc, #612]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c009134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009136:	4a98      	ldr	r2, [pc, #608]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c009138:	f043 0301 	orr.w	r3, r3, #1
 c00913c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c00913e:	f7fd fa61 	bl	c006604 <HAL_GetTick>
 c009142:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c009144:	e009      	b.n	c00915a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c009146:	f7fd fa5d 	bl	c006604 <HAL_GetTick>
 c00914a:	4602      	mov	r2, r0
 c00914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00914e:	1ad3      	subs	r3, r2, r3
 c009150:	2b02      	cmp	r3, #2
 c009152:	d902      	bls.n	c00915a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 c009154:	2303      	movs	r3, #3
 c009156:	f000 bc16 	b.w	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c00915a:	4b8f      	ldr	r3, [pc, #572]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c00915c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00915e:	f003 0301 	and.w	r3, r3, #1
 c009162:	2b00      	cmp	r3, #0
 c009164:	d0ef      	beq.n	c009146 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c009166:	687b      	ldr	r3, [r7, #4]
 c009168:	695b      	ldr	r3, [r3, #20]
 c00916a:	2b00      	cmp	r3, #0
 c00916c:	d05f      	beq.n	c00922e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 c00916e:	4b89      	ldr	r3, [pc, #548]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009174:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 c009176:	687b      	ldr	r3, [r7, #4]
 c009178:	699a      	ldr	r2, [r3, #24]
 c00917a:	6a3b      	ldr	r3, [r7, #32]
 c00917c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c009180:	429a      	cmp	r2, r3
 c009182:	d037      	beq.n	c0091f4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c009184:	6a3b      	ldr	r3, [r7, #32]
 c009186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00918a:	2b00      	cmp	r3, #0
 c00918c:	d006      	beq.n	c00919c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 c00918e:	6a3b      	ldr	r3, [r7, #32]
 c009190:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c009194:	2b00      	cmp	r3, #0
 c009196:	d101      	bne.n	c00919c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 c009198:	2301      	movs	r3, #1
 c00919a:	e3f4      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 c00919c:	6a3b      	ldr	r3, [r7, #32]
 c00919e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 c0091a2:	2b00      	cmp	r3, #0
 c0091a4:	d01b      	beq.n	c0091de <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 c0091a6:	4b7b      	ldr	r3, [pc, #492]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0091a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0091ac:	4a79      	ldr	r2, [pc, #484]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0091ae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c0091b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 c0091b6:	f7fd fa25 	bl	c006604 <HAL_GetTick>
 c0091ba:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c0091bc:	e008      	b.n	c0091d0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0091be:	f7fd fa21 	bl	c006604 <HAL_GetTick>
 c0091c2:	4602      	mov	r2, r0
 c0091c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0091c6:	1ad3      	subs	r3, r2, r3
 c0091c8:	2b05      	cmp	r3, #5
 c0091ca:	d901      	bls.n	c0091d0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 c0091cc:	2303      	movs	r3, #3
 c0091ce:	e3da      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c0091d0:	4b70      	ldr	r3, [pc, #448]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0091d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0091d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c0091da:	2b00      	cmp	r3, #0
 c0091dc:	d1ef      	bne.n	c0091be <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 c0091de:	4b6d      	ldr	r3, [pc, #436]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0091e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0091e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 c0091e8:	687b      	ldr	r3, [r7, #4]
 c0091ea:	699b      	ldr	r3, [r3, #24]
 c0091ec:	4969      	ldr	r1, [pc, #420]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0091ee:	4313      	orrs	r3, r2
 c0091f0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 c0091f4:	4b67      	ldr	r3, [pc, #412]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0091f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0091fa:	4a66      	ldr	r2, [pc, #408]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0091fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c009200:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c009204:	f7fd f9fe 	bl	c006604 <HAL_GetTick>
 c009208:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c00920a:	e008      	b.n	c00921e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00920c:	f7fd f9fa 	bl	c006604 <HAL_GetTick>
 c009210:	4602      	mov	r2, r0
 c009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009214:	1ad3      	subs	r3, r2, r3
 c009216:	2b05      	cmp	r3, #5
 c009218:	d901      	bls.n	c00921e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 c00921a:	2303      	movs	r3, #3
 c00921c:	e3b3      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c00921e:	4b5d      	ldr	r3, [pc, #372]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c009228:	2b00      	cmp	r3, #0
 c00922a:	d0ef      	beq.n	c00920c <HAL_RCC_OscConfig+0x630>
 c00922c:	e01b      	b.n	c009266 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 c00922e:	4b59      	ldr	r3, [pc, #356]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009234:	4a57      	ldr	r2, [pc, #348]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009236:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c00923a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c00923e:	f7fd f9e1 	bl	c006604 <HAL_GetTick>
 c009242:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c009244:	e008      	b.n	c009258 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c009246:	f7fd f9dd 	bl	c006604 <HAL_GetTick>
 c00924a:	4602      	mov	r2, r0
 c00924c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00924e:	1ad3      	subs	r3, r2, r3
 c009250:	2b05      	cmp	r3, #5
 c009252:	d901      	bls.n	c009258 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 c009254:	2303      	movs	r3, #3
 c009256:	e396      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c009258:	4b4e      	ldr	r3, [pc, #312]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c00925a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00925e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c009262:	2b00      	cmp	r3, #0
 c009264:	d1ef      	bne.n	c009246 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c009266:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 c00926a:	2b01      	cmp	r3, #1
 c00926c:	d107      	bne.n	c00927e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00926e:	4b49      	ldr	r3, [pc, #292]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009274:	4a47      	ldr	r2, [pc, #284]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009276:	f023 0304 	bic.w	r3, r3, #4
 c00927a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00927e:	687b      	ldr	r3, [r7, #4]
 c009280:	681b      	ldr	r3, [r3, #0]
 c009282:	f003 0304 	and.w	r3, r3, #4
 c009286:	2b00      	cmp	r3, #0
 c009288:	f000 8111 	beq.w	c0094ae <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 c00928c:	2300      	movs	r3, #0
 c00928e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c009292:	4b40      	ldr	r3, [pc, #256]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009298:	f003 0304 	and.w	r3, r3, #4
 c00929c:	2b00      	cmp	r3, #0
 c00929e:	d111      	bne.n	c0092c4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0092a0:	4b3c      	ldr	r3, [pc, #240]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0092a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0092a6:	4a3b      	ldr	r2, [pc, #236]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0092a8:	f043 0304 	orr.w	r3, r3, #4
 c0092ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c0092b0:	4b38      	ldr	r3, [pc, #224]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c0092b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0092b6:	f003 0304 	and.w	r3, r3, #4
 c0092ba:	613b      	str	r3, [r7, #16]
 c0092bc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 c0092be:	2301      	movs	r3, #1
 c0092c0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0092c4:	4b34      	ldr	r3, [pc, #208]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c0092c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0092c8:	f003 0301 	and.w	r3, r3, #1
 c0092cc:	2b00      	cmp	r3, #0
 c0092ce:	d118      	bne.n	c009302 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c0092d0:	4b31      	ldr	r3, [pc, #196]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c0092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0092d4:	4a30      	ldr	r2, [pc, #192]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c0092d6:	f043 0301 	orr.w	r3, r3, #1
 c0092da:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c0092dc:	f7fd f992 	bl	c006604 <HAL_GetTick>
 c0092e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0092e2:	e008      	b.n	c0092f6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0092e4:	f7fd f98e 	bl	c006604 <HAL_GetTick>
 c0092e8:	4602      	mov	r2, r0
 c0092ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0092ec:	1ad3      	subs	r3, r2, r3
 c0092ee:	2b02      	cmp	r3, #2
 c0092f0:	d901      	bls.n	c0092f6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 c0092f2:	2303      	movs	r3, #3
 c0092f4:	e347      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0092f6:	4b28      	ldr	r3, [pc, #160]	@ (c009398 <HAL_RCC_OscConfig+0x7bc>)
 c0092f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0092fa:	f003 0301 	and.w	r3, r3, #1
 c0092fe:	2b00      	cmp	r3, #0
 c009300:	d0f0      	beq.n	c0092e4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c009302:	687b      	ldr	r3, [r7, #4]
 c009304:	689b      	ldr	r3, [r3, #8]
 c009306:	f003 0301 	and.w	r3, r3, #1
 c00930a:	2b00      	cmp	r3, #0
 c00930c:	d01f      	beq.n	c00934e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00930e:	687b      	ldr	r3, [r7, #4]
 c009310:	689b      	ldr	r3, [r3, #8]
 c009312:	f003 0304 	and.w	r3, r3, #4
 c009316:	2b00      	cmp	r3, #0
 c009318:	d010      	beq.n	c00933c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00931a:	4b1e      	ldr	r3, [pc, #120]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c00931c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009320:	4a1c      	ldr	r2, [pc, #112]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009322:	f043 0304 	orr.w	r3, r3, #4
 c009326:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00932a:	4b1a      	ldr	r3, [pc, #104]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c00932c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009330:	4a18      	ldr	r2, [pc, #96]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009332:	f043 0301 	orr.w	r3, r3, #1
 c009336:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c00933a:	e018      	b.n	c00936e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00933c:	4b15      	ldr	r3, [pc, #84]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c00933e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009342:	4a14      	ldr	r2, [pc, #80]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009344:	f043 0301 	orr.w	r3, r3, #1
 c009348:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c00934c:	e00f      	b.n	c00936e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00934e:	4b11      	ldr	r3, [pc, #68]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009354:	4a0f      	ldr	r2, [pc, #60]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009356:	f023 0301 	bic.w	r3, r3, #1
 c00935a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00935e:	4b0d      	ldr	r3, [pc, #52]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009364:	4a0b      	ldr	r2, [pc, #44]	@ (c009394 <HAL_RCC_OscConfig+0x7b8>)
 c009366:	f023 0304 	bic.w	r3, r3, #4
 c00936a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c00936e:	687b      	ldr	r3, [r7, #4]
 c009370:	689b      	ldr	r3, [r3, #8]
 c009372:	2b00      	cmp	r3, #0
 c009374:	d057      	beq.n	c009426 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 c009376:	f7fd f945 	bl	c006604 <HAL_GetTick>
 c00937a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00937c:	e00e      	b.n	c00939c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00937e:	f7fd f941 	bl	c006604 <HAL_GetTick>
 c009382:	4602      	mov	r2, r0
 c009384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009386:	1ad3      	subs	r3, r2, r3
 c009388:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00938c:	4293      	cmp	r3, r2
 c00938e:	d905      	bls.n	c00939c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 c009390:	2303      	movs	r3, #3
 c009392:	e2f8      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
 c009394:	56020c00 	.word	0x56020c00
 c009398:	56020800 	.word	0x56020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00939c:	4b9c      	ldr	r3, [pc, #624]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c00939e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0093a2:	f003 0302 	and.w	r3, r3, #2
 c0093a6:	2b00      	cmp	r3, #0
 c0093a8:	d0e9      	beq.n	c00937e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0093aa:	687b      	ldr	r3, [r7, #4]
 c0093ac:	689b      	ldr	r3, [r3, #8]
 c0093ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c0093b2:	2b00      	cmp	r3, #0
 c0093b4:	d01b      	beq.n	c0093ee <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0093b6:	4b96      	ldr	r3, [pc, #600]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0093b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0093bc:	4a94      	ldr	r2, [pc, #592]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0093be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c0093c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0093c6:	e00a      	b.n	c0093de <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0093c8:	f7fd f91c 	bl	c006604 <HAL_GetTick>
 c0093cc:	4602      	mov	r2, r0
 c0093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0093d0:	1ad3      	subs	r3, r2, r3
 c0093d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 c0093d6:	4293      	cmp	r3, r2
 c0093d8:	d901      	bls.n	c0093de <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 c0093da:	2303      	movs	r3, #3
 c0093dc:	e2d3      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0093de:	4b8c      	ldr	r3, [pc, #560]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0093e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0093e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c0093e8:	2b00      	cmp	r3, #0
 c0093ea:	d0ed      	beq.n	c0093c8 <HAL_RCC_OscConfig+0x7ec>
 c0093ec:	e053      	b.n	c009496 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0093ee:	4b88      	ldr	r3, [pc, #544]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0093f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0093f4:	4a86      	ldr	r2, [pc, #536]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0093f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c0093fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0093fe:	e00a      	b.n	c009416 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c009400:	f7fd f900 	bl	c006604 <HAL_GetTick>
 c009404:	4602      	mov	r2, r0
 c009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009408:	1ad3      	subs	r3, r2, r3
 c00940a:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00940e:	4293      	cmp	r3, r2
 c009410:	d901      	bls.n	c009416 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 c009412:	2303      	movs	r3, #3
 c009414:	e2b7      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c009416:	4b7e      	ldr	r3, [pc, #504]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00941c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c009420:	2b00      	cmp	r3, #0
 c009422:	d1ed      	bne.n	c009400 <HAL_RCC_OscConfig+0x824>
 c009424:	e037      	b.n	c009496 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 c009426:	f7fd f8ed 	bl	c006604 <HAL_GetTick>
 c00942a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00942c:	e00a      	b.n	c009444 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00942e:	f7fd f8e9 	bl	c006604 <HAL_GetTick>
 c009432:	4602      	mov	r2, r0
 c009434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009436:	1ad3      	subs	r3, r2, r3
 c009438:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00943c:	4293      	cmp	r3, r2
 c00943e:	d901      	bls.n	c009444 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 c009440:	2303      	movs	r3, #3
 c009442:	e2a0      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c009444:	4b72      	ldr	r3, [pc, #456]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00944a:	f003 0302 	and.w	r3, r3, #2
 c00944e:	2b00      	cmp	r3, #0
 c009450:	d1ed      	bne.n	c00942e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c009452:	4b6f      	ldr	r3, [pc, #444]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c00945c:	2b00      	cmp	r3, #0
 c00945e:	d01a      	beq.n	c009496 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c009460:	4b6b      	ldr	r3, [pc, #428]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c009466:	4a6a      	ldr	r2, [pc, #424]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009468:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c00946c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c009470:	e00a      	b.n	c009488 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c009472:	f7fd f8c7 	bl	c006604 <HAL_GetTick>
 c009476:	4602      	mov	r2, r0
 c009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00947a:	1ad3      	subs	r3, r2, r3
 c00947c:	f241 3288 	movw	r2, #5000	@ 0x1388
 c009480:	4293      	cmp	r3, r2
 c009482:	d901      	bls.n	c009488 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 c009484:	2303      	movs	r3, #3
 c009486:	e27e      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c009488:	4b61      	ldr	r3, [pc, #388]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c00948a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00948e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c009492:	2b00      	cmp	r3, #0
 c009494:	d1ed      	bne.n	c009472 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c009496:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 c00949a:	2b01      	cmp	r3, #1
 c00949c:	d107      	bne.n	c0094ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00949e:	4b5c      	ldr	r3, [pc, #368]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0094a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0094a4:	4a5a      	ldr	r2, [pc, #360]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0094a6:	f023 0304 	bic.w	r3, r3, #4
 c0094aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c0094ae:	687b      	ldr	r3, [r7, #4]
 c0094b0:	681b      	ldr	r3, [r3, #0]
 c0094b2:	f003 0320 	and.w	r3, r3, #32
 c0094b6:	2b00      	cmp	r3, #0
 c0094b8:	d036      	beq.n	c009528 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c0094ba:	687b      	ldr	r3, [r7, #4]
 c0094bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0094be:	2b00      	cmp	r3, #0
 c0094c0:	d019      	beq.n	c0094f6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 c0094c2:	4b53      	ldr	r3, [pc, #332]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0094c4:	681b      	ldr	r3, [r3, #0]
 c0094c6:	4a52      	ldr	r2, [pc, #328]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0094c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 c0094cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c0094ce:	f7fd f899 	bl	c006604 <HAL_GetTick>
 c0094d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c0094d4:	e008      	b.n	c0094e8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0094d6:	f7fd f895 	bl	c006604 <HAL_GetTick>
 c0094da:	4602      	mov	r2, r0
 c0094dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0094de:	1ad3      	subs	r3, r2, r3
 c0094e0:	2b02      	cmp	r3, #2
 c0094e2:	d901      	bls.n	c0094e8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 c0094e4:	2303      	movs	r3, #3
 c0094e6:	e24e      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c0094e8:	4b49      	ldr	r3, [pc, #292]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0094ea:	681b      	ldr	r3, [r3, #0]
 c0094ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c0094f0:	2b00      	cmp	r3, #0
 c0094f2:	d0f0      	beq.n	c0094d6 <HAL_RCC_OscConfig+0x8fa>
 c0094f4:	e018      	b.n	c009528 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 c0094f6:	4b46      	ldr	r3, [pc, #280]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0094f8:	681b      	ldr	r3, [r3, #0]
 c0094fa:	4a45      	ldr	r2, [pc, #276]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0094fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 c009500:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c009502:	f7fd f87f 	bl	c006604 <HAL_GetTick>
 c009506:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c009508:	e008      	b.n	c00951c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00950a:	f7fd f87b 	bl	c006604 <HAL_GetTick>
 c00950e:	4602      	mov	r2, r0
 c009510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009512:	1ad3      	subs	r3, r2, r3
 c009514:	2b02      	cmp	r3, #2
 c009516:	d901      	bls.n	c00951c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 c009518:	2303      	movs	r3, #3
 c00951a:	e234      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c00951c:	4b3c      	ldr	r3, [pc, #240]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c00951e:	681b      	ldr	r3, [r3, #0]
 c009520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c009524:	2b00      	cmp	r3, #0
 c009526:	d1f0      	bne.n	c00950a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 c009528:	687b      	ldr	r3, [r7, #4]
 c00952a:	681b      	ldr	r3, [r3, #0]
 c00952c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c009530:	2b00      	cmp	r3, #0
 c009532:	d036      	beq.n	c0095a2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 c009534:	687b      	ldr	r3, [r7, #4]
 c009536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c009538:	2b00      	cmp	r3, #0
 c00953a:	d019      	beq.n	c009570 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 c00953c:	4b34      	ldr	r3, [pc, #208]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c00953e:	681b      	ldr	r3, [r3, #0]
 c009540:	4a33      	ldr	r2, [pc, #204]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c009546:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c009548:	f7fd f85c 	bl	c006604 <HAL_GetTick>
 c00954c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c00954e:	e008      	b.n	c009562 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c009550:	f7fd f858 	bl	c006604 <HAL_GetTick>
 c009554:	4602      	mov	r2, r0
 c009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009558:	1ad3      	subs	r3, r2, r3
 c00955a:	2b02      	cmp	r3, #2
 c00955c:	d901      	bls.n	c009562 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 c00955e:	2303      	movs	r3, #3
 c009560:	e211      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c009562:	4b2b      	ldr	r3, [pc, #172]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009564:	681b      	ldr	r3, [r3, #0]
 c009566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c00956a:	2b00      	cmp	r3, #0
 c00956c:	d0f0      	beq.n	c009550 <HAL_RCC_OscConfig+0x974>
 c00956e:	e018      	b.n	c0095a2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 c009570:	4b27      	ldr	r3, [pc, #156]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009572:	681b      	ldr	r3, [r3, #0]
 c009574:	4a26      	ldr	r2, [pc, #152]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 c00957a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c00957c:	f7fd f842 	bl	c006604 <HAL_GetTick>
 c009580:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c009582:	e008      	b.n	c009596 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c009584:	f7fd f83e 	bl	c006604 <HAL_GetTick>
 c009588:	4602      	mov	r2, r0
 c00958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00958c:	1ad3      	subs	r3, r2, r3
 c00958e:	2b02      	cmp	r3, #2
 c009590:	d901      	bls.n	c009596 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 c009592:	2303      	movs	r3, #3
 c009594:	e1f7      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c009596:	4b1e      	ldr	r3, [pc, #120]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c009598:	681b      	ldr	r3, [r3, #0]
 c00959a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c00959e:	2b00      	cmp	r3, #0
 c0095a0:	d1f0      	bne.n	c009584 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 c0095a2:	687b      	ldr	r3, [r7, #4]
 c0095a4:	681b      	ldr	r3, [r3, #0]
 c0095a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0095aa:	2b00      	cmp	r3, #0
 c0095ac:	d07f      	beq.n	c0096ae <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 c0095ae:	687b      	ldr	r3, [r7, #4]
 c0095b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0095b2:	2b00      	cmp	r3, #0
 c0095b4:	d062      	beq.n	c00967c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 c0095b6:	4b16      	ldr	r3, [pc, #88]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0095b8:	689b      	ldr	r3, [r3, #8]
 c0095ba:	4a15      	ldr	r2, [pc, #84]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0095bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c0095c0:	6093      	str	r3, [r2, #8]
 c0095c2:	4b13      	ldr	r3, [pc, #76]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0095c4:	689b      	ldr	r3, [r3, #8]
 c0095c6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 c0095ca:	687b      	ldr	r3, [r7, #4]
 c0095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0095ce:	4910      	ldr	r1, [pc, #64]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0095d0:	4313      	orrs	r3, r2
 c0095d2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c0095d4:	687b      	ldr	r3, [r7, #4]
 c0095d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0095d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c0095dc:	d309      	bcc.n	c0095f2 <HAL_RCC_OscConfig+0xa16>
 c0095de:	4b0c      	ldr	r3, [pc, #48]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0095e0:	68db      	ldr	r3, [r3, #12]
 c0095e2:	f023 021f 	bic.w	r2, r3, #31
 c0095e6:	687b      	ldr	r3, [r7, #4]
 c0095e8:	6a1b      	ldr	r3, [r3, #32]
 c0095ea:	4909      	ldr	r1, [pc, #36]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0095ec:	4313      	orrs	r3, r2
 c0095ee:	60cb      	str	r3, [r1, #12]
 c0095f0:	e02a      	b.n	c009648 <HAL_RCC_OscConfig+0xa6c>
 c0095f2:	687b      	ldr	r3, [r7, #4]
 c0095f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0095f6:	2b00      	cmp	r3, #0
 c0095f8:	da0c      	bge.n	c009614 <HAL_RCC_OscConfig+0xa38>
 c0095fa:	4b05      	ldr	r3, [pc, #20]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c0095fc:	68db      	ldr	r3, [r3, #12]
 c0095fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c009602:	687b      	ldr	r3, [r7, #4]
 c009604:	6a1b      	ldr	r3, [r3, #32]
 c009606:	015b      	lsls	r3, r3, #5
 c009608:	4901      	ldr	r1, [pc, #4]	@ (c009610 <HAL_RCC_OscConfig+0xa34>)
 c00960a:	4313      	orrs	r3, r2
 c00960c:	60cb      	str	r3, [r1, #12]
 c00960e:	e01b      	b.n	c009648 <HAL_RCC_OscConfig+0xa6c>
 c009610:	56020c00 	.word	0x56020c00
 c009614:	687b      	ldr	r3, [r7, #4]
 c009616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c009618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c00961c:	d30a      	bcc.n	c009634 <HAL_RCC_OscConfig+0xa58>
 c00961e:	4ba1      	ldr	r3, [pc, #644]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009620:	68db      	ldr	r3, [r3, #12]
 c009622:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c009626:	687b      	ldr	r3, [r7, #4]
 c009628:	6a1b      	ldr	r3, [r3, #32]
 c00962a:	029b      	lsls	r3, r3, #10
 c00962c:	499d      	ldr	r1, [pc, #628]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00962e:	4313      	orrs	r3, r2
 c009630:	60cb      	str	r3, [r1, #12]
 c009632:	e009      	b.n	c009648 <HAL_RCC_OscConfig+0xa6c>
 c009634:	4b9b      	ldr	r3, [pc, #620]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009636:	68db      	ldr	r3, [r3, #12]
 c009638:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c00963c:	687b      	ldr	r3, [r7, #4]
 c00963e:	6a1b      	ldr	r3, [r3, #32]
 c009640:	03db      	lsls	r3, r3, #15
 c009642:	4998      	ldr	r1, [pc, #608]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009644:	4313      	orrs	r3, r2
 c009646:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 c009648:	4b96      	ldr	r3, [pc, #600]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00964a:	681b      	ldr	r3, [r3, #0]
 c00964c:	4a95      	ldr	r2, [pc, #596]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00964e:	f043 0310 	orr.w	r3, r3, #16
 c009652:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c009654:	f7fc ffd6 	bl	c006604 <HAL_GetTick>
 c009658:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c00965a:	e008      	b.n	c00966e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c00965c:	f7fc ffd2 	bl	c006604 <HAL_GetTick>
 c009660:	4602      	mov	r2, r0
 c009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009664:	1ad3      	subs	r3, r2, r3
 c009666:	2b02      	cmp	r3, #2
 c009668:	d901      	bls.n	c00966e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 c00966a:	2303      	movs	r3, #3
 c00966c:	e18b      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c00966e:	4b8d      	ldr	r3, [pc, #564]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009670:	681b      	ldr	r3, [r3, #0]
 c009672:	f003 0320 	and.w	r3, r3, #32
 c009676:	2b00      	cmp	r3, #0
 c009678:	d0f0      	beq.n	c00965c <HAL_RCC_OscConfig+0xa80>
 c00967a:	e018      	b.n	c0096ae <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 c00967c:	4b89      	ldr	r3, [pc, #548]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00967e:	681b      	ldr	r3, [r3, #0]
 c009680:	4a88      	ldr	r2, [pc, #544]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009682:	f023 0310 	bic.w	r3, r3, #16
 c009686:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c009688:	f7fc ffbc 	bl	c006604 <HAL_GetTick>
 c00968c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c00968e:	e008      	b.n	c0096a2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c009690:	f7fc ffb8 	bl	c006604 <HAL_GetTick>
 c009694:	4602      	mov	r2, r0
 c009696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c009698:	1ad3      	subs	r3, r2, r3
 c00969a:	2b02      	cmp	r3, #2
 c00969c:	d901      	bls.n	c0096a2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 c00969e:	2303      	movs	r3, #3
 c0096a0:	e171      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c0096a2:	4b80      	ldr	r3, [pc, #512]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0096a4:	681b      	ldr	r3, [r3, #0]
 c0096a6:	f003 0320 	and.w	r3, r3, #32
 c0096aa:	2b00      	cmp	r3, #0
 c0096ac:	d1f0      	bne.n	c009690 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 c0096ae:	687b      	ldr	r3, [r7, #4]
 c0096b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0096b2:	2b00      	cmp	r3, #0
 c0096b4:	f000 8166 	beq.w	c009984 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 c0096b8:	2300      	movs	r3, #0
 c0096ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0096be:	4b79      	ldr	r3, [pc, #484]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0096c0:	69db      	ldr	r3, [r3, #28]
 c0096c2:	f003 030c 	and.w	r3, r3, #12
 c0096c6:	2b0c      	cmp	r3, #12
 c0096c8:	f000 80f2 	beq.w	c0098b0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 c0096cc:	687b      	ldr	r3, [r7, #4]
 c0096ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0096d0:	2b02      	cmp	r3, #2
 c0096d2:	f040 80c5 	bne.w	c009860 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c0096d6:	4b73      	ldr	r3, [pc, #460]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0096d8:	681b      	ldr	r3, [r3, #0]
 c0096da:	4a72      	ldr	r2, [pc, #456]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0096dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c0096e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0096e2:	f7fc ff8f 	bl	c006604 <HAL_GetTick>
 c0096e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0096e8:	e008      	b.n	c0096fc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0096ea:	f7fc ff8b 	bl	c006604 <HAL_GetTick>
 c0096ee:	4602      	mov	r2, r0
 c0096f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0096f2:	1ad3      	subs	r3, r2, r3
 c0096f4:	2b02      	cmp	r3, #2
 c0096f6:	d901      	bls.n	c0096fc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 c0096f8:	2303      	movs	r3, #3
 c0096fa:	e144      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0096fc:	4b69      	ldr	r3, [pc, #420]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0096fe:	681b      	ldr	r3, [r3, #0]
 c009700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c009704:	2b00      	cmp	r3, #0
 c009706:	d1f0      	bne.n	c0096ea <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c009708:	4b66      	ldr	r3, [pc, #408]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00970a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00970e:	f003 0304 	and.w	r3, r3, #4
 c009712:	2b00      	cmp	r3, #0
 c009714:	d111      	bne.n	c00973a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 c009716:	4b63      	ldr	r3, [pc, #396]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00971c:	4a61      	ldr	r2, [pc, #388]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00971e:	f043 0304 	orr.w	r3, r3, #4
 c009722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c009726:	4b5f      	ldr	r3, [pc, #380]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00972c:	f003 0304 	and.w	r3, r3, #4
 c009730:	60fb      	str	r3, [r7, #12]
 c009732:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 c009734:	2301      	movs	r3, #1
 c009736:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 c00973a:	4b5b      	ldr	r3, [pc, #364]	@ (c0098a8 <HAL_RCC_OscConfig+0xccc>)
 c00973c:	68db      	ldr	r3, [r3, #12]
 c00973e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c009742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c009746:	d102      	bne.n	c00974e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 c009748:	2301      	movs	r3, #1
 c00974a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c00974e:	4b56      	ldr	r3, [pc, #344]	@ (c0098a8 <HAL_RCC_OscConfig+0xccc>)
 c009750:	68db      	ldr	r3, [r3, #12]
 c009752:	4a55      	ldr	r2, [pc, #340]	@ (c0098a8 <HAL_RCC_OscConfig+0xccc>)
 c009754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c009758:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 c00975a:	4b52      	ldr	r3, [pc, #328]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00975c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00975e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c009762:	f023 0303 	bic.w	r3, r3, #3
 c009766:	687a      	ldr	r2, [r7, #4]
 c009768:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 c00976a:	687a      	ldr	r2, [r7, #4]
 c00976c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 c00976e:	3a01      	subs	r2, #1
 c009770:	0212      	lsls	r2, r2, #8
 c009772:	4311      	orrs	r1, r2
 c009774:	687a      	ldr	r2, [r7, #4]
 c009776:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 c009778:	430a      	orrs	r2, r1
 c00977a:	494a      	ldr	r1, [pc, #296]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c00977c:	4313      	orrs	r3, r2
 c00977e:	628b      	str	r3, [r1, #40]	@ 0x28
 c009780:	4b48      	ldr	r3, [pc, #288]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c009784:	4b49      	ldr	r3, [pc, #292]	@ (c0098ac <HAL_RCC_OscConfig+0xcd0>)
 c009786:	4013      	ands	r3, r2
 c009788:	687a      	ldr	r2, [r7, #4]
 c00978a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 c00978c:	3a01      	subs	r2, #1
 c00978e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c009792:	687a      	ldr	r2, [r7, #4]
 c009794:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 c009796:	3a01      	subs	r2, #1
 c009798:	0252      	lsls	r2, r2, #9
 c00979a:	b292      	uxth	r2, r2
 c00979c:	4311      	orrs	r1, r2
 c00979e:	687a      	ldr	r2, [r7, #4]
 c0097a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 c0097a2:	3a01      	subs	r2, #1
 c0097a4:	0412      	lsls	r2, r2, #16
 c0097a6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c0097aa:	4311      	orrs	r1, r2
 c0097ac:	687a      	ldr	r2, [r7, #4]
 c0097ae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 c0097b0:	3a01      	subs	r2, #1
 c0097b2:	0612      	lsls	r2, r2, #24
 c0097b4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c0097b8:	430a      	orrs	r2, r1
 c0097ba:	493a      	ldr	r1, [pc, #232]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097bc:	4313      	orrs	r3, r2
 c0097be:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c0097c0:	4b38      	ldr	r3, [pc, #224]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0097c4:	4a37      	ldr	r2, [pc, #220]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097c6:	f023 0310 	bic.w	r3, r3, #16
 c0097ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c0097cc:	687b      	ldr	r3, [r7, #4]
 c0097ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c0097d0:	4a34      	ldr	r2, [pc, #208]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097d2:	00db      	lsls	r3, r3, #3
 c0097d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c0097d6:	4b33      	ldr	r3, [pc, #204]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0097da:	4a32      	ldr	r2, [pc, #200]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097dc:	f043 0310 	orr.w	r3, r3, #16
 c0097e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 c0097e2:	4b30      	ldr	r3, [pc, #192]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0097e6:	f023 020c 	bic.w	r2, r3, #12
 c0097ea:	687b      	ldr	r3, [r7, #4]
 c0097ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c0097ee:	492d      	ldr	r1, [pc, #180]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c0097f0:	4313      	orrs	r3, r2
 c0097f2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 c0097f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 c0097f8:	2b01      	cmp	r3, #1
 c0097fa:	d105      	bne.n	c009808 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c0097fc:	4b2a      	ldr	r3, [pc, #168]	@ (c0098a8 <HAL_RCC_OscConfig+0xccc>)
 c0097fe:	68db      	ldr	r3, [r3, #12]
 c009800:	4a29      	ldr	r2, [pc, #164]	@ (c0098a8 <HAL_RCC_OscConfig+0xccc>)
 c009802:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c009806:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 c009808:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 c00980c:	2b01      	cmp	r3, #1
 c00980e:	d107      	bne.n	c009820 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 c009810:	4b24      	ldr	r3, [pc, #144]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009816:	4a23      	ldr	r2, [pc, #140]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009818:	f023 0304 	bic.w	r3, r3, #4
 c00981c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 c009820:	4b20      	ldr	r3, [pc, #128]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009822:	681b      	ldr	r3, [r3, #0]
 c009824:	4a1f      	ldr	r2, [pc, #124]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c00982a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00982c:	f7fc feea 	bl	c006604 <HAL_GetTick>
 c009830:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c009832:	e008      	b.n	c009846 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c009834:	f7fc fee6 	bl	c006604 <HAL_GetTick>
 c009838:	4602      	mov	r2, r0
 c00983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00983c:	1ad3      	subs	r3, r2, r3
 c00983e:	2b02      	cmp	r3, #2
 c009840:	d901      	bls.n	c009846 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 c009842:	2303      	movs	r3, #3
 c009844:	e09f      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c009846:	4b17      	ldr	r3, [pc, #92]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009848:	681b      	ldr	r3, [r3, #0]
 c00984a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c00984e:	2b00      	cmp	r3, #0
 c009850:	d0f0      	beq.n	c009834 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 c009852:	4b14      	ldr	r3, [pc, #80]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009856:	4a13      	ldr	r2, [pc, #76]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c00985c:	6293      	str	r3, [r2, #40]	@ 0x28
 c00985e:	e091      	b.n	c009984 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c009860:	4b10      	ldr	r3, [pc, #64]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009862:	681b      	ldr	r3, [r3, #0]
 c009864:	4a0f      	ldr	r2, [pc, #60]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c00986a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00986c:	f7fc feca 	bl	c006604 <HAL_GetTick>
 c009870:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c009872:	e008      	b.n	c009886 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c009874:	f7fc fec6 	bl	c006604 <HAL_GetTick>
 c009878:	4602      	mov	r2, r0
 c00987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00987c:	1ad3      	subs	r3, r2, r3
 c00987e:	2b02      	cmp	r3, #2
 c009880:	d901      	bls.n	c009886 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 c009882:	2303      	movs	r3, #3
 c009884:	e07f      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c009886:	4b07      	ldr	r3, [pc, #28]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009888:	681b      	ldr	r3, [r3, #0]
 c00988a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c00988e:	2b00      	cmp	r3, #0
 c009890:	d1f0      	bne.n	c009874 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 c009892:	4b04      	ldr	r3, [pc, #16]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009896:	4a03      	ldr	r2, [pc, #12]	@ (c0098a4 <HAL_RCC_OscConfig+0xcc8>)
 c009898:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 c00989c:	f023 0303 	bic.w	r3, r3, #3
 c0098a0:	6293      	str	r3, [r2, #40]	@ 0x28
 c0098a2:	e06f      	b.n	c009984 <HAL_RCC_OscConfig+0xda8>
 c0098a4:	56020c00 	.word	0x56020c00
 c0098a8:	56020800 	.word	0x56020800
 c0098ac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 c0098b0:	4b37      	ldr	r3, [pc, #220]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c0098b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0098b4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 c0098b6:	4b36      	ldr	r3, [pc, #216]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c0098b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0098ba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c0098bc:	687b      	ldr	r3, [r7, #4]
 c0098be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0098c0:	2b01      	cmp	r3, #1
 c0098c2:	d039      	beq.n	c009938 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c0098c4:	69fb      	ldr	r3, [r7, #28]
 c0098c6:	f003 0203 	and.w	r2, r3, #3
 c0098ca:	687b      	ldr	r3, [r7, #4]
 c0098cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c0098ce:	429a      	cmp	r2, r3
 c0098d0:	d132      	bne.n	c009938 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 c0098d2:	69fb      	ldr	r3, [r7, #28]
 c0098d4:	0a1b      	lsrs	r3, r3, #8
 c0098d6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c0098da:	687b      	ldr	r3, [r7, #4]
 c0098dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c0098de:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c0098e0:	429a      	cmp	r2, r3
 c0098e2:	d129      	bne.n	c009938 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c0098e4:	69fb      	ldr	r3, [r7, #28]
 c0098e6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 c0098ea:	687b      	ldr	r3, [r7, #4]
 c0098ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c0098ee:	429a      	cmp	r2, r3
 c0098f0:	d122      	bne.n	c009938 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c0098f2:	69bb      	ldr	r3, [r7, #24]
 c0098f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c0098f8:	687b      	ldr	r3, [r7, #4]
 c0098fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c0098fc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c0098fe:	429a      	cmp	r2, r3
 c009900:	d11a      	bne.n	c009938 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 c009902:	69bb      	ldr	r3, [r7, #24]
 c009904:	0a5b      	lsrs	r3, r3, #9
 c009906:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c00990a:	687b      	ldr	r3, [r7, #4]
 c00990c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c00990e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c009910:	429a      	cmp	r2, r3
 c009912:	d111      	bne.n	c009938 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 c009914:	69bb      	ldr	r3, [r7, #24]
 c009916:	0c1b      	lsrs	r3, r3, #16
 c009918:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c00991c:	687b      	ldr	r3, [r7, #4]
 c00991e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c009920:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c009922:	429a      	cmp	r2, r3
 c009924:	d108      	bne.n	c009938 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 c009926:	69bb      	ldr	r3, [r7, #24]
 c009928:	0e1b      	lsrs	r3, r3, #24
 c00992a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 c00992e:	687b      	ldr	r3, [r7, #4]
 c009930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c009932:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c009934:	429a      	cmp	r2, r3
 c009936:	d001      	beq.n	c00993c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 c009938:	2301      	movs	r3, #1
 c00993a:	e024      	b.n	c009986 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c00993c:	4b14      	ldr	r3, [pc, #80]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c00993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c009940:	08db      	lsrs	r3, r3, #3
 c009942:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 c009946:	687b      	ldr	r3, [r7, #4]
 c009948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c00994a:	429a      	cmp	r2, r3
 c00994c:	d01a      	beq.n	c009984 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c00994e:	4b10      	ldr	r3, [pc, #64]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c009950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009952:	4a0f      	ldr	r2, [pc, #60]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c009954:	f023 0310 	bic.w	r3, r3, #16
 c009958:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00995a:	f7fc fe53 	bl	c006604 <HAL_GetTick>
 c00995e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 c009960:	bf00      	nop
 c009962:	f7fc fe4f 	bl	c006604 <HAL_GetTick>
 c009966:	4602      	mov	r2, r0
 c009968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00996a:	4293      	cmp	r3, r2
 c00996c:	d0f9      	beq.n	c009962 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c00996e:	687b      	ldr	r3, [r7, #4]
 c009970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c009972:	4a07      	ldr	r2, [pc, #28]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c009974:	00db      	lsls	r3, r3, #3
 c009976:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c009978:	4b05      	ldr	r3, [pc, #20]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c00997a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00997c:	4a04      	ldr	r2, [pc, #16]	@ (c009990 <HAL_RCC_OscConfig+0xdb4>)
 c00997e:	f043 0310 	orr.w	r3, r3, #16
 c009982:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 c009984:	2300      	movs	r3, #0
}
 c009986:	4618      	mov	r0, r3
 c009988:	3738      	adds	r7, #56	@ 0x38
 c00998a:	46bd      	mov	sp, r7
 c00998c:	bd80      	pop	{r7, pc}
 c00998e:	bf00      	nop
 c009990:	56020c00 	.word	0x56020c00

0c009994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 c009994:	b580      	push	{r7, lr}
 c009996:	b086      	sub	sp, #24
 c009998:	af00      	add	r7, sp, #0
 c00999a:	6078      	str	r0, [r7, #4]
 c00999c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 c00999e:	687b      	ldr	r3, [r7, #4]
 c0099a0:	2b00      	cmp	r3, #0
 c0099a2:	d101      	bne.n	c0099a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 c0099a4:	2301      	movs	r3, #1
 c0099a6:	e1d9      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0099a8:	4b9b      	ldr	r3, [pc, #620]	@ (c009c18 <HAL_RCC_ClockConfig+0x284>)
 c0099aa:	681b      	ldr	r3, [r3, #0]
 c0099ac:	f003 030f 	and.w	r3, r3, #15
 c0099b0:	683a      	ldr	r2, [r7, #0]
 c0099b2:	429a      	cmp	r2, r3
 c0099b4:	d910      	bls.n	c0099d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0099b6:	4b98      	ldr	r3, [pc, #608]	@ (c009c18 <HAL_RCC_ClockConfig+0x284>)
 c0099b8:	681b      	ldr	r3, [r3, #0]
 c0099ba:	f023 020f 	bic.w	r2, r3, #15
 c0099be:	4996      	ldr	r1, [pc, #600]	@ (c009c18 <HAL_RCC_ClockConfig+0x284>)
 c0099c0:	683b      	ldr	r3, [r7, #0]
 c0099c2:	4313      	orrs	r3, r2
 c0099c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0099c6:	4b94      	ldr	r3, [pc, #592]	@ (c009c18 <HAL_RCC_ClockConfig+0x284>)
 c0099c8:	681b      	ldr	r3, [r3, #0]
 c0099ca:	f003 030f 	and.w	r3, r3, #15
 c0099ce:	683a      	ldr	r2, [r7, #0]
 c0099d0:	429a      	cmp	r2, r3
 c0099d2:	d001      	beq.n	c0099d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 c0099d4:	2301      	movs	r3, #1
 c0099d6:	e1c1      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c0099d8:	687b      	ldr	r3, [r7, #4]
 c0099da:	681b      	ldr	r3, [r3, #0]
 c0099dc:	f003 0310 	and.w	r3, r3, #16
 c0099e0:	2b00      	cmp	r3, #0
 c0099e2:	d010      	beq.n	c009a06 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c0099e4:	687b      	ldr	r3, [r7, #4]
 c0099e6:	695a      	ldr	r2, [r3, #20]
 c0099e8:	4b8c      	ldr	r3, [pc, #560]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c0099ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0099ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c0099f0:	429a      	cmp	r2, r3
 c0099f2:	d908      	bls.n	c009a06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 c0099f4:	4b89      	ldr	r3, [pc, #548]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c0099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0099f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c0099fc:	687b      	ldr	r3, [r7, #4]
 c0099fe:	695b      	ldr	r3, [r3, #20]
 c009a00:	4986      	ldr	r1, [pc, #536]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a02:	4313      	orrs	r3, r2
 c009a04:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c009a06:	687b      	ldr	r3, [r7, #4]
 c009a08:	681b      	ldr	r3, [r3, #0]
 c009a0a:	f003 0308 	and.w	r3, r3, #8
 c009a0e:	2b00      	cmp	r3, #0
 c009a10:	d012      	beq.n	c009a38 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c009a12:	687b      	ldr	r3, [r7, #4]
 c009a14:	691a      	ldr	r2, [r3, #16]
 c009a16:	4b81      	ldr	r3, [pc, #516]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a18:	6a1b      	ldr	r3, [r3, #32]
 c009a1a:	091b      	lsrs	r3, r3, #4
 c009a1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c009a20:	429a      	cmp	r2, r3
 c009a22:	d909      	bls.n	c009a38 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c009a24:	4b7d      	ldr	r3, [pc, #500]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a26:	6a1b      	ldr	r3, [r3, #32]
 c009a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c009a2c:	687b      	ldr	r3, [r7, #4]
 c009a2e:	691b      	ldr	r3, [r3, #16]
 c009a30:	011b      	lsls	r3, r3, #4
 c009a32:	497a      	ldr	r1, [pc, #488]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a34:	4313      	orrs	r3, r2
 c009a36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c009a38:	687b      	ldr	r3, [r7, #4]
 c009a3a:	681b      	ldr	r3, [r3, #0]
 c009a3c:	f003 0304 	and.w	r3, r3, #4
 c009a40:	2b00      	cmp	r3, #0
 c009a42:	d010      	beq.n	c009a66 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c009a44:	687b      	ldr	r3, [r7, #4]
 c009a46:	68da      	ldr	r2, [r3, #12]
 c009a48:	4b74      	ldr	r3, [pc, #464]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a4a:	6a1b      	ldr	r3, [r3, #32]
 c009a4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c009a50:	429a      	cmp	r2, r3
 c009a52:	d908      	bls.n	c009a66 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c009a54:	4b71      	ldr	r3, [pc, #452]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a56:	6a1b      	ldr	r3, [r3, #32]
 c009a58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c009a5c:	687b      	ldr	r3, [r7, #4]
 c009a5e:	68db      	ldr	r3, [r3, #12]
 c009a60:	496e      	ldr	r1, [pc, #440]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a62:	4313      	orrs	r3, r2
 c009a64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c009a66:	687b      	ldr	r3, [r7, #4]
 c009a68:	681b      	ldr	r3, [r3, #0]
 c009a6a:	f003 0302 	and.w	r3, r3, #2
 c009a6e:	2b00      	cmp	r3, #0
 c009a70:	d010      	beq.n	c009a94 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c009a72:	687b      	ldr	r3, [r7, #4]
 c009a74:	689a      	ldr	r2, [r3, #8]
 c009a76:	4b69      	ldr	r3, [pc, #420]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a78:	6a1b      	ldr	r3, [r3, #32]
 c009a7a:	f003 030f 	and.w	r3, r3, #15
 c009a7e:	429a      	cmp	r2, r3
 c009a80:	d908      	bls.n	c009a94 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c009a82:	4b66      	ldr	r3, [pc, #408]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a84:	6a1b      	ldr	r3, [r3, #32]
 c009a86:	f023 020f 	bic.w	r2, r3, #15
 c009a8a:	687b      	ldr	r3, [r7, #4]
 c009a8c:	689b      	ldr	r3, [r3, #8]
 c009a8e:	4963      	ldr	r1, [pc, #396]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009a90:	4313      	orrs	r3, r2
 c009a92:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c009a94:	687b      	ldr	r3, [r7, #4]
 c009a96:	681b      	ldr	r3, [r3, #0]
 c009a98:	f003 0301 	and.w	r3, r3, #1
 c009a9c:	2b00      	cmp	r3, #0
 c009a9e:	f000 80d2 	beq.w	c009c46 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 c009aa2:	2300      	movs	r3, #0
 c009aa4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c009aa6:	687b      	ldr	r3, [r7, #4]
 c009aa8:	685b      	ldr	r3, [r3, #4]
 c009aaa:	2b03      	cmp	r3, #3
 c009aac:	d143      	bne.n	c009b36 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c009aae:	4b5b      	ldr	r3, [pc, #364]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009ab4:	f003 0304 	and.w	r3, r3, #4
 c009ab8:	2b00      	cmp	r3, #0
 c009aba:	d110      	bne.n	c009ade <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 c009abc:	4b57      	ldr	r3, [pc, #348]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009ac2:	4a56      	ldr	r2, [pc, #344]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009ac4:	f043 0304 	orr.w	r3, r3, #4
 c009ac8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c009acc:	4b53      	ldr	r3, [pc, #332]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009ad2:	f003 0304 	and.w	r3, r3, #4
 c009ad6:	60bb      	str	r3, [r7, #8]
 c009ad8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 c009ada:	2301      	movs	r3, #1
 c009adc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 c009ade:	f7fc fd91 	bl	c006604 <HAL_GetTick>
 c009ae2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 c009ae4:	4b4e      	ldr	r3, [pc, #312]	@ (c009c20 <HAL_RCC_ClockConfig+0x28c>)
 c009ae6:	68db      	ldr	r3, [r3, #12]
 c009ae8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c009aec:	2b00      	cmp	r3, #0
 c009aee:	d00f      	beq.n	c009b10 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c009af0:	e008      	b.n	c009b04 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 c009af2:	f7fc fd87 	bl	c006604 <HAL_GetTick>
 c009af6:	4602      	mov	r2, r0
 c009af8:	693b      	ldr	r3, [r7, #16]
 c009afa:	1ad3      	subs	r3, r2, r3
 c009afc:	2b02      	cmp	r3, #2
 c009afe:	d901      	bls.n	c009b04 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 c009b00:	2303      	movs	r3, #3
 c009b02:	e12b      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c009b04:	4b46      	ldr	r3, [pc, #280]	@ (c009c20 <HAL_RCC_ClockConfig+0x28c>)
 c009b06:	68db      	ldr	r3, [r3, #12]
 c009b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c009b0c:	2b00      	cmp	r3, #0
 c009b0e:	d0f0      	beq.n	c009af2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 c009b10:	7dfb      	ldrb	r3, [r7, #23]
 c009b12:	2b01      	cmp	r3, #1
 c009b14:	d107      	bne.n	c009b26 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 c009b16:	4b41      	ldr	r3, [pc, #260]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c009b1c:	4a3f      	ldr	r2, [pc, #252]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b1e:	f023 0304 	bic.w	r3, r3, #4
 c009b22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c009b26:	4b3d      	ldr	r3, [pc, #244]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b28:	681b      	ldr	r3, [r3, #0]
 c009b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c009b2e:	2b00      	cmp	r3, #0
 c009b30:	d121      	bne.n	c009b76 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 c009b32:	2301      	movs	r3, #1
 c009b34:	e112      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c009b36:	687b      	ldr	r3, [r7, #4]
 c009b38:	685b      	ldr	r3, [r3, #4]
 c009b3a:	2b02      	cmp	r3, #2
 c009b3c:	d107      	bne.n	c009b4e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c009b3e:	4b37      	ldr	r3, [pc, #220]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b40:	681b      	ldr	r3, [r3, #0]
 c009b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c009b46:	2b00      	cmp	r3, #0
 c009b48:	d115      	bne.n	c009b76 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c009b4a:	2301      	movs	r3, #1
 c009b4c:	e106      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c009b4e:	687b      	ldr	r3, [r7, #4]
 c009b50:	685b      	ldr	r3, [r3, #4]
 c009b52:	2b00      	cmp	r3, #0
 c009b54:	d107      	bne.n	c009b66 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c009b56:	4b31      	ldr	r3, [pc, #196]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b58:	681b      	ldr	r3, [r3, #0]
 c009b5a:	f003 0304 	and.w	r3, r3, #4
 c009b5e:	2b00      	cmp	r3, #0
 c009b60:	d109      	bne.n	c009b76 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c009b62:	2301      	movs	r3, #1
 c009b64:	e0fa      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c009b66:	4b2d      	ldr	r3, [pc, #180]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b68:	681b      	ldr	r3, [r3, #0]
 c009b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c009b6e:	2b00      	cmp	r3, #0
 c009b70:	d101      	bne.n	c009b76 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c009b72:	2301      	movs	r3, #1
 c009b74:	e0f2      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 c009b76:	4b29      	ldr	r3, [pc, #164]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b78:	69db      	ldr	r3, [r3, #28]
 c009b7a:	f023 0203 	bic.w	r2, r3, #3
 c009b7e:	687b      	ldr	r3, [r7, #4]
 c009b80:	685b      	ldr	r3, [r3, #4]
 c009b82:	4926      	ldr	r1, [pc, #152]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009b84:	4313      	orrs	r3, r2
 c009b86:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 c009b88:	f7fc fd3c 	bl	c006604 <HAL_GetTick>
 c009b8c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c009b8e:	687b      	ldr	r3, [r7, #4]
 c009b90:	685b      	ldr	r3, [r3, #4]
 c009b92:	2b03      	cmp	r3, #3
 c009b94:	d112      	bne.n	c009bbc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c009b96:	e00a      	b.n	c009bae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c009b98:	f7fc fd34 	bl	c006604 <HAL_GetTick>
 c009b9c:	4602      	mov	r2, r0
 c009b9e:	693b      	ldr	r3, [r7, #16]
 c009ba0:	1ad3      	subs	r3, r2, r3
 c009ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 c009ba6:	4293      	cmp	r3, r2
 c009ba8:	d901      	bls.n	c009bae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 c009baa:	2303      	movs	r3, #3
 c009bac:	e0d6      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c009bae:	4b1b      	ldr	r3, [pc, #108]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009bb0:	69db      	ldr	r3, [r3, #28]
 c009bb2:	f003 030c 	and.w	r3, r3, #12
 c009bb6:	2b0c      	cmp	r3, #12
 c009bb8:	d1ee      	bne.n	c009b98 <HAL_RCC_ClockConfig+0x204>
 c009bba:	e044      	b.n	c009c46 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c009bbc:	687b      	ldr	r3, [r7, #4]
 c009bbe:	685b      	ldr	r3, [r3, #4]
 c009bc0:	2b02      	cmp	r3, #2
 c009bc2:	d112      	bne.n	c009bea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c009bc4:	e00a      	b.n	c009bdc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c009bc6:	f7fc fd1d 	bl	c006604 <HAL_GetTick>
 c009bca:	4602      	mov	r2, r0
 c009bcc:	693b      	ldr	r3, [r7, #16]
 c009bce:	1ad3      	subs	r3, r2, r3
 c009bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 c009bd4:	4293      	cmp	r3, r2
 c009bd6:	d901      	bls.n	c009bdc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 c009bd8:	2303      	movs	r3, #3
 c009bda:	e0bf      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c009bdc:	4b0f      	ldr	r3, [pc, #60]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009bde:	69db      	ldr	r3, [r3, #28]
 c009be0:	f003 030c 	and.w	r3, r3, #12
 c009be4:	2b08      	cmp	r3, #8
 c009be6:	d1ee      	bne.n	c009bc6 <HAL_RCC_ClockConfig+0x232>
 c009be8:	e02d      	b.n	c009c46 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c009bea:	687b      	ldr	r3, [r7, #4]
 c009bec:	685b      	ldr	r3, [r3, #4]
 c009bee:	2b00      	cmp	r3, #0
 c009bf0:	d123      	bne.n	c009c3a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c009bf2:	e00a      	b.n	c009c0a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c009bf4:	f7fc fd06 	bl	c006604 <HAL_GetTick>
 c009bf8:	4602      	mov	r2, r0
 c009bfa:	693b      	ldr	r3, [r7, #16]
 c009bfc:	1ad3      	subs	r3, r2, r3
 c009bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 c009c02:	4293      	cmp	r3, r2
 c009c04:	d901      	bls.n	c009c0a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 c009c06:	2303      	movs	r3, #3
 c009c08:	e0a8      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c009c0a:	4b04      	ldr	r3, [pc, #16]	@ (c009c1c <HAL_RCC_ClockConfig+0x288>)
 c009c0c:	69db      	ldr	r3, [r3, #28]
 c009c0e:	f003 030c 	and.w	r3, r3, #12
 c009c12:	2b00      	cmp	r3, #0
 c009c14:	d1ee      	bne.n	c009bf4 <HAL_RCC_ClockConfig+0x260>
 c009c16:	e016      	b.n	c009c46 <HAL_RCC_ClockConfig+0x2b2>
 c009c18:	50022000 	.word	0x50022000
 c009c1c:	56020c00 	.word	0x56020c00
 c009c20:	56020800 	.word	0x56020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c009c24:	f7fc fcee 	bl	c006604 <HAL_GetTick>
 c009c28:	4602      	mov	r2, r0
 c009c2a:	693b      	ldr	r3, [r7, #16]
 c009c2c:	1ad3      	subs	r3, r2, r3
 c009c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 c009c32:	4293      	cmp	r3, r2
 c009c34:	d901      	bls.n	c009c3a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 c009c36:	2303      	movs	r3, #3
 c009c38:	e090      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 c009c3a:	4b4a      	ldr	r3, [pc, #296]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009c3c:	69db      	ldr	r3, [r3, #28]
 c009c3e:	f003 030c 	and.w	r3, r3, #12
 c009c42:	2b04      	cmp	r3, #4
 c009c44:	d1ee      	bne.n	c009c24 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c009c46:	687b      	ldr	r3, [r7, #4]
 c009c48:	681b      	ldr	r3, [r3, #0]
 c009c4a:	f003 0302 	and.w	r3, r3, #2
 c009c4e:	2b00      	cmp	r3, #0
 c009c50:	d010      	beq.n	c009c74 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c009c52:	687b      	ldr	r3, [r7, #4]
 c009c54:	689a      	ldr	r2, [r3, #8]
 c009c56:	4b43      	ldr	r3, [pc, #268]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009c58:	6a1b      	ldr	r3, [r3, #32]
 c009c5a:	f003 030f 	and.w	r3, r3, #15
 c009c5e:	429a      	cmp	r2, r3
 c009c60:	d208      	bcs.n	c009c74 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c009c62:	4b40      	ldr	r3, [pc, #256]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009c64:	6a1b      	ldr	r3, [r3, #32]
 c009c66:	f023 020f 	bic.w	r2, r3, #15
 c009c6a:	687b      	ldr	r3, [r7, #4]
 c009c6c:	689b      	ldr	r3, [r3, #8]
 c009c6e:	493d      	ldr	r1, [pc, #244]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009c70:	4313      	orrs	r3, r2
 c009c72:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c009c74:	4b3c      	ldr	r3, [pc, #240]	@ (c009d68 <HAL_RCC_ClockConfig+0x3d4>)
 c009c76:	681b      	ldr	r3, [r3, #0]
 c009c78:	f003 030f 	and.w	r3, r3, #15
 c009c7c:	683a      	ldr	r2, [r7, #0]
 c009c7e:	429a      	cmp	r2, r3
 c009c80:	d210      	bcs.n	c009ca4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c009c82:	4b39      	ldr	r3, [pc, #228]	@ (c009d68 <HAL_RCC_ClockConfig+0x3d4>)
 c009c84:	681b      	ldr	r3, [r3, #0]
 c009c86:	f023 020f 	bic.w	r2, r3, #15
 c009c8a:	4937      	ldr	r1, [pc, #220]	@ (c009d68 <HAL_RCC_ClockConfig+0x3d4>)
 c009c8c:	683b      	ldr	r3, [r7, #0]
 c009c8e:	4313      	orrs	r3, r2
 c009c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c009c92:	4b35      	ldr	r3, [pc, #212]	@ (c009d68 <HAL_RCC_ClockConfig+0x3d4>)
 c009c94:	681b      	ldr	r3, [r3, #0]
 c009c96:	f003 030f 	and.w	r3, r3, #15
 c009c9a:	683a      	ldr	r2, [r7, #0]
 c009c9c:	429a      	cmp	r2, r3
 c009c9e:	d001      	beq.n	c009ca4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 c009ca0:	2301      	movs	r3, #1
 c009ca2:	e05b      	b.n	c009d5c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c009ca4:	687b      	ldr	r3, [r7, #4]
 c009ca6:	681b      	ldr	r3, [r3, #0]
 c009ca8:	f003 0304 	and.w	r3, r3, #4
 c009cac:	2b00      	cmp	r3, #0
 c009cae:	d010      	beq.n	c009cd2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c009cb0:	687b      	ldr	r3, [r7, #4]
 c009cb2:	68da      	ldr	r2, [r3, #12]
 c009cb4:	4b2b      	ldr	r3, [pc, #172]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009cb6:	6a1b      	ldr	r3, [r3, #32]
 c009cb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c009cbc:	429a      	cmp	r2, r3
 c009cbe:	d208      	bcs.n	c009cd2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c009cc0:	4b28      	ldr	r3, [pc, #160]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009cc2:	6a1b      	ldr	r3, [r3, #32]
 c009cc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c009cc8:	687b      	ldr	r3, [r7, #4]
 c009cca:	68db      	ldr	r3, [r3, #12]
 c009ccc:	4925      	ldr	r1, [pc, #148]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009cce:	4313      	orrs	r3, r2
 c009cd0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c009cd2:	687b      	ldr	r3, [r7, #4]
 c009cd4:	681b      	ldr	r3, [r3, #0]
 c009cd6:	f003 0308 	and.w	r3, r3, #8
 c009cda:	2b00      	cmp	r3, #0
 c009cdc:	d012      	beq.n	c009d04 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c009cde:	687b      	ldr	r3, [r7, #4]
 c009ce0:	691a      	ldr	r2, [r3, #16]
 c009ce2:	4b20      	ldr	r3, [pc, #128]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009ce4:	6a1b      	ldr	r3, [r3, #32]
 c009ce6:	091b      	lsrs	r3, r3, #4
 c009ce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c009cec:	429a      	cmp	r2, r3
 c009cee:	d209      	bcs.n	c009d04 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c009cf0:	4b1c      	ldr	r3, [pc, #112]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009cf2:	6a1b      	ldr	r3, [r3, #32]
 c009cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c009cf8:	687b      	ldr	r3, [r7, #4]
 c009cfa:	691b      	ldr	r3, [r3, #16]
 c009cfc:	011b      	lsls	r3, r3, #4
 c009cfe:	4919      	ldr	r1, [pc, #100]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009d00:	4313      	orrs	r3, r2
 c009d02:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c009d04:	687b      	ldr	r3, [r7, #4]
 c009d06:	681b      	ldr	r3, [r3, #0]
 c009d08:	f003 0310 	and.w	r3, r3, #16
 c009d0c:	2b00      	cmp	r3, #0
 c009d0e:	d010      	beq.n	c009d32 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c009d10:	687b      	ldr	r3, [r7, #4]
 c009d12:	695a      	ldr	r2, [r3, #20]
 c009d14:	4b13      	ldr	r3, [pc, #76]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c009d18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c009d1c:	429a      	cmp	r2, r3
 c009d1e:	d208      	bcs.n	c009d32 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 c009d20:	4b10      	ldr	r3, [pc, #64]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c009d24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c009d28:	687b      	ldr	r3, [r7, #4]
 c009d2a:	695b      	ldr	r3, [r3, #20]
 c009d2c:	490d      	ldr	r1, [pc, #52]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009d2e:	4313      	orrs	r3, r2
 c009d30:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c009d32:	f000 f821 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c009d36:	4602      	mov	r2, r0
 c009d38:	4b0a      	ldr	r3, [pc, #40]	@ (c009d64 <HAL_RCC_ClockConfig+0x3d0>)
 c009d3a:	6a1b      	ldr	r3, [r3, #32]
 c009d3c:	f003 030f 	and.w	r3, r3, #15
 c009d40:	490a      	ldr	r1, [pc, #40]	@ (c009d6c <HAL_RCC_ClockConfig+0x3d8>)
 c009d42:	5ccb      	ldrb	r3, [r1, r3]
 c009d44:	fa22 f303 	lsr.w	r3, r2, r3
 c009d48:	4a09      	ldr	r2, [pc, #36]	@ (c009d70 <HAL_RCC_ClockConfig+0x3dc>)
 c009d4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 c009d4c:	4b09      	ldr	r3, [pc, #36]	@ (c009d74 <HAL_RCC_ClockConfig+0x3e0>)
 c009d4e:	681b      	ldr	r3, [r3, #0]
 c009d50:	4618      	mov	r0, r3
 c009d52:	f7fc fbcd 	bl	c0064f0 <HAL_InitTick>
 c009d56:	4603      	mov	r3, r0
 c009d58:	73fb      	strb	r3, [r7, #15]

  return status;
 c009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 c009d5c:	4618      	mov	r0, r3
 c009d5e:	3718      	adds	r7, #24
 c009d60:	46bd      	mov	sp, r7
 c009d62:	bd80      	pop	{r7, pc}
 c009d64:	56020c00 	.word	0x56020c00
 c009d68:	50022000 	.word	0x50022000
 c009d6c:	0c00e4a0 	.word	0x0c00e4a0
 c009d70:	30000000 	.word	0x30000000
 c009d74:	30000004 	.word	0x30000004

0c009d78 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c009d78:	b480      	push	{r7}
 c009d7a:	b08b      	sub	sp, #44	@ 0x2c
 c009d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c009d7e:	2300      	movs	r3, #0
 c009d80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 c009d82:	2300      	movs	r3, #0
 c009d84:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c009d86:	4b78      	ldr	r3, [pc, #480]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009d88:	69db      	ldr	r3, [r3, #28]
 c009d8a:	f003 030c 	and.w	r3, r3, #12
 c009d8e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c009d90:	4b75      	ldr	r3, [pc, #468]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009d94:	f003 0303 	and.w	r3, r3, #3
 c009d98:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c009d9a:	69bb      	ldr	r3, [r7, #24]
 c009d9c:	2b00      	cmp	r3, #0
 c009d9e:	d005      	beq.n	c009dac <HAL_RCC_GetSysClockFreq+0x34>
 c009da0:	69bb      	ldr	r3, [r7, #24]
 c009da2:	2b0c      	cmp	r3, #12
 c009da4:	d121      	bne.n	c009dea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c009da6:	697b      	ldr	r3, [r7, #20]
 c009da8:	2b01      	cmp	r3, #1
 c009daa:	d11e      	bne.n	c009dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c009dac:	4b6e      	ldr	r3, [pc, #440]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009dae:	689b      	ldr	r3, [r3, #8]
 c009db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c009db4:	2b00      	cmp	r3, #0
 c009db6:	d107      	bne.n	c009dc8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c009db8:	4b6b      	ldr	r3, [pc, #428]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c009dbe:	0b1b      	lsrs	r3, r3, #12
 c009dc0:	f003 030f 	and.w	r3, r3, #15
 c009dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 c009dc6:	e005      	b.n	c009dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c009dc8:	4b67      	ldr	r3, [pc, #412]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009dca:	689b      	ldr	r3, [r3, #8]
 c009dcc:	0f1b      	lsrs	r3, r3, #28
 c009dce:	f003 030f 	and.w	r3, r3, #15
 c009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 c009dd4:	4a65      	ldr	r2, [pc, #404]	@ (c009f6c <HAL_RCC_GetSysClockFreq+0x1f4>)
 c009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c009dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c009ddc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c009dde:	69bb      	ldr	r3, [r7, #24]
 c009de0:	2b00      	cmp	r3, #0
 c009de2:	d110      	bne.n	c009e06 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c009de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c009de6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c009de8:	e00d      	b.n	c009e06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c009dea:	4b5f      	ldr	r3, [pc, #380]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009dec:	69db      	ldr	r3, [r3, #28]
 c009dee:	f003 030c 	and.w	r3, r3, #12
 c009df2:	2b04      	cmp	r3, #4
 c009df4:	d102      	bne.n	c009dfc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c009df6:	4b5e      	ldr	r3, [pc, #376]	@ (c009f70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c009df8:	623b      	str	r3, [r7, #32]
 c009dfa:	e004      	b.n	c009e06 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c009dfc:	69bb      	ldr	r3, [r7, #24]
 c009dfe:	2b08      	cmp	r3, #8
 c009e00:	d101      	bne.n	c009e06 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c009e02:	4b5b      	ldr	r3, [pc, #364]	@ (c009f70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c009e04:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c009e06:	69bb      	ldr	r3, [r7, #24]
 c009e08:	2b0c      	cmp	r3, #12
 c009e0a:	f040 80a5 	bne.w	c009f58 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c009e0e:	4b56      	ldr	r3, [pc, #344]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009e12:	f003 0303 	and.w	r3, r3, #3
 c009e16:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c009e18:	4b53      	ldr	r3, [pc, #332]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009e1c:	0a1b      	lsrs	r3, r3, #8
 c009e1e:	f003 030f 	and.w	r3, r3, #15
 c009e22:	3301      	adds	r3, #1
 c009e24:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c009e26:	4b50      	ldr	r3, [pc, #320]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c009e2a:	091b      	lsrs	r3, r3, #4
 c009e2c:	f003 0301 	and.w	r3, r3, #1
 c009e30:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c009e32:	4b4d      	ldr	r3, [pc, #308]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c009e36:	08db      	lsrs	r3, r3, #3
 c009e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c009e3c:	68ba      	ldr	r2, [r7, #8]
 c009e3e:	fb02 f303 	mul.w	r3, r2, r3
 c009e42:	ee07 3a90 	vmov	s15, r3
 c009e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c009e4a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 c009e4e:	693b      	ldr	r3, [r7, #16]
 c009e50:	2b02      	cmp	r3, #2
 c009e52:	d003      	beq.n	c009e5c <HAL_RCC_GetSysClockFreq+0xe4>
 c009e54:	693b      	ldr	r3, [r7, #16]
 c009e56:	2b03      	cmp	r3, #3
 c009e58:	d022      	beq.n	c009ea0 <HAL_RCC_GetSysClockFreq+0x128>
 c009e5a:	e043      	b.n	c009ee4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009e5c:	68fb      	ldr	r3, [r7, #12]
 c009e5e:	ee07 3a90 	vmov	s15, r3
 c009e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c009e66:	eddf 6a43 	vldr	s13, [pc, #268]	@ c009f74 <HAL_RCC_GetSysClockFreq+0x1fc>
 c009e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c009e6e:	4b3e      	ldr	r3, [pc, #248]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c009e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c009e76:	ee07 3a90 	vmov	s15, r3
 c009e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c009e7e:	ed97 6a01 	vldr	s12, [r7, #4]
 c009e82:	eddf 5a3d 	vldr	s11, [pc, #244]	@ c009f78 <HAL_RCC_GetSysClockFreq+0x200>
 c009e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c009e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c009e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 c009e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c009e9e:	e046      	b.n	c009f2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009ea0:	68fb      	ldr	r3, [r7, #12]
 c009ea2:	ee07 3a90 	vmov	s15, r3
 c009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c009eaa:	eddf 6a32 	vldr	s13, [pc, #200]	@ c009f74 <HAL_RCC_GetSysClockFreq+0x1fc>
 c009eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c009eb2:	4b2d      	ldr	r3, [pc, #180]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c009eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c009eba:	ee07 3a90 	vmov	s15, r3
 c009ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c009ec2:	ed97 6a01 	vldr	s12, [r7, #4]
 c009ec6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ c009f78 <HAL_RCC_GetSysClockFreq+0x200>
 c009eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c009ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c009ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 c009ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c009ee2:	e024      	b.n	c009f2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c009ee6:	ee07 3a90 	vmov	s15, r3
 c009eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c009eee:	68fb      	ldr	r3, [r7, #12]
 c009ef0:	ee07 3a90 	vmov	s15, r3
 c009ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c009ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c009efc:	4b1a      	ldr	r3, [pc, #104]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c009f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c009f04:	ee07 3a90 	vmov	s15, r3
 c009f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c009f0c:	ed97 6a01 	vldr	s12, [r7, #4]
 c009f10:	eddf 5a19 	vldr	s11, [pc, #100]	@ c009f78 <HAL_RCC_GetSysClockFreq+0x200>
 c009f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c009f1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c009f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c009f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 c009f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c009f2c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 c009f2e:	4b0e      	ldr	r3, [pc, #56]	@ (c009f68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c009f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c009f32:	0e1b      	lsrs	r3, r3, #24
 c009f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c009f38:	3301      	adds	r3, #1
 c009f3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 c009f3c:	683b      	ldr	r3, [r7, #0]
 c009f3e:	ee07 3a90 	vmov	s15, r3
 c009f42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c009f46:	edd7 6a07 	vldr	s13, [r7, #28]
 c009f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c009f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c009f52:	ee17 3a90 	vmov	r3, s15
 c009f56:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 c009f58:	6a3b      	ldr	r3, [r7, #32]
}
 c009f5a:	4618      	mov	r0, r3
 c009f5c:	372c      	adds	r7, #44	@ 0x2c
 c009f5e:	46bd      	mov	sp, r7
 c009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 c009f64:	4770      	bx	lr
 c009f66:	bf00      	nop
 c009f68:	56020c00 	.word	0x56020c00
 c009f6c:	0c00e4b8 	.word	0x0c00e4b8
 c009f70:	00f42400 	.word	0x00f42400
 c009f74:	4b742400 	.word	0x4b742400
 c009f78:	46000000 	.word	0x46000000

0c009f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c009f7c:	b580      	push	{r7, lr}
 c009f7e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c009f80:	f7ff fefa 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c009f84:	4602      	mov	r2, r0
 c009f86:	4b07      	ldr	r3, [pc, #28]	@ (c009fa4 <HAL_RCC_GetHCLKFreq+0x28>)
 c009f88:	6a1b      	ldr	r3, [r3, #32]
 c009f8a:	f003 030f 	and.w	r3, r3, #15
 c009f8e:	4906      	ldr	r1, [pc, #24]	@ (c009fa8 <HAL_RCC_GetHCLKFreq+0x2c>)
 c009f90:	5ccb      	ldrb	r3, [r1, r3]
 c009f92:	fa22 f303 	lsr.w	r3, r2, r3
 c009f96:	4a05      	ldr	r2, [pc, #20]	@ (c009fac <HAL_RCC_GetHCLKFreq+0x30>)
 c009f98:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 c009f9a:	4b04      	ldr	r3, [pc, #16]	@ (c009fac <HAL_RCC_GetHCLKFreq+0x30>)
 c009f9c:	681b      	ldr	r3, [r3, #0]
}
 c009f9e:	4618      	mov	r0, r3
 c009fa0:	bd80      	pop	{r7, pc}
 c009fa2:	bf00      	nop
 c009fa4:	56020c00 	.word	0x56020c00
 c009fa8:	0c00e4a0 	.word	0x0c00e4a0
 c009fac:	30000000 	.word	0x30000000

0c009fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c009fb0:	b580      	push	{r7, lr}
 c009fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 c009fb4:	f7ff ffe2 	bl	c009f7c <HAL_RCC_GetHCLKFreq>
 c009fb8:	4602      	mov	r2, r0
 c009fba:	4b05      	ldr	r3, [pc, #20]	@ (c009fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 c009fbc:	6a1b      	ldr	r3, [r3, #32]
 c009fbe:	091b      	lsrs	r3, r3, #4
 c009fc0:	f003 0307 	and.w	r3, r3, #7
 c009fc4:	4903      	ldr	r1, [pc, #12]	@ (c009fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 c009fc6:	5ccb      	ldrb	r3, [r1, r3]
 c009fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 c009fcc:	4618      	mov	r0, r3
 c009fce:	bd80      	pop	{r7, pc}
 c009fd0:	56020c00 	.word	0x56020c00
 c009fd4:	0c00e4b0 	.word	0x0c00e4b0

0c009fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c009fd8:	b580      	push	{r7, lr}
 c009fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 c009fdc:	f7ff ffce 	bl	c009f7c <HAL_RCC_GetHCLKFreq>
 c009fe0:	4602      	mov	r2, r0
 c009fe2:	4b05      	ldr	r3, [pc, #20]	@ (c009ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 c009fe4:	6a1b      	ldr	r3, [r3, #32]
 c009fe6:	0a1b      	lsrs	r3, r3, #8
 c009fe8:	f003 0307 	and.w	r3, r3, #7
 c009fec:	4903      	ldr	r1, [pc, #12]	@ (c009ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 c009fee:	5ccb      	ldrb	r3, [r1, r3]
 c009ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 c009ff4:	4618      	mov	r0, r3
 c009ff6:	bd80      	pop	{r7, pc}
 c009ff8:	56020c00 	.word	0x56020c00
 c009ffc:	0c00e4b0 	.word	0x0c00e4b0

0c00a000 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 c00a000:	b580      	push	{r7, lr}
 c00a002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 c00a004:	f7ff ffba 	bl	c009f7c <HAL_RCC_GetHCLKFreq>
 c00a008:	4602      	mov	r2, r0
 c00a00a:	4b05      	ldr	r3, [pc, #20]	@ (c00a020 <HAL_RCC_GetPCLK3Freq+0x20>)
 c00a00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00a00e:	091b      	lsrs	r3, r3, #4
 c00a010:	f003 0307 	and.w	r3, r3, #7
 c00a014:	4903      	ldr	r1, [pc, #12]	@ (c00a024 <HAL_RCC_GetPCLK3Freq+0x24>)
 c00a016:	5ccb      	ldrb	r3, [r1, r3]
 c00a018:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00a01c:	4618      	mov	r0, r3
 c00a01e:	bd80      	pop	{r7, pc}
 c00a020:	56020c00 	.word	0x56020c00
 c00a024:	0c00e4b0 	.word	0x0c00e4b0

0c00a028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c00a028:	b580      	push	{r7, lr}
 c00a02a:	b086      	sub	sp, #24
 c00a02c:	af00      	add	r7, sp, #0
 c00a02e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c00a030:	4b3e      	ldr	r3, [pc, #248]	@ (c00a12c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c00a032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a036:	f003 0304 	and.w	r3, r3, #4
 c00a03a:	2b00      	cmp	r3, #0
 c00a03c:	d003      	beq.n	c00a046 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c00a03e:	f7fe fd4f 	bl	c008ae0 <HAL_PWREx_GetVoltageRange>
 c00a042:	6178      	str	r0, [r7, #20]
 c00a044:	e019      	b.n	c00a07a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c00a046:	4b39      	ldr	r3, [pc, #228]	@ (c00a12c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c00a048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a04c:	4a37      	ldr	r2, [pc, #220]	@ (c00a12c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c00a04e:	f043 0304 	orr.w	r3, r3, #4
 c00a052:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00a056:	4b35      	ldr	r3, [pc, #212]	@ (c00a12c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c00a058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a05c:	f003 0304 	and.w	r3, r3, #4
 c00a060:	60fb      	str	r3, [r7, #12]
 c00a062:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c00a064:	f7fe fd3c 	bl	c008ae0 <HAL_PWREx_GetVoltageRange>
 c00a068:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 c00a06a:	4b30      	ldr	r3, [pc, #192]	@ (c00a12c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c00a06c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a070:	4a2e      	ldr	r2, [pc, #184]	@ (c00a12c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c00a072:	f023 0304 	bic.w	r3, r3, #4
 c00a076:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 c00a07a:	697b      	ldr	r3, [r7, #20]
 c00a07c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00a080:	d003      	beq.n	c00a08a <RCC_SetFlashLatencyFromMSIRange+0x62>
 c00a082:	697b      	ldr	r3, [r7, #20]
 c00a084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00a088:	d109      	bne.n	c00a09e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 c00a08a:	687b      	ldr	r3, [r7, #4]
 c00a08c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00a090:	d202      	bcs.n	c00a098 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 c00a092:	2301      	movs	r3, #1
 c00a094:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c00a096:	e033      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 c00a098:	2300      	movs	r3, #0
 c00a09a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c00a09c:	e030      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 c00a09e:	687b      	ldr	r3, [r7, #4]
 c00a0a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00a0a4:	d208      	bcs.n	c00a0b8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c00a0a6:	697b      	ldr	r3, [r7, #20]
 c00a0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00a0ac:	d102      	bne.n	c00a0b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 c00a0ae:	2303      	movs	r3, #3
 c00a0b0:	613b      	str	r3, [r7, #16]
 c00a0b2:	e025      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 c00a0b4:	2301      	movs	r3, #1
 c00a0b6:	e035      	b.n	c00a124 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 c00a0b8:	687b      	ldr	r3, [r7, #4]
 c00a0ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c00a0be:	d90f      	bls.n	c00a0e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 c00a0c0:	697b      	ldr	r3, [r7, #20]
 c00a0c2:	2b00      	cmp	r3, #0
 c00a0c4:	d109      	bne.n	c00a0da <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 c00a0c6:	687b      	ldr	r3, [r7, #4]
 c00a0c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c00a0cc:	d902      	bls.n	c00a0d4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 c00a0ce:	2300      	movs	r3, #0
 c00a0d0:	613b      	str	r3, [r7, #16]
 c00a0d2:	e015      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 c00a0d4:	2301      	movs	r3, #1
 c00a0d6:	613b      	str	r3, [r7, #16]
 c00a0d8:	e012      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 c00a0da:	2300      	movs	r3, #0
 c00a0dc:	613b      	str	r3, [r7, #16]
 c00a0de:	e00f      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 c00a0e0:	687b      	ldr	r3, [r7, #4]
 c00a0e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00a0e6:	d109      	bne.n	c00a0fc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c00a0e8:	697b      	ldr	r3, [r7, #20]
 c00a0ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00a0ee:	d102      	bne.n	c00a0f6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 c00a0f0:	2301      	movs	r3, #1
 c00a0f2:	613b      	str	r3, [r7, #16]
 c00a0f4:	e004      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 c00a0f6:	2302      	movs	r3, #2
 c00a0f8:	613b      	str	r3, [r7, #16]
 c00a0fa:	e001      	b.n	c00a100 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 c00a0fc:	2301      	movs	r3, #1
 c00a0fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c00a100:	4b0b      	ldr	r3, [pc, #44]	@ (c00a130 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c00a102:	681b      	ldr	r3, [r3, #0]
 c00a104:	f023 020f 	bic.w	r2, r3, #15
 c00a108:	4909      	ldr	r1, [pc, #36]	@ (c00a130 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c00a10a:	693b      	ldr	r3, [r7, #16]
 c00a10c:	4313      	orrs	r3, r2
 c00a10e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c00a110:	4b07      	ldr	r3, [pc, #28]	@ (c00a130 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c00a112:	681b      	ldr	r3, [r3, #0]
 c00a114:	f003 030f 	and.w	r3, r3, #15
 c00a118:	693a      	ldr	r2, [r7, #16]
 c00a11a:	429a      	cmp	r2, r3
 c00a11c:	d001      	beq.n	c00a122 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 c00a11e:	2301      	movs	r3, #1
 c00a120:	e000      	b.n	c00a124 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 c00a122:	2300      	movs	r3, #0
}
 c00a124:	4618      	mov	r0, r3
 c00a126:	3718      	adds	r7, #24
 c00a128:	46bd      	mov	sp, r7
 c00a12a:	bd80      	pop	{r7, pc}
 c00a12c:	56020c00 	.word	0x56020c00
 c00a130:	50022000 	.word	0x50022000

0c00a134 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 c00a134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c00a138:	b0ba      	sub	sp, #232	@ 0xe8
 c00a13a:	af00      	add	r7, sp, #0
 c00a13c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c00a140:	2300      	movs	r3, #0
 c00a142:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c00a146:	2300      	movs	r3, #0
 c00a148:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c00a14c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a154:	f002 0401 	and.w	r4, r2, #1
 c00a158:	2500      	movs	r5, #0
 c00a15a:	ea54 0305 	orrs.w	r3, r4, r5
 c00a15e:	d00b      	beq.n	c00a178 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 c00a160:	4bcb      	ldr	r3, [pc, #812]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a166:	f023 0103 	bic.w	r1, r3, #3
 c00a16a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a16e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c00a170:	4ac7      	ldr	r2, [pc, #796]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a172:	430b      	orrs	r3, r1
 c00a174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c00a178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a180:	f002 0802 	and.w	r8, r2, #2
 c00a184:	f04f 0900 	mov.w	r9, #0
 c00a188:	ea58 0309 	orrs.w	r3, r8, r9
 c00a18c:	d00b      	beq.n	c00a1a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 c00a18e:	4bc0      	ldr	r3, [pc, #768]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a194:	f023 010c 	bic.w	r1, r3, #12
 c00a198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c00a19e:	4abc      	ldr	r2, [pc, #752]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a1a0:	430b      	orrs	r3, r1
 c00a1a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c00a1a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a1ae:	f002 0a04 	and.w	sl, r2, #4
 c00a1b2:	f04f 0b00 	mov.w	fp, #0
 c00a1b6:	ea5a 030b 	orrs.w	r3, sl, fp
 c00a1ba:	d00b      	beq.n	c00a1d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 c00a1bc:	4bb4      	ldr	r3, [pc, #720]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a1be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a1c2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 c00a1c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a1ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c00a1cc:	4ab0      	ldr	r2, [pc, #704]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a1ce:	430b      	orrs	r3, r1
 c00a1d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c00a1d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a1dc:	f002 0308 	and.w	r3, r2, #8
 c00a1e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 c00a1e4:	2300      	movs	r3, #0
 c00a1e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 c00a1ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 c00a1ee:	460b      	mov	r3, r1
 c00a1f0:	4313      	orrs	r3, r2
 c00a1f2:	d00b      	beq.n	c00a20c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 c00a1f4:	4ba6      	ldr	r3, [pc, #664]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a1f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a1fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c00a1fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c00a204:	4aa2      	ldr	r2, [pc, #648]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a206:	430b      	orrs	r3, r1
 c00a208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00a20c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a214:	f002 0310 	and.w	r3, r2, #16
 c00a218:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 c00a21c:	2300      	movs	r3, #0
 c00a21e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 c00a222:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 c00a226:	460b      	mov	r3, r1
 c00a228:	4313      	orrs	r3, r2
 c00a22a:	d00b      	beq.n	c00a244 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 c00a22c:	4b98      	ldr	r3, [pc, #608]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a22e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a232:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c00a236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a23a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c00a23c:	4a94      	ldr	r2, [pc, #592]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a23e:	430b      	orrs	r3, r1
 c00a240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c00a244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a24c:	f002 0320 	and.w	r3, r2, #32
 c00a250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 c00a254:	2300      	movs	r3, #0
 c00a256:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 c00a25a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 c00a25e:	460b      	mov	r3, r1
 c00a260:	4313      	orrs	r3, r2
 c00a262:	d00b      	beq.n	c00a27c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 c00a264:	4b8a      	ldr	r3, [pc, #552]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00a26a:	f023 0107 	bic.w	r1, r3, #7
 c00a26e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c00a274:	4a86      	ldr	r2, [pc, #536]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a276:	430b      	orrs	r3, r1
 c00a278:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c00a27c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a284:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 c00a288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 c00a28c:	2300      	movs	r3, #0
 c00a28e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 c00a292:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 c00a296:	460b      	mov	r3, r1
 c00a298:	4313      	orrs	r3, r2
 c00a29a:	d00b      	beq.n	c00a2b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 c00a29c:	4b7c      	ldr	r3, [pc, #496]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a29e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a2a2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c00a2a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a2aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 c00a2ac:	4a78      	ldr	r2, [pc, #480]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a2ae:	430b      	orrs	r3, r1
 c00a2b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c00a2b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a2bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 c00a2c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 c00a2c4:	2300      	movs	r3, #0
 c00a2c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c00a2ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 c00a2ce:	460b      	mov	r3, r1
 c00a2d0:	4313      	orrs	r3, r2
 c00a2d2:	d00b      	beq.n	c00a2ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 c00a2d4:	4b6e      	ldr	r3, [pc, #440]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a2d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a2da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c00a2de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c00a2e4:	4a6a      	ldr	r2, [pc, #424]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a2e6:	430b      	orrs	r3, r1
 c00a2e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c00a2ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a2f4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 c00a2f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 c00a2fc:	2300      	movs	r3, #0
 c00a2fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c00a302:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 c00a306:	460b      	mov	r3, r1
 c00a308:	4313      	orrs	r3, r2
 c00a30a:	d00b      	beq.n	c00a324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 c00a30c:	4b60      	ldr	r3, [pc, #384]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a30e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00a312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c00a316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a31a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c00a31c:	4a5c      	ldr	r2, [pc, #368]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a31e:	430b      	orrs	r3, r1
 c00a320:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c00a324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a32c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 c00a330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 c00a334:	2300      	movs	r3, #0
 c00a336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 c00a33a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 c00a33e:	460b      	mov	r3, r1
 c00a340:	4313      	orrs	r3, r2
 c00a342:	d00b      	beq.n	c00a35c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 c00a344:	4b52      	ldr	r3, [pc, #328]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a34a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 c00a34e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c00a354:	4a4e      	ldr	r2, [pc, #312]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a356:	430b      	orrs	r3, r1
 c00a358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c00a35c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a364:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 c00a368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 c00a36c:	2300      	movs	r3, #0
 c00a36e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 c00a372:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 c00a376:	460b      	mov	r3, r1
 c00a378:	4313      	orrs	r3, r2
 c00a37a:	d00b      	beq.n	c00a394 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 c00a37c:	4b44      	ldr	r3, [pc, #272]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a37e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00a382:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c00a386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a38a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c00a38c:	4a40      	ldr	r2, [pc, #256]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a38e:	430b      	orrs	r3, r1
 c00a390:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c00a394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a39c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 c00a3a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 c00a3a4:	2300      	movs	r3, #0
 c00a3a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 c00a3aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 c00a3ae:	460b      	mov	r3, r1
 c00a3b0:	4313      	orrs	r3, r2
 c00a3b2:	d00b      	beq.n	c00a3cc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 c00a3b4:	4b36      	ldr	r3, [pc, #216]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a3b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a3ba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 c00a3be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a3c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c00a3c4:	4a32      	ldr	r2, [pc, #200]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a3c6:	430b      	orrs	r3, r1
 c00a3c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 c00a3cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a3d4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 c00a3d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 c00a3dc:	2300      	movs	r3, #0
 c00a3de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 c00a3e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 c00a3e6:	460b      	mov	r3, r1
 c00a3e8:	4313      	orrs	r3, r2
 c00a3ea:	d00c      	beq.n	c00a406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 c00a3ec:	4b28      	ldr	r3, [pc, #160]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a3ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00a3f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c00a3f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c00a3fe:	4a24      	ldr	r2, [pc, #144]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a400:	430b      	orrs	r3, r1
 c00a402:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c00a406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a40e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 c00a412:	67bb      	str	r3, [r7, #120]	@ 0x78
 c00a414:	2300      	movs	r3, #0
 c00a416:	67fb      	str	r3, [r7, #124]	@ 0x7c
 c00a418:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 c00a41c:	460b      	mov	r3, r1
 c00a41e:	4313      	orrs	r3, r2
 c00a420:	d04f      	beq.n	c00a4c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 c00a422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c00a42a:	2b80      	cmp	r3, #128	@ 0x80
 c00a42c:	d02d      	beq.n	c00a48a <HAL_RCCEx_PeriphCLKConfig+0x356>
 c00a42e:	2b80      	cmp	r3, #128	@ 0x80
 c00a430:	d827      	bhi.n	c00a482 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c00a432:	2b60      	cmp	r3, #96	@ 0x60
 c00a434:	d02e      	beq.n	c00a494 <HAL_RCCEx_PeriphCLKConfig+0x360>
 c00a436:	2b60      	cmp	r3, #96	@ 0x60
 c00a438:	d823      	bhi.n	c00a482 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c00a43a:	2b40      	cmp	r3, #64	@ 0x40
 c00a43c:	d006      	beq.n	c00a44c <HAL_RCCEx_PeriphCLKConfig+0x318>
 c00a43e:	2b40      	cmp	r3, #64	@ 0x40
 c00a440:	d81f      	bhi.n	c00a482 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c00a442:	2b00      	cmp	r3, #0
 c00a444:	d009      	beq.n	c00a45a <HAL_RCCEx_PeriphCLKConfig+0x326>
 c00a446:	2b20      	cmp	r3, #32
 c00a448:	d011      	beq.n	c00a46e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 c00a44a:	e01a      	b.n	c00a482 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c00a44c:	4b10      	ldr	r3, [pc, #64]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00a450:	4a0f      	ldr	r2, [pc, #60]	@ (c00a490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c00a452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00a456:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 c00a458:	e01d      	b.n	c00a496 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00a45a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a45e:	3308      	adds	r3, #8
 c00a460:	4618      	mov	r0, r3
 c00a462:	f002 fa17 	bl	c00c894 <RCCEx_PLL2_Config>
 c00a466:	4603      	mov	r3, r0
 c00a468:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 c00a46c:	e013      	b.n	c00a496 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00a46e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a472:	332c      	adds	r3, #44	@ 0x2c
 c00a474:	4618      	mov	r0, r3
 c00a476:	f002 faa5 	bl	c00c9c4 <RCCEx_PLL3_Config>
 c00a47a:	4603      	mov	r3, r0
 c00a47c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 c00a480:	e009      	b.n	c00a496 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00a482:	2301      	movs	r3, #1
 c00a484:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a488:	e005      	b.n	c00a496 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 c00a48a:	bf00      	nop
 c00a48c:	e003      	b.n	c00a496 <HAL_RCCEx_PeriphCLKConfig+0x362>
 c00a48e:	bf00      	nop
 c00a490:	56020c00 	.word	0x56020c00
        break;
 c00a494:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00a496:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a49a:	2b00      	cmp	r3, #0
 c00a49c:	d10d      	bne.n	c00a4ba <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 c00a49e:	4bb6      	ldr	r3, [pc, #728]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a4a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00a4a4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 c00a4a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c00a4b0:	4ab1      	ldr	r2, [pc, #708]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a4b2:	430b      	orrs	r3, r1
 c00a4b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c00a4b8:	e003      	b.n	c00a4c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00a4ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a4be:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c00a4c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a4ca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 c00a4ce:	673b      	str	r3, [r7, #112]	@ 0x70
 c00a4d0:	2300      	movs	r3, #0
 c00a4d2:	677b      	str	r3, [r7, #116]	@ 0x74
 c00a4d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 c00a4d8:	460b      	mov	r3, r1
 c00a4da:	4313      	orrs	r3, r2
 c00a4dc:	d053      	beq.n	c00a586 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 c00a4de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a4e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a4e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00a4ea:	d033      	beq.n	c00a554 <HAL_RCCEx_PeriphCLKConfig+0x420>
 c00a4ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00a4f0:	d82c      	bhi.n	c00a54c <HAL_RCCEx_PeriphCLKConfig+0x418>
 c00a4f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00a4f6:	d02f      	beq.n	c00a558 <HAL_RCCEx_PeriphCLKConfig+0x424>
 c00a4f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00a4fc:	d826      	bhi.n	c00a54c <HAL_RCCEx_PeriphCLKConfig+0x418>
 c00a4fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00a502:	d008      	beq.n	c00a516 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 c00a504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00a508:	d820      	bhi.n	c00a54c <HAL_RCCEx_PeriphCLKConfig+0x418>
 c00a50a:	2b00      	cmp	r3, #0
 c00a50c:	d00a      	beq.n	c00a524 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 c00a50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c00a512:	d011      	beq.n	c00a538 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c00a514:	e01a      	b.n	c00a54c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c00a516:	4b98      	ldr	r3, [pc, #608]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00a51a:	4a97      	ldr	r2, [pc, #604]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a51c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00a520:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00a522:	e01a      	b.n	c00a55a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00a524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a528:	3308      	adds	r3, #8
 c00a52a:	4618      	mov	r0, r3
 c00a52c:	f002 f9b2 	bl	c00c894 <RCCEx_PLL2_Config>
 c00a530:	4603      	mov	r3, r0
 c00a532:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00a536:	e010      	b.n	c00a55a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00a538:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a53c:	332c      	adds	r3, #44	@ 0x2c
 c00a53e:	4618      	mov	r0, r3
 c00a540:	f002 fa40 	bl	c00c9c4 <RCCEx_PLL3_Config>
 c00a544:	4603      	mov	r3, r0
 c00a546:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00a54a:	e006      	b.n	c00a55a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00a54c:	2301      	movs	r3, #1
 c00a54e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a552:	e002      	b.n	c00a55a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 c00a554:	bf00      	nop
 c00a556:	e000      	b.n	c00a55a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 c00a558:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00a55a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a55e:	2b00      	cmp	r3, #0
 c00a560:	d10d      	bne.n	c00a57e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 c00a562:	4b85      	ldr	r3, [pc, #532]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a564:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00a568:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 c00a56c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a574:	4a80      	ldr	r2, [pc, #512]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a576:	430b      	orrs	r3, r1
 c00a578:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c00a57c:	e003      	b.n	c00a586 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00a57e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a582:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 c00a586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a58e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 c00a592:	66bb      	str	r3, [r7, #104]	@ 0x68
 c00a594:	2300      	movs	r3, #0
 c00a596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 c00a598:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 c00a59c:	460b      	mov	r3, r1
 c00a59e:	4313      	orrs	r3, r2
 c00a5a0:	d046      	beq.n	c00a630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 c00a5a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a5a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 c00a5aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c00a5ae:	d028      	beq.n	c00a602 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c00a5b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c00a5b4:	d821      	bhi.n	c00a5fa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c00a5b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00a5ba:	d022      	beq.n	c00a602 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c00a5bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00a5c0:	d81b      	bhi.n	c00a5fa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c00a5c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c00a5c6:	d01c      	beq.n	c00a602 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c00a5c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c00a5cc:	d815      	bhi.n	c00a5fa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c00a5ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00a5d2:	d008      	beq.n	c00a5e6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 c00a5d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00a5d8:	d80f      	bhi.n	c00a5fa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c00a5da:	2b00      	cmp	r3, #0
 c00a5dc:	d011      	beq.n	c00a602 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c00a5de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00a5e2:	d00e      	beq.n	c00a602 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c00a5e4:	e009      	b.n	c00a5fa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00a5e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a5ea:	3308      	adds	r3, #8
 c00a5ec:	4618      	mov	r0, r3
 c00a5ee:	f002 f951 	bl	c00c894 <RCCEx_PLL2_Config>
 c00a5f2:	4603      	mov	r3, r0
 c00a5f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a5f8:	e004      	b.n	c00a604 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c00a5fa:	2301      	movs	r3, #1
 c00a5fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a600:	e000      	b.n	c00a604 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 c00a602:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00a604:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a608:	2b00      	cmp	r3, #0
 c00a60a:	d10d      	bne.n	c00a628 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 c00a60c:	4b5a      	ldr	r3, [pc, #360]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a60e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00a612:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 c00a616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a61a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 c00a61e:	4a56      	ldr	r2, [pc, #344]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a620:	430b      	orrs	r3, r1
 c00a622:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c00a626:	e003      	b.n	c00a630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00a628:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a62c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 c00a630:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a638:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 c00a63c:	663b      	str	r3, [r7, #96]	@ 0x60
 c00a63e:	2300      	movs	r3, #0
 c00a640:	667b      	str	r3, [r7, #100]	@ 0x64
 c00a642:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 c00a646:	460b      	mov	r3, r1
 c00a648:	4313      	orrs	r3, r2
 c00a64a:	d03f      	beq.n	c00a6cc <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 c00a64c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00a654:	2b04      	cmp	r3, #4
 c00a656:	d81e      	bhi.n	c00a696 <HAL_RCCEx_PeriphCLKConfig+0x562>
 c00a658:	a201      	add	r2, pc, #4	@ (adr r2, c00a660 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 c00a65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00a65e:	bf00      	nop
 c00a660:	0c00a69f 	.word	0x0c00a69f
 c00a664:	0c00a675 	.word	0x0c00a675
 c00a668:	0c00a683 	.word	0x0c00a683
 c00a66c:	0c00a69f 	.word	0x0c00a69f
 c00a670:	0c00a69f 	.word	0x0c00a69f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c00a674:	4b40      	ldr	r3, [pc, #256]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00a678:	4a3f      	ldr	r2, [pc, #252]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a67a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00a67e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c00a680:	e00e      	b.n	c00a6a0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00a682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a686:	332c      	adds	r3, #44	@ 0x2c
 c00a688:	4618      	mov	r0, r3
 c00a68a:	f002 f99b 	bl	c00c9c4 <RCCEx_PLL3_Config>
 c00a68e:	4603      	mov	r3, r0
 c00a690:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a694:	e004      	b.n	c00a6a0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c00a696:	2301      	movs	r3, #1
 c00a698:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a69c:	e000      	b.n	c00a6a0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 c00a69e:	bf00      	nop
    }
    if (ret == HAL_OK)
 c00a6a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a6a4:	2b00      	cmp	r3, #0
 c00a6a6:	d10d      	bne.n	c00a6c4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 c00a6a8:	4b33      	ldr	r3, [pc, #204]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a6aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00a6ae:	f023 0107 	bic.w	r1, r3, #7
 c00a6b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00a6ba:	4a2f      	ldr	r2, [pc, #188]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a6bc:	430b      	orrs	r3, r1
 c00a6be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c00a6c2:	e003      	b.n	c00a6cc <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00a6c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a6c8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 c00a6cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a6d4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 c00a6d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 c00a6da:	2300      	movs	r3, #0
 c00a6dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 c00a6de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 c00a6e2:	460b      	mov	r3, r1
 c00a6e4:	4313      	orrs	r3, r2
 c00a6e6:	d04d      	beq.n	c00a784 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 c00a6e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00a6f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c00a6f4:	d028      	beq.n	c00a748 <HAL_RCCEx_PeriphCLKConfig+0x614>
 c00a6f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c00a6fa:	d821      	bhi.n	c00a740 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c00a6fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00a700:	d024      	beq.n	c00a74c <HAL_RCCEx_PeriphCLKConfig+0x618>
 c00a702:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00a706:	d81b      	bhi.n	c00a740 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c00a708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00a70c:	d00e      	beq.n	c00a72c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 c00a70e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00a712:	d815      	bhi.n	c00a740 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c00a714:	2b00      	cmp	r3, #0
 c00a716:	d01b      	beq.n	c00a750 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 c00a718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00a71c:	d110      	bne.n	c00a740 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c00a71e:	4b16      	ldr	r3, [pc, #88]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00a722:	4a15      	ldr	r2, [pc, #84]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00a728:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c00a72a:	e012      	b.n	c00a752 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c00a72c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a730:	332c      	adds	r3, #44	@ 0x2c
 c00a732:	4618      	mov	r0, r3
 c00a734:	f002 f946 	bl	c00c9c4 <RCCEx_PLL3_Config>
 c00a738:	4603      	mov	r3, r0
 c00a73a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a73e:	e008      	b.n	c00a752 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c00a740:	2301      	movs	r3, #1
 c00a742:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a746:	e004      	b.n	c00a752 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c00a748:	bf00      	nop
 c00a74a:	e002      	b.n	c00a752 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c00a74c:	bf00      	nop
 c00a74e:	e000      	b.n	c00a752 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c00a750:	bf00      	nop
    }
    if (ret == HAL_OK)
 c00a752:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a756:	2b00      	cmp	r3, #0
 c00a758:	d110      	bne.n	c00a77c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 c00a75a:	4b07      	ldr	r3, [pc, #28]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a75c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00a760:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 c00a764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c00a76c:	4a02      	ldr	r2, [pc, #8]	@ (c00a778 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c00a76e:	430b      	orrs	r3, r1
 c00a770:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c00a774:	e006      	b.n	c00a784 <HAL_RCCEx_PeriphCLKConfig+0x650>
 c00a776:	bf00      	nop
 c00a778:	56020c00 	.word	0x56020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00a77c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a780:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00a784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a78c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 c00a790:	653b      	str	r3, [r7, #80]	@ 0x50
 c00a792:	2300      	movs	r3, #0
 c00a794:	657b      	str	r3, [r7, #84]	@ 0x54
 c00a796:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 c00a79a:	460b      	mov	r3, r1
 c00a79c:	4313      	orrs	r3, r2
 c00a79e:	f000 80b5 	beq.w	c00a90c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00a7a2:	2300      	movs	r3, #0
 c00a7a4:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c00a7a8:	4b9d      	ldr	r3, [pc, #628]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a7aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a7ae:	f003 0304 	and.w	r3, r3, #4
 c00a7b2:	2b00      	cmp	r3, #0
 c00a7b4:	d113      	bne.n	c00a7de <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00a7b6:	4b9a      	ldr	r3, [pc, #616]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a7b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a7bc:	4a98      	ldr	r2, [pc, #608]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a7be:	f043 0304 	orr.w	r3, r3, #4
 c00a7c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00a7c6:	4b96      	ldr	r3, [pc, #600]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a7c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a7cc:	f003 0304 	and.w	r3, r3, #4
 c00a7d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 c00a7d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 c00a7d8:	2301      	movs	r3, #1
 c00a7da:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c00a7de:	4b91      	ldr	r3, [pc, #580]	@ (c00aa24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c00a7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00a7e2:	4a90      	ldr	r2, [pc, #576]	@ (c00aa24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c00a7e4:	f043 0301 	orr.w	r3, r3, #1
 c00a7e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c00a7ea:	f7fb ff0b 	bl	c006604 <HAL_GetTick>
 c00a7ee:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c00a7f2:	e00b      	b.n	c00a80c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00a7f4:	f7fb ff06 	bl	c006604 <HAL_GetTick>
 c00a7f8:	4602      	mov	r2, r0
 c00a7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c00a7fe:	1ad3      	subs	r3, r2, r3
 c00a800:	2b02      	cmp	r3, #2
 c00a802:	d903      	bls.n	c00a80c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 c00a804:	2303      	movs	r3, #3
 c00a806:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a80a:	e005      	b.n	c00a818 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c00a80c:	4b85      	ldr	r3, [pc, #532]	@ (c00aa24 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c00a80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00a810:	f003 0301 	and.w	r3, r3, #1
 c00a814:	2b00      	cmp	r3, #0
 c00a816:	d0ed      	beq.n	c00a7f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 c00a818:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a81c:	2b00      	cmp	r3, #0
 c00a81e:	d165      	bne.n	c00a8ec <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c00a820:	4b7f      	ldr	r3, [pc, #508]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00a826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c00a82a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 c00a82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c00a832:	2b00      	cmp	r3, #0
 c00a834:	d023      	beq.n	c00a87e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 c00a836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a83a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 c00a83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c00a842:	4293      	cmp	r3, r2
 c00a844:	d01b      	beq.n	c00a87e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c00a846:	4b76      	ldr	r3, [pc, #472]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00a84c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 c00a850:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c00a854:	4b72      	ldr	r3, [pc, #456]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00a85a:	4a71      	ldr	r2, [pc, #452]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a85c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00a860:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 c00a864:	4b6e      	ldr	r3, [pc, #440]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00a86a:	4a6d      	ldr	r2, [pc, #436]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a86c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c00a870:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c00a874:	4a6a      	ldr	r2, [pc, #424]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c00a87a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c00a87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c00a882:	f003 0301 	and.w	r3, r3, #1
 c00a886:	2b00      	cmp	r3, #0
 c00a888:	d019      	beq.n	c00a8be <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00a88a:	f7fb febb 	bl	c006604 <HAL_GetTick>
 c00a88e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00a892:	e00d      	b.n	c00a8b0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00a894:	f7fb feb6 	bl	c006604 <HAL_GetTick>
 c00a898:	4602      	mov	r2, r0
 c00a89a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c00a89e:	1ad2      	subs	r2, r2, r3
 c00a8a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 c00a8a4:	429a      	cmp	r2, r3
 c00a8a6:	d903      	bls.n	c00a8b0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 c00a8a8:	2303      	movs	r3, #3
 c00a8aa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 c00a8ae:	e006      	b.n	c00a8be <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00a8b0:	4b5b      	ldr	r3, [pc, #364]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a8b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00a8b6:	f003 0302 	and.w	r3, r3, #2
 c00a8ba:	2b00      	cmp	r3, #0
 c00a8bc:	d0ea      	beq.n	c00a894 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 c00a8be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a8c2:	2b00      	cmp	r3, #0
 c00a8c4:	d10d      	bne.n	c00a8e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 c00a8c6:	4b56      	ldr	r3, [pc, #344]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a8c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00a8cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c00a8d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a8d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 c00a8d8:	4a51      	ldr	r2, [pc, #324]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a8da:	430b      	orrs	r3, r1
 c00a8dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c00a8e0:	e008      	b.n	c00a8f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c00a8e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a8e6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 c00a8ea:	e003      	b.n	c00a8f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00a8ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a8f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c00a8f4:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 c00a8f8:	2b01      	cmp	r3, #1
 c00a8fa:	d107      	bne.n	c00a90c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00a8fc:	4b48      	ldr	r3, [pc, #288]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a8fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00a902:	4a47      	ldr	r2, [pc, #284]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a904:	f023 0304 	bic.w	r3, r3, #4
 c00a908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 c00a90c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a914:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 c00a918:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00a91a:	2300      	movs	r3, #0
 c00a91c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c00a91e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 c00a922:	460b      	mov	r3, r1
 c00a924:	4313      	orrs	r3, r2
 c00a926:	d042      	beq.n	c00a9ae <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 c00a928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a92c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c00a930:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c00a934:	d022      	beq.n	c00a97c <HAL_RCCEx_PeriphCLKConfig+0x848>
 c00a936:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c00a93a:	d81b      	bhi.n	c00a974 <HAL_RCCEx_PeriphCLKConfig+0x840>
 c00a93c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00a940:	d011      	beq.n	c00a966 <HAL_RCCEx_PeriphCLKConfig+0x832>
 c00a942:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00a946:	d815      	bhi.n	c00a974 <HAL_RCCEx_PeriphCLKConfig+0x840>
 c00a948:	2b00      	cmp	r3, #0
 c00a94a:	d019      	beq.n	c00a980 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 c00a94c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c00a950:	d110      	bne.n	c00a974 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00a952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a956:	3308      	adds	r3, #8
 c00a958:	4618      	mov	r0, r3
 c00a95a:	f001 ff9b 	bl	c00c894 <RCCEx_PLL2_Config>
 c00a95e:	4603      	mov	r3, r0
 c00a960:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a964:	e00d      	b.n	c00a982 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00a966:	4b2e      	ldr	r3, [pc, #184]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00a96a:	4a2d      	ldr	r2, [pc, #180]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a96c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c00a970:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c00a972:	e006      	b.n	c00a982 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c00a974:	2301      	movs	r3, #1
 c00a976:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a97a:	e002      	b.n	c00a982 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 c00a97c:	bf00      	nop
 c00a97e:	e000      	b.n	c00a982 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 c00a980:	bf00      	nop
    }
    if (ret == HAL_OK)
 c00a982:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a986:	2b00      	cmp	r3, #0
 c00a988:	d10d      	bne.n	c00a9a6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 c00a98a:	4b25      	ldr	r3, [pc, #148]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00a990:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 c00a994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a998:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c00a99c:	4a20      	ldr	r2, [pc, #128]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00a99e:	430b      	orrs	r3, r1
 c00a9a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 c00a9a4:	e003      	b.n	c00a9ae <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00a9a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a9aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 c00a9ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00a9b6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 c00a9ba:	643b      	str	r3, [r7, #64]	@ 0x40
 c00a9bc:	2300      	movs	r3, #0
 c00a9be:	647b      	str	r3, [r7, #68]	@ 0x44
 c00a9c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 c00a9c4:	460b      	mov	r3, r1
 c00a9c6:	4313      	orrs	r3, r2
 c00a9c8:	d032      	beq.n	c00aa30 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 c00a9ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00a9ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c00a9d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00a9d6:	d00b      	beq.n	c00a9f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 c00a9d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00a9dc:	d804      	bhi.n	c00a9e8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 c00a9de:	2b00      	cmp	r3, #0
 c00a9e0:	d008      	beq.n	c00a9f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 c00a9e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00a9e6:	d007      	beq.n	c00a9f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 c00a9e8:	2301      	movs	r3, #1
 c00a9ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00a9ee:	e004      	b.n	c00a9fa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c00a9f0:	bf00      	nop
 c00a9f2:	e002      	b.n	c00a9fa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c00a9f4:	bf00      	nop
 c00a9f6:	e000      	b.n	c00a9fa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c00a9f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 c00a9fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00a9fe:	2b00      	cmp	r3, #0
 c00aa00:	d112      	bne.n	c00aa28 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 c00aa02:	4b07      	ldr	r3, [pc, #28]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00aa04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00aa08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c00aa0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aa10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c00aa14:	4a02      	ldr	r2, [pc, #8]	@ (c00aa20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00aa16:	430b      	orrs	r3, r1
 c00aa18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c00aa1c:	e008      	b.n	c00aa30 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 c00aa1e:	bf00      	nop
 c00aa20:	56020c00 	.word	0x56020c00
 c00aa24:	56020800 	.word	0x56020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00aa28:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00aa2c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 c00aa30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00aa38:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 c00aa3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 c00aa3e:	2300      	movs	r3, #0
 c00aa40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c00aa42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 c00aa46:	460b      	mov	r3, r1
 c00aa48:	4313      	orrs	r3, r2
 c00aa4a:	d00c      	beq.n	c00aa66 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 c00aa4c:	4b98      	ldr	r3, [pc, #608]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aa4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00aa52:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 c00aa56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aa5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c00aa5e:	4a94      	ldr	r2, [pc, #592]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aa60:	430b      	orrs	r3, r1
 c00aa62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 c00aa66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00aa6e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 c00aa72:	633b      	str	r3, [r7, #48]	@ 0x30
 c00aa74:	2300      	movs	r3, #0
 c00aa76:	637b      	str	r3, [r7, #52]	@ 0x34
 c00aa78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 c00aa7c:	460b      	mov	r3, r1
 c00aa7e:	4313      	orrs	r3, r2
 c00aa80:	d019      	beq.n	c00aab6 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 c00aa82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aa86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c00aa8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00aa8e:	d105      	bne.n	c00aa9c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c00aa90:	4b87      	ldr	r3, [pc, #540]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aa92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00aa94:	4a86      	ldr	r2, [pc, #536]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aa96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00aa9a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 c00aa9c:	4b84      	ldr	r3, [pc, #528]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aa9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00aaa2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 c00aaa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aaaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c00aaae:	4a80      	ldr	r2, [pc, #512]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aab0:	430b      	orrs	r3, r1
 c00aab2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 c00aab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00aabe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 c00aac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 c00aac4:	2300      	movs	r3, #0
 c00aac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c00aac8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 c00aacc:	460b      	mov	r3, r1
 c00aace:	4313      	orrs	r3, r2
 c00aad0:	d00c      	beq.n	c00aaec <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 c00aad2:	4b77      	ldr	r3, [pc, #476]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00aad8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c00aadc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aae0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 c00aae4:	4972      	ldr	r1, [pc, #456]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00aae6:	4313      	orrs	r3, r2
 c00aae8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 c00aaec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00aaf4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 c00aaf8:	623b      	str	r3, [r7, #32]
 c00aafa:	2300      	movs	r3, #0
 c00aafc:	627b      	str	r3, [r7, #36]	@ 0x24
 c00aafe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 c00ab02:	460b      	mov	r3, r1
 c00ab04:	4313      	orrs	r3, r2
 c00ab06:	d00c      	beq.n	c00ab22 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 c00ab08:	4b69      	ldr	r3, [pc, #420]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ab0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00ab0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 c00ab12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ab16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 c00ab1a:	4965      	ldr	r1, [pc, #404]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ab1c:	4313      	orrs	r3, r2
 c00ab1e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 c00ab22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00ab2a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 c00ab2e:	61bb      	str	r3, [r7, #24]
 c00ab30:	2300      	movs	r3, #0
 c00ab32:	61fb      	str	r3, [r7, #28]
 c00ab34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 c00ab38:	460b      	mov	r3, r1
 c00ab3a:	4313      	orrs	r3, r2
 c00ab3c:	d00c      	beq.n	c00ab58 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 c00ab3e:	4b5c      	ldr	r3, [pc, #368]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ab40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00ab44:	f023 0218 	bic.w	r2, r3, #24
 c00ab48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ab4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 c00ab50:	4957      	ldr	r1, [pc, #348]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ab52:	4313      	orrs	r3, r2
 c00ab54:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00ab58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00ab60:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 c00ab64:	613b      	str	r3, [r7, #16]
 c00ab66:	2300      	movs	r3, #0
 c00ab68:	617b      	str	r3, [r7, #20]
 c00ab6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 c00ab6e:	460b      	mov	r3, r1
 c00ab70:	4313      	orrs	r3, r2
 c00ab72:	d032      	beq.n	c00abda <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 c00ab74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ab78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c00ab7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c00ab80:	d105      	bne.n	c00ab8e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00ab82:	4b4b      	ldr	r3, [pc, #300]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ab84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00ab86:	4a4a      	ldr	r2, [pc, #296]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ab88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c00ab8c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 c00ab8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ab92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c00ab96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c00ab9a:	d108      	bne.n	c00abae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00ab9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00aba0:	3308      	adds	r3, #8
 c00aba2:	4618      	mov	r0, r3
 c00aba4:	f001 fe76 	bl	c00c894 <RCCEx_PLL2_Config>
 c00aba8:	4603      	mov	r3, r0
 c00abaa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 c00abae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00abb2:	2b00      	cmp	r3, #0
 c00abb4:	d10d      	bne.n	c00abd2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 c00abb6:	4b3e      	ldr	r3, [pc, #248]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00abb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00abbc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c00abc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00abc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c00abc8:	4939      	ldr	r1, [pc, #228]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00abca:	4313      	orrs	r3, r2
 c00abcc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 c00abd0:	e003      	b.n	c00abda <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00abd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00abd6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 c00abda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00abe2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 c00abe6:	60bb      	str	r3, [r7, #8]
 c00abe8:	2300      	movs	r3, #0
 c00abea:	60fb      	str	r3, [r7, #12]
 c00abec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c00abf0:	460b      	mov	r3, r1
 c00abf2:	4313      	orrs	r3, r2
 c00abf4:	d03a      	beq.n	c00ac6c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 c00abf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00abfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c00abfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00ac02:	d00e      	beq.n	c00ac22 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 c00ac04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00ac08:	d815      	bhi.n	c00ac36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 c00ac0a:	2b00      	cmp	r3, #0
 c00ac0c:	d017      	beq.n	c00ac3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 c00ac0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c00ac12:	d110      	bne.n	c00ac36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00ac14:	4b26      	ldr	r3, [pc, #152]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ac16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00ac18:	4a25      	ldr	r2, [pc, #148]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ac1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c00ac1e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c00ac20:	e00e      	b.n	c00ac40 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00ac22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ac26:	3308      	adds	r3, #8
 c00ac28:	4618      	mov	r0, r3
 c00ac2a:	f001 fe33 	bl	c00c894 <RCCEx_PLL2_Config>
 c00ac2e:	4603      	mov	r3, r0
 c00ac30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c00ac34:	e004      	b.n	c00ac40 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 c00ac36:	2301      	movs	r3, #1
 c00ac38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c00ac3c:	e000      	b.n	c00ac40 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 c00ac3e:	bf00      	nop
    }
    if (ret == HAL_OK)
 c00ac40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00ac44:	2b00      	cmp	r3, #0
 c00ac46:	d10d      	bne.n	c00ac64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 c00ac48:	4b19      	ldr	r3, [pc, #100]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ac4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00ac4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 c00ac52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ac56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c00ac5a:	4915      	ldr	r1, [pc, #84]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ac5c:	4313      	orrs	r3, r2
 c00ac5e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 c00ac62:	e003      	b.n	c00ac6c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00ac64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00ac68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 c00ac6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00ac74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 c00ac78:	603b      	str	r3, [r7, #0]
 c00ac7a:	2300      	movs	r3, #0
 c00ac7c:	607b      	str	r3, [r7, #4]
 c00ac7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 c00ac82:	460b      	mov	r3, r1
 c00ac84:	4313      	orrs	r3, r2
 c00ac86:	d00c      	beq.n	c00aca2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 c00ac88:	4b09      	ldr	r3, [pc, #36]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ac8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00ac8e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 c00ac92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00ac96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 c00ac9a:	4905      	ldr	r1, [pc, #20]	@ (c00acb0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00ac9c:	4313      	orrs	r3, r2
 c00ac9e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 c00aca2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 c00aca6:	4618      	mov	r0, r3
 c00aca8:	37e8      	adds	r7, #232	@ 0xe8
 c00acaa:	46bd      	mov	sp, r7
 c00acac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c00acb0:	56020c00 	.word	0x56020c00

0c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 c00acb4:	b480      	push	{r7}
 c00acb6:	b089      	sub	sp, #36	@ 0x24
 c00acb8:	af00      	add	r7, sp, #0
 c00acba:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 c00acbc:	4ba6      	ldr	r3, [pc, #664]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00acbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00acc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00acc4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00acc6:	4ba4      	ldr	r3, [pc, #656]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00acc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00acca:	f003 0303 	and.w	r3, r3, #3
 c00acce:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c00acd0:	4ba1      	ldr	r3, [pc, #644]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00acd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00acd4:	0a1b      	lsrs	r3, r3, #8
 c00acd6:	f003 030f 	and.w	r3, r3, #15
 c00acda:	3301      	adds	r3, #1
 c00acdc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c00acde:	4b9e      	ldr	r3, [pc, #632]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ace0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00ace2:	091b      	lsrs	r3, r3, #4
 c00ace4:	f003 0301 	and.w	r3, r3, #1
 c00ace8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c00acea:	4b9b      	ldr	r3, [pc, #620]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00acec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00acee:	08db      	lsrs	r3, r3, #3
 c00acf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00acf4:	68fa      	ldr	r2, [r7, #12]
 c00acf6:	fb02 f303 	mul.w	r3, r2, r3
 c00acfa:	ee07 3a90 	vmov	s15, r3
 c00acfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00ad02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 c00ad06:	697b      	ldr	r3, [r7, #20]
 c00ad08:	2b03      	cmp	r3, #3
 c00ad0a:	d062      	beq.n	c00add2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 c00ad0c:	697b      	ldr	r3, [r7, #20]
 c00ad0e:	2b03      	cmp	r3, #3
 c00ad10:	f200 8081 	bhi.w	c00ae16 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 c00ad14:	697b      	ldr	r3, [r7, #20]
 c00ad16:	2b01      	cmp	r3, #1
 c00ad18:	d024      	beq.n	c00ad64 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 c00ad1a:	697b      	ldr	r3, [r7, #20]
 c00ad1c:	2b02      	cmp	r3, #2
 c00ad1e:	d17a      	bne.n	c00ae16 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00ad20:	693b      	ldr	r3, [r7, #16]
 c00ad22:	ee07 3a90 	vmov	s15, r3
 c00ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00ad2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c00af5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 c00ad2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00ad32:	4b89      	ldr	r3, [pc, #548]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ad34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00ad36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00ad3a:	ee07 3a90 	vmov	s15, r3
 c00ad3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00ad42:	ed97 6a02 	vldr	s12, [r7, #8]
 c00ad46:	eddf 5a86 	vldr	s11, [pc, #536]	@ c00af60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c00ad4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00ad4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00ad52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00ad56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00ad5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00ad5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00ad62:	e08f      	b.n	c00ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c00ad64:	4b7c      	ldr	r3, [pc, #496]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ad66:	689b      	ldr	r3, [r3, #8]
 c00ad68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00ad6c:	2b00      	cmp	r3, #0
 c00ad6e:	d005      	beq.n	c00ad7c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 c00ad70:	4b79      	ldr	r3, [pc, #484]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ad72:	689b      	ldr	r3, [r3, #8]
 c00ad74:	0f1b      	lsrs	r3, r3, #28
 c00ad76:	f003 030f 	and.w	r3, r3, #15
 c00ad7a:	e006      	b.n	c00ad8a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 c00ad7c:	4b76      	ldr	r3, [pc, #472]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ad7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00ad82:	041b      	lsls	r3, r3, #16
 c00ad84:	0f1b      	lsrs	r3, r3, #28
 c00ad86:	f003 030f 	and.w	r3, r3, #15
 c00ad8a:	4a76      	ldr	r2, [pc, #472]	@ (c00af64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 c00ad8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00ad90:	ee07 3a90 	vmov	s15, r3
 c00ad94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00ad98:	693b      	ldr	r3, [r7, #16]
 c00ad9a:	ee07 3a90 	vmov	s15, r3
 c00ad9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00ada2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 c00ada6:	69bb      	ldr	r3, [r7, #24]
 c00ada8:	ee07 3a90 	vmov	s15, r3
 c00adac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00adb0:	ed97 6a02 	vldr	s12, [r7, #8]
 c00adb4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c00af60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c00adb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00adbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00adc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00adc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c00adc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00adcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00add0:	e058      	b.n	c00ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00add2:	693b      	ldr	r3, [r7, #16]
 c00add4:	ee07 3a90 	vmov	s15, r3
 c00add8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00addc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c00af5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 c00ade0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00ade4:	4b5c      	ldr	r3, [pc, #368]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ade6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00ade8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00adec:	ee07 3a90 	vmov	s15, r3
 c00adf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00adf4:	ed97 6a02 	vldr	s12, [r7, #8]
 c00adf8:	eddf 5a59 	vldr	s11, [pc, #356]	@ c00af60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c00adfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00ae00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00ae04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00ae08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00ae0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00ae10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00ae14:	e036      	b.n	c00ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c00ae16:	4b50      	ldr	r3, [pc, #320]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ae18:	689b      	ldr	r3, [r3, #8]
 c00ae1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00ae1e:	2b00      	cmp	r3, #0
 c00ae20:	d005      	beq.n	c00ae2e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 c00ae22:	4b4d      	ldr	r3, [pc, #308]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ae24:	689b      	ldr	r3, [r3, #8]
 c00ae26:	0f1b      	lsrs	r3, r3, #28
 c00ae28:	f003 030f 	and.w	r3, r3, #15
 c00ae2c:	e006      	b.n	c00ae3c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 c00ae2e:	4b4a      	ldr	r3, [pc, #296]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ae30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00ae34:	041b      	lsls	r3, r3, #16
 c00ae36:	0f1b      	lsrs	r3, r3, #28
 c00ae38:	f003 030f 	and.w	r3, r3, #15
 c00ae3c:	4a49      	ldr	r2, [pc, #292]	@ (c00af64 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 c00ae3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00ae42:	ee07 3a90 	vmov	s15, r3
 c00ae46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00ae4a:	693b      	ldr	r3, [r7, #16]
 c00ae4c:	ee07 3a90 	vmov	s15, r3
 c00ae50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00ae54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 c00ae58:	69bb      	ldr	r3, [r7, #24]
 c00ae5a:	ee07 3a90 	vmov	s15, r3
 c00ae5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00ae62:	ed97 6a02 	vldr	s12, [r7, #8]
 c00ae66:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c00af60 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c00ae6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00ae6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00ae72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00ae76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c00ae7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00ae7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00ae82:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 c00ae84:	4b34      	ldr	r3, [pc, #208]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ae86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00ae88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c00ae8c:	2b00      	cmp	r3, #0
 c00ae8e:	d017      	beq.n	c00aec0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00ae90:	4b31      	ldr	r3, [pc, #196]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00ae92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00ae94:	0a5b      	lsrs	r3, r3, #9
 c00ae96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00ae9a:	ee07 3a90 	vmov	s15, r3
 c00ae9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 c00aea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00aea6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00aeaa:	edd7 6a07 	vldr	s13, [r7, #28]
 c00aeae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00aeb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00aeb6:	ee17 2a90 	vmov	r2, s15
 c00aeba:	687b      	ldr	r3, [r7, #4]
 c00aebc:	601a      	str	r2, [r3, #0]
 c00aebe:	e002      	b.n	c00aec6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 c00aec0:	687b      	ldr	r3, [r7, #4]
 c00aec2:	2200      	movs	r2, #0
 c00aec4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 c00aec6:	4b24      	ldr	r3, [pc, #144]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00aec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00aeca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00aece:	2b00      	cmp	r3, #0
 c00aed0:	d017      	beq.n	c00af02 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00aed2:	4b21      	ldr	r3, [pc, #132]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00aed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00aed6:	0c1b      	lsrs	r3, r3, #16
 c00aed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00aedc:	ee07 3a90 	vmov	s15, r3
 c00aee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 c00aee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00aee8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00aeec:	edd7 6a07 	vldr	s13, [r7, #28]
 c00aef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00aef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00aef8:	ee17 2a90 	vmov	r2, s15
 c00aefc:	687b      	ldr	r3, [r7, #4]
 c00aefe:	605a      	str	r2, [r3, #4]
 c00af00:	e002      	b.n	c00af08 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 c00af02:	687b      	ldr	r3, [r7, #4]
 c00af04:	2200      	movs	r2, #0
 c00af06:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 c00af08:	4b13      	ldr	r3, [pc, #76]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00af0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00af0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c00af10:	2b00      	cmp	r3, #0
 c00af12:	d017      	beq.n	c00af44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00af14:	4b10      	ldr	r3, [pc, #64]	@ (c00af58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00af16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00af18:	0e1b      	lsrs	r3, r3, #24
 c00af1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00af1e:	ee07 3a90 	vmov	s15, r3
 c00af22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 c00af26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00af2a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00af2e:	edd7 6a07 	vldr	s13, [r7, #28]
 c00af32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00af36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00af3a:	ee17 2a90 	vmov	r2, s15
 c00af3e:	687b      	ldr	r3, [r7, #4]
 c00af40:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 c00af42:	e002      	b.n	c00af4a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 c00af44:	687b      	ldr	r3, [r7, #4]
 c00af46:	2200      	movs	r2, #0
 c00af48:	609a      	str	r2, [r3, #8]
}
 c00af4a:	bf00      	nop
 c00af4c:	3724      	adds	r7, #36	@ 0x24
 c00af4e:	46bd      	mov	sp, r7
 c00af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00af54:	4770      	bx	lr
 c00af56:	bf00      	nop
 c00af58:	56020c00 	.word	0x56020c00
 c00af5c:	4b742400 	.word	0x4b742400
 c00af60:	46000000 	.word	0x46000000
 c00af64:	0c00e4b8 	.word	0x0c00e4b8

0c00af68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 c00af68:	b480      	push	{r7}
 c00af6a:	b089      	sub	sp, #36	@ 0x24
 c00af6c:	af00      	add	r7, sp, #0
 c00af6e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 c00af70:	4ba6      	ldr	r3, [pc, #664]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00af72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00af74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00af78:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 c00af7a:	4ba4      	ldr	r3, [pc, #656]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00af7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00af7e:	f003 0303 	and.w	r3, r3, #3
 c00af82:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 c00af84:	4ba1      	ldr	r3, [pc, #644]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00af86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00af88:	0a1b      	lsrs	r3, r3, #8
 c00af8a:	f003 030f 	and.w	r3, r3, #15
 c00af8e:	3301      	adds	r3, #1
 c00af90:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 c00af92:	4b9e      	ldr	r3, [pc, #632]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00af94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00af96:	091b      	lsrs	r3, r3, #4
 c00af98:	f003 0301 	and.w	r3, r3, #1
 c00af9c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 c00af9e:	4b9b      	ldr	r3, [pc, #620]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00afa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c00afa2:	08db      	lsrs	r3, r3, #3
 c00afa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00afa8:	68fa      	ldr	r2, [r7, #12]
 c00afaa:	fb02 f303 	mul.w	r3, r2, r3
 c00afae:	ee07 3a90 	vmov	s15, r3
 c00afb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00afb6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 c00afba:	697b      	ldr	r3, [r7, #20]
 c00afbc:	2b03      	cmp	r3, #3
 c00afbe:	d062      	beq.n	c00b086 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 c00afc0:	697b      	ldr	r3, [r7, #20]
 c00afc2:	2b03      	cmp	r3, #3
 c00afc4:	f200 8081 	bhi.w	c00b0ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 c00afc8:	697b      	ldr	r3, [r7, #20]
 c00afca:	2b01      	cmp	r3, #1
 c00afcc:	d024      	beq.n	c00b018 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 c00afce:	697b      	ldr	r3, [r7, #20]
 c00afd0:	2b02      	cmp	r3, #2
 c00afd2:	d17a      	bne.n	c00b0ca <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00afd4:	693b      	ldr	r3, [r7, #16]
 c00afd6:	ee07 3a90 	vmov	s15, r3
 c00afda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00afde:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c00b210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 c00afe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00afe6:	4b89      	ldr	r3, [pc, #548]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00afe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00afea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00afee:	ee07 3a90 	vmov	s15, r3
 c00aff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00aff6:	ed97 6a02 	vldr	s12, [r7, #8]
 c00affa:	eddf 5a86 	vldr	s11, [pc, #536]	@ c00b214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c00affe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00b002:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00b006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00b00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00b016:	e08f      	b.n	c00b138 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 c00b018:	4b7c      	ldr	r3, [pc, #496]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b01a:	689b      	ldr	r3, [r3, #8]
 c00b01c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00b020:	2b00      	cmp	r3, #0
 c00b022:	d005      	beq.n	c00b030 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 c00b024:	4b79      	ldr	r3, [pc, #484]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b026:	689b      	ldr	r3, [r3, #8]
 c00b028:	0f1b      	lsrs	r3, r3, #28
 c00b02a:	f003 030f 	and.w	r3, r3, #15
 c00b02e:	e006      	b.n	c00b03e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 c00b030:	4b76      	ldr	r3, [pc, #472]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00b036:	041b      	lsls	r3, r3, #16
 c00b038:	0f1b      	lsrs	r3, r3, #28
 c00b03a:	f003 030f 	and.w	r3, r3, #15
 c00b03e:	4a76      	ldr	r2, [pc, #472]	@ (c00b218 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 c00b040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00b044:	ee07 3a90 	vmov	s15, r3
 c00b048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b04c:	693b      	ldr	r3, [r7, #16]
 c00b04e:	ee07 3a90 	vmov	s15, r3
 c00b052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 c00b05a:	69bb      	ldr	r3, [r7, #24]
 c00b05c:	ee07 3a90 	vmov	s15, r3
 c00b060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b064:	ed97 6a02 	vldr	s12, [r7, #8]
 c00b068:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c00b214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c00b06c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00b070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00b074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b078:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 c00b07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b080:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00b084:	e058      	b.n	c00b138 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00b086:	693b      	ldr	r3, [r7, #16]
 c00b088:	ee07 3a90 	vmov	s15, r3
 c00b08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b090:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c00b210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 c00b094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00b098:	4b5c      	ldr	r3, [pc, #368]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00b09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00b0a0:	ee07 3a90 	vmov	s15, r3
 c00b0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00b0a8:	ed97 6a02 	vldr	s12, [r7, #8]
 c00b0ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ c00b214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c00b0b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00b0b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00b0b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b0bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00b0c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b0c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00b0c8:	e036      	b.n	c00b138 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 c00b0ca:	4b50      	ldr	r3, [pc, #320]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b0cc:	689b      	ldr	r3, [r3, #8]
 c00b0ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00b0d2:	2b00      	cmp	r3, #0
 c00b0d4:	d005      	beq.n	c00b0e2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 c00b0d6:	4b4d      	ldr	r3, [pc, #308]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b0d8:	689b      	ldr	r3, [r3, #8]
 c00b0da:	0f1b      	lsrs	r3, r3, #28
 c00b0dc:	f003 030f 	and.w	r3, r3, #15
 c00b0e0:	e006      	b.n	c00b0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 c00b0e2:	4b4a      	ldr	r3, [pc, #296]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b0e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00b0e8:	041b      	lsls	r3, r3, #16
 c00b0ea:	0f1b      	lsrs	r3, r3, #28
 c00b0ec:	f003 030f 	and.w	r3, r3, #15
 c00b0f0:	4a49      	ldr	r2, [pc, #292]	@ (c00b218 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 c00b0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00b0f6:	ee07 3a90 	vmov	s15, r3
 c00b0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b0fe:	693b      	ldr	r3, [r7, #16]
 c00b100:	ee07 3a90 	vmov	s15, r3
 c00b104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 c00b10c:	69bb      	ldr	r3, [r7, #24]
 c00b10e:	ee07 3a90 	vmov	s15, r3
 c00b112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b116:	ed97 6a02 	vldr	s12, [r7, #8]
 c00b11a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c00b214 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c00b11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00b122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00b126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 c00b12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00b136:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 c00b138:	4b34      	ldr	r3, [pc, #208]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00b13c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c00b140:	2b00      	cmp	r3, #0
 c00b142:	d017      	beq.n	c00b174 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00b144:	4b31      	ldr	r3, [pc, #196]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00b148:	0a5b      	lsrs	r3, r3, #9
 c00b14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00b14e:	ee07 3a90 	vmov	s15, r3
 c00b152:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 c00b156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00b15a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00b15e:	edd7 6a07 	vldr	s13, [r7, #28]
 c00b162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00b166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00b16a:	ee17 2a90 	vmov	r2, s15
 c00b16e:	687b      	ldr	r3, [r7, #4]
 c00b170:	601a      	str	r2, [r3, #0]
 c00b172:	e002      	b.n	c00b17a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 c00b174:	687b      	ldr	r3, [r7, #4]
 c00b176:	2200      	movs	r2, #0
 c00b178:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 c00b17a:	4b24      	ldr	r3, [pc, #144]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00b17e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00b182:	2b00      	cmp	r3, #0
 c00b184:	d017      	beq.n	c00b1b6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00b186:	4b21      	ldr	r3, [pc, #132]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00b18a:	0c1b      	lsrs	r3, r3, #16
 c00b18c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00b190:	ee07 3a90 	vmov	s15, r3
 c00b194:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 c00b198:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00b19c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00b1a0:	edd7 6a07 	vldr	s13, [r7, #28]
 c00b1a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00b1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00b1ac:	ee17 2a90 	vmov	r2, s15
 c00b1b0:	687b      	ldr	r3, [r7, #4]
 c00b1b2:	605a      	str	r2, [r3, #4]
 c00b1b4:	e002      	b.n	c00b1bc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 c00b1b6:	687b      	ldr	r3, [r7, #4]
 c00b1b8:	2200      	movs	r2, #0
 c00b1ba:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 c00b1bc:	4b13      	ldr	r3, [pc, #76]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00b1c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c00b1c4:	2b00      	cmp	r3, #0
 c00b1c6:	d017      	beq.n	c00b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00b1c8:	4b10      	ldr	r3, [pc, #64]	@ (c00b20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00b1ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00b1cc:	0e1b      	lsrs	r3, r3, #24
 c00b1ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00b1d2:	ee07 3a90 	vmov	s15, r3
 c00b1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 c00b1da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00b1de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c00b1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 c00b1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00b1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00b1ee:	ee17 2a90 	vmov	r2, s15
 c00b1f2:	687b      	ldr	r3, [r7, #4]
 c00b1f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 c00b1f6:	e002      	b.n	c00b1fe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 c00b1f8:	687b      	ldr	r3, [r7, #4]
 c00b1fa:	2200      	movs	r2, #0
 c00b1fc:	609a      	str	r2, [r3, #8]
}
 c00b1fe:	bf00      	nop
 c00b200:	3724      	adds	r7, #36	@ 0x24
 c00b202:	46bd      	mov	sp, r7
 c00b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00b208:	4770      	bx	lr
 c00b20a:	bf00      	nop
 c00b20c:	56020c00 	.word	0x56020c00
 c00b210:	4b742400 	.word	0x4b742400
 c00b214:	46000000 	.word	0x46000000
 c00b218:	0c00e4b8 	.word	0x0c00e4b8

0c00b21c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 c00b21c:	b480      	push	{r7}
 c00b21e:	b089      	sub	sp, #36	@ 0x24
 c00b220:	af00      	add	r7, sp, #0
 c00b222:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 c00b224:	4ba6      	ldr	r3, [pc, #664]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c00b228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00b22c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 c00b22e:	4ba4      	ldr	r3, [pc, #656]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00b232:	f003 0303 	and.w	r3, r3, #3
 c00b236:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 c00b238:	4ba1      	ldr	r3, [pc, #644]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00b23c:	0a1b      	lsrs	r3, r3, #8
 c00b23e:	f003 030f 	and.w	r3, r3, #15
 c00b242:	3301      	adds	r3, #1
 c00b244:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 c00b246:	4b9e      	ldr	r3, [pc, #632]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00b24a:	091b      	lsrs	r3, r3, #4
 c00b24c:	f003 0301 	and.w	r3, r3, #1
 c00b250:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 c00b252:	4b9b      	ldr	r3, [pc, #620]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c00b256:	08db      	lsrs	r3, r3, #3
 c00b258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00b25c:	68fa      	ldr	r2, [r7, #12]
 c00b25e:	fb02 f303 	mul.w	r3, r2, r3
 c00b262:	ee07 3a90 	vmov	s15, r3
 c00b266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b26a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 c00b26e:	697b      	ldr	r3, [r7, #20]
 c00b270:	2b03      	cmp	r3, #3
 c00b272:	d062      	beq.n	c00b33a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 c00b274:	697b      	ldr	r3, [r7, #20]
 c00b276:	2b03      	cmp	r3, #3
 c00b278:	f200 8081 	bhi.w	c00b37e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 c00b27c:	697b      	ldr	r3, [r7, #20]
 c00b27e:	2b01      	cmp	r3, #1
 c00b280:	d024      	beq.n	c00b2cc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 c00b282:	697b      	ldr	r3, [r7, #20]
 c00b284:	2b02      	cmp	r3, #2
 c00b286:	d17a      	bne.n	c00b37e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c00b288:	693b      	ldr	r3, [r7, #16]
 c00b28a:	ee07 3a90 	vmov	s15, r3
 c00b28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b292:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c00b4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 c00b296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00b29a:	4b89      	ldr	r3, [pc, #548]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c00b29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00b2a2:	ee07 3a90 	vmov	s15, r3
 c00b2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c00b2aa:	ed97 6a02 	vldr	s12, [r7, #8]
 c00b2ae:	eddf 5a86 	vldr	s11, [pc, #536]	@ c00b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c00b2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c00b2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c00b2ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c00b2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b2c6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 c00b2ca:	e08f      	b.n	c00b3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c00b2cc:	4b7c      	ldr	r3, [pc, #496]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b2ce:	689b      	ldr	r3, [r3, #8]
 c00b2d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00b2d4:	2b00      	cmp	r3, #0
 c00b2d6:	d005      	beq.n	c00b2e4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 c00b2d8:	4b79      	ldr	r3, [pc, #484]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b2da:	689b      	ldr	r3, [r3, #8]
 c00b2dc:	0f1b      	lsrs	r3, r3, #28
 c00b2de:	f003 030f 	and.w	r3, r3, #15
 c00b2e2:	e006      	b.n	c00b2f2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 c00b2e4:	4b76      	ldr	r3, [pc, #472]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b2e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00b2ea:	041b      	lsls	r3, r3, #16
 c00b2ec:	0f1b      	lsrs	r3, r3, #28
 c00b2ee:	f003 030f 	and.w	r3, r3, #15
 c00b2f2:	4a76      	ldr	r2, [pc, #472]	@ (c00b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 c00b2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00b2f8:	ee07 3a90 	vmov	s15, r3
 c00b2fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b300:	693b      	ldr	r3, [r7, #16]
 c00b302:	ee07 3a90 	vmov	s15, r3
 c00b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 c00b30e:	69bb      	ldr	r3, [r7, #24]
 c00b310:	ee07 3a90 	vmov	s15, r3
 c00b314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b318:	ed97 6a02 	vldr	s12, [r7, #8]
 c00b31c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c00b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c00b320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00b324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00b328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b32c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c00b330:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b334:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00b338:	e058      	b.n	c00b3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c00b33a:	693b      	ldr	r3, [r7, #16]
 c00b33c:	ee07 3a90 	vmov	s15, r3
 c00b340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b344:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c00b4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 c00b348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00b34c:	4b5c      	ldr	r3, [pc, #368]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b34e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c00b350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00b354:	ee07 3a90 	vmov	s15, r3
 c00b358:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c00b35c:	ed97 6a02 	vldr	s12, [r7, #8]
 c00b360:	eddf 5a59 	vldr	s11, [pc, #356]	@ c00b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c00b364:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c00b368:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c00b36c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b370:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c00b374:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b378:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00b37c:	e036      	b.n	c00b3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c00b37e:	4b50      	ldr	r3, [pc, #320]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b380:	689b      	ldr	r3, [r3, #8]
 c00b382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00b386:	2b00      	cmp	r3, #0
 c00b388:	d005      	beq.n	c00b396 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 c00b38a:	4b4d      	ldr	r3, [pc, #308]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b38c:	689b      	ldr	r3, [r3, #8]
 c00b38e:	0f1b      	lsrs	r3, r3, #28
 c00b390:	f003 030f 	and.w	r3, r3, #15
 c00b394:	e006      	b.n	c00b3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 c00b396:	4b4a      	ldr	r3, [pc, #296]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00b39c:	041b      	lsls	r3, r3, #16
 c00b39e:	0f1b      	lsrs	r3, r3, #28
 c00b3a0:	f003 030f 	and.w	r3, r3, #15
 c00b3a4:	4a49      	ldr	r2, [pc, #292]	@ (c00b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 c00b3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00b3aa:	ee07 3a90 	vmov	s15, r3
 c00b3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b3b2:	693b      	ldr	r3, [r7, #16]
 c00b3b4:	ee07 3a90 	vmov	s15, r3
 c00b3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00b3bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 c00b3c0:	69bb      	ldr	r3, [r7, #24]
 c00b3c2:	ee07 3a90 	vmov	s15, r3
 c00b3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00b3ca:	ed97 6a02 	vldr	s12, [r7, #8]
 c00b3ce:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c00b4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c00b3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00b3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00b3da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00b3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c00b3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00b3e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00b3ea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 c00b3ec:	4b34      	ldr	r3, [pc, #208]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00b3f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c00b3f4:	2b00      	cmp	r3, #0
 c00b3f6:	d017      	beq.n	c00b428 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00b3f8:	4b31      	ldr	r3, [pc, #196]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c00b3fc:	0a5b      	lsrs	r3, r3, #9
 c00b3fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00b402:	ee07 3a90 	vmov	s15, r3
 c00b406:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 c00b40a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00b40e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00b412:	edd7 6a07 	vldr	s13, [r7, #28]
 c00b416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00b41a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00b41e:	ee17 2a90 	vmov	r2, s15
 c00b422:	687b      	ldr	r3, [r7, #4]
 c00b424:	601a      	str	r2, [r3, #0]
 c00b426:	e002      	b.n	c00b42e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 c00b428:	687b      	ldr	r3, [r7, #4]
 c00b42a:	2200      	movs	r2, #0
 c00b42c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 c00b42e:	4b24      	ldr	r3, [pc, #144]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00b432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00b436:	2b00      	cmp	r3, #0
 c00b438:	d017      	beq.n	c00b46a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00b43a:	4b21      	ldr	r3, [pc, #132]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b43c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c00b43e:	0c1b      	lsrs	r3, r3, #16
 c00b440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00b444:	ee07 3a90 	vmov	s15, r3
 c00b448:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 c00b44c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00b450:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00b454:	edd7 6a07 	vldr	s13, [r7, #28]
 c00b458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00b45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00b460:	ee17 2a90 	vmov	r2, s15
 c00b464:	687b      	ldr	r3, [r7, #4]
 c00b466:	605a      	str	r2, [r3, #4]
 c00b468:	e002      	b.n	c00b470 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 c00b46a:	687b      	ldr	r3, [r7, #4]
 c00b46c:	2200      	movs	r2, #0
 c00b46e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 c00b470:	4b13      	ldr	r3, [pc, #76]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00b474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c00b478:	2b00      	cmp	r3, #0
 c00b47a:	d017      	beq.n	c00b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00b47c:	4b10      	ldr	r3, [pc, #64]	@ (c00b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c00b47e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c00b480:	0e1b      	lsrs	r3, r3, #24
 c00b482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00b486:	ee07 3a90 	vmov	s15, r3
 c00b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 c00b48e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00b492:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c00b496:	edd7 6a07 	vldr	s13, [r7, #28]
 c00b49a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00b49e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00b4a2:	ee17 2a90 	vmov	r2, s15
 c00b4a6:	687b      	ldr	r3, [r7, #4]
 c00b4a8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 c00b4aa:	e002      	b.n	c00b4b2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 c00b4ac:	687b      	ldr	r3, [r7, #4]
 c00b4ae:	2200      	movs	r2, #0
 c00b4b0:	609a      	str	r2, [r3, #8]
}
 c00b4b2:	bf00      	nop
 c00b4b4:	3724      	adds	r7, #36	@ 0x24
 c00b4b6:	46bd      	mov	sp, r7
 c00b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00b4bc:	4770      	bx	lr
 c00b4be:	bf00      	nop
 c00b4c0:	56020c00 	.word	0x56020c00
 c00b4c4:	4b742400 	.word	0x4b742400
 c00b4c8:	46000000 	.word	0x46000000
 c00b4cc:	0c00e4b8 	.word	0x0c00e4b8

0c00b4d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 c00b4d0:	b580      	push	{r7, lr}
 c00b4d2:	b08e      	sub	sp, #56	@ 0x38
 c00b4d4:	af00      	add	r7, sp, #0
 c00b4d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 c00b4da:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b4de:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 c00b4e2:	430b      	orrs	r3, r1
 c00b4e4:	d145      	bne.n	c00b572 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 c00b4e6:	4ba7      	ldr	r3, [pc, #668]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b4e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00b4ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c00b4f0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 c00b4f2:	4ba4      	ldr	r3, [pc, #656]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b4f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00b4f8:	f003 0302 	and.w	r3, r3, #2
 c00b4fc:	2b02      	cmp	r3, #2
 c00b4fe:	d108      	bne.n	c00b512 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 c00b500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c00b506:	d104      	bne.n	c00b512 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 c00b508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00b50c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b50e:	f001 b9b3 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 c00b512:	4b9c      	ldr	r3, [pc, #624]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00b518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00b51c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00b520:	d114      	bne.n	c00b54c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 c00b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00b528:	d110      	bne.n	c00b54c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00b52a:	4b96      	ldr	r3, [pc, #600]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b52c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00b530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c00b534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00b538:	d103      	bne.n	c00b542 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 c00b53a:	23fa      	movs	r3, #250	@ 0xfa
 c00b53c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00b53e:	f001 b99b 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c00b542:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c00b546:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00b548:	f001 b996 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 c00b54c:	4b8d      	ldr	r3, [pc, #564]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b54e:	681b      	ldr	r3, [r3, #0]
 c00b550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00b554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00b558:	d107      	bne.n	c00b56a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 c00b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b55c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00b560:	d103      	bne.n	c00b56a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 c00b562:	4b89      	ldr	r3, [pc, #548]	@ (c00b788 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 c00b564:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b566:	f001 b987 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 c00b56a:	2300      	movs	r3, #0
 c00b56c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b56e:	f001 b983 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 c00b572:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b576:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 c00b57a:	430b      	orrs	r3, r1
 c00b57c:	d151      	bne.n	c00b622 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 c00b57e:	4b81      	ldr	r3, [pc, #516]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b580:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00b584:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 c00b588:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00b58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b58c:	2b80      	cmp	r3, #128	@ 0x80
 c00b58e:	d035      	beq.n	c00b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 c00b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b592:	2b80      	cmp	r3, #128	@ 0x80
 c00b594:	d841      	bhi.n	c00b61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c00b596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b598:	2b60      	cmp	r3, #96	@ 0x60
 c00b59a:	d02a      	beq.n	c00b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 c00b59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b59e:	2b60      	cmp	r3, #96	@ 0x60
 c00b5a0:	d83b      	bhi.n	c00b61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c00b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b5a4:	2b40      	cmp	r3, #64	@ 0x40
 c00b5a6:	d009      	beq.n	c00b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 c00b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b5aa:	2b40      	cmp	r3, #64	@ 0x40
 c00b5ac:	d835      	bhi.n	c00b61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c00b5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b5b0:	2b00      	cmp	r3, #0
 c00b5b2:	d00c      	beq.n	c00b5ce <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 c00b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b5b6:	2b20      	cmp	r3, #32
 c00b5b8:	d012      	beq.n	c00b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 c00b5ba:	e02e      	b.n	c00b61a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00b5bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00b5c0:	4618      	mov	r0, r3
 c00b5c2:	f7ff fb77 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c00b5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00b5c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b5ca:	f001 b955 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00b5ce:	f107 0318 	add.w	r3, r7, #24
 c00b5d2:	4618      	mov	r0, r3
 c00b5d4:	f7ff fcc8 	bl	c00af68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 c00b5d8:	69bb      	ldr	r3, [r7, #24]
 c00b5da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b5dc:	f001 b94c 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c00b5e0:	f107 030c 	add.w	r3, r7, #12
 c00b5e4:	4618      	mov	r0, r3
 c00b5e6:	f7ff fe19 	bl	c00b21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 c00b5ea:	68fb      	ldr	r3, [r7, #12]
 c00b5ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b5ee:	f001 b943 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c00b5f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c00b5f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b5f8:	f001 b93e 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00b5fc:	4b61      	ldr	r3, [pc, #388]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b5fe:	681b      	ldr	r3, [r3, #0]
 c00b600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00b604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b608:	d103      	bne.n	c00b612 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 c00b60a:	4b60      	ldr	r3, [pc, #384]	@ (c00b78c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 c00b60c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00b60e:	f001 b933 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00b612:	2300      	movs	r3, #0
 c00b614:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b616:	f001 b92f 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 c00b61a:	2300      	movs	r3, #0
 c00b61c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b61e:	f001 b92b 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 c00b622:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b626:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 c00b62a:	430b      	orrs	r3, r1
 c00b62c:	d158      	bne.n	c00b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 c00b62e:	4b55      	ldr	r3, [pc, #340]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b630:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00b634:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 c00b638:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00b63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b63c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b640:	d03b      	beq.n	c00b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 c00b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b648:	d846      	bhi.n	c00b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c00b64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b64c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00b650:	d02e      	beq.n	c00b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 c00b652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00b658:	d83e      	bhi.n	c00b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c00b65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b65c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00b660:	d00b      	beq.n	c00b67a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 c00b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00b668:	d836      	bhi.n	c00b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c00b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b66c:	2b00      	cmp	r3, #0
 c00b66e:	d00d      	beq.n	c00b68c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 c00b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c00b676:	d012      	beq.n	c00b69e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 c00b678:	e02e      	b.n	c00b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00b67a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00b67e:	4618      	mov	r0, r3
 c00b680:	f7ff fb18 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c00b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00b686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b688:	f001 b8f6 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00b68c:	f107 0318 	add.w	r3, r7, #24
 c00b690:	4618      	mov	r0, r3
 c00b692:	f7ff fc69 	bl	c00af68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 c00b696:	69bb      	ldr	r3, [r7, #24]
 c00b698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b69a:	f001 b8ed 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c00b69e:	f107 030c 	add.w	r3, r7, #12
 c00b6a2:	4618      	mov	r0, r3
 c00b6a4:	f7ff fdba 	bl	c00b21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 c00b6a8:	68fb      	ldr	r3, [r7, #12]
 c00b6aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b6ac:	f001 b8e4 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c00b6b0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c00b6b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b6b6:	f001 b8df 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00b6ba:	4b32      	ldr	r3, [pc, #200]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b6bc:	681b      	ldr	r3, [r3, #0]
 c00b6be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00b6c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b6c6:	d103      	bne.n	c00b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 c00b6c8:	4b30      	ldr	r3, [pc, #192]	@ (c00b78c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 c00b6ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00b6cc:	f001 b8d4 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00b6d0:	2300      	movs	r3, #0
 c00b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b6d4:	f001 b8d0 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 c00b6d8:	2300      	movs	r3, #0
 c00b6da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b6dc:	f001 b8cc 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 c00b6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b6e4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 c00b6e8:	430b      	orrs	r3, r1
 c00b6ea:	d126      	bne.n	c00b73a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 c00b6ec:	4b25      	ldr	r3, [pc, #148]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b6ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00b6f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c00b6f6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 c00b6f8:	4b22      	ldr	r3, [pc, #136]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b6fa:	681b      	ldr	r3, [r3, #0]
 c00b6fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00b700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b704:	d106      	bne.n	c00b714 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 c00b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b708:	2b00      	cmp	r3, #0
 c00b70a:	d103      	bne.n	c00b714 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 c00b70c:	4b1f      	ldr	r3, [pc, #124]	@ (c00b78c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 c00b70e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b710:	f001 b8b2 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 c00b714:	4b1b      	ldr	r3, [pc, #108]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b716:	681b      	ldr	r3, [r3, #0]
 c00b718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00b71c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b720:	d107      	bne.n	c00b732 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 c00b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c00b728:	d103      	bne.n	c00b732 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 c00b72a:	4b19      	ldr	r3, [pc, #100]	@ (c00b790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c00b72c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b72e:	f001 b8a3 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 c00b732:	2300      	movs	r3, #0
 c00b734:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b736:	f001 b89f 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 c00b73a:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b73e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 c00b742:	430b      	orrs	r3, r1
 c00b744:	d16e      	bne.n	c00b824 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 c00b746:	4b0f      	ldr	r3, [pc, #60]	@ (c00b784 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c00b748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00b74c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 c00b750:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00b752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b754:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c00b758:	d03d      	beq.n	c00b7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 c00b75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b75c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c00b760:	d85c      	bhi.n	c00b81c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 c00b762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00b768:	d014      	beq.n	c00b794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 c00b76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b76c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00b770:	d854      	bhi.n	c00b81c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 c00b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b774:	2b00      	cmp	r3, #0
 c00b776:	d01f      	beq.n	c00b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 c00b778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b77a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c00b77e:	d012      	beq.n	c00b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 c00b780:	e04c      	b.n	c00b81c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 c00b782:	bf00      	nop
 c00b784:	56020c00 	.word	0x56020c00
 c00b788:	0007a120 	.word	0x0007a120
 c00b78c:	00f42400 	.word	0x00f42400
 c00b790:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00b794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00b798:	4618      	mov	r0, r3
 c00b79a:	f7ff fa8b 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 c00b79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00b7a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b7a2:	f001 b869 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00b7a6:	f107 0318 	add.w	r3, r7, #24
 c00b7aa:	4618      	mov	r0, r3
 c00b7ac:	f7ff fbdc 	bl	c00af68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 c00b7b0:	69fb      	ldr	r3, [r7, #28]
 c00b7b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b7b4:	f001 b860 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 c00b7b8:	4ba7      	ldr	r3, [pc, #668]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b7ba:	681b      	ldr	r3, [r3, #0]
 c00b7bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c00b7c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00b7c4:	d103      	bne.n	c00b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 c00b7c6:	4ba5      	ldr	r3, [pc, #660]	@ (c00ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 c00b7c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00b7ca:	f001 b855 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00b7ce:	2300      	movs	r3, #0
 c00b7d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b7d2:	f001 b851 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00b7d6:	4ba0      	ldr	r3, [pc, #640]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b7d8:	681b      	ldr	r3, [r3, #0]
 c00b7da:	f003 0320 	and.w	r3, r3, #32
 c00b7de:	2b20      	cmp	r3, #32
 c00b7e0:	d118      	bne.n	c00b814 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00b7e2:	4b9d      	ldr	r3, [pc, #628]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b7e4:	689b      	ldr	r3, [r3, #8]
 c00b7e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00b7ea:	2b00      	cmp	r3, #0
 c00b7ec:	d005      	beq.n	c00b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 c00b7ee:	4b9a      	ldr	r3, [pc, #616]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b7f0:	689b      	ldr	r3, [r3, #8]
 c00b7f2:	0e1b      	lsrs	r3, r3, #24
 c00b7f4:	f003 030f 	and.w	r3, r3, #15
 c00b7f8:	e006      	b.n	c00b808 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 c00b7fa:	4b97      	ldr	r3, [pc, #604]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b7fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00b800:	041b      	lsls	r3, r3, #16
 c00b802:	0e1b      	lsrs	r3, r3, #24
 c00b804:	f003 030f 	and.w	r3, r3, #15
 c00b808:	4a95      	ldr	r2, [pc, #596]	@ (c00ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 c00b80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00b80e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00b810:	f001 b832 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00b814:	2300      	movs	r3, #0
 c00b816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b818:	f001 b82e 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 c00b81c:	2300      	movs	r3, #0
 c00b81e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00b820:	f001 b82a 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 c00b824:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b828:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 c00b82c:	430b      	orrs	r3, r1
 c00b82e:	d17f      	bne.n	c00b930 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 c00b830:	4b89      	ldr	r3, [pc, #548]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00b836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c00b83a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 c00b83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b83e:	2b00      	cmp	r3, #0
 c00b840:	d165      	bne.n	c00b90e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 c00b842:	4b85      	ldr	r3, [pc, #532]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00b848:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 c00b84c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 c00b84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b850:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c00b854:	d034      	beq.n	c00b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 c00b856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b858:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c00b85c:	d853      	bhi.n	c00b906 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 c00b85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00b864:	d00b      	beq.n	c00b87e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 c00b866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00b86c:	d84b      	bhi.n	c00b906 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 c00b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b870:	2b00      	cmp	r3, #0
 c00b872:	d016      	beq.n	c00b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 c00b874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c00b87a:	d009      	beq.n	c00b890 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 c00b87c:	e043      	b.n	c00b906 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00b87e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00b882:	4618      	mov	r0, r3
 c00b884:	f7ff fa16 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 c00b888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00b88a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c00b88c:	f000 bff4 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00b890:	f107 0318 	add.w	r3, r7, #24
 c00b894:	4618      	mov	r0, r3
 c00b896:	f7ff fb67 	bl	c00af68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 c00b89a:	69fb      	ldr	r3, [r7, #28]
 c00b89c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c00b89e:	f000 bfeb 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 c00b8a2:	4b6d      	ldr	r3, [pc, #436]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b8a4:	681b      	ldr	r3, [r3, #0]
 c00b8a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c00b8aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00b8ae:	d103      	bne.n	c00b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 c00b8b0:	4b6a      	ldr	r3, [pc, #424]	@ (c00ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 c00b8b2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 c00b8b4:	f000 bfe0 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 c00b8b8:	2300      	movs	r3, #0
 c00b8ba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c00b8bc:	f000 bfdc 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00b8c0:	4b65      	ldr	r3, [pc, #404]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b8c2:	681b      	ldr	r3, [r3, #0]
 c00b8c4:	f003 0320 	and.w	r3, r3, #32
 c00b8c8:	2b20      	cmp	r3, #32
 c00b8ca:	d118      	bne.n	c00b8fe <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00b8cc:	4b62      	ldr	r3, [pc, #392]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b8ce:	689b      	ldr	r3, [r3, #8]
 c00b8d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00b8d4:	2b00      	cmp	r3, #0
 c00b8d6:	d005      	beq.n	c00b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 c00b8d8:	4b5f      	ldr	r3, [pc, #380]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b8da:	689b      	ldr	r3, [r3, #8]
 c00b8dc:	0e1b      	lsrs	r3, r3, #24
 c00b8de:	f003 030f 	and.w	r3, r3, #15
 c00b8e2:	e006      	b.n	c00b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 c00b8e4:	4b5c      	ldr	r3, [pc, #368]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b8e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00b8ea:	041b      	lsls	r3, r3, #16
 c00b8ec:	0e1b      	lsrs	r3, r3, #24
 c00b8ee:	f003 030f 	and.w	r3, r3, #15
 c00b8f2:	4a5b      	ldr	r2, [pc, #364]	@ (c00ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 c00b8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00b8f8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 c00b8fa:	f000 bfbd 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 c00b8fe:	2300      	movs	r3, #0
 c00b900:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c00b902:	f000 bfb9 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 c00b906:	2300      	movs	r3, #0
 c00b908:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c00b90a:	f000 bfb5 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 c00b90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00b914:	d108      	bne.n	c00b928 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00b916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00b91a:	4618      	mov	r0, r3
 c00b91c:	f7ff f9ca 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 c00b920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00b922:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b924:	f000 bfa8 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 c00b928:	2300      	movs	r3, #0
 c00b92a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b92c:	f000 bfa4 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 c00b930:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b934:	1e51      	subs	r1, r2, #1
 c00b936:	430b      	orrs	r3, r1
 c00b938:	d136      	bne.n	c00b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 c00b93a:	4b47      	ldr	r3, [pc, #284]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b93c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00b940:	f003 0303 	and.w	r3, r3, #3
 c00b944:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 c00b946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b948:	2b00      	cmp	r3, #0
 c00b94a:	d104      	bne.n	c00b956 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 c00b94c:	f7fe fb44 	bl	c009fd8 <HAL_RCC_GetPCLK2Freq>
 c00b950:	6378      	str	r0, [r7, #52]	@ 0x34
 c00b952:	f000 bf91 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 c00b956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b958:	2b01      	cmp	r3, #1
 c00b95a:	d104      	bne.n	c00b966 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00b95c:	f7fe fa0c 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00b960:	6378      	str	r0, [r7, #52]	@ 0x34
 c00b962:	f000 bf89 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 c00b966:	4b3c      	ldr	r3, [pc, #240]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b968:	681b      	ldr	r3, [r3, #0]
 c00b96a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00b96e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b972:	d106      	bne.n	c00b982 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 c00b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b976:	2b02      	cmp	r3, #2
 c00b978:	d103      	bne.n	c00b982 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 c00b97a:	4b3a      	ldr	r3, [pc, #232]	@ (c00ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 c00b97c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b97e:	f000 bf7b 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 c00b982:	4b35      	ldr	r3, [pc, #212]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00b988:	f003 0302 	and.w	r3, r3, #2
 c00b98c:	2b02      	cmp	r3, #2
 c00b98e:	d107      	bne.n	c00b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 c00b990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b992:	2b03      	cmp	r3, #3
 c00b994:	d104      	bne.n	c00b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 c00b996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00b99a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b99c:	f000 bf6c 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 c00b9a0:	2300      	movs	r3, #0
 c00b9a2:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b9a4:	f000 bf68 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 c00b9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00b9ac:	1e91      	subs	r1, r2, #2
 c00b9ae:	430b      	orrs	r3, r1
 c00b9b0:	d136      	bne.n	c00ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 c00b9b2:	4b29      	ldr	r3, [pc, #164]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b9b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00b9b8:	f003 030c 	and.w	r3, r3, #12
 c00b9bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 c00b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b9c0:	2b00      	cmp	r3, #0
 c00b9c2:	d104      	bne.n	c00b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00b9c4:	f7fe faf4 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00b9c8:	6378      	str	r0, [r7, #52]	@ 0x34
 c00b9ca:	f000 bf55 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 c00b9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b9d0:	2b04      	cmp	r3, #4
 c00b9d2:	d104      	bne.n	c00b9de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00b9d4:	f7fe f9d0 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00b9d8:	6378      	str	r0, [r7, #52]	@ 0x34
 c00b9da:	f000 bf4d 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 c00b9de:	4b1e      	ldr	r3, [pc, #120]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b9e0:	681b      	ldr	r3, [r3, #0]
 c00b9e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00b9e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00b9ea:	d106      	bne.n	c00b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 c00b9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00b9ee:	2b08      	cmp	r3, #8
 c00b9f0:	d103      	bne.n	c00b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 c00b9f2:	4b1c      	ldr	r3, [pc, #112]	@ (c00ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 c00b9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 c00b9f6:	f000 bf3f 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 c00b9fa:	4b17      	ldr	r3, [pc, #92]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00b9fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00ba00:	f003 0302 	and.w	r3, r3, #2
 c00ba04:	2b02      	cmp	r3, #2
 c00ba06:	d107      	bne.n	c00ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 c00ba08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00ba0a:	2b0c      	cmp	r3, #12
 c00ba0c:	d104      	bne.n	c00ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 c00ba0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00ba12:	637b      	str	r3, [r7, #52]	@ 0x34
 c00ba14:	f000 bf30 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 c00ba18:	2300      	movs	r3, #0
 c00ba1a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00ba1c:	f000 bf2c 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 c00ba20:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00ba24:	1f11      	subs	r1, r2, #4
 c00ba26:	430b      	orrs	r3, r1
 c00ba28:	d13f      	bne.n	c00baaa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 c00ba2a:	4b0b      	ldr	r3, [pc, #44]	@ (c00ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00ba2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00ba30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 c00ba34:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 c00ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00ba38:	2b00      	cmp	r3, #0
 c00ba3a:	d104      	bne.n	c00ba46 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00ba3c:	f7fe fab8 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00ba40:	6378      	str	r0, [r7, #52]	@ 0x34
 c00ba42:	f000 bf19 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 c00ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00ba48:	2b10      	cmp	r3, #16
 c00ba4a:	d10d      	bne.n	c00ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00ba4c:	f7fe f994 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00ba50:	6378      	str	r0, [r7, #52]	@ 0x34
 c00ba52:	f000 bf11 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c00ba56:	bf00      	nop
 c00ba58:	56020c00 	.word	0x56020c00
 c00ba5c:	02dc6c00 	.word	0x02dc6c00
 c00ba60:	0c00e4b8 	.word	0x0c00e4b8
 c00ba64:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 c00ba68:	4ba6      	ldr	r3, [pc, #664]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00ba6a:	681b      	ldr	r3, [r3, #0]
 c00ba6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00ba70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00ba74:	d106      	bne.n	c00ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 c00ba76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00ba78:	2b20      	cmp	r3, #32
 c00ba7a:	d103      	bne.n	c00ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 c00ba7c:	4ba2      	ldr	r3, [pc, #648]	@ (c00bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c00ba7e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00ba80:	f000 befa 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 c00ba84:	4b9f      	ldr	r3, [pc, #636]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00ba86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00ba8a:	f003 0302 	and.w	r3, r3, #2
 c00ba8e:	2b02      	cmp	r3, #2
 c00ba90:	d107      	bne.n	c00baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 c00ba92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00ba94:	2b30      	cmp	r3, #48	@ 0x30
 c00ba96:	d104      	bne.n	c00baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 c00ba98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00ba9c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00ba9e:	f000 beeb 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 c00baa2:	2300      	movs	r3, #0
 c00baa4:	637b      	str	r3, [r7, #52]	@ 0x34
 c00baa6:	f000 bee7 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 c00baaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00baae:	f1a2 0108 	sub.w	r1, r2, #8
 c00bab2:	430b      	orrs	r3, r1
 c00bab4:	d136      	bne.n	c00bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 c00bab6:	4b93      	ldr	r3, [pc, #588]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00babc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c00bac0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 c00bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bac4:	2b00      	cmp	r3, #0
 c00bac6:	d104      	bne.n	c00bad2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00bac8:	f7fe fa72 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00bacc:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bace:	f000 bed3 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 c00bad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bad4:	2b40      	cmp	r3, #64	@ 0x40
 c00bad6:	d104      	bne.n	c00bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00bad8:	f7fe f94e 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00badc:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bade:	f000 becb 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 c00bae2:	4b88      	ldr	r3, [pc, #544]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bae4:	681b      	ldr	r3, [r3, #0]
 c00bae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00baea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00baee:	d106      	bne.n	c00bafe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 c00baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00baf2:	2b80      	cmp	r3, #128	@ 0x80
 c00baf4:	d103      	bne.n	c00bafe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 c00baf6:	4b84      	ldr	r3, [pc, #528]	@ (c00bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c00baf8:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bafa:	f000 bebd 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 c00bafe:	4b81      	ldr	r3, [pc, #516]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bb00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00bb04:	f003 0302 	and.w	r3, r3, #2
 c00bb08:	2b02      	cmp	r3, #2
 c00bb0a:	d107      	bne.n	c00bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 c00bb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bb0e:	2bc0      	cmp	r3, #192	@ 0xc0
 c00bb10:	d104      	bne.n	c00bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 c00bb12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00bb16:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bb18:	f000 beae 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 c00bb1c:	2300      	movs	r3, #0
 c00bb1e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bb20:	f000 beaa 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 c00bb24:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00bb28:	f1a2 0110 	sub.w	r1, r2, #16
 c00bb2c:	430b      	orrs	r3, r1
 c00bb2e:	d139      	bne.n	c00bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 c00bb30:	4b74      	ldr	r3, [pc, #464]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bb32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00bb36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c00bb3a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 c00bb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bb3e:	2b00      	cmp	r3, #0
 c00bb40:	d104      	bne.n	c00bb4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00bb42:	f7fe fa35 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00bb46:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bb48:	f000 be96 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 c00bb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bb4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c00bb52:	d104      	bne.n	c00bb5e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00bb54:	f7fe f910 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00bb58:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bb5a:	f000 be8d 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 c00bb5e:	4b69      	ldr	r3, [pc, #420]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bb60:	681b      	ldr	r3, [r3, #0]
 c00bb62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00bb66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00bb6a:	d107      	bne.n	c00bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 c00bb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bb6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00bb72:	d103      	bne.n	c00bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 c00bb74:	4b64      	ldr	r3, [pc, #400]	@ (c00bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c00bb76:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bb78:	f000 be7e 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 c00bb7c:	4b61      	ldr	r3, [pc, #388]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bb7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00bb82:	f003 0302 	and.w	r3, r3, #2
 c00bb86:	2b02      	cmp	r3, #2
 c00bb88:	d108      	bne.n	c00bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 c00bb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bb8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00bb90:	d104      	bne.n	c00bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 c00bb92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00bb96:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bb98:	f000 be6e 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 c00bb9c:	2300      	movs	r3, #0
 c00bb9e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bba0:	f000 be6a 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 c00bba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00bba8:	f1a2 0120 	sub.w	r1, r2, #32
 c00bbac:	430b      	orrs	r3, r1
 c00bbae:	d158      	bne.n	c00bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 c00bbb0:	4b54      	ldr	r3, [pc, #336]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bbb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00bbb6:	f003 0307 	and.w	r3, r3, #7
 c00bbba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 c00bbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bbbe:	2b00      	cmp	r3, #0
 c00bbc0:	d104      	bne.n	c00bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 c00bbc2:	f7fe fa1d 	bl	c00a000 <HAL_RCC_GetPCLK3Freq>
 c00bbc6:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bbc8:	f000 be56 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 c00bbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bbce:	2b01      	cmp	r3, #1
 c00bbd0:	d104      	bne.n	c00bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00bbd2:	f7fe f8d1 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00bbd6:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bbd8:	f000 be4e 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 c00bbdc:	4b49      	ldr	r3, [pc, #292]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bbde:	681b      	ldr	r3, [r3, #0]
 c00bbe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00bbe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00bbe8:	d106      	bne.n	c00bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 c00bbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bbec:	2b02      	cmp	r3, #2
 c00bbee:	d103      	bne.n	c00bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 c00bbf0:	4b45      	ldr	r3, [pc, #276]	@ (c00bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c00bbf2:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bbf4:	f000 be40 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 c00bbf8:	4b42      	ldr	r3, [pc, #264]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bbfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00bbfe:	f003 0302 	and.w	r3, r3, #2
 c00bc02:	2b02      	cmp	r3, #2
 c00bc04:	d107      	bne.n	c00bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 c00bc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bc08:	2b03      	cmp	r3, #3
 c00bc0a:	d104      	bne.n	c00bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 c00bc0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00bc10:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bc12:	f000 be31 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 c00bc16:	4b3b      	ldr	r3, [pc, #236]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bc18:	681b      	ldr	r3, [r3, #0]
 c00bc1a:	f003 0320 	and.w	r3, r3, #32
 c00bc1e:	2b20      	cmp	r3, #32
 c00bc20:	d11b      	bne.n	c00bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 c00bc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bc24:	2b04      	cmp	r3, #4
 c00bc26:	d118      	bne.n	c00bc5a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00bc28:	4b36      	ldr	r3, [pc, #216]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bc2a:	689b      	ldr	r3, [r3, #8]
 c00bc2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00bc30:	2b00      	cmp	r3, #0
 c00bc32:	d005      	beq.n	c00bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 c00bc34:	4b33      	ldr	r3, [pc, #204]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bc36:	689b      	ldr	r3, [r3, #8]
 c00bc38:	0e1b      	lsrs	r3, r3, #24
 c00bc3a:	f003 030f 	and.w	r3, r3, #15
 c00bc3e:	e006      	b.n	c00bc4e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 c00bc40:	4b30      	ldr	r3, [pc, #192]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bc42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00bc46:	041b      	lsls	r3, r3, #16
 c00bc48:	0e1b      	lsrs	r3, r3, #24
 c00bc4a:	f003 030f 	and.w	r3, r3, #15
 c00bc4e:	4a2f      	ldr	r2, [pc, #188]	@ (c00bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 c00bc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00bc54:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bc56:	f000 be0f 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 c00bc5a:	2300      	movs	r3, #0
 c00bc5c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bc5e:	f000 be0b 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 c00bc62:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00bc66:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 c00bc6a:	430b      	orrs	r3, r1
 c00bc6c:	d172      	bne.n	c00bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 c00bc6e:	4b25      	ldr	r3, [pc, #148]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bc70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00bc74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 c00bc78:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 c00bc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bc7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00bc80:	d104      	bne.n	c00bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00bc82:	f7fe f879 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00bc86:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bc88:	f000 bdf6 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 c00bc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bc8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00bc92:	d108      	bne.n	c00bca6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00bc94:	f107 0318 	add.w	r3, r7, #24
 c00bc98:	4618      	mov	r0, r3
 c00bc9a:	f7ff f965 	bl	c00af68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 c00bc9e:	6a3b      	ldr	r3, [r7, #32]
 c00bca0:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bca2:	f000 bde9 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 c00bca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bca8:	2b00      	cmp	r3, #0
 c00bcaa:	d104      	bne.n	c00bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 c00bcac:	f7fe f966 	bl	c009f7c <HAL_RCC_GetHCLKFreq>
 c00bcb0:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bcb2:	f000 bde1 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 c00bcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bcb8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c00bcbc:	d128      	bne.n	c00bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00bcbe:	4b11      	ldr	r3, [pc, #68]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bcc0:	681b      	ldr	r3, [r3, #0]
 c00bcc2:	f003 0320 	and.w	r3, r3, #32
 c00bcc6:	2b20      	cmp	r3, #32
 c00bcc8:	d118      	bne.n	c00bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00bcca:	4b0e      	ldr	r3, [pc, #56]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bccc:	689b      	ldr	r3, [r3, #8]
 c00bcce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00bcd2:	2b00      	cmp	r3, #0
 c00bcd4:	d005      	beq.n	c00bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 c00bcd6:	4b0b      	ldr	r3, [pc, #44]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bcd8:	689b      	ldr	r3, [r3, #8]
 c00bcda:	0e1b      	lsrs	r3, r3, #24
 c00bcdc:	f003 030f 	and.w	r3, r3, #15
 c00bce0:	e006      	b.n	c00bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 c00bce2:	4b08      	ldr	r3, [pc, #32]	@ (c00bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00bce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00bce8:	041b      	lsls	r3, r3, #16
 c00bcea:	0e1b      	lsrs	r3, r3, #24
 c00bcec:	f003 030f 	and.w	r3, r3, #15
 c00bcf0:	4a06      	ldr	r2, [pc, #24]	@ (c00bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 c00bcf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00bcf6:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bcf8:	f000 bdbe 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 c00bcfc:	2300      	movs	r3, #0
 c00bcfe:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bd00:	f000 bdba 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c00bd04:	56020c00 	.word	0x56020c00
 c00bd08:	00f42400 	.word	0x00f42400
 c00bd0c:	0c00e4b8 	.word	0x0c00e4b8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 c00bd10:	4baf      	ldr	r3, [pc, #700]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bd12:	681b      	ldr	r3, [r3, #0]
 c00bd14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00bd18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00bd1c:	d107      	bne.n	c00bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 c00bd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bd20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c00bd24:	d103      	bne.n	c00bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 c00bd26:	4bab      	ldr	r3, [pc, #684]	@ (c00bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 c00bd28:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bd2a:	f000 bda5 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 c00bd2e:	4ba8      	ldr	r3, [pc, #672]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bd30:	681b      	ldr	r3, [r3, #0]
 c00bd32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00bd36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00bd3a:	d107      	bne.n	c00bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 c00bd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bd3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00bd42:	d103      	bne.n	c00bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 c00bd44:	4ba3      	ldr	r3, [pc, #652]	@ (c00bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 c00bd46:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bd48:	f000 bd96 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 c00bd4c:	2300      	movs	r3, #0
 c00bd4e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bd50:	f000 bd92 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 c00bd54:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00bd58:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 c00bd5c:	430b      	orrs	r3, r1
 c00bd5e:	d158      	bne.n	c00be12 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 c00bd60:	4b9b      	ldr	r3, [pc, #620]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bd62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00bd66:	f003 0307 	and.w	r3, r3, #7
 c00bd6a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00bd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bd6e:	2b04      	cmp	r3, #4
 c00bd70:	d84b      	bhi.n	c00be0a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 c00bd72:	a201      	add	r2, pc, #4	@ (adr r2, c00bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 c00bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00bd78:	0c00bdb1 	.word	0x0c00bdb1
 c00bd7c:	0c00bd8d 	.word	0x0c00bd8d
 c00bd80:	0c00bd9f 	.word	0x0c00bd9f
 c00bd84:	0c00bdbb 	.word	0x0c00bdbb
 c00bd88:	0c00bdc5 	.word	0x0c00bdc5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00bd8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00bd90:	4618      	mov	r0, r3
 c00bd92:	f7fe ff8f 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c00bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00bd98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00bd9a:	f000 bd6d 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c00bd9e:	f107 030c 	add.w	r3, r7, #12
 c00bda2:	4618      	mov	r0, r3
 c00bda4:	f7ff fa3a 	bl	c00b21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 c00bda8:	693b      	ldr	r3, [r7, #16]
 c00bdaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00bdac:	f000 bd64 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 c00bdb0:	f7fe f8e4 	bl	c009f7c <HAL_RCC_GetHCLKFreq>
 c00bdb4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00bdb6:	f000 bd5f 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c00bdba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c00bdbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00bdc0:	f000 bd5a 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00bdc4:	4b82      	ldr	r3, [pc, #520]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bdc6:	681b      	ldr	r3, [r3, #0]
 c00bdc8:	f003 0320 	and.w	r3, r3, #32
 c00bdcc:	2b20      	cmp	r3, #32
 c00bdce:	d118      	bne.n	c00be02 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00bdd0:	4b7f      	ldr	r3, [pc, #508]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bdd2:	689b      	ldr	r3, [r3, #8]
 c00bdd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00bdd8:	2b00      	cmp	r3, #0
 c00bdda:	d005      	beq.n	c00bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 c00bddc:	4b7c      	ldr	r3, [pc, #496]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bdde:	689b      	ldr	r3, [r3, #8]
 c00bde0:	0e1b      	lsrs	r3, r3, #24
 c00bde2:	f003 030f 	and.w	r3, r3, #15
 c00bde6:	e006      	b.n	c00bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 c00bde8:	4b79      	ldr	r3, [pc, #484]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bdea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00bdee:	041b      	lsls	r3, r3, #16
 c00bdf0:	0e1b      	lsrs	r3, r3, #24
 c00bdf2:	f003 030f 	and.w	r3, r3, #15
 c00bdf6:	4a78      	ldr	r2, [pc, #480]	@ (c00bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 c00bdf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00bdfc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00bdfe:	f000 bd3b 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00be02:	2300      	movs	r3, #0
 c00be04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00be06:	f000 bd37 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c00be0a:	2300      	movs	r3, #0
 c00be0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00be0e:	f000 bd33 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 c00be12:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00be16:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 c00be1a:	430b      	orrs	r3, r1
 c00be1c:	d167      	bne.n	c00beee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 c00be1e:	4b6c      	ldr	r3, [pc, #432]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00be20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00be24:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 c00be28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00be2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c00be30:	d036      	beq.n	c00bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 c00be32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c00be38:	d855      	bhi.n	c00bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 c00be3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00be40:	d029      	beq.n	c00be96 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 c00be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00be48:	d84d      	bhi.n	c00bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 c00be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00be50:	d013      	beq.n	c00be7a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 c00be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00be58:	d845      	bhi.n	c00bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 c00be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be5c:	2b00      	cmp	r3, #0
 c00be5e:	d015      	beq.n	c00be8c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 c00be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00be62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00be66:	d13e      	bne.n	c00bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00be68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00be6c:	4618      	mov	r0, r3
 c00be6e:	f7fe ff21 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c00be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00be74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00be76:	f000 bcff 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c00be7a:	f107 030c 	add.w	r3, r7, #12
 c00be7e:	4618      	mov	r0, r3
 c00be80:	f7ff f9cc 	bl	c00b21c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 c00be84:	693b      	ldr	r3, [r7, #16]
 c00be86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00be88:	f000 bcf6 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 c00be8c:	f7fe f876 	bl	c009f7c <HAL_RCC_GetHCLKFreq>
 c00be90:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00be92:	f000 bcf1 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c00be96:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c00be9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00be9c:	f000 bcec 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00bea0:	4b4b      	ldr	r3, [pc, #300]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bea2:	681b      	ldr	r3, [r3, #0]
 c00bea4:	f003 0320 	and.w	r3, r3, #32
 c00bea8:	2b20      	cmp	r3, #32
 c00beaa:	d118      	bne.n	c00bede <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00beac:	4b48      	ldr	r3, [pc, #288]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00beae:	689b      	ldr	r3, [r3, #8]
 c00beb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00beb4:	2b00      	cmp	r3, #0
 c00beb6:	d005      	beq.n	c00bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 c00beb8:	4b45      	ldr	r3, [pc, #276]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00beba:	689b      	ldr	r3, [r3, #8]
 c00bebc:	0e1b      	lsrs	r3, r3, #24
 c00bebe:	f003 030f 	and.w	r3, r3, #15
 c00bec2:	e006      	b.n	c00bed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 c00bec4:	4b42      	ldr	r3, [pc, #264]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00beca:	041b      	lsls	r3, r3, #16
 c00becc:	0e1b      	lsrs	r3, r3, #24
 c00bece:	f003 030f 	and.w	r3, r3, #15
 c00bed2:	4a41      	ldr	r2, [pc, #260]	@ (c00bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 c00bed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00bed8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00beda:	f000 bccd 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00bede:	2300      	movs	r3, #0
 c00bee0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00bee2:	f000 bcc9 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c00bee6:	2300      	movs	r3, #0
 c00bee8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00beea:	f000 bcc5 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 c00beee:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00bef2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 c00bef6:	430b      	orrs	r3, r1
 c00bef8:	d14c      	bne.n	c00bf94 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 c00befa:	4b35      	ldr	r3, [pc, #212]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00befc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00bf00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c00bf04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 c00bf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bf08:	2b00      	cmp	r3, #0
 c00bf0a:	d104      	bne.n	c00bf16 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00bf0c:	f7fe f850 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00bf10:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bf12:	f000 bcb1 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 c00bf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bf18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00bf1c:	d104      	bne.n	c00bf28 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00bf1e:	f7fd ff2b 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00bf22:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bf24:	f000 bca8 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 c00bf28:	4b29      	ldr	r3, [pc, #164]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bf2a:	681b      	ldr	r3, [r3, #0]
 c00bf2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00bf30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00bf34:	d107      	bne.n	c00bf46 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 c00bf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bf38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c00bf3c:	d103      	bne.n	c00bf46 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 c00bf3e:	4b25      	ldr	r3, [pc, #148]	@ (c00bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 c00bf40:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bf42:	f000 bc99 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 c00bf46:	4b22      	ldr	r3, [pc, #136]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bf48:	681b      	ldr	r3, [r3, #0]
 c00bf4a:	f003 0320 	and.w	r3, r3, #32
 c00bf4e:	2b20      	cmp	r3, #32
 c00bf50:	d11c      	bne.n	c00bf8c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 c00bf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bf54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c00bf58:	d118      	bne.n	c00bf8c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00bf5a:	4b1d      	ldr	r3, [pc, #116]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bf5c:	689b      	ldr	r3, [r3, #8]
 c00bf5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00bf62:	2b00      	cmp	r3, #0
 c00bf64:	d005      	beq.n	c00bf72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 c00bf66:	4b1a      	ldr	r3, [pc, #104]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bf68:	689b      	ldr	r3, [r3, #8]
 c00bf6a:	0e1b      	lsrs	r3, r3, #24
 c00bf6c:	f003 030f 	and.w	r3, r3, #15
 c00bf70:	e006      	b.n	c00bf80 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 c00bf72:	4b17      	ldr	r3, [pc, #92]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bf74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00bf78:	041b      	lsls	r3, r3, #16
 c00bf7a:	0e1b      	lsrs	r3, r3, #24
 c00bf7c:	f003 030f 	and.w	r3, r3, #15
 c00bf80:	4a15      	ldr	r2, [pc, #84]	@ (c00bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 c00bf82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00bf86:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bf88:	f000 bc76 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 c00bf8c:	2300      	movs	r3, #0
 c00bf8e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bf90:	f000 bc72 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 c00bf94:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00bf98:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 c00bf9c:	430b      	orrs	r3, r1
 c00bf9e:	d153      	bne.n	c00c048 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 c00bfa0:	4b0b      	ldr	r3, [pc, #44]	@ (c00bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00bfa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00bfa6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 c00bfaa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 c00bfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bfae:	2b00      	cmp	r3, #0
 c00bfb0:	d104      	bne.n	c00bfbc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00bfb2:	f7fd fffd 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00bfb6:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bfb8:	f000 bc5e 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 c00bfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bfbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00bfc2:	d10b      	bne.n	c00bfdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00bfc4:	f7fd fed8 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00bfc8:	6378      	str	r0, [r7, #52]	@ 0x34
 c00bfca:	f000 bc55 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c00bfce:	bf00      	nop
 c00bfd0:	56020c00 	.word	0x56020c00
 c00bfd4:	00f42400 	.word	0x00f42400
 c00bfd8:	0c00e4b8 	.word	0x0c00e4b8
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 c00bfdc:	4ba1      	ldr	r3, [pc, #644]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00bfde:	681b      	ldr	r3, [r3, #0]
 c00bfe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00bfe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00bfe8:	d107      	bne.n	c00bffa <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 c00bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00bfec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00bff0:	d103      	bne.n	c00bffa <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 c00bff2:	4b9d      	ldr	r3, [pc, #628]	@ (c00c268 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c00bff4:	637b      	str	r3, [r7, #52]	@ 0x34
 c00bff6:	f000 bc3f 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 c00bffa:	4b9a      	ldr	r3, [pc, #616]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00bffc:	681b      	ldr	r3, [r3, #0]
 c00bffe:	f003 0320 	and.w	r3, r3, #32
 c00c002:	2b20      	cmp	r3, #32
 c00c004:	d11c      	bne.n	c00c040 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 c00c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c008:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c00c00c:	d118      	bne.n	c00c040 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c00e:	4b95      	ldr	r3, [pc, #596]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c010:	689b      	ldr	r3, [r3, #8]
 c00c012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c016:	2b00      	cmp	r3, #0
 c00c018:	d005      	beq.n	c00c026 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 c00c01a:	4b92      	ldr	r3, [pc, #584]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c01c:	689b      	ldr	r3, [r3, #8]
 c00c01e:	0e1b      	lsrs	r3, r3, #24
 c00c020:	f003 030f 	and.w	r3, r3, #15
 c00c024:	e006      	b.n	c00c034 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 c00c026:	4b8f      	ldr	r3, [pc, #572]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c02c:	041b      	lsls	r3, r3, #16
 c00c02e:	0e1b      	lsrs	r3, r3, #24
 c00c030:	f003 030f 	and.w	r3, r3, #15
 c00c034:	4a8d      	ldr	r2, [pc, #564]	@ (c00c26c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c00c036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c03a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c03c:	f000 bc1c 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 c00c040:	2300      	movs	r3, #0
 c00c042:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c044:	f000 bc18 	b.w	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 c00c048:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c04c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 c00c050:	430b      	orrs	r3, r1
 c00c052:	d151      	bne.n	c00c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 c00c054:	4b83      	ldr	r3, [pc, #524]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00c05a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c00c05e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00c060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c062:	2bc0      	cmp	r3, #192	@ 0xc0
 c00c064:	d024      	beq.n	c00c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 c00c066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c068:	2bc0      	cmp	r3, #192	@ 0xc0
 c00c06a:	d842      	bhi.n	c00c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 c00c06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c06e:	2b80      	cmp	r3, #128	@ 0x80
 c00c070:	d00d      	beq.n	c00c08e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 c00c072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c074:	2b80      	cmp	r3, #128	@ 0x80
 c00c076:	d83c      	bhi.n	c00c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 c00c078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c07a:	2b00      	cmp	r3, #0
 c00c07c:	d003      	beq.n	c00c086 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 c00c07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c080:	2b40      	cmp	r3, #64	@ 0x40
 c00c082:	d011      	beq.n	c00c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 c00c084:	e035      	b.n	c00c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 c00c086:	f7fd ffbb 	bl	c00a000 <HAL_RCC_GetPCLK3Freq>
 c00c08a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c08c:	e3f4      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00c08e:	4b75      	ldr	r3, [pc, #468]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c090:	681b      	ldr	r3, [r3, #0]
 c00c092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c09a:	d102      	bne.n	c00c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 c00c09c:	4b72      	ldr	r3, [pc, #456]	@ (c00c268 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c00c09e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c0a0:	e3ea      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c0a2:	2300      	movs	r3, #0
 c00c0a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c0a6:	e3e7      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 c00c0a8:	f7fd fe66 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00c0ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c0ae:	e3e3      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00c0b0:	4b6c      	ldr	r3, [pc, #432]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c0b2:	681b      	ldr	r3, [r3, #0]
 c00c0b4:	f003 0320 	and.w	r3, r3, #32
 c00c0b8:	2b20      	cmp	r3, #32
 c00c0ba:	d117      	bne.n	c00c0ec <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c0bc:	4b69      	ldr	r3, [pc, #420]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c0be:	689b      	ldr	r3, [r3, #8]
 c00c0c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c0c4:	2b00      	cmp	r3, #0
 c00c0c6:	d005      	beq.n	c00c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 c00c0c8:	4b66      	ldr	r3, [pc, #408]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c0ca:	689b      	ldr	r3, [r3, #8]
 c00c0cc:	0e1b      	lsrs	r3, r3, #24
 c00c0ce:	f003 030f 	and.w	r3, r3, #15
 c00c0d2:	e006      	b.n	c00c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 c00c0d4:	4b63      	ldr	r3, [pc, #396]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c0d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c0da:	041b      	lsls	r3, r3, #16
 c00c0dc:	0e1b      	lsrs	r3, r3, #24
 c00c0de:	f003 030f 	and.w	r3, r3, #15
 c00c0e2:	4a62      	ldr	r2, [pc, #392]	@ (c00c26c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c00c0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c0e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c0ea:	e3c5      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c0ec:	2300      	movs	r3, #0
 c00c0ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c0f0:	e3c2      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 c00c0f2:	2300      	movs	r3, #0
 c00c0f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c0f6:	e3bf      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 c00c0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c0fc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 c00c100:	430b      	orrs	r3, r1
 c00c102:	d147      	bne.n	c00c194 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 c00c104:	4b57      	ldr	r3, [pc, #348]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00c10a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 c00c10e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 c00c110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c112:	2b00      	cmp	r3, #0
 c00c114:	d103      	bne.n	c00c11e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00c116:	f7fd ff4b 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00c11a:	6378      	str	r0, [r7, #52]	@ 0x34
 c00c11c:	e3ac      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 c00c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00c124:	d103      	bne.n	c00c12e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00c126:	f7fd fe27 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00c12a:	6378      	str	r0, [r7, #52]	@ 0x34
 c00c12c:	e3a4      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 c00c12e:	4b4d      	ldr	r3, [pc, #308]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c130:	681b      	ldr	r3, [r3, #0]
 c00c132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c13a:	d106      	bne.n	c00c14a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 c00c13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c13e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c00c142:	d102      	bne.n	c00c14a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 c00c144:	4b48      	ldr	r3, [pc, #288]	@ (c00c268 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c00c146:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c148:	e396      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 c00c14a:	4b46      	ldr	r3, [pc, #280]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c14c:	681b      	ldr	r3, [r3, #0]
 c00c14e:	f003 0320 	and.w	r3, r3, #32
 c00c152:	2b20      	cmp	r3, #32
 c00c154:	d11b      	bne.n	c00c18e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 c00c156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c158:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 c00c15c:	d117      	bne.n	c00c18e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c15e:	4b41      	ldr	r3, [pc, #260]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c160:	689b      	ldr	r3, [r3, #8]
 c00c162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c166:	2b00      	cmp	r3, #0
 c00c168:	d005      	beq.n	c00c176 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 c00c16a:	4b3e      	ldr	r3, [pc, #248]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c16c:	689b      	ldr	r3, [r3, #8]
 c00c16e:	0e1b      	lsrs	r3, r3, #24
 c00c170:	f003 030f 	and.w	r3, r3, #15
 c00c174:	e006      	b.n	c00c184 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 c00c176:	4b3b      	ldr	r3, [pc, #236]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c17c:	041b      	lsls	r3, r3, #16
 c00c17e:	0e1b      	lsrs	r3, r3, #24
 c00c180:	f003 030f 	and.w	r3, r3, #15
 c00c184:	4a39      	ldr	r2, [pc, #228]	@ (c00c26c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c00c186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c18a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c18c:	e374      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 c00c18e:	2300      	movs	r3, #0
 c00c190:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c192:	e371      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 c00c194:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c198:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 c00c19c:	430b      	orrs	r3, r1
 c00c19e:	d16a      	bne.n	c00c276 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 c00c1a0:	4b30      	ldr	r3, [pc, #192]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c1a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00c1a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c00c1aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 c00c1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c1ae:	2b00      	cmp	r3, #0
 c00c1b0:	d120      	bne.n	c00c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00c1b2:	4b2c      	ldr	r3, [pc, #176]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c1b4:	681b      	ldr	r3, [r3, #0]
 c00c1b6:	f003 0320 	and.w	r3, r3, #32
 c00c1ba:	2b20      	cmp	r3, #32
 c00c1bc:	d117      	bne.n	c00c1ee <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c1be:	4b29      	ldr	r3, [pc, #164]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c1c0:	689b      	ldr	r3, [r3, #8]
 c00c1c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c1c6:	2b00      	cmp	r3, #0
 c00c1c8:	d005      	beq.n	c00c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 c00c1ca:	4b26      	ldr	r3, [pc, #152]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c1cc:	689b      	ldr	r3, [r3, #8]
 c00c1ce:	0e1b      	lsrs	r3, r3, #24
 c00c1d0:	f003 030f 	and.w	r3, r3, #15
 c00c1d4:	e006      	b.n	c00c1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 c00c1d6:	4b23      	ldr	r3, [pc, #140]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c1d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c1dc:	041b      	lsls	r3, r3, #16
 c00c1de:	0e1b      	lsrs	r3, r3, #24
 c00c1e0:	f003 030f 	and.w	r3, r3, #15
 c00c1e4:	4a21      	ldr	r2, [pc, #132]	@ (c00c26c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c00c1e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c1ea:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c1ec:	e344      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 c00c1ee:	2300      	movs	r3, #0
 c00c1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c1f2:	e341      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 c00c1f4:	4b1b      	ldr	r3, [pc, #108]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c1f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c1fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00c1fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00c202:	d112      	bne.n	c00c22a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 c00c204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c00c20a:	d10e      	bne.n	c00c22a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c20c:	4b15      	ldr	r3, [pc, #84]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c20e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c00c216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00c21a:	d102      	bne.n	c00c222 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 c00c21c:	23fa      	movs	r3, #250	@ 0xfa
 c00c21e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c220:	e32a      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c00c222:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c00c226:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c228:	e326      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 c00c22a:	4b0e      	ldr	r3, [pc, #56]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c22c:	681b      	ldr	r3, [r3, #0]
 c00c22e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c236:	d106      	bne.n	c00c246 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 c00c238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c23a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00c23e:	d102      	bne.n	c00c246 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 c00c240:	4b09      	ldr	r3, [pc, #36]	@ (c00c268 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c00c242:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c244:	e318      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 c00c246:	4b07      	ldr	r3, [pc, #28]	@ (c00c264 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00c248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c24c:	f003 0302 	and.w	r3, r3, #2
 c00c250:	2b02      	cmp	r3, #2
 c00c252:	d10d      	bne.n	c00c270 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 c00c254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00c25a:	d109      	bne.n	c00c270 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 c00c25c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00c260:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c262:	e309      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c00c264:	56020c00 	.word	0x56020c00
 c00c268:	00f42400 	.word	0x00f42400
 c00c26c:	0c00e4b8 	.word	0x0c00e4b8
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 c00c270:	2300      	movs	r3, #0
 c00c272:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c274:	e300      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 c00c276:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c27a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 c00c27e:	430b      	orrs	r3, r1
 c00c280:	d164      	bne.n	c00c34c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 c00c282:	4ba2      	ldr	r3, [pc, #648]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00c288:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c00c28c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 c00c28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c290:	2b00      	cmp	r3, #0
 c00c292:	d120      	bne.n	c00c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00c294:	4b9d      	ldr	r3, [pc, #628]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c296:	681b      	ldr	r3, [r3, #0]
 c00c298:	f003 0320 	and.w	r3, r3, #32
 c00c29c:	2b20      	cmp	r3, #32
 c00c29e:	d117      	bne.n	c00c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c2a0:	4b9a      	ldr	r3, [pc, #616]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c2a2:	689b      	ldr	r3, [r3, #8]
 c00c2a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c2a8:	2b00      	cmp	r3, #0
 c00c2aa:	d005      	beq.n	c00c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 c00c2ac:	4b97      	ldr	r3, [pc, #604]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c2ae:	689b      	ldr	r3, [r3, #8]
 c00c2b0:	0e1b      	lsrs	r3, r3, #24
 c00c2b2:	f003 030f 	and.w	r3, r3, #15
 c00c2b6:	e006      	b.n	c00c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 c00c2b8:	4b94      	ldr	r3, [pc, #592]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c2ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c2be:	041b      	lsls	r3, r3, #16
 c00c2c0:	0e1b      	lsrs	r3, r3, #24
 c00c2c2:	f003 030f 	and.w	r3, r3, #15
 c00c2c6:	4a92      	ldr	r2, [pc, #584]	@ (c00c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 c00c2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c2cc:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c2ce:	e2d3      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 c00c2d0:	2300      	movs	r3, #0
 c00c2d2:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c2d4:	e2d0      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 c00c2d6:	4b8d      	ldr	r3, [pc, #564]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c2d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c2dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00c2e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00c2e4:	d112      	bne.n	c00c30c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 c00c2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c2e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c2ec:	d10e      	bne.n	c00c30c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c2ee:	4b87      	ldr	r3, [pc, #540]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c2f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c2f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c00c2f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00c2fc:	d102      	bne.n	c00c304 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 c00c2fe:	23fa      	movs	r3, #250	@ 0xfa
 c00c300:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c302:	e2b9      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c00c304:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c00c308:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c30a:	e2b5      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 c00c30c:	4b7f      	ldr	r3, [pc, #508]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c30e:	681b      	ldr	r3, [r3, #0]
 c00c310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c318:	d106      	bne.n	c00c328 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 c00c31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c31c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c00c320:	d102      	bne.n	c00c328 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 c00c322:	4b7c      	ldr	r3, [pc, #496]	@ (c00c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c00c324:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c326:	e2a7      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 c00c328:	4b78      	ldr	r3, [pc, #480]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c32a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c32e:	f003 0302 	and.w	r3, r3, #2
 c00c332:	2b02      	cmp	r3, #2
 c00c334:	d107      	bne.n	c00c346 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 c00c336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c338:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c00c33c:	d103      	bne.n	c00c346 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 c00c33e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00c342:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c344:	e298      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 c00c346:	2300      	movs	r3, #0
 c00c348:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c34a:	e295      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 c00c34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c350:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 c00c354:	430b      	orrs	r3, r1
 c00c356:	d147      	bne.n	c00c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 c00c358:	4b6c      	ldr	r3, [pc, #432]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c35a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00c35e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 c00c362:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 c00c364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c366:	2b00      	cmp	r3, #0
 c00c368:	d103      	bne.n	c00c372 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00c36a:	f7fd fe21 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00c36e:	6378      	str	r0, [r7, #52]	@ 0x34
 c00c370:	e282      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 c00c372:	4b66      	ldr	r3, [pc, #408]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00c37c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00c380:	d112      	bne.n	c00c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 c00c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c384:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c00c388:	d10e      	bne.n	c00c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c38a:	4b60      	ldr	r3, [pc, #384]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c38c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c00c394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00c398:	d102      	bne.n	c00c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 c00c39a:	23fa      	movs	r3, #250	@ 0xfa
 c00c39c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c39e:	e26b      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c00c3a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c00c3a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c3a6:	e267      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 c00c3a8:	4b58      	ldr	r3, [pc, #352]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c3aa:	681b      	ldr	r3, [r3, #0]
 c00c3ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c3b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c3b4:	d106      	bne.n	c00c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 c00c3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c3b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 c00c3bc:	d102      	bne.n	c00c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 c00c3be:	4b55      	ldr	r3, [pc, #340]	@ (c00c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c00c3c0:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c3c2:	e259      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 c00c3c4:	4b51      	ldr	r3, [pc, #324]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c3c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c3ca:	f003 0302 	and.w	r3, r3, #2
 c00c3ce:	2b02      	cmp	r3, #2
 c00c3d0:	d107      	bne.n	c00c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 c00c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c3d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 c00c3d8:	d103      	bne.n	c00c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 c00c3da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00c3de:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c3e0:	e24a      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 c00c3e2:	2300      	movs	r3, #0
 c00c3e4:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c3e6:	e247      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 c00c3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c3ec:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 c00c3f0:	430b      	orrs	r3, r1
 c00c3f2:	d12d      	bne.n	c00c450 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 c00c3f4:	4b45      	ldr	r3, [pc, #276]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c3f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00c3fa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 c00c3fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 c00c400:	4b42      	ldr	r3, [pc, #264]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c402:	681b      	ldr	r3, [r3, #0]
 c00c404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00c408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00c40c:	d105      	bne.n	c00c41a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 c00c40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c410:	2b00      	cmp	r3, #0
 c00c412:	d102      	bne.n	c00c41a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 c00c414:	4b3f      	ldr	r3, [pc, #252]	@ (c00c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c00c416:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c418:	e22e      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 c00c41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c41c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c00c420:	d107      	bne.n	c00c432 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00c422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00c426:	4618      	mov	r0, r3
 c00c428:	f7fe fc44 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 c00c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00c42e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c430:	e222      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 c00c432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00c438:	d107      	bne.n	c00c44a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00c43a:	f107 0318 	add.w	r3, r7, #24
 c00c43e:	4618      	mov	r0, r3
 c00c440:	f7fe fd92 	bl	c00af68 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 c00c444:	69bb      	ldr	r3, [r7, #24]
 c00c446:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c448:	e216      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 c00c44a:	2300      	movs	r3, #0
 c00c44c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c44e:	e213      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 c00c450:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c454:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 c00c458:	430b      	orrs	r3, r1
 c00c45a:	d15d      	bne.n	c00c518 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 c00c45c:	4b2b      	ldr	r3, [pc, #172]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00c462:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 c00c466:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c00c468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c46a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c00c46e:	d028      	beq.n	c00c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 c00c470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c472:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c00c476:	d845      	bhi.n	c00c504 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 c00c478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c47a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c00c47e:	d013      	beq.n	c00c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 c00c480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c482:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c00c486:	d83d      	bhi.n	c00c504 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 c00c488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c48a:	2b00      	cmp	r3, #0
 c00c48c:	d004      	beq.n	c00c498 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 c00c48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c00c494:	d004      	beq.n	c00c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 c00c496:	e035      	b.n	c00c504 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 c00c498:	f7fd fd9e 	bl	c009fd8 <HAL_RCC_GetPCLK2Freq>
 c00c49c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c49e:	e1eb      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c00c4a0:	f7fd fc6a 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00c4a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c4a6:	e1e7      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00c4a8:	4b18      	ldr	r3, [pc, #96]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c4aa:	681b      	ldr	r3, [r3, #0]
 c00c4ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c4b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c4b4:	d102      	bne.n	c00c4bc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 c00c4b6:	4b17      	ldr	r3, [pc, #92]	@ (c00c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c00c4b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c4ba:	e1dd      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c4bc:	2300      	movs	r3, #0
 c00c4be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c4c0:	e1da      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00c4c2:	4b12      	ldr	r3, [pc, #72]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c4c4:	681b      	ldr	r3, [r3, #0]
 c00c4c6:	f003 0320 	and.w	r3, r3, #32
 c00c4ca:	2b20      	cmp	r3, #32
 c00c4cc:	d117      	bne.n	c00c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c4ce:	4b0f      	ldr	r3, [pc, #60]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c4d0:	689b      	ldr	r3, [r3, #8]
 c00c4d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c4d6:	2b00      	cmp	r3, #0
 c00c4d8:	d005      	beq.n	c00c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 c00c4da:	4b0c      	ldr	r3, [pc, #48]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c4dc:	689b      	ldr	r3, [r3, #8]
 c00c4de:	0e1b      	lsrs	r3, r3, #24
 c00c4e0:	f003 030f 	and.w	r3, r3, #15
 c00c4e4:	e006      	b.n	c00c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 c00c4e6:	4b09      	ldr	r3, [pc, #36]	@ (c00c50c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c00c4e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c4ec:	041b      	lsls	r3, r3, #16
 c00c4ee:	0e1b      	lsrs	r3, r3, #24
 c00c4f0:	f003 030f 	and.w	r3, r3, #15
 c00c4f4:	4a06      	ldr	r2, [pc, #24]	@ (c00c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 c00c4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c4fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c4fc:	e1bc      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c4fe:	2300      	movs	r3, #0
 c00c500:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c502:	e1b9      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c00c504:	2300      	movs	r3, #0
 c00c506:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c508:	e1b6      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c00c50a:	bf00      	nop
 c00c50c:	56020c00 	.word	0x56020c00
 c00c510:	0c00e4b8 	.word	0x0c00e4b8
 c00c514:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 c00c518:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c51c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 c00c520:	430b      	orrs	r3, r1
 c00c522:	d156      	bne.n	c00c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 c00c524:	4ba5      	ldr	r3, [pc, #660]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00c52a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 c00c52e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c00c530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c532:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00c536:	d028      	beq.n	c00c58a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 c00c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c53a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c00c53e:	d845      	bhi.n	c00c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 c00c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00c546:	d013      	beq.n	c00c570 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 c00c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c54a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c00c54e:	d83d      	bhi.n	c00c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 c00c550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c552:	2b00      	cmp	r3, #0
 c00c554:	d004      	beq.n	c00c560 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 c00c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00c55c:	d004      	beq.n	c00c568 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 c00c55e:	e035      	b.n	c00c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 c00c560:	f7fd fd26 	bl	c009fb0 <HAL_RCC_GetPCLK1Freq>
 c00c564:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c566:	e187      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c00c568:	f7fd fc06 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00c56c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c56e:	e183      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00c570:	4b92      	ldr	r3, [pc, #584]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c572:	681b      	ldr	r3, [r3, #0]
 c00c574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c57c:	d102      	bne.n	c00c584 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 c00c57e:	4b90      	ldr	r3, [pc, #576]	@ (c00c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 c00c580:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c582:	e179      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c584:	2300      	movs	r3, #0
 c00c586:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c588:	e176      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00c58a:	4b8c      	ldr	r3, [pc, #560]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c58c:	681b      	ldr	r3, [r3, #0]
 c00c58e:	f003 0320 	and.w	r3, r3, #32
 c00c592:	2b20      	cmp	r3, #32
 c00c594:	d117      	bne.n	c00c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c596:	4b89      	ldr	r3, [pc, #548]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c598:	689b      	ldr	r3, [r3, #8]
 c00c59a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c59e:	2b00      	cmp	r3, #0
 c00c5a0:	d005      	beq.n	c00c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 c00c5a2:	4b86      	ldr	r3, [pc, #536]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c5a4:	689b      	ldr	r3, [r3, #8]
 c00c5a6:	0e1b      	lsrs	r3, r3, #24
 c00c5a8:	f003 030f 	and.w	r3, r3, #15
 c00c5ac:	e006      	b.n	c00c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 c00c5ae:	4b83      	ldr	r3, [pc, #524]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c5b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c5b4:	041b      	lsls	r3, r3, #16
 c00c5b6:	0e1b      	lsrs	r3, r3, #24
 c00c5b8:	f003 030f 	and.w	r3, r3, #15
 c00c5bc:	4a81      	ldr	r2, [pc, #516]	@ (c00c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 c00c5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c5c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c5c4:	e158      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c5c6:	2300      	movs	r3, #0
 c00c5c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c5ca:	e155      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c00c5cc:	2300      	movs	r3, #0
 c00c5ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c5d0:	e152      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 c00c5d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c5d6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 c00c5da:	430b      	orrs	r3, r1
 c00c5dc:	d177      	bne.n	c00c6ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 c00c5de:	4b77      	ldr	r3, [pc, #476]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c5e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00c5e4:	f003 0318 	and.w	r3, r3, #24
 c00c5e8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c00c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c5ec:	2b18      	cmp	r3, #24
 c00c5ee:	d86b      	bhi.n	c00c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 c00c5f0:	a201      	add	r2, pc, #4	@ (adr r2, c00c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 c00c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00c5f6:	bf00      	nop
 c00c5f8:	0c00c65d 	.word	0x0c00c65d
 c00c5fc:	0c00c6c9 	.word	0x0c00c6c9
 c00c600:	0c00c6c9 	.word	0x0c00c6c9
 c00c604:	0c00c6c9 	.word	0x0c00c6c9
 c00c608:	0c00c6c9 	.word	0x0c00c6c9
 c00c60c:	0c00c6c9 	.word	0x0c00c6c9
 c00c610:	0c00c6c9 	.word	0x0c00c6c9
 c00c614:	0c00c6c9 	.word	0x0c00c6c9
 c00c618:	0c00c665 	.word	0x0c00c665
 c00c61c:	0c00c6c9 	.word	0x0c00c6c9
 c00c620:	0c00c6c9 	.word	0x0c00c6c9
 c00c624:	0c00c6c9 	.word	0x0c00c6c9
 c00c628:	0c00c6c9 	.word	0x0c00c6c9
 c00c62c:	0c00c6c9 	.word	0x0c00c6c9
 c00c630:	0c00c6c9 	.word	0x0c00c6c9
 c00c634:	0c00c6c9 	.word	0x0c00c6c9
 c00c638:	0c00c66d 	.word	0x0c00c66d
 c00c63c:	0c00c6c9 	.word	0x0c00c6c9
 c00c640:	0c00c6c9 	.word	0x0c00c6c9
 c00c644:	0c00c6c9 	.word	0x0c00c6c9
 c00c648:	0c00c6c9 	.word	0x0c00c6c9
 c00c64c:	0c00c6c9 	.word	0x0c00c6c9
 c00c650:	0c00c6c9 	.word	0x0c00c6c9
 c00c654:	0c00c6c9 	.word	0x0c00c6c9
 c00c658:	0c00c687 	.word	0x0c00c687
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 c00c65c:	f7fd fcd0 	bl	c00a000 <HAL_RCC_GetPCLK3Freq>
 c00c660:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c662:	e109      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c00c664:	f7fd fb88 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00c668:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c66a:	e105      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c00c66c:	4b53      	ldr	r3, [pc, #332]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c66e:	681b      	ldr	r3, [r3, #0]
 c00c670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c678:	d102      	bne.n	c00c680 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 c00c67a:	4b51      	ldr	r3, [pc, #324]	@ (c00c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 c00c67c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c67e:	e0fb      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c680:	2300      	movs	r3, #0
 c00c682:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c684:	e0f8      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00c686:	4b4d      	ldr	r3, [pc, #308]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c688:	681b      	ldr	r3, [r3, #0]
 c00c68a:	f003 0320 	and.w	r3, r3, #32
 c00c68e:	2b20      	cmp	r3, #32
 c00c690:	d117      	bne.n	c00c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c692:	4b4a      	ldr	r3, [pc, #296]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c694:	689b      	ldr	r3, [r3, #8]
 c00c696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c69a:	2b00      	cmp	r3, #0
 c00c69c:	d005      	beq.n	c00c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 c00c69e:	4b47      	ldr	r3, [pc, #284]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c6a0:	689b      	ldr	r3, [r3, #8]
 c00c6a2:	0e1b      	lsrs	r3, r3, #24
 c00c6a4:	f003 030f 	and.w	r3, r3, #15
 c00c6a8:	e006      	b.n	c00c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 c00c6aa:	4b44      	ldr	r3, [pc, #272]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c6ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c6b0:	041b      	lsls	r3, r3, #16
 c00c6b2:	0e1b      	lsrs	r3, r3, #24
 c00c6b4:	f003 030f 	and.w	r3, r3, #15
 c00c6b8:	4a42      	ldr	r2, [pc, #264]	@ (c00c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 c00c6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c6be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c6c0:	e0da      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c6c2:	2300      	movs	r3, #0
 c00c6c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c6c6:	e0d7      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c00c6c8:	2300      	movs	r3, #0
 c00c6ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c6cc:	e0d4      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 c00c6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c6d2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 c00c6d6:	430b      	orrs	r3, r1
 c00c6d8:	d155      	bne.n	c00c786 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 c00c6da:	4b38      	ldr	r3, [pc, #224]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c6dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00c6e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 c00c6e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c00c6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c6e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c00c6ec:	d013      	beq.n	c00c716 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 c00c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c6f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c00c6f4:	d844      	bhi.n	c00c780 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 c00c6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c6f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c00c6fc:	d013      	beq.n	c00c726 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 c00c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c00c704:	d83c      	bhi.n	c00c780 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 c00c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c708:	2b00      	cmp	r3, #0
 c00c70a:	d014      	beq.n	c00c736 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 c00c70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c70e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c00c712:	d014      	beq.n	c00c73e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 c00c714:	e034      	b.n	c00c780 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00c716:	f107 0318 	add.w	r3, r7, #24
 c00c71a:	4618      	mov	r0, r3
 c00c71c:	f7fe fc24 	bl	c00af68 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 c00c720:	69fb      	ldr	r3, [r7, #28]
 c00c722:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c724:	e0a8      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00c726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c00c72a:	4618      	mov	r0, r3
 c00c72c:	f7fe fac2 	bl	c00acb4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 c00c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00c732:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c734:	e0a0      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c00c736:	f7fd fb1f 	bl	c009d78 <HAL_RCC_GetSysClockFreq>
 c00c73a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00c73c:	e09c      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00c73e:	4b1f      	ldr	r3, [pc, #124]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c740:	681b      	ldr	r3, [r3, #0]
 c00c742:	f003 0320 	and.w	r3, r3, #32
 c00c746:	2b20      	cmp	r3, #32
 c00c748:	d117      	bne.n	c00c77a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00c74a:	4b1c      	ldr	r3, [pc, #112]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c74c:	689b      	ldr	r3, [r3, #8]
 c00c74e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00c752:	2b00      	cmp	r3, #0
 c00c754:	d005      	beq.n	c00c762 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 c00c756:	4b19      	ldr	r3, [pc, #100]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c758:	689b      	ldr	r3, [r3, #8]
 c00c75a:	0e1b      	lsrs	r3, r3, #24
 c00c75c:	f003 030f 	and.w	r3, r3, #15
 c00c760:	e006      	b.n	c00c770 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 c00c762:	4b16      	ldr	r3, [pc, #88]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c00c768:	041b      	lsls	r3, r3, #16
 c00c76a:	0e1b      	lsrs	r3, r3, #24
 c00c76c:	f003 030f 	and.w	r3, r3, #15
 c00c770:	4a14      	ldr	r2, [pc, #80]	@ (c00c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 c00c772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00c776:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c00c778:	e07e      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00c77a:	2300      	movs	r3, #0
 c00c77c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c77e:	e07b      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c00c780:	2300      	movs	r3, #0
 c00c782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00c784:	e078      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 c00c786:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c78a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 c00c78e:	430b      	orrs	r3, r1
 c00c790:	d138      	bne.n	c00c804 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 c00c792:	4b0a      	ldr	r3, [pc, #40]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00c798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c00c79c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 c00c79e:	4b07      	ldr	r3, [pc, #28]	@ (c00c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00c7a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c7a4:	f003 0302 	and.w	r3, r3, #2
 c00c7a8:	2b02      	cmp	r3, #2
 c00c7aa:	d10d      	bne.n	c00c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 c00c7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c7ae:	2b00      	cmp	r3, #0
 c00c7b0:	d10a      	bne.n	c00c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 c00c7b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00c7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c7b8:	e05e      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c00c7ba:	bf00      	nop
 c00c7bc:	56020c00 	.word	0x56020c00
 c00c7c0:	00f42400 	.word	0x00f42400
 c00c7c4:	0c00e4b8 	.word	0x0c00e4b8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 c00c7c8:	4b2e      	ldr	r3, [pc, #184]	@ (c00c884 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00c7ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c7ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00c7d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00c7d6:	d112      	bne.n	c00c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 c00c7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c7da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c00c7de:	d10e      	bne.n	c00c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c7e0:	4b28      	ldr	r3, [pc, #160]	@ (c00c884 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00c7e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00c7e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c00c7ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00c7ee:	d102      	bne.n	c00c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 c00c7f0:	23fa      	movs	r3, #250	@ 0xfa
 c00c7f2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c7f4:	e040      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c00c7f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c00c7fa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00c7fc:	e03c      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 c00c7fe:	2300      	movs	r3, #0
 c00c800:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c802:	e039      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 c00c804:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00c808:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 c00c80c:	430b      	orrs	r3, r1
 c00c80e:	d131      	bne.n	c00c874 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 c00c810:	4b1c      	ldr	r3, [pc, #112]	@ (c00c884 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00c812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00c816:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 c00c81a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 c00c81c:	4b19      	ldr	r3, [pc, #100]	@ (c00c884 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00c81e:	681b      	ldr	r3, [r3, #0]
 c00c820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c00c824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00c828:	d105      	bne.n	c00c836 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 c00c82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c82c:	2b00      	cmp	r3, #0
 c00c82e:	d102      	bne.n	c00c836 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 c00c830:	4b15      	ldr	r3, [pc, #84]	@ (c00c888 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 c00c832:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c834:	e020      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 c00c836:	4b13      	ldr	r3, [pc, #76]	@ (c00c884 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00c838:	681b      	ldr	r3, [r3, #0]
 c00c83a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c00c83e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00c842:	d106      	bne.n	c00c852 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 c00c844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00c84a:	d102      	bne.n	c00c852 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 c00c84c:	4b0f      	ldr	r3, [pc, #60]	@ (c00c88c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 c00c84e:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c850:	e012      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 c00c852:	4b0c      	ldr	r3, [pc, #48]	@ (c00c884 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00c854:	681b      	ldr	r3, [r3, #0]
 c00c856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00c85a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c00c85e:	d106      	bne.n	c00c86e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 c00c860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00c862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00c866:	d102      	bne.n	c00c86e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 c00c868:	4b09      	ldr	r3, [pc, #36]	@ (c00c890 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 c00c86a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c86c:	e004      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 c00c86e:	2300      	movs	r3, #0
 c00c870:	637b      	str	r3, [r7, #52]	@ 0x34
 c00c872:	e001      	b.n	c00c878 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 c00c874:	2300      	movs	r3, #0
 c00c876:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 c00c878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 c00c87a:	4618      	mov	r0, r3
 c00c87c:	3738      	adds	r7, #56	@ 0x38
 c00c87e:	46bd      	mov	sp, r7
 c00c880:	bd80      	pop	{r7, pc}
 c00c882:	bf00      	nop
 c00c884:	56020c00 	.word	0x56020c00
 c00c888:	02dc6c00 	.word	0x02dc6c00
 c00c88c:	016e3600 	.word	0x016e3600
 c00c890:	00f42400 	.word	0x00f42400

0c00c894 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 c00c894:	b580      	push	{r7, lr}
 c00c896:	b084      	sub	sp, #16
 c00c898:	af00      	add	r7, sp, #0
 c00c89a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 c00c89c:	4b47      	ldr	r3, [pc, #284]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c89e:	681b      	ldr	r3, [r3, #0]
 c00c8a0:	4a46      	ldr	r2, [pc, #280]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c8a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 c00c8a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c00c8a8:	f7f9 feac 	bl	c006604 <HAL_GetTick>
 c00c8ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c00c8ae:	e008      	b.n	c00c8c2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c00c8b0:	f7f9 fea8 	bl	c006604 <HAL_GetTick>
 c00c8b4:	4602      	mov	r2, r0
 c00c8b6:	68fb      	ldr	r3, [r7, #12]
 c00c8b8:	1ad3      	subs	r3, r2, r3
 c00c8ba:	2b02      	cmp	r3, #2
 c00c8bc:	d901      	bls.n	c00c8c2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c00c8be:	2303      	movs	r3, #3
 c00c8c0:	e077      	b.n	c00c9b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c00c8c2:	4b3e      	ldr	r3, [pc, #248]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c8c4:	681b      	ldr	r3, [r3, #0]
 c00c8c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00c8ca:	2b00      	cmp	r3, #0
 c00c8cc:	d1f0      	bne.n	c00c8b0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 c00c8ce:	4b3b      	ldr	r3, [pc, #236]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00c8d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c00c8d6:	f023 0303 	bic.w	r3, r3, #3
 c00c8da:	687a      	ldr	r2, [r7, #4]
 c00c8dc:	6811      	ldr	r1, [r2, #0]
 c00c8de:	687a      	ldr	r2, [r7, #4]
 c00c8e0:	6852      	ldr	r2, [r2, #4]
 c00c8e2:	3a01      	subs	r2, #1
 c00c8e4:	0212      	lsls	r2, r2, #8
 c00c8e6:	430a      	orrs	r2, r1
 c00c8e8:	4934      	ldr	r1, [pc, #208]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c8ea:	4313      	orrs	r3, r2
 c00c8ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 c00c8ee:	4b33      	ldr	r3, [pc, #204]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c8f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c00c8f2:	4b33      	ldr	r3, [pc, #204]	@ (c00c9c0 <RCCEx_PLL2_Config+0x12c>)
 c00c8f4:	4013      	ands	r3, r2
 c00c8f6:	687a      	ldr	r2, [r7, #4]
 c00c8f8:	6892      	ldr	r2, [r2, #8]
 c00c8fa:	3a01      	subs	r2, #1
 c00c8fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c00c900:	687a      	ldr	r2, [r7, #4]
 c00c902:	68d2      	ldr	r2, [r2, #12]
 c00c904:	3a01      	subs	r2, #1
 c00c906:	0252      	lsls	r2, r2, #9
 c00c908:	b292      	uxth	r2, r2
 c00c90a:	4311      	orrs	r1, r2
 c00c90c:	687a      	ldr	r2, [r7, #4]
 c00c90e:	6912      	ldr	r2, [r2, #16]
 c00c910:	3a01      	subs	r2, #1
 c00c912:	0412      	lsls	r2, r2, #16
 c00c914:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c00c918:	4311      	orrs	r1, r2
 c00c91a:	687a      	ldr	r2, [r7, #4]
 c00c91c:	6952      	ldr	r2, [r2, #20]
 c00c91e:	3a01      	subs	r2, #1
 c00c920:	0612      	lsls	r2, r2, #24
 c00c922:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c00c926:	430a      	orrs	r2, r1
 c00c928:	4924      	ldr	r1, [pc, #144]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c92a:	4313      	orrs	r3, r2
 c00c92c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 c00c92e:	4b23      	ldr	r3, [pc, #140]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00c932:	f023 020c 	bic.w	r2, r3, #12
 c00c936:	687b      	ldr	r3, [r7, #4]
 c00c938:	699b      	ldr	r3, [r3, #24]
 c00c93a:	4920      	ldr	r1, [pc, #128]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c93c:	4313      	orrs	r3, r2
 c00c93e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 c00c940:	4b1e      	ldr	r3, [pc, #120]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c00c944:	687b      	ldr	r3, [r7, #4]
 c00c946:	6a1b      	ldr	r3, [r3, #32]
 c00c948:	491c      	ldr	r1, [pc, #112]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c94a:	4313      	orrs	r3, r2
 c00c94c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 c00c94e:	4b1b      	ldr	r3, [pc, #108]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00c952:	4a1a      	ldr	r2, [pc, #104]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c954:	f023 0310 	bic.w	r3, r3, #16
 c00c958:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 c00c95a:	4b18      	ldr	r3, [pc, #96]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c00c95e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c00c962:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c00c966:	687a      	ldr	r2, [r7, #4]
 c00c968:	69d2      	ldr	r2, [r2, #28]
 c00c96a:	00d2      	lsls	r2, r2, #3
 c00c96c:	4913      	ldr	r1, [pc, #76]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c96e:	4313      	orrs	r3, r2
 c00c970:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 c00c972:	4b12      	ldr	r3, [pc, #72]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00c976:	4a11      	ldr	r2, [pc, #68]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c978:	f043 0310 	orr.w	r3, r3, #16
 c00c97c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 c00c97e:	4b0f      	ldr	r3, [pc, #60]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c980:	681b      	ldr	r3, [r3, #0]
 c00c982:	4a0e      	ldr	r2, [pc, #56]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c984:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c00c988:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c00c98a:	f7f9 fe3b 	bl	c006604 <HAL_GetTick>
 c00c98e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c00c990:	e008      	b.n	c00c9a4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c00c992:	f7f9 fe37 	bl	c006604 <HAL_GetTick>
 c00c996:	4602      	mov	r2, r0
 c00c998:	68fb      	ldr	r3, [r7, #12]
 c00c99a:	1ad3      	subs	r3, r2, r3
 c00c99c:	2b02      	cmp	r3, #2
 c00c99e:	d901      	bls.n	c00c9a4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 c00c9a0:	2303      	movs	r3, #3
 c00c9a2:	e006      	b.n	c00c9b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c00c9a4:	4b05      	ldr	r3, [pc, #20]	@ (c00c9bc <RCCEx_PLL2_Config+0x128>)
 c00c9a6:	681b      	ldr	r3, [r3, #0]
 c00c9a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00c9ac:	2b00      	cmp	r3, #0
 c00c9ae:	d0f0      	beq.n	c00c992 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 c00c9b0:	2300      	movs	r3, #0

}
 c00c9b2:	4618      	mov	r0, r3
 c00c9b4:	3710      	adds	r7, #16
 c00c9b6:	46bd      	mov	sp, r7
 c00c9b8:	bd80      	pop	{r7, pc}
 c00c9ba:	bf00      	nop
 c00c9bc:	56020c00 	.word	0x56020c00
 c00c9c0:	80800000 	.word	0x80800000

0c00c9c4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 c00c9c4:	b580      	push	{r7, lr}
 c00c9c6:	b084      	sub	sp, #16
 c00c9c8:	af00      	add	r7, sp, #0
 c00c9ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 c00c9cc:	4b47      	ldr	r3, [pc, #284]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00c9ce:	681b      	ldr	r3, [r3, #0]
 c00c9d0:	4a46      	ldr	r2, [pc, #280]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00c9d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c00c9d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c00c9d8:	f7f9 fe14 	bl	c006604 <HAL_GetTick>
 c00c9dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c00c9de:	e008      	b.n	c00c9f2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c00c9e0:	f7f9 fe10 	bl	c006604 <HAL_GetTick>
 c00c9e4:	4602      	mov	r2, r0
 c00c9e6:	68fb      	ldr	r3, [r7, #12]
 c00c9e8:	1ad3      	subs	r3, r2, r3
 c00c9ea:	2b02      	cmp	r3, #2
 c00c9ec:	d901      	bls.n	c00c9f2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c00c9ee:	2303      	movs	r3, #3
 c00c9f0:	e077      	b.n	c00cae2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c00c9f2:	4b3e      	ldr	r3, [pc, #248]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00c9f4:	681b      	ldr	r3, [r3, #0]
 c00c9f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c00c9fa:	2b00      	cmp	r3, #0
 c00c9fc:	d1f0      	bne.n	c00c9e0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 c00c9fe:	4b3b      	ldr	r3, [pc, #236]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00ca02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c00ca06:	f023 0303 	bic.w	r3, r3, #3
 c00ca0a:	687a      	ldr	r2, [r7, #4]
 c00ca0c:	6811      	ldr	r1, [r2, #0]
 c00ca0e:	687a      	ldr	r2, [r7, #4]
 c00ca10:	6852      	ldr	r2, [r2, #4]
 c00ca12:	3a01      	subs	r2, #1
 c00ca14:	0212      	lsls	r2, r2, #8
 c00ca16:	430a      	orrs	r2, r1
 c00ca18:	4934      	ldr	r1, [pc, #208]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca1a:	4313      	orrs	r3, r2
 c00ca1c:	630b      	str	r3, [r1, #48]	@ 0x30
 c00ca1e:	4b33      	ldr	r3, [pc, #204]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c00ca22:	4b33      	ldr	r3, [pc, #204]	@ (c00caf0 <RCCEx_PLL3_Config+0x12c>)
 c00ca24:	4013      	ands	r3, r2
 c00ca26:	687a      	ldr	r2, [r7, #4]
 c00ca28:	6892      	ldr	r2, [r2, #8]
 c00ca2a:	3a01      	subs	r2, #1
 c00ca2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c00ca30:	687a      	ldr	r2, [r7, #4]
 c00ca32:	68d2      	ldr	r2, [r2, #12]
 c00ca34:	3a01      	subs	r2, #1
 c00ca36:	0252      	lsls	r2, r2, #9
 c00ca38:	b292      	uxth	r2, r2
 c00ca3a:	4311      	orrs	r1, r2
 c00ca3c:	687a      	ldr	r2, [r7, #4]
 c00ca3e:	6912      	ldr	r2, [r2, #16]
 c00ca40:	3a01      	subs	r2, #1
 c00ca42:	0412      	lsls	r2, r2, #16
 c00ca44:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c00ca48:	4311      	orrs	r1, r2
 c00ca4a:	687a      	ldr	r2, [r7, #4]
 c00ca4c:	6952      	ldr	r2, [r2, #20]
 c00ca4e:	3a01      	subs	r2, #1
 c00ca50:	0612      	lsls	r2, r2, #24
 c00ca52:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c00ca56:	430a      	orrs	r2, r1
 c00ca58:	4924      	ldr	r1, [pc, #144]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca5a:	4313      	orrs	r3, r2
 c00ca5c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 c00ca5e:	4b23      	ldr	r3, [pc, #140]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00ca62:	f023 020c 	bic.w	r2, r3, #12
 c00ca66:	687b      	ldr	r3, [r7, #4]
 c00ca68:	699b      	ldr	r3, [r3, #24]
 c00ca6a:	4920      	ldr	r1, [pc, #128]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca6c:	4313      	orrs	r3, r2
 c00ca6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 c00ca70:	4b1e      	ldr	r3, [pc, #120]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c00ca74:	687b      	ldr	r3, [r7, #4]
 c00ca76:	6a1b      	ldr	r3, [r3, #32]
 c00ca78:	491c      	ldr	r1, [pc, #112]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca7a:	4313      	orrs	r3, r2
 c00ca7c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 c00ca7e:	4b1b      	ldr	r3, [pc, #108]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00ca82:	4a1a      	ldr	r2, [pc, #104]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca84:	f023 0310 	bic.w	r3, r3, #16
 c00ca88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 c00ca8a:	4b18      	ldr	r3, [pc, #96]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c00ca8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c00ca92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c00ca96:	687a      	ldr	r2, [r7, #4]
 c00ca98:	69d2      	ldr	r2, [r2, #28]
 c00ca9a:	00d2      	lsls	r2, r2, #3
 c00ca9c:	4913      	ldr	r1, [pc, #76]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00ca9e:	4313      	orrs	r3, r2
 c00caa0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 c00caa2:	4b12      	ldr	r3, [pc, #72]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00caa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00caa6:	4a11      	ldr	r2, [pc, #68]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00caa8:	f043 0310 	orr.w	r3, r3, #16
 c00caac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 c00caae:	4b0f      	ldr	r3, [pc, #60]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00cab0:	681b      	ldr	r3, [r3, #0]
 c00cab2:	4a0e      	ldr	r2, [pc, #56]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00cab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c00cab8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c00caba:	f7f9 fda3 	bl	c006604 <HAL_GetTick>
 c00cabe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c00cac0:	e008      	b.n	c00cad4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c00cac2:	f7f9 fd9f 	bl	c006604 <HAL_GetTick>
 c00cac6:	4602      	mov	r2, r0
 c00cac8:	68fb      	ldr	r3, [r7, #12]
 c00caca:	1ad3      	subs	r3, r2, r3
 c00cacc:	2b02      	cmp	r3, #2
 c00cace:	d901      	bls.n	c00cad4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 c00cad0:	2303      	movs	r3, #3
 c00cad2:	e006      	b.n	c00cae2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c00cad4:	4b05      	ldr	r3, [pc, #20]	@ (c00caec <RCCEx_PLL3_Config+0x128>)
 c00cad6:	681b      	ldr	r3, [r3, #0]
 c00cad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c00cadc:	2b00      	cmp	r3, #0
 c00cade:	d0f0      	beq.n	c00cac2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 c00cae0:	2300      	movs	r3, #0
}
 c00cae2:	4618      	mov	r0, r3
 c00cae4:	3710      	adds	r7, #16
 c00cae6:	46bd      	mov	sp, r7
 c00cae8:	bd80      	pop	{r7, pc}
 c00caea:	bf00      	nop
 c00caec:	56020c00 	.word	0x56020c00
 c00caf0:	80800000 	.word	0x80800000

0c00caf4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 c00caf4:	b580      	push	{r7, lr}
 c00caf6:	b084      	sub	sp, #16
 c00caf8:	af00      	add	r7, sp, #0
 c00cafa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 c00cafc:	687b      	ldr	r3, [r7, #4]
 c00cafe:	2b00      	cmp	r3, #0
 c00cb00:	d101      	bne.n	c00cb06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 c00cb02:	2301      	movs	r3, #1
 c00cb04:	e0fb      	b.n	c00ccfe <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 c00cb06:	687b      	ldr	r3, [r7, #4]
 c00cb08:	681b      	ldr	r3, [r3, #0]
 c00cb0a:	4a7f      	ldr	r2, [pc, #508]	@ (c00cd08 <HAL_SPI_Init+0x214>)
 c00cb0c:	4293      	cmp	r3, r2
 c00cb0e:	d004      	beq.n	c00cb1a <HAL_SPI_Init+0x26>
 c00cb10:	687b      	ldr	r3, [r7, #4]
 c00cb12:	681b      	ldr	r3, [r3, #0]
 c00cb14:	4a7d      	ldr	r2, [pc, #500]	@ (c00cd0c <HAL_SPI_Init+0x218>)
 c00cb16:	4293      	cmp	r3, r2
 c00cb18:	e000      	b.n	c00cb1c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 c00cb1a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c00cb1c:	687b      	ldr	r3, [r7, #4]
 c00cb1e:	2200      	movs	r2, #0
 c00cb20:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 c00cb22:	687b      	ldr	r3, [r7, #4]
 c00cb24:	681b      	ldr	r3, [r3, #0]
 c00cb26:	4a78      	ldr	r2, [pc, #480]	@ (c00cd08 <HAL_SPI_Init+0x214>)
 c00cb28:	4293      	cmp	r3, r2
 c00cb2a:	d004      	beq.n	c00cb36 <HAL_SPI_Init+0x42>
 c00cb2c:	687b      	ldr	r3, [r7, #4]
 c00cb2e:	681b      	ldr	r3, [r3, #0]
 c00cb30:	4a76      	ldr	r2, [pc, #472]	@ (c00cd0c <HAL_SPI_Init+0x218>)
 c00cb32:	4293      	cmp	r3, r2
 c00cb34:	d105      	bne.n	c00cb42 <HAL_SPI_Init+0x4e>
 c00cb36:	687b      	ldr	r3, [r7, #4]
 c00cb38:	68db      	ldr	r3, [r3, #12]
 c00cb3a:	2b0f      	cmp	r3, #15
 c00cb3c:	d901      	bls.n	c00cb42 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 c00cb3e:	2301      	movs	r3, #1
 c00cb40:	e0dd      	b.n	c00ccfe <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 c00cb42:	6878      	ldr	r0, [r7, #4]
 c00cb44:	f000 f8ec 	bl	c00cd20 <SPI_GetPacketSize>
 c00cb48:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 c00cb4a:	687b      	ldr	r3, [r7, #4]
 c00cb4c:	681b      	ldr	r3, [r3, #0]
 c00cb4e:	4a6e      	ldr	r2, [pc, #440]	@ (c00cd08 <HAL_SPI_Init+0x214>)
 c00cb50:	4293      	cmp	r3, r2
 c00cb52:	d004      	beq.n	c00cb5e <HAL_SPI_Init+0x6a>
 c00cb54:	687b      	ldr	r3, [r7, #4]
 c00cb56:	681b      	ldr	r3, [r3, #0]
 c00cb58:	4a6c      	ldr	r2, [pc, #432]	@ (c00cd0c <HAL_SPI_Init+0x218>)
 c00cb5a:	4293      	cmp	r3, r2
 c00cb5c:	d102      	bne.n	c00cb64 <HAL_SPI_Init+0x70>
 c00cb5e:	68fb      	ldr	r3, [r7, #12]
 c00cb60:	2b08      	cmp	r3, #8
 c00cb62:	d816      	bhi.n	c00cb92 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 c00cb64:	687b      	ldr	r3, [r7, #4]
 c00cb66:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 c00cb68:	4a69      	ldr	r2, [pc, #420]	@ (c00cd10 <HAL_SPI_Init+0x21c>)
 c00cb6a:	4293      	cmp	r3, r2
 c00cb6c:	d00e      	beq.n	c00cb8c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 c00cb6e:	687b      	ldr	r3, [r7, #4]
 c00cb70:	681b      	ldr	r3, [r3, #0]
 c00cb72:	4a68      	ldr	r2, [pc, #416]	@ (c00cd14 <HAL_SPI_Init+0x220>)
 c00cb74:	4293      	cmp	r3, r2
 c00cb76:	d009      	beq.n	c00cb8c <HAL_SPI_Init+0x98>
 c00cb78:	687b      	ldr	r3, [r7, #4]
 c00cb7a:	681b      	ldr	r3, [r3, #0]
 c00cb7c:	4a66      	ldr	r2, [pc, #408]	@ (c00cd18 <HAL_SPI_Init+0x224>)
 c00cb7e:	4293      	cmp	r3, r2
 c00cb80:	d004      	beq.n	c00cb8c <HAL_SPI_Init+0x98>
 c00cb82:	687b      	ldr	r3, [r7, #4]
 c00cb84:	681b      	ldr	r3, [r3, #0]
 c00cb86:	4a65      	ldr	r2, [pc, #404]	@ (c00cd1c <HAL_SPI_Init+0x228>)
 c00cb88:	4293      	cmp	r3, r2
 c00cb8a:	d104      	bne.n	c00cb96 <HAL_SPI_Init+0xa2>
 c00cb8c:	68fb      	ldr	r3, [r7, #12]
 c00cb8e:	2b10      	cmp	r3, #16
 c00cb90:	d901      	bls.n	c00cb96 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 c00cb92:	2301      	movs	r3, #1
 c00cb94:	e0b3      	b.n	c00ccfe <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 c00cb96:	687b      	ldr	r3, [r7, #4]
 c00cb98:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 c00cb9c:	b2db      	uxtb	r3, r3
 c00cb9e:	2b00      	cmp	r3, #0
 c00cba0:	d106      	bne.n	c00cbb0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 c00cba2:	687b      	ldr	r3, [r7, #4]
 c00cba4:	2200      	movs	r2, #0
 c00cba6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 c00cbaa:	6878      	ldr	r0, [r7, #4]
 c00cbac:	f7f9 f894 	bl	c005cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 c00cbb0:	687b      	ldr	r3, [r7, #4]
 c00cbb2:	2202      	movs	r2, #2
 c00cbb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 c00cbb8:	687b      	ldr	r3, [r7, #4]
 c00cbba:	681b      	ldr	r3, [r3, #0]
 c00cbbc:	681a      	ldr	r2, [r3, #0]
 c00cbbe:	687b      	ldr	r3, [r7, #4]
 c00cbc0:	681b      	ldr	r3, [r3, #0]
 c00cbc2:	f022 0201 	bic.w	r2, r2, #1
 c00cbc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 c00cbc8:	687b      	ldr	r3, [r7, #4]
 c00cbca:	681b      	ldr	r3, [r3, #0]
 c00cbcc:	689b      	ldr	r3, [r3, #8]
 c00cbce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 c00cbd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 c00cbd4:	687b      	ldr	r3, [r7, #4]
 c00cbd6:	699b      	ldr	r3, [r3, #24]
 c00cbd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c00cbdc:	d119      	bne.n	c00cc12 <HAL_SPI_Init+0x11e>
 c00cbde:	687b      	ldr	r3, [r7, #4]
 c00cbe0:	685b      	ldr	r3, [r3, #4]
 c00cbe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 c00cbe6:	d103      	bne.n	c00cbf0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 c00cbe8:	687b      	ldr	r3, [r7, #4]
 c00cbea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 c00cbec:	2b00      	cmp	r3, #0
 c00cbee:	d008      	beq.n	c00cc02 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 c00cbf0:	687b      	ldr	r3, [r7, #4]
 c00cbf2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 c00cbf4:	2b00      	cmp	r3, #0
 c00cbf6:	d10c      	bne.n	c00cc12 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 c00cbf8:	687b      	ldr	r3, [r7, #4]
 c00cbfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 c00cbfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00cc00:	d107      	bne.n	c00cc12 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 c00cc02:	687b      	ldr	r3, [r7, #4]
 c00cc04:	681b      	ldr	r3, [r3, #0]
 c00cc06:	681a      	ldr	r2, [r3, #0]
 c00cc08:	687b      	ldr	r3, [r7, #4]
 c00cc0a:	681b      	ldr	r3, [r3, #0]
 c00cc0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 c00cc10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 c00cc12:	687b      	ldr	r3, [r7, #4]
 c00cc14:	685b      	ldr	r3, [r3, #4]
 c00cc16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 c00cc1a:	2b00      	cmp	r3, #0
 c00cc1c:	d00f      	beq.n	c00cc3e <HAL_SPI_Init+0x14a>
 c00cc1e:	687b      	ldr	r3, [r7, #4]
 c00cc20:	68db      	ldr	r3, [r3, #12]
 c00cc22:	2b06      	cmp	r3, #6
 c00cc24:	d90b      	bls.n	c00cc3e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 c00cc26:	687b      	ldr	r3, [r7, #4]
 c00cc28:	681b      	ldr	r3, [r3, #0]
 c00cc2a:	681b      	ldr	r3, [r3, #0]
 c00cc2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 c00cc30:	687b      	ldr	r3, [r7, #4]
 c00cc32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 c00cc34:	687b      	ldr	r3, [r7, #4]
 c00cc36:	681b      	ldr	r3, [r3, #0]
 c00cc38:	430a      	orrs	r2, r1
 c00cc3a:	601a      	str	r2, [r3, #0]
 c00cc3c:	e007      	b.n	c00cc4e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 c00cc3e:	687b      	ldr	r3, [r7, #4]
 c00cc40:	681b      	ldr	r3, [r3, #0]
 c00cc42:	681a      	ldr	r2, [r3, #0]
 c00cc44:	687b      	ldr	r3, [r7, #4]
 c00cc46:	681b      	ldr	r3, [r3, #0]
 c00cc48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 c00cc4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 c00cc4e:	687b      	ldr	r3, [r7, #4]
 c00cc50:	69da      	ldr	r2, [r3, #28]
 c00cc52:	687b      	ldr	r3, [r7, #4]
 c00cc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00cc56:	431a      	orrs	r2, r3
 c00cc58:	68bb      	ldr	r3, [r7, #8]
 c00cc5a:	431a      	orrs	r2, r3
 c00cc5c:	687b      	ldr	r3, [r7, #4]
 c00cc5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00cc60:	ea42 0103 	orr.w	r1, r2, r3
 c00cc64:	687b      	ldr	r3, [r7, #4]
 c00cc66:	68da      	ldr	r2, [r3, #12]
 c00cc68:	687b      	ldr	r3, [r7, #4]
 c00cc6a:	681b      	ldr	r3, [r3, #0]
 c00cc6c:	430a      	orrs	r2, r1
 c00cc6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 c00cc70:	687b      	ldr	r3, [r7, #4]
 c00cc72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c00cc74:	687b      	ldr	r3, [r7, #4]
 c00cc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00cc78:	431a      	orrs	r2, r3
 c00cc7a:	687b      	ldr	r3, [r7, #4]
 c00cc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00cc7e:	431a      	orrs	r2, r3
 c00cc80:	687b      	ldr	r3, [r7, #4]
 c00cc82:	699b      	ldr	r3, [r3, #24]
 c00cc84:	431a      	orrs	r2, r3
 c00cc86:	687b      	ldr	r3, [r7, #4]
 c00cc88:	691b      	ldr	r3, [r3, #16]
 c00cc8a:	431a      	orrs	r2, r3
 c00cc8c:	687b      	ldr	r3, [r7, #4]
 c00cc8e:	695b      	ldr	r3, [r3, #20]
 c00cc90:	431a      	orrs	r2, r3
 c00cc92:	687b      	ldr	r3, [r7, #4]
 c00cc94:	6a1b      	ldr	r3, [r3, #32]
 c00cc96:	431a      	orrs	r2, r3
 c00cc98:	687b      	ldr	r3, [r7, #4]
 c00cc9a:	685b      	ldr	r3, [r3, #4]
 c00cc9c:	431a      	orrs	r2, r3
 c00cc9e:	687b      	ldr	r3, [r7, #4]
 c00cca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c00cca2:	431a      	orrs	r2, r3
 c00cca4:	687b      	ldr	r3, [r7, #4]
 c00cca6:	689b      	ldr	r3, [r3, #8]
 c00cca8:	431a      	orrs	r2, r3
 c00ccaa:	687b      	ldr	r3, [r7, #4]
 c00ccac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c00ccae:	431a      	orrs	r2, r3
 c00ccb0:	687b      	ldr	r3, [r7, #4]
 c00ccb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c00ccb4:	431a      	orrs	r2, r3
 c00ccb6:	687b      	ldr	r3, [r7, #4]
 c00ccb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c00ccba:	ea42 0103 	orr.w	r1, r2, r3
 c00ccbe:	687b      	ldr	r3, [r7, #4]
 c00ccc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 c00ccc2:	687b      	ldr	r3, [r7, #4]
 c00ccc4:	681b      	ldr	r3, [r3, #0]
 c00ccc6:	430a      	orrs	r2, r1
 c00ccc8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 c00ccca:	687b      	ldr	r3, [r7, #4]
 c00cccc:	685b      	ldr	r3, [r3, #4]
 c00ccce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 c00ccd2:	2b00      	cmp	r3, #0
 c00ccd4:	d00a      	beq.n	c00ccec <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 c00ccd6:	687b      	ldr	r3, [r7, #4]
 c00ccd8:	681b      	ldr	r3, [r3, #0]
 c00ccda:	68db      	ldr	r3, [r3, #12]
 c00ccdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 c00cce0:	687b      	ldr	r3, [r7, #4]
 c00cce2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 c00cce4:	687b      	ldr	r3, [r7, #4]
 c00cce6:	681b      	ldr	r3, [r3, #0]
 c00cce8:	430a      	orrs	r2, r1
 c00ccea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 c00ccec:	687b      	ldr	r3, [r7, #4]
 c00ccee:	2200      	movs	r2, #0
 c00ccf0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 c00ccf4:	687b      	ldr	r3, [r7, #4]
 c00ccf6:	2201      	movs	r2, #1
 c00ccf8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 c00ccfc:	2300      	movs	r3, #0
}
 c00ccfe:	4618      	mov	r0, r3
 c00cd00:	3710      	adds	r7, #16
 c00cd02:	46bd      	mov	sp, r7
 c00cd04:	bd80      	pop	{r7, pc}
 c00cd06:	bf00      	nop
 c00cd08:	46002000 	.word	0x46002000
 c00cd0c:	56002000 	.word	0x56002000
 c00cd10:	40013000 	.word	0x40013000
 c00cd14:	50013000 	.word	0x50013000
 c00cd18:	40003800 	.word	0x40003800
 c00cd1c:	50003800 	.word	0x50003800

0c00cd20 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 c00cd20:	b480      	push	{r7}
 c00cd22:	b085      	sub	sp, #20
 c00cd24:	af00      	add	r7, sp, #0
 c00cd26:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 c00cd28:	687b      	ldr	r3, [r7, #4]
 c00cd2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c00cd2c:	095b      	lsrs	r3, r3, #5
 c00cd2e:	3301      	adds	r3, #1
 c00cd30:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 c00cd32:	687b      	ldr	r3, [r7, #4]
 c00cd34:	68db      	ldr	r3, [r3, #12]
 c00cd36:	3301      	adds	r3, #1
 c00cd38:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 c00cd3a:	68bb      	ldr	r3, [r7, #8]
 c00cd3c:	3307      	adds	r3, #7
 c00cd3e:	08db      	lsrs	r3, r3, #3
 c00cd40:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 c00cd42:	68bb      	ldr	r3, [r7, #8]
 c00cd44:	68fa      	ldr	r2, [r7, #12]
 c00cd46:	fb02 f303 	mul.w	r3, r2, r3
}
 c00cd4a:	4618      	mov	r0, r3
 c00cd4c:	3714      	adds	r7, #20
 c00cd4e:	46bd      	mov	sp, r7
 c00cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00cd54:	4770      	bx	lr

0c00cd56 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 c00cd56:	b480      	push	{r7}
 c00cd58:	b083      	sub	sp, #12
 c00cd5a:	af00      	add	r7, sp, #0
 c00cd5c:	6078      	str	r0, [r7, #4]
 c00cd5e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 c00cd60:	687b      	ldr	r3, [r7, #4]
 c00cd62:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 c00cd66:	b2db      	uxtb	r3, r3
 c00cd68:	2b01      	cmp	r3, #1
 c00cd6a:	d12e      	bne.n	c00cdca <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 c00cd6c:	687b      	ldr	r3, [r7, #4]
 c00cd6e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 c00cd72:	2b01      	cmp	r3, #1
 c00cd74:	d101      	bne.n	c00cd7a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 c00cd76:	2302      	movs	r3, #2
 c00cd78:	e028      	b.n	c00cdcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 c00cd7a:	687b      	ldr	r3, [r7, #4]
 c00cd7c:	2201      	movs	r2, #1
 c00cd7e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 c00cd82:	687b      	ldr	r3, [r7, #4]
 c00cd84:	2202      	movs	r2, #2
 c00cd86:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 c00cd8a:	687b      	ldr	r3, [r7, #4]
 c00cd8c:	681b      	ldr	r3, [r3, #0]
 c00cd8e:	681a      	ldr	r2, [r3, #0]
 c00cd90:	687b      	ldr	r3, [r7, #4]
 c00cd92:	681b      	ldr	r3, [r3, #0]
 c00cd94:	f022 0201 	bic.w	r2, r2, #1
 c00cd98:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 c00cd9a:	683b      	ldr	r3, [r7, #0]
 c00cd9c:	681a      	ldr	r2, [r3, #0]
 c00cd9e:	683b      	ldr	r3, [r7, #0]
 c00cda0:	685b      	ldr	r3, [r3, #4]
 c00cda2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 c00cda6:	ea42 0103 	orr.w	r1, r2, r3
 c00cdaa:	683b      	ldr	r3, [r7, #0]
 c00cdac:	689a      	ldr	r2, [r3, #8]
 c00cdae:	687b      	ldr	r3, [r7, #4]
 c00cdb0:	681b      	ldr	r3, [r3, #0]
 c00cdb2:	430a      	orrs	r2, r1
 c00cdb4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 c00cdb6:	687b      	ldr	r3, [r7, #4]
 c00cdb8:	2201      	movs	r2, #1
 c00cdba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 c00cdbe:	687b      	ldr	r3, [r7, #4]
 c00cdc0:	2200      	movs	r2, #0
 c00cdc2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 c00cdc6:	2300      	movs	r3, #0
 c00cdc8:	e000      	b.n	c00cdcc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 c00cdca:	2301      	movs	r3, #1
  }
}
 c00cdcc:	4618      	mov	r0, r3
 c00cdce:	370c      	adds	r7, #12
 c00cdd0:	46bd      	mov	sp, r7
 c00cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00cdd6:	4770      	bx	lr

0c00cdd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c00cdd8:	b580      	push	{r7, lr}
 c00cdda:	b082      	sub	sp, #8
 c00cddc:	af00      	add	r7, sp, #0
 c00cdde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c00cde0:	687b      	ldr	r3, [r7, #4]
 c00cde2:	2b00      	cmp	r3, #0
 c00cde4:	d101      	bne.n	c00cdea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c00cde6:	2301      	movs	r3, #1
 c00cde8:	e042      	b.n	c00ce70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c00cdea:	687b      	ldr	r3, [r7, #4]
 c00cdec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c00cdf0:	2b00      	cmp	r3, #0
 c00cdf2:	d106      	bne.n	c00ce02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c00cdf4:	687b      	ldr	r3, [r7, #4]
 c00cdf6:	2200      	movs	r2, #0
 c00cdf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c00cdfc:	6878      	ldr	r0, [r7, #4]
 c00cdfe:	f7f8 fffb 	bl	c005df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c00ce02:	687b      	ldr	r3, [r7, #4]
 c00ce04:	2224      	movs	r2, #36	@ 0x24
 c00ce06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 c00ce0a:	687b      	ldr	r3, [r7, #4]
 c00ce0c:	681b      	ldr	r3, [r3, #0]
 c00ce0e:	681a      	ldr	r2, [r3, #0]
 c00ce10:	687b      	ldr	r3, [r7, #4]
 c00ce12:	681b      	ldr	r3, [r3, #0]
 c00ce14:	f022 0201 	bic.w	r2, r2, #1
 c00ce18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c00ce1a:	687b      	ldr	r3, [r7, #4]
 c00ce1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00ce1e:	2b00      	cmp	r3, #0
 c00ce20:	d002      	beq.n	c00ce28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 c00ce22:	6878      	ldr	r0, [r7, #4]
 c00ce24:	f000 f9c8 	bl	c00d1b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c00ce28:	6878      	ldr	r0, [r7, #4]
 c00ce2a:	f000 f825 	bl	c00ce78 <UART_SetConfig>
 c00ce2e:	4603      	mov	r3, r0
 c00ce30:	2b01      	cmp	r3, #1
 c00ce32:	d101      	bne.n	c00ce38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 c00ce34:	2301      	movs	r3, #1
 c00ce36:	e01b      	b.n	c00ce70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c00ce38:	687b      	ldr	r3, [r7, #4]
 c00ce3a:	681b      	ldr	r3, [r3, #0]
 c00ce3c:	685a      	ldr	r2, [r3, #4]
 c00ce3e:	687b      	ldr	r3, [r7, #4]
 c00ce40:	681b      	ldr	r3, [r3, #0]
 c00ce42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 c00ce46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c00ce48:	687b      	ldr	r3, [r7, #4]
 c00ce4a:	681b      	ldr	r3, [r3, #0]
 c00ce4c:	689a      	ldr	r2, [r3, #8]
 c00ce4e:	687b      	ldr	r3, [r7, #4]
 c00ce50:	681b      	ldr	r3, [r3, #0]
 c00ce52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 c00ce56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c00ce58:	687b      	ldr	r3, [r7, #4]
 c00ce5a:	681b      	ldr	r3, [r3, #0]
 c00ce5c:	681a      	ldr	r2, [r3, #0]
 c00ce5e:	687b      	ldr	r3, [r7, #4]
 c00ce60:	681b      	ldr	r3, [r3, #0]
 c00ce62:	f042 0201 	orr.w	r2, r2, #1
 c00ce66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c00ce68:	6878      	ldr	r0, [r7, #4]
 c00ce6a:	f000 fa47 	bl	c00d2fc <UART_CheckIdleState>
 c00ce6e:	4603      	mov	r3, r0
}
 c00ce70:	4618      	mov	r0, r3
 c00ce72:	3708      	adds	r7, #8
 c00ce74:	46bd      	mov	sp, r7
 c00ce76:	bd80      	pop	{r7, pc}

0c00ce78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c00ce78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c00ce7c:	b094      	sub	sp, #80	@ 0x50
 c00ce7e:	af00      	add	r7, sp, #0
 c00ce80:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c00ce82:	2300      	movs	r3, #0
 c00ce84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 c00ce88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00ce8a:	681a      	ldr	r2, [r3, #0]
 c00ce8c:	4b7e      	ldr	r3, [pc, #504]	@ (c00d088 <UART_SetConfig+0x210>)
 c00ce8e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c00ce90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00ce92:	689a      	ldr	r2, [r3, #8]
 c00ce94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00ce96:	691b      	ldr	r3, [r3, #16]
 c00ce98:	431a      	orrs	r2, r3
 c00ce9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00ce9c:	695b      	ldr	r3, [r3, #20]
 c00ce9e:	431a      	orrs	r2, r3
 c00cea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cea2:	69db      	ldr	r3, [r3, #28]
 c00cea4:	4313      	orrs	r3, r2
 c00cea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c00cea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00ceaa:	681b      	ldr	r3, [r3, #0]
 c00ceac:	681b      	ldr	r3, [r3, #0]
 c00ceae:	4977      	ldr	r1, [pc, #476]	@ (c00d08c <UART_SetConfig+0x214>)
 c00ceb0:	4019      	ands	r1, r3
 c00ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00ceb4:	681a      	ldr	r2, [r3, #0]
 c00ceb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c00ceb8:	430b      	orrs	r3, r1
 c00ceba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c00cebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cebe:	681b      	ldr	r3, [r3, #0]
 c00cec0:	685b      	ldr	r3, [r3, #4]
 c00cec2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 c00cec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cec8:	68d9      	ldr	r1, [r3, #12]
 c00ceca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cecc:	681a      	ldr	r2, [r3, #0]
 c00cece:	ea40 0301 	orr.w	r3, r0, r1
 c00ced2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c00ced4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00ced6:	699b      	ldr	r3, [r3, #24]
 c00ced8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c00ceda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cedc:	681a      	ldr	r2, [r3, #0]
 c00cede:	4b6a      	ldr	r3, [pc, #424]	@ (c00d088 <UART_SetConfig+0x210>)
 c00cee0:	429a      	cmp	r2, r3
 c00cee2:	d009      	beq.n	c00cef8 <UART_SetConfig+0x80>
 c00cee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cee6:	681a      	ldr	r2, [r3, #0]
 c00cee8:	4b69      	ldr	r3, [pc, #420]	@ (c00d090 <UART_SetConfig+0x218>)
 c00ceea:	429a      	cmp	r2, r3
 c00ceec:	d004      	beq.n	c00cef8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c00ceee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cef0:	6a1a      	ldr	r2, [r3, #32]
 c00cef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c00cef4:	4313      	orrs	r3, r2
 c00cef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c00cef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cefa:	681b      	ldr	r3, [r3, #0]
 c00cefc:	689b      	ldr	r3, [r3, #8]
 c00cefe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 c00cf02:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 c00cf06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf08:	681a      	ldr	r2, [r3, #0]
 c00cf0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c00cf0c:	430b      	orrs	r3, r1
 c00cf0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c00cf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf12:	681b      	ldr	r3, [r3, #0]
 c00cf14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00cf16:	f023 000f 	bic.w	r0, r3, #15
 c00cf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 c00cf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf20:	681a      	ldr	r2, [r3, #0]
 c00cf22:	ea40 0301 	orr.w	r3, r0, r1
 c00cf26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c00cf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf2a:	681a      	ldr	r2, [r3, #0]
 c00cf2c:	4b59      	ldr	r3, [pc, #356]	@ (c00d094 <UART_SetConfig+0x21c>)
 c00cf2e:	429a      	cmp	r2, r3
 c00cf30:	d102      	bne.n	c00cf38 <UART_SetConfig+0xc0>
 c00cf32:	2301      	movs	r3, #1
 c00cf34:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00cf36:	e029      	b.n	c00cf8c <UART_SetConfig+0x114>
 c00cf38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf3a:	681a      	ldr	r2, [r3, #0]
 c00cf3c:	4b56      	ldr	r3, [pc, #344]	@ (c00d098 <UART_SetConfig+0x220>)
 c00cf3e:	429a      	cmp	r2, r3
 c00cf40:	d102      	bne.n	c00cf48 <UART_SetConfig+0xd0>
 c00cf42:	2302      	movs	r3, #2
 c00cf44:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00cf46:	e021      	b.n	c00cf8c <UART_SetConfig+0x114>
 c00cf48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf4a:	681a      	ldr	r2, [r3, #0]
 c00cf4c:	4b53      	ldr	r3, [pc, #332]	@ (c00d09c <UART_SetConfig+0x224>)
 c00cf4e:	429a      	cmp	r2, r3
 c00cf50:	d102      	bne.n	c00cf58 <UART_SetConfig+0xe0>
 c00cf52:	2304      	movs	r3, #4
 c00cf54:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00cf56:	e019      	b.n	c00cf8c <UART_SetConfig+0x114>
 c00cf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf5a:	681a      	ldr	r2, [r3, #0]
 c00cf5c:	4b50      	ldr	r3, [pc, #320]	@ (c00d0a0 <UART_SetConfig+0x228>)
 c00cf5e:	429a      	cmp	r2, r3
 c00cf60:	d102      	bne.n	c00cf68 <UART_SetConfig+0xf0>
 c00cf62:	2308      	movs	r3, #8
 c00cf64:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00cf66:	e011      	b.n	c00cf8c <UART_SetConfig+0x114>
 c00cf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf6a:	681b      	ldr	r3, [r3, #0]
 c00cf6c:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 c00cf70:	d102      	bne.n	c00cf78 <UART_SetConfig+0x100>
 c00cf72:	2310      	movs	r3, #16
 c00cf74:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00cf76:	e009      	b.n	c00cf8c <UART_SetConfig+0x114>
 c00cf78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf7a:	681a      	ldr	r2, [r3, #0]
 c00cf7c:	4b44      	ldr	r3, [pc, #272]	@ (c00d090 <UART_SetConfig+0x218>)
 c00cf7e:	429a      	cmp	r2, r3
 c00cf80:	d102      	bne.n	c00cf88 <UART_SetConfig+0x110>
 c00cf82:	2320      	movs	r3, #32
 c00cf84:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00cf86:	e001      	b.n	c00cf8c <UART_SetConfig+0x114>
 c00cf88:	2300      	movs	r3, #0
 c00cf8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c00cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf8e:	681a      	ldr	r2, [r3, #0]
 c00cf90:	4b3d      	ldr	r3, [pc, #244]	@ (c00d088 <UART_SetConfig+0x210>)
 c00cf92:	429a      	cmp	r2, r3
 c00cf94:	d005      	beq.n	c00cfa2 <UART_SetConfig+0x12a>
 c00cf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cf98:	681a      	ldr	r2, [r3, #0]
 c00cf9a:	4b3d      	ldr	r3, [pc, #244]	@ (c00d090 <UART_SetConfig+0x218>)
 c00cf9c:	429a      	cmp	r2, r3
 c00cf9e:	f040 8083 	bne.w	c00d0a8 <UART_SetConfig+0x230>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c00cfa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c00cfa4:	2200      	movs	r2, #0
 c00cfa6:	623b      	str	r3, [r7, #32]
 c00cfa8:	627a      	str	r2, [r7, #36]	@ 0x24
 c00cfaa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 c00cfae:	f7fe fa8f 	bl	c00b4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 c00cfb2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 c00cfb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00cfb6:	2b00      	cmp	r3, #0
 c00cfb8:	f000 80e6 	beq.w	c00d188 <UART_SetConfig+0x310>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c00cfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00cfc0:	4a38      	ldr	r2, [pc, #224]	@ (c00d0a4 <UART_SetConfig+0x22c>)
 c00cfc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00cfc6:	461a      	mov	r2, r3
 c00cfc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00cfca:	fbb3 f3f2 	udiv	r3, r3, r2
 c00cfce:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c00cfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cfd2:	685a      	ldr	r2, [r3, #4]
 c00cfd4:	4613      	mov	r3, r2
 c00cfd6:	005b      	lsls	r3, r3, #1
 c00cfd8:	4413      	add	r3, r2
 c00cfda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 c00cfdc:	429a      	cmp	r2, r3
 c00cfde:	d305      	bcc.n	c00cfec <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c00cfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cfe2:	685b      	ldr	r3, [r3, #4]
 c00cfe4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c00cfe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 c00cfe8:	429a      	cmp	r2, r3
 c00cfea:	d903      	bls.n	c00cff4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 c00cfec:	2301      	movs	r3, #1
 c00cfee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c00cff2:	e048      	b.n	c00d086 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00cff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00cff6:	2200      	movs	r2, #0
 c00cff8:	61bb      	str	r3, [r7, #24]
 c00cffa:	61fa      	str	r2, [r7, #28]
 c00cffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00cffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00d000:	4a28      	ldr	r2, [pc, #160]	@ (c00d0a4 <UART_SetConfig+0x22c>)
 c00d002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00d006:	b29b      	uxth	r3, r3
 c00d008:	2200      	movs	r2, #0
 c00d00a:	613b      	str	r3, [r7, #16]
 c00d00c:	617a      	str	r2, [r7, #20]
 c00d00e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 c00d012:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 c00d016:	f7f7 f80d 	bl	c004034 <__aeabi_uldivmod>
 c00d01a:	4602      	mov	r2, r0
 c00d01c:	460b      	mov	r3, r1
 c00d01e:	4610      	mov	r0, r2
 c00d020:	4619      	mov	r1, r3
 c00d022:	f04f 0200 	mov.w	r2, #0
 c00d026:	f04f 0300 	mov.w	r3, #0
 c00d02a:	020b      	lsls	r3, r1, #8
 c00d02c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c00d030:	0202      	lsls	r2, r0, #8
 c00d032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c00d034:	6849      	ldr	r1, [r1, #4]
 c00d036:	0849      	lsrs	r1, r1, #1
 c00d038:	2000      	movs	r0, #0
 c00d03a:	460c      	mov	r4, r1
 c00d03c:	4605      	mov	r5, r0
 c00d03e:	eb12 0804 	adds.w	r8, r2, r4
 c00d042:	eb43 0905 	adc.w	r9, r3, r5
 c00d046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d048:	685b      	ldr	r3, [r3, #4]
 c00d04a:	2200      	movs	r2, #0
 c00d04c:	60bb      	str	r3, [r7, #8]
 c00d04e:	60fa      	str	r2, [r7, #12]
 c00d050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 c00d054:	4640      	mov	r0, r8
 c00d056:	4649      	mov	r1, r9
 c00d058:	f7f6 ffec 	bl	c004034 <__aeabi_uldivmod>
 c00d05c:	4602      	mov	r2, r0
 c00d05e:	460b      	mov	r3, r1
 c00d060:	4613      	mov	r3, r2
 c00d062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c00d064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00d06a:	d308      	bcc.n	c00d07e <UART_SetConfig+0x206>
 c00d06c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d06e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c00d072:	d204      	bcs.n	c00d07e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 c00d074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d076:	681b      	ldr	r3, [r3, #0]
 c00d078:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 c00d07a:	60da      	str	r2, [r3, #12]
 c00d07c:	e003      	b.n	c00d086 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 c00d07e:	2301      	movs	r3, #1
 c00d080:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 c00d084:	e080      	b.n	c00d188 <UART_SetConfig+0x310>
 c00d086:	e07f      	b.n	c00d188 <UART_SetConfig+0x310>
 c00d088:	46002400 	.word	0x46002400
 c00d08c:	cfff69f3 	.word	0xcfff69f3
 c00d090:	56002400 	.word	0x56002400
 c00d094:	50013800 	.word	0x50013800
 c00d098:	50004400 	.word	0x50004400
 c00d09c:	50004800 	.word	0x50004800
 c00d0a0:	50004c00 	.word	0x50004c00
 c00d0a4:	0c00e578 	.word	0x0c00e578
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c00d0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d0aa:	69db      	ldr	r3, [r3, #28]
 c00d0ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c00d0b0:	d13c      	bne.n	c00d12c <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c00d0b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c00d0b4:	2200      	movs	r2, #0
 c00d0b6:	603b      	str	r3, [r7, #0]
 c00d0b8:	607a      	str	r2, [r7, #4]
 c00d0ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 c00d0be:	f7fe fa07 	bl	c00b4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 c00d0c2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c00d0c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00d0c6:	2b00      	cmp	r3, #0
 c00d0c8:	d05e      	beq.n	c00d188 <UART_SetConfig+0x310>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00d0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00d0ce:	4a39      	ldr	r2, [pc, #228]	@ (c00d1b4 <UART_SetConfig+0x33c>)
 c00d0d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00d0d4:	461a      	mov	r2, r3
 c00d0d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00d0d8:	fbb3 f3f2 	udiv	r3, r3, r2
 c00d0dc:	005a      	lsls	r2, r3, #1
 c00d0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d0e0:	685b      	ldr	r3, [r3, #4]
 c00d0e2:	085b      	lsrs	r3, r3, #1
 c00d0e4:	441a      	add	r2, r3
 c00d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d0e8:	685b      	ldr	r3, [r3, #4]
 c00d0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 c00d0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00d0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d0f2:	2b0f      	cmp	r3, #15
 c00d0f4:	d916      	bls.n	c00d124 <UART_SetConfig+0x2ac>
 c00d0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d0f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00d0fc:	d212      	bcs.n	c00d124 <UART_SetConfig+0x2ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c00d0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d100:	b29b      	uxth	r3, r3
 c00d102:	f023 030f 	bic.w	r3, r3, #15
 c00d106:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c00d108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d10a:	085b      	lsrs	r3, r3, #1
 c00d10c:	b29b      	uxth	r3, r3
 c00d10e:	f003 0307 	and.w	r3, r3, #7
 c00d112:	b29a      	uxth	r2, r3
 c00d114:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 c00d116:	4313      	orrs	r3, r2
 c00d118:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 c00d11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d11c:	681b      	ldr	r3, [r3, #0]
 c00d11e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 c00d120:	60da      	str	r2, [r3, #12]
 c00d122:	e031      	b.n	c00d188 <UART_SetConfig+0x310>
      }
      else
      {
        ret = HAL_ERROR;
 c00d124:	2301      	movs	r3, #1
 c00d126:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c00d12a:	e02d      	b.n	c00d188 <UART_SetConfig+0x310>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c00d12c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c00d12e:	2200      	movs	r2, #0
 c00d130:	469a      	mov	sl, r3
 c00d132:	4693      	mov	fp, r2
 c00d134:	4650      	mov	r0, sl
 c00d136:	4659      	mov	r1, fp
 c00d138:	f7fe f9ca 	bl	c00b4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 c00d13c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 c00d13e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00d140:	2b00      	cmp	r3, #0
 c00d142:	d021      	beq.n	c00d188 <UART_SetConfig+0x310>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00d144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00d148:	4a1a      	ldr	r2, [pc, #104]	@ (c00d1b4 <UART_SetConfig+0x33c>)
 c00d14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00d14e:	461a      	mov	r2, r3
 c00d150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00d152:	fbb3 f2f2 	udiv	r2, r3, r2
 c00d156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d158:	685b      	ldr	r3, [r3, #4]
 c00d15a:	085b      	lsrs	r3, r3, #1
 c00d15c:	441a      	add	r2, r3
 c00d15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d160:	685b      	ldr	r3, [r3, #4]
 c00d162:	fbb2 f3f3 	udiv	r3, r2, r3
 c00d166:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00d168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d16a:	2b0f      	cmp	r3, #15
 c00d16c:	d909      	bls.n	c00d182 <UART_SetConfig+0x30a>
 c00d16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00d174:	d205      	bcs.n	c00d182 <UART_SetConfig+0x30a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c00d176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d178:	b29a      	uxth	r2, r3
 c00d17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d17c:	681b      	ldr	r3, [r3, #0]
 c00d17e:	60da      	str	r2, [r3, #12]
 c00d180:	e002      	b.n	c00d188 <UART_SetConfig+0x310>
      }
      else
      {
        ret = HAL_ERROR;
 c00d182:	2301      	movs	r3, #1
 c00d184:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c00d188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d18a:	2201      	movs	r2, #1
 c00d18c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 c00d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d192:	2201      	movs	r2, #1
 c00d194:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c00d198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d19a:	2200      	movs	r2, #0
 c00d19c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 c00d19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00d1a0:	2200      	movs	r2, #0
 c00d1a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 c00d1a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 c00d1a8:	4618      	mov	r0, r3
 c00d1aa:	3750      	adds	r7, #80	@ 0x50
 c00d1ac:	46bd      	mov	sp, r7
 c00d1ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c00d1b2:	bf00      	nop
 c00d1b4:	0c00e578 	.word	0x0c00e578

0c00d1b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c00d1b8:	b480      	push	{r7}
 c00d1ba:	b083      	sub	sp, #12
 c00d1bc:	af00      	add	r7, sp, #0
 c00d1be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c00d1c0:	687b      	ldr	r3, [r7, #4]
 c00d1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d1c4:	f003 0308 	and.w	r3, r3, #8
 c00d1c8:	2b00      	cmp	r3, #0
 c00d1ca:	d00a      	beq.n	c00d1e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c00d1cc:	687b      	ldr	r3, [r7, #4]
 c00d1ce:	681b      	ldr	r3, [r3, #0]
 c00d1d0:	685b      	ldr	r3, [r3, #4]
 c00d1d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 c00d1d6:	687b      	ldr	r3, [r7, #4]
 c00d1d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 c00d1da:	687b      	ldr	r3, [r7, #4]
 c00d1dc:	681b      	ldr	r3, [r3, #0]
 c00d1de:	430a      	orrs	r2, r1
 c00d1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c00d1e2:	687b      	ldr	r3, [r7, #4]
 c00d1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d1e6:	f003 0301 	and.w	r3, r3, #1
 c00d1ea:	2b00      	cmp	r3, #0
 c00d1ec:	d00a      	beq.n	c00d204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c00d1ee:	687b      	ldr	r3, [r7, #4]
 c00d1f0:	681b      	ldr	r3, [r3, #0]
 c00d1f2:	685b      	ldr	r3, [r3, #4]
 c00d1f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 c00d1f8:	687b      	ldr	r3, [r7, #4]
 c00d1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c00d1fc:	687b      	ldr	r3, [r7, #4]
 c00d1fe:	681b      	ldr	r3, [r3, #0]
 c00d200:	430a      	orrs	r2, r1
 c00d202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c00d204:	687b      	ldr	r3, [r7, #4]
 c00d206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d208:	f003 0302 	and.w	r3, r3, #2
 c00d20c:	2b00      	cmp	r3, #0
 c00d20e:	d00a      	beq.n	c00d226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c00d210:	687b      	ldr	r3, [r7, #4]
 c00d212:	681b      	ldr	r3, [r3, #0]
 c00d214:	685b      	ldr	r3, [r3, #4]
 c00d216:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 c00d21a:	687b      	ldr	r3, [r7, #4]
 c00d21c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c00d21e:	687b      	ldr	r3, [r7, #4]
 c00d220:	681b      	ldr	r3, [r3, #0]
 c00d222:	430a      	orrs	r2, r1
 c00d224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c00d226:	687b      	ldr	r3, [r7, #4]
 c00d228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d22a:	f003 0304 	and.w	r3, r3, #4
 c00d22e:	2b00      	cmp	r3, #0
 c00d230:	d00a      	beq.n	c00d248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c00d232:	687b      	ldr	r3, [r7, #4]
 c00d234:	681b      	ldr	r3, [r3, #0]
 c00d236:	685b      	ldr	r3, [r3, #4]
 c00d238:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 c00d23c:	687b      	ldr	r3, [r7, #4]
 c00d23e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c00d240:	687b      	ldr	r3, [r7, #4]
 c00d242:	681b      	ldr	r3, [r3, #0]
 c00d244:	430a      	orrs	r2, r1
 c00d246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c00d248:	687b      	ldr	r3, [r7, #4]
 c00d24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d24c:	f003 0310 	and.w	r3, r3, #16
 c00d250:	2b00      	cmp	r3, #0
 c00d252:	d00a      	beq.n	c00d26a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c00d254:	687b      	ldr	r3, [r7, #4]
 c00d256:	681b      	ldr	r3, [r3, #0]
 c00d258:	689b      	ldr	r3, [r3, #8]
 c00d25a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 c00d25e:	687b      	ldr	r3, [r7, #4]
 c00d260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c00d262:	687b      	ldr	r3, [r7, #4]
 c00d264:	681b      	ldr	r3, [r3, #0]
 c00d266:	430a      	orrs	r2, r1
 c00d268:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c00d26a:	687b      	ldr	r3, [r7, #4]
 c00d26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d26e:	f003 0320 	and.w	r3, r3, #32
 c00d272:	2b00      	cmp	r3, #0
 c00d274:	d00a      	beq.n	c00d28c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c00d276:	687b      	ldr	r3, [r7, #4]
 c00d278:	681b      	ldr	r3, [r3, #0]
 c00d27a:	689b      	ldr	r3, [r3, #8]
 c00d27c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 c00d280:	687b      	ldr	r3, [r7, #4]
 c00d282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 c00d284:	687b      	ldr	r3, [r7, #4]
 c00d286:	681b      	ldr	r3, [r3, #0]
 c00d288:	430a      	orrs	r2, r1
 c00d28a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c00d28c:	687b      	ldr	r3, [r7, #4]
 c00d28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c00d294:	2b00      	cmp	r3, #0
 c00d296:	d01a      	beq.n	c00d2ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c00d298:	687b      	ldr	r3, [r7, #4]
 c00d29a:	681b      	ldr	r3, [r3, #0]
 c00d29c:	685b      	ldr	r3, [r3, #4]
 c00d29e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 c00d2a2:	687b      	ldr	r3, [r7, #4]
 c00d2a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c00d2a6:	687b      	ldr	r3, [r7, #4]
 c00d2a8:	681b      	ldr	r3, [r3, #0]
 c00d2aa:	430a      	orrs	r2, r1
 c00d2ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c00d2ae:	687b      	ldr	r3, [r7, #4]
 c00d2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c00d2b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c00d2b6:	d10a      	bne.n	c00d2ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c00d2b8:	687b      	ldr	r3, [r7, #4]
 c00d2ba:	681b      	ldr	r3, [r3, #0]
 c00d2bc:	685b      	ldr	r3, [r3, #4]
 c00d2be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 c00d2c2:	687b      	ldr	r3, [r7, #4]
 c00d2c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 c00d2c6:	687b      	ldr	r3, [r7, #4]
 c00d2c8:	681b      	ldr	r3, [r3, #0]
 c00d2ca:	430a      	orrs	r2, r1
 c00d2cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c00d2ce:	687b      	ldr	r3, [r7, #4]
 c00d2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00d2d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c00d2d6:	2b00      	cmp	r3, #0
 c00d2d8:	d00a      	beq.n	c00d2f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c00d2da:	687b      	ldr	r3, [r7, #4]
 c00d2dc:	681b      	ldr	r3, [r3, #0]
 c00d2de:	685b      	ldr	r3, [r3, #4]
 c00d2e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 c00d2e4:	687b      	ldr	r3, [r7, #4]
 c00d2e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 c00d2e8:	687b      	ldr	r3, [r7, #4]
 c00d2ea:	681b      	ldr	r3, [r3, #0]
 c00d2ec:	430a      	orrs	r2, r1
 c00d2ee:	605a      	str	r2, [r3, #4]
  }
}
 c00d2f0:	bf00      	nop
 c00d2f2:	370c      	adds	r7, #12
 c00d2f4:	46bd      	mov	sp, r7
 c00d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d2fa:	4770      	bx	lr

0c00d2fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c00d2fc:	b580      	push	{r7, lr}
 c00d2fe:	b098      	sub	sp, #96	@ 0x60
 c00d300:	af02      	add	r7, sp, #8
 c00d302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00d304:	687b      	ldr	r3, [r7, #4]
 c00d306:	2200      	movs	r2, #0
 c00d308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c00d30c:	f7f9 f97a 	bl	c006604 <HAL_GetTick>
 c00d310:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c00d312:	687b      	ldr	r3, [r7, #4]
 c00d314:	681b      	ldr	r3, [r3, #0]
 c00d316:	681b      	ldr	r3, [r3, #0]
 c00d318:	f003 0308 	and.w	r3, r3, #8
 c00d31c:	2b08      	cmp	r3, #8
 c00d31e:	d12f      	bne.n	c00d380 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00d320:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c00d324:	9300      	str	r3, [sp, #0]
 c00d326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c00d328:	2200      	movs	r2, #0
 c00d32a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 c00d32e:	6878      	ldr	r0, [r7, #4]
 c00d330:	f000 f88e 	bl	c00d450 <UART_WaitOnFlagUntilTimeout>
 c00d334:	4603      	mov	r3, r0
 c00d336:	2b00      	cmp	r3, #0
 c00d338:	d022      	beq.n	c00d380 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c00d33a:	687b      	ldr	r3, [r7, #4]
 c00d33c:	681b      	ldr	r3, [r3, #0]
 c00d33e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00d340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c00d342:	e853 3f00 	ldrex	r3, [r3]
 c00d346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 c00d348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c00d34a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c00d34e:	653b      	str	r3, [r7, #80]	@ 0x50
 c00d350:	687b      	ldr	r3, [r7, #4]
 c00d352:	681b      	ldr	r3, [r3, #0]
 c00d354:	461a      	mov	r2, r3
 c00d356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 c00d358:	647b      	str	r3, [r7, #68]	@ 0x44
 c00d35a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00d35c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 c00d35e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 c00d360:	e841 2300 	strex	r3, r2, [r1]
 c00d364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 c00d366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00d368:	2b00      	cmp	r3, #0
 c00d36a:	d1e6      	bne.n	c00d33a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c00d36c:	687b      	ldr	r3, [r7, #4]
 c00d36e:	2220      	movs	r2, #32
 c00d370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 c00d374:	687b      	ldr	r3, [r7, #4]
 c00d376:	2200      	movs	r2, #0
 c00d378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c00d37c:	2303      	movs	r3, #3
 c00d37e:	e063      	b.n	c00d448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c00d380:	687b      	ldr	r3, [r7, #4]
 c00d382:	681b      	ldr	r3, [r3, #0]
 c00d384:	681b      	ldr	r3, [r3, #0]
 c00d386:	f003 0304 	and.w	r3, r3, #4
 c00d38a:	2b04      	cmp	r3, #4
 c00d38c:	d149      	bne.n	c00d422 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00d38e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c00d392:	9300      	str	r3, [sp, #0]
 c00d394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c00d396:	2200      	movs	r2, #0
 c00d398:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 c00d39c:	6878      	ldr	r0, [r7, #4]
 c00d39e:	f000 f857 	bl	c00d450 <UART_WaitOnFlagUntilTimeout>
 c00d3a2:	4603      	mov	r3, r0
 c00d3a4:	2b00      	cmp	r3, #0
 c00d3a6:	d03c      	beq.n	c00d422 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c00d3a8:	687b      	ldr	r3, [r7, #4]
 c00d3aa:	681b      	ldr	r3, [r3, #0]
 c00d3ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00d3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d3b0:	e853 3f00 	ldrex	r3, [r3]
 c00d3b4:	623b      	str	r3, [r7, #32]
   return(result);
 c00d3b6:	6a3b      	ldr	r3, [r7, #32]
 c00d3b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 c00d3bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c00d3be:	687b      	ldr	r3, [r7, #4]
 c00d3c0:	681b      	ldr	r3, [r3, #0]
 c00d3c2:	461a      	mov	r2, r3
 c00d3c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c00d3c6:	633b      	str	r3, [r7, #48]	@ 0x30
 c00d3c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00d3ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c00d3cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 c00d3ce:	e841 2300 	strex	r3, r2, [r1]
 c00d3d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 c00d3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00d3d6:	2b00      	cmp	r3, #0
 c00d3d8:	d1e6      	bne.n	c00d3a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c00d3da:	687b      	ldr	r3, [r7, #4]
 c00d3dc:	681b      	ldr	r3, [r3, #0]
 c00d3de:	3308      	adds	r3, #8
 c00d3e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00d3e2:	693b      	ldr	r3, [r7, #16]
 c00d3e4:	e853 3f00 	ldrex	r3, [r3]
 c00d3e8:	60fb      	str	r3, [r7, #12]
   return(result);
 c00d3ea:	68fb      	ldr	r3, [r7, #12]
 c00d3ec:	f023 0301 	bic.w	r3, r3, #1
 c00d3f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00d3f2:	687b      	ldr	r3, [r7, #4]
 c00d3f4:	681b      	ldr	r3, [r3, #0]
 c00d3f6:	3308      	adds	r3, #8
 c00d3f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c00d3fa:	61fa      	str	r2, [r7, #28]
 c00d3fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00d3fe:	69b9      	ldr	r1, [r7, #24]
 c00d400:	69fa      	ldr	r2, [r7, #28]
 c00d402:	e841 2300 	strex	r3, r2, [r1]
 c00d406:	617b      	str	r3, [r7, #20]
   return(result);
 c00d408:	697b      	ldr	r3, [r7, #20]
 c00d40a:	2b00      	cmp	r3, #0
 c00d40c:	d1e5      	bne.n	c00d3da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c00d40e:	687b      	ldr	r3, [r7, #4]
 c00d410:	2220      	movs	r2, #32
 c00d412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 c00d416:	687b      	ldr	r3, [r7, #4]
 c00d418:	2200      	movs	r2, #0
 c00d41a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c00d41e:	2303      	movs	r3, #3
 c00d420:	e012      	b.n	c00d448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c00d422:	687b      	ldr	r3, [r7, #4]
 c00d424:	2220      	movs	r2, #32
 c00d426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c00d42a:	687b      	ldr	r3, [r7, #4]
 c00d42c:	2220      	movs	r2, #32
 c00d42e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00d432:	687b      	ldr	r3, [r7, #4]
 c00d434:	2200      	movs	r2, #0
 c00d436:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c00d438:	687b      	ldr	r3, [r7, #4]
 c00d43a:	2200      	movs	r2, #0
 c00d43c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 c00d43e:	687b      	ldr	r3, [r7, #4]
 c00d440:	2200      	movs	r2, #0
 c00d442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c00d446:	2300      	movs	r3, #0
}
 c00d448:	4618      	mov	r0, r3
 c00d44a:	3758      	adds	r7, #88	@ 0x58
 c00d44c:	46bd      	mov	sp, r7
 c00d44e:	bd80      	pop	{r7, pc}

0c00d450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c00d450:	b580      	push	{r7, lr}
 c00d452:	b084      	sub	sp, #16
 c00d454:	af00      	add	r7, sp, #0
 c00d456:	60f8      	str	r0, [r7, #12]
 c00d458:	60b9      	str	r1, [r7, #8]
 c00d45a:	603b      	str	r3, [r7, #0]
 c00d45c:	4613      	mov	r3, r2
 c00d45e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00d460:	e04f      	b.n	c00d502 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c00d462:	69bb      	ldr	r3, [r7, #24]
 c00d464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 c00d468:	d04b      	beq.n	c00d502 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00d46a:	f7f9 f8cb 	bl	c006604 <HAL_GetTick>
 c00d46e:	4602      	mov	r2, r0
 c00d470:	683b      	ldr	r3, [r7, #0]
 c00d472:	1ad3      	subs	r3, r2, r3
 c00d474:	69ba      	ldr	r2, [r7, #24]
 c00d476:	429a      	cmp	r2, r3
 c00d478:	d302      	bcc.n	c00d480 <UART_WaitOnFlagUntilTimeout+0x30>
 c00d47a:	69bb      	ldr	r3, [r7, #24]
 c00d47c:	2b00      	cmp	r3, #0
 c00d47e:	d101      	bne.n	c00d484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c00d480:	2303      	movs	r3, #3
 c00d482:	e04e      	b.n	c00d522 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 c00d484:	68fb      	ldr	r3, [r7, #12]
 c00d486:	681b      	ldr	r3, [r3, #0]
 c00d488:	681b      	ldr	r3, [r3, #0]
 c00d48a:	f003 0304 	and.w	r3, r3, #4
 c00d48e:	2b00      	cmp	r3, #0
 c00d490:	d037      	beq.n	c00d502 <UART_WaitOnFlagUntilTimeout+0xb2>
 c00d492:	68bb      	ldr	r3, [r7, #8]
 c00d494:	2b80      	cmp	r3, #128	@ 0x80
 c00d496:	d034      	beq.n	c00d502 <UART_WaitOnFlagUntilTimeout+0xb2>
 c00d498:	68bb      	ldr	r3, [r7, #8]
 c00d49a:	2b40      	cmp	r3, #64	@ 0x40
 c00d49c:	d031      	beq.n	c00d502 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c00d49e:	68fb      	ldr	r3, [r7, #12]
 c00d4a0:	681b      	ldr	r3, [r3, #0]
 c00d4a2:	69db      	ldr	r3, [r3, #28]
 c00d4a4:	f003 0308 	and.w	r3, r3, #8
 c00d4a8:	2b08      	cmp	r3, #8
 c00d4aa:	d110      	bne.n	c00d4ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c00d4ac:	68fb      	ldr	r3, [r7, #12]
 c00d4ae:	681b      	ldr	r3, [r3, #0]
 c00d4b0:	2208      	movs	r2, #8
 c00d4b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c00d4b4:	68f8      	ldr	r0, [r7, #12]
 c00d4b6:	f000 f838 	bl	c00d52a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 c00d4ba:	68fb      	ldr	r3, [r7, #12]
 c00d4bc:	2208      	movs	r2, #8
 c00d4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c00d4c2:	68fb      	ldr	r3, [r7, #12]
 c00d4c4:	2200      	movs	r2, #0
 c00d4c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 c00d4ca:	2301      	movs	r3, #1
 c00d4cc:	e029      	b.n	c00d522 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c00d4ce:	68fb      	ldr	r3, [r7, #12]
 c00d4d0:	681b      	ldr	r3, [r3, #0]
 c00d4d2:	69db      	ldr	r3, [r3, #28]
 c00d4d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c00d4d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c00d4dc:	d111      	bne.n	c00d502 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00d4de:	68fb      	ldr	r3, [r7, #12]
 c00d4e0:	681b      	ldr	r3, [r3, #0]
 c00d4e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 c00d4e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c00d4e8:	68f8      	ldr	r0, [r7, #12]
 c00d4ea:	f000 f81e 	bl	c00d52a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c00d4ee:	68fb      	ldr	r3, [r7, #12]
 c00d4f0:	2220      	movs	r2, #32
 c00d4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c00d4f6:	68fb      	ldr	r3, [r7, #12]
 c00d4f8:	2200      	movs	r2, #0
 c00d4fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 c00d4fe:	2303      	movs	r3, #3
 c00d500:	e00f      	b.n	c00d522 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00d502:	68fb      	ldr	r3, [r7, #12]
 c00d504:	681b      	ldr	r3, [r3, #0]
 c00d506:	69da      	ldr	r2, [r3, #28]
 c00d508:	68bb      	ldr	r3, [r7, #8]
 c00d50a:	4013      	ands	r3, r2
 c00d50c:	68ba      	ldr	r2, [r7, #8]
 c00d50e:	429a      	cmp	r2, r3
 c00d510:	bf0c      	ite	eq
 c00d512:	2301      	moveq	r3, #1
 c00d514:	2300      	movne	r3, #0
 c00d516:	b2db      	uxtb	r3, r3
 c00d518:	461a      	mov	r2, r3
 c00d51a:	79fb      	ldrb	r3, [r7, #7]
 c00d51c:	429a      	cmp	r2, r3
 c00d51e:	d0a0      	beq.n	c00d462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c00d520:	2300      	movs	r3, #0
}
 c00d522:	4618      	mov	r0, r3
 c00d524:	3710      	adds	r7, #16
 c00d526:	46bd      	mov	sp, r7
 c00d528:	bd80      	pop	{r7, pc}

0c00d52a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c00d52a:	b480      	push	{r7}
 c00d52c:	b095      	sub	sp, #84	@ 0x54
 c00d52e:	af00      	add	r7, sp, #0
 c00d530:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c00d532:	687b      	ldr	r3, [r7, #4]
 c00d534:	681b      	ldr	r3, [r3, #0]
 c00d536:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00d538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c00d53a:	e853 3f00 	ldrex	r3, [r3]
 c00d53e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 c00d540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00d542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 c00d546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c00d548:	687b      	ldr	r3, [r7, #4]
 c00d54a:	681b      	ldr	r3, [r3, #0]
 c00d54c:	461a      	mov	r2, r3
 c00d54e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c00d550:	643b      	str	r3, [r7, #64]	@ 0x40
 c00d552:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00d554:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 c00d556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 c00d558:	e841 2300 	strex	r3, r2, [r1]
 c00d55c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 c00d55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c00d560:	2b00      	cmp	r3, #0
 c00d562:	d1e6      	bne.n	c00d532 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c00d564:	687b      	ldr	r3, [r7, #4]
 c00d566:	681b      	ldr	r3, [r3, #0]
 c00d568:	3308      	adds	r3, #8
 c00d56a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00d56c:	6a3b      	ldr	r3, [r7, #32]
 c00d56e:	e853 3f00 	ldrex	r3, [r3]
 c00d572:	61fb      	str	r3, [r7, #28]
   return(result);
 c00d574:	69fb      	ldr	r3, [r7, #28]
 c00d576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c00d57a:	f023 0301 	bic.w	r3, r3, #1
 c00d57e:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00d580:	687b      	ldr	r3, [r7, #4]
 c00d582:	681b      	ldr	r3, [r3, #0]
 c00d584:	3308      	adds	r3, #8
 c00d586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c00d588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 c00d58a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00d58c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 c00d58e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 c00d590:	e841 2300 	strex	r3, r2, [r1]
 c00d594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 c00d596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d598:	2b00      	cmp	r3, #0
 c00d59a:	d1e3      	bne.n	c00d564 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c00d59c:	687b      	ldr	r3, [r7, #4]
 c00d59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c00d5a0:	2b01      	cmp	r3, #1
 c00d5a2:	d118      	bne.n	c00d5d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c00d5a4:	687b      	ldr	r3, [r7, #4]
 c00d5a6:	681b      	ldr	r3, [r3, #0]
 c00d5a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00d5aa:	68fb      	ldr	r3, [r7, #12]
 c00d5ac:	e853 3f00 	ldrex	r3, [r3]
 c00d5b0:	60bb      	str	r3, [r7, #8]
   return(result);
 c00d5b2:	68bb      	ldr	r3, [r7, #8]
 c00d5b4:	f023 0310 	bic.w	r3, r3, #16
 c00d5b8:	647b      	str	r3, [r7, #68]	@ 0x44
 c00d5ba:	687b      	ldr	r3, [r7, #4]
 c00d5bc:	681b      	ldr	r3, [r3, #0]
 c00d5be:	461a      	mov	r2, r3
 c00d5c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c00d5c2:	61bb      	str	r3, [r7, #24]
 c00d5c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00d5c6:	6979      	ldr	r1, [r7, #20]
 c00d5c8:	69ba      	ldr	r2, [r7, #24]
 c00d5ca:	e841 2300 	strex	r3, r2, [r1]
 c00d5ce:	613b      	str	r3, [r7, #16]
   return(result);
 c00d5d0:	693b      	ldr	r3, [r7, #16]
 c00d5d2:	2b00      	cmp	r3, #0
 c00d5d4:	d1e6      	bne.n	c00d5a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c00d5d6:	687b      	ldr	r3, [r7, #4]
 c00d5d8:	2220      	movs	r2, #32
 c00d5da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00d5de:	687b      	ldr	r3, [r7, #4]
 c00d5e0:	2200      	movs	r2, #0
 c00d5e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c00d5e4:	687b      	ldr	r3, [r7, #4]
 c00d5e6:	2200      	movs	r2, #0
 c00d5e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 c00d5ea:	bf00      	nop
 c00d5ec:	3754      	adds	r7, #84	@ 0x54
 c00d5ee:	46bd      	mov	sp, r7
 c00d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d5f4:	4770      	bx	lr

0c00d5f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c00d5f6:	b480      	push	{r7}
 c00d5f8:	b085      	sub	sp, #20
 c00d5fa:	af00      	add	r7, sp, #0
 c00d5fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00d5fe:	687b      	ldr	r3, [r7, #4]
 c00d600:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c00d604:	2b01      	cmp	r3, #1
 c00d606:	d101      	bne.n	c00d60c <HAL_UARTEx_DisableFifoMode+0x16>
 c00d608:	2302      	movs	r3, #2
 c00d60a:	e027      	b.n	c00d65c <HAL_UARTEx_DisableFifoMode+0x66>
 c00d60c:	687b      	ldr	r3, [r7, #4]
 c00d60e:	2201      	movs	r2, #1
 c00d610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00d614:	687b      	ldr	r3, [r7, #4]
 c00d616:	2224      	movs	r2, #36	@ 0x24
 c00d618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00d61c:	687b      	ldr	r3, [r7, #4]
 c00d61e:	681b      	ldr	r3, [r3, #0]
 c00d620:	681b      	ldr	r3, [r3, #0]
 c00d622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00d624:	687b      	ldr	r3, [r7, #4]
 c00d626:	681b      	ldr	r3, [r3, #0]
 c00d628:	681a      	ldr	r2, [r3, #0]
 c00d62a:	687b      	ldr	r3, [r7, #4]
 c00d62c:	681b      	ldr	r3, [r3, #0]
 c00d62e:	f022 0201 	bic.w	r2, r2, #1
 c00d632:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c00d634:	68fb      	ldr	r3, [r7, #12]
 c00d636:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 c00d63a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c00d63c:	687b      	ldr	r3, [r7, #4]
 c00d63e:	2200      	movs	r2, #0
 c00d640:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00d642:	687b      	ldr	r3, [r7, #4]
 c00d644:	681b      	ldr	r3, [r3, #0]
 c00d646:	68fa      	ldr	r2, [r7, #12]
 c00d648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00d64a:	687b      	ldr	r3, [r7, #4]
 c00d64c:	2220      	movs	r2, #32
 c00d64e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00d652:	687b      	ldr	r3, [r7, #4]
 c00d654:	2200      	movs	r2, #0
 c00d656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c00d65a:	2300      	movs	r3, #0
}
 c00d65c:	4618      	mov	r0, r3
 c00d65e:	3714      	adds	r7, #20
 c00d660:	46bd      	mov	sp, r7
 c00d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d666:	4770      	bx	lr

0c00d668 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00d668:	b580      	push	{r7, lr}
 c00d66a:	b084      	sub	sp, #16
 c00d66c:	af00      	add	r7, sp, #0
 c00d66e:	6078      	str	r0, [r7, #4]
 c00d670:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00d672:	687b      	ldr	r3, [r7, #4]
 c00d674:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c00d678:	2b01      	cmp	r3, #1
 c00d67a:	d101      	bne.n	c00d680 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c00d67c:	2302      	movs	r3, #2
 c00d67e:	e02d      	b.n	c00d6dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c00d680:	687b      	ldr	r3, [r7, #4]
 c00d682:	2201      	movs	r2, #1
 c00d684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00d688:	687b      	ldr	r3, [r7, #4]
 c00d68a:	2224      	movs	r2, #36	@ 0x24
 c00d68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00d690:	687b      	ldr	r3, [r7, #4]
 c00d692:	681b      	ldr	r3, [r3, #0]
 c00d694:	681b      	ldr	r3, [r3, #0]
 c00d696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00d698:	687b      	ldr	r3, [r7, #4]
 c00d69a:	681b      	ldr	r3, [r3, #0]
 c00d69c:	681a      	ldr	r2, [r3, #0]
 c00d69e:	687b      	ldr	r3, [r7, #4]
 c00d6a0:	681b      	ldr	r3, [r3, #0]
 c00d6a2:	f022 0201 	bic.w	r2, r2, #1
 c00d6a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c00d6a8:	687b      	ldr	r3, [r7, #4]
 c00d6aa:	681b      	ldr	r3, [r3, #0]
 c00d6ac:	689b      	ldr	r3, [r3, #8]
 c00d6ae:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 c00d6b2:	687b      	ldr	r3, [r7, #4]
 c00d6b4:	681b      	ldr	r3, [r3, #0]
 c00d6b6:	683a      	ldr	r2, [r7, #0]
 c00d6b8:	430a      	orrs	r2, r1
 c00d6ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c00d6bc:	6878      	ldr	r0, [r7, #4]
 c00d6be:	f000 f84f 	bl	c00d760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00d6c2:	687b      	ldr	r3, [r7, #4]
 c00d6c4:	681b      	ldr	r3, [r3, #0]
 c00d6c6:	68fa      	ldr	r2, [r7, #12]
 c00d6c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00d6ca:	687b      	ldr	r3, [r7, #4]
 c00d6cc:	2220      	movs	r2, #32
 c00d6ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00d6d2:	687b      	ldr	r3, [r7, #4]
 c00d6d4:	2200      	movs	r2, #0
 c00d6d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c00d6da:	2300      	movs	r3, #0
}
 c00d6dc:	4618      	mov	r0, r3
 c00d6de:	3710      	adds	r7, #16
 c00d6e0:	46bd      	mov	sp, r7
 c00d6e2:	bd80      	pop	{r7, pc}

0c00d6e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00d6e4:	b580      	push	{r7, lr}
 c00d6e6:	b084      	sub	sp, #16
 c00d6e8:	af00      	add	r7, sp, #0
 c00d6ea:	6078      	str	r0, [r7, #4]
 c00d6ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00d6ee:	687b      	ldr	r3, [r7, #4]
 c00d6f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c00d6f4:	2b01      	cmp	r3, #1
 c00d6f6:	d101      	bne.n	c00d6fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c00d6f8:	2302      	movs	r3, #2
 c00d6fa:	e02d      	b.n	c00d758 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c00d6fc:	687b      	ldr	r3, [r7, #4]
 c00d6fe:	2201      	movs	r2, #1
 c00d700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00d704:	687b      	ldr	r3, [r7, #4]
 c00d706:	2224      	movs	r2, #36	@ 0x24
 c00d708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00d70c:	687b      	ldr	r3, [r7, #4]
 c00d70e:	681b      	ldr	r3, [r3, #0]
 c00d710:	681b      	ldr	r3, [r3, #0]
 c00d712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00d714:	687b      	ldr	r3, [r7, #4]
 c00d716:	681b      	ldr	r3, [r3, #0]
 c00d718:	681a      	ldr	r2, [r3, #0]
 c00d71a:	687b      	ldr	r3, [r7, #4]
 c00d71c:	681b      	ldr	r3, [r3, #0]
 c00d71e:	f022 0201 	bic.w	r2, r2, #1
 c00d722:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c00d724:	687b      	ldr	r3, [r7, #4]
 c00d726:	681b      	ldr	r3, [r3, #0]
 c00d728:	689b      	ldr	r3, [r3, #8]
 c00d72a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 c00d72e:	687b      	ldr	r3, [r7, #4]
 c00d730:	681b      	ldr	r3, [r3, #0]
 c00d732:	683a      	ldr	r2, [r7, #0]
 c00d734:	430a      	orrs	r2, r1
 c00d736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c00d738:	6878      	ldr	r0, [r7, #4]
 c00d73a:	f000 f811 	bl	c00d760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00d73e:	687b      	ldr	r3, [r7, #4]
 c00d740:	681b      	ldr	r3, [r3, #0]
 c00d742:	68fa      	ldr	r2, [r7, #12]
 c00d744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00d746:	687b      	ldr	r3, [r7, #4]
 c00d748:	2220      	movs	r2, #32
 c00d74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00d74e:	687b      	ldr	r3, [r7, #4]
 c00d750:	2200      	movs	r2, #0
 c00d752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c00d756:	2300      	movs	r3, #0
}
 c00d758:	4618      	mov	r0, r3
 c00d75a:	3710      	adds	r7, #16
 c00d75c:	46bd      	mov	sp, r7
 c00d75e:	bd80      	pop	{r7, pc}

0c00d760 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c00d760:	b480      	push	{r7}
 c00d762:	b085      	sub	sp, #20
 c00d764:	af00      	add	r7, sp, #0
 c00d766:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c00d768:	687b      	ldr	r3, [r7, #4]
 c00d76a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c00d76c:	2b00      	cmp	r3, #0
 c00d76e:	d108      	bne.n	c00d782 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c00d770:	687b      	ldr	r3, [r7, #4]
 c00d772:	2201      	movs	r2, #1
 c00d774:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 c00d778:	687b      	ldr	r3, [r7, #4]
 c00d77a:	2201      	movs	r2, #1
 c00d77c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c00d780:	e031      	b.n	c00d7e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c00d782:	2308      	movs	r3, #8
 c00d784:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c00d786:	2308      	movs	r3, #8
 c00d788:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c00d78a:	687b      	ldr	r3, [r7, #4]
 c00d78c:	681b      	ldr	r3, [r3, #0]
 c00d78e:	689b      	ldr	r3, [r3, #8]
 c00d790:	0e5b      	lsrs	r3, r3, #25
 c00d792:	b2db      	uxtb	r3, r3
 c00d794:	f003 0307 	and.w	r3, r3, #7
 c00d798:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c00d79a:	687b      	ldr	r3, [r7, #4]
 c00d79c:	681b      	ldr	r3, [r3, #0]
 c00d79e:	689b      	ldr	r3, [r3, #8]
 c00d7a0:	0f5b      	lsrs	r3, r3, #29
 c00d7a2:	b2db      	uxtb	r3, r3
 c00d7a4:	f003 0307 	and.w	r3, r3, #7
 c00d7a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c00d7aa:	7bbb      	ldrb	r3, [r7, #14]
 c00d7ac:	7b3a      	ldrb	r2, [r7, #12]
 c00d7ae:	4911      	ldr	r1, [pc, #68]	@ (c00d7f4 <UARTEx_SetNbDataToProcess+0x94>)
 c00d7b0:	5c8a      	ldrb	r2, [r1, r2]
 c00d7b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c00d7b6:	7b3a      	ldrb	r2, [r7, #12]
 c00d7b8:	490f      	ldr	r1, [pc, #60]	@ (c00d7f8 <UARTEx_SetNbDataToProcess+0x98>)
 c00d7ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c00d7bc:	fb93 f3f2 	sdiv	r3, r3, r2
 c00d7c0:	b29a      	uxth	r2, r3
 c00d7c2:	687b      	ldr	r3, [r7, #4]
 c00d7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c00d7c8:	7bfb      	ldrb	r3, [r7, #15]
 c00d7ca:	7b7a      	ldrb	r2, [r7, #13]
 c00d7cc:	4909      	ldr	r1, [pc, #36]	@ (c00d7f4 <UARTEx_SetNbDataToProcess+0x94>)
 c00d7ce:	5c8a      	ldrb	r2, [r1, r2]
 c00d7d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c00d7d4:	7b7a      	ldrb	r2, [r7, #13]
 c00d7d6:	4908      	ldr	r1, [pc, #32]	@ (c00d7f8 <UARTEx_SetNbDataToProcess+0x98>)
 c00d7d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c00d7da:	fb93 f3f2 	sdiv	r3, r3, r2
 c00d7de:	b29a      	uxth	r2, r3
 c00d7e0:	687b      	ldr	r3, [r7, #4]
 c00d7e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 c00d7e6:	bf00      	nop
 c00d7e8:	3714      	adds	r7, #20
 c00d7ea:	46bd      	mov	sp, r7
 c00d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d7f0:	4770      	bx	lr
 c00d7f2:	bf00      	nop
 c00d7f4:	0c00e590 	.word	0x0c00e590
 c00d7f8:	0c00e598 	.word	0x0c00e598

0c00d7fc <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, const LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 c00d7fc:	b480      	push	{r7}
 c00d7fe:	b083      	sub	sp, #12
 c00d800:	af00      	add	r7, sp, #0
 c00d802:	6078      	str	r0, [r7, #4]
 c00d804:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 c00d806:	687b      	ldr	r3, [r7, #4]
 c00d808:	681b      	ldr	r3, [r3, #0]
 c00d80a:	f043 0202 	orr.w	r2, r3, #2
 c00d80e:	687b      	ldr	r3, [r7, #4]
 c00d810:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 c00d812:	683b      	ldr	r3, [r7, #0]
 c00d814:	685a      	ldr	r2, [r3, #4]
 c00d816:	683b      	ldr	r3, [r7, #0]
 c00d818:	681b      	ldr	r3, [r3, #0]
 c00d81a:	021b      	lsls	r3, r3, #8
 c00d81c:	431a      	orrs	r2, r3
 c00d81e:	687b      	ldr	r3, [r7, #4]
 c00d820:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 c00d822:	687b      	ldr	r3, [r7, #4]
 c00d824:	681b      	ldr	r3, [r3, #0]
 c00d826:	f023 0202 	bic.w	r2, r3, #2
 c00d82a:	687b      	ldr	r3, [r7, #4]
 c00d82c:	601a      	str	r2, [r3, #0]
}
 c00d82e:	bf00      	nop
 c00d830:	370c      	adds	r7, #12
 c00d832:	46bd      	mov	sp, r7
 c00d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d838:	4770      	bx	lr

0c00d83a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 c00d83a:	b480      	push	{r7}
 c00d83c:	b08b      	sub	sp, #44	@ 0x2c
 c00d83e:	af00      	add	r7, sp, #0
 c00d840:	60f8      	str	r0, [r7, #12]
 c00d842:	60b9      	str	r1, [r7, #8]
 c00d844:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 c00d846:	68fb      	ldr	r3, [r7, #12]
 c00d848:	681a      	ldr	r2, [r3, #0]
 c00d84a:	68bb      	ldr	r3, [r7, #8]
 c00d84c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00d84e:	697b      	ldr	r3, [r7, #20]
 c00d850:	fa93 f3a3 	rbit	r3, r3
 c00d854:	613b      	str	r3, [r7, #16]
  return result;
 c00d856:	693b      	ldr	r3, [r7, #16]
 c00d858:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c00d85a:	69bb      	ldr	r3, [r7, #24]
 c00d85c:	2b00      	cmp	r3, #0
 c00d85e:	d101      	bne.n	c00d864 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 c00d860:	2320      	movs	r3, #32
 c00d862:	e003      	b.n	c00d86c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 c00d864:	69bb      	ldr	r3, [r7, #24]
 c00d866:	fab3 f383 	clz	r3, r3
 c00d86a:	b2db      	uxtb	r3, r3
 c00d86c:	005b      	lsls	r3, r3, #1
 c00d86e:	2103      	movs	r1, #3
 c00d870:	fa01 f303 	lsl.w	r3, r1, r3
 c00d874:	43db      	mvns	r3, r3
 c00d876:	401a      	ands	r2, r3
 c00d878:	68bb      	ldr	r3, [r7, #8]
 c00d87a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00d87c:	6a3b      	ldr	r3, [r7, #32]
 c00d87e:	fa93 f3a3 	rbit	r3, r3
 c00d882:	61fb      	str	r3, [r7, #28]
  return result;
 c00d884:	69fb      	ldr	r3, [r7, #28]
 c00d886:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c00d888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d88a:	2b00      	cmp	r3, #0
 c00d88c:	d101      	bne.n	c00d892 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 c00d88e:	2320      	movs	r3, #32
 c00d890:	e003      	b.n	c00d89a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 c00d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d894:	fab3 f383 	clz	r3, r3
 c00d898:	b2db      	uxtb	r3, r3
 c00d89a:	005b      	lsls	r3, r3, #1
 c00d89c:	6879      	ldr	r1, [r7, #4]
 c00d89e:	fa01 f303 	lsl.w	r3, r1, r3
 c00d8a2:	431a      	orrs	r2, r3
 c00d8a4:	68fb      	ldr	r3, [r7, #12]
 c00d8a6:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 c00d8a8:	bf00      	nop
 c00d8aa:	372c      	adds	r7, #44	@ 0x2c
 c00d8ac:	46bd      	mov	sp, r7
 c00d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d8b2:	4770      	bx	lr

0c00d8b4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 c00d8b4:	b480      	push	{r7}
 c00d8b6:	b085      	sub	sp, #20
 c00d8b8:	af00      	add	r7, sp, #0
 c00d8ba:	60f8      	str	r0, [r7, #12]
 c00d8bc:	60b9      	str	r1, [r7, #8]
 c00d8be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 c00d8c0:	68fb      	ldr	r3, [r7, #12]
 c00d8c2:	685a      	ldr	r2, [r3, #4]
 c00d8c4:	68bb      	ldr	r3, [r7, #8]
 c00d8c6:	43db      	mvns	r3, r3
 c00d8c8:	401a      	ands	r2, r3
 c00d8ca:	68bb      	ldr	r3, [r7, #8]
 c00d8cc:	6879      	ldr	r1, [r7, #4]
 c00d8ce:	fb01 f303 	mul.w	r3, r1, r3
 c00d8d2:	431a      	orrs	r2, r3
 c00d8d4:	68fb      	ldr	r3, [r7, #12]
 c00d8d6:	605a      	str	r2, [r3, #4]
}
 c00d8d8:	bf00      	nop
 c00d8da:	3714      	adds	r7, #20
 c00d8dc:	46bd      	mov	sp, r7
 c00d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d8e2:	4770      	bx	lr

0c00d8e4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 c00d8e4:	b480      	push	{r7}
 c00d8e6:	b08b      	sub	sp, #44	@ 0x2c
 c00d8e8:	af00      	add	r7, sp, #0
 c00d8ea:	60f8      	str	r0, [r7, #12]
 c00d8ec:	60b9      	str	r1, [r7, #8]
 c00d8ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 c00d8f0:	68fb      	ldr	r3, [r7, #12]
 c00d8f2:	689a      	ldr	r2, [r3, #8]
 c00d8f4:	68bb      	ldr	r3, [r7, #8]
 c00d8f6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00d8f8:	697b      	ldr	r3, [r7, #20]
 c00d8fa:	fa93 f3a3 	rbit	r3, r3
 c00d8fe:	613b      	str	r3, [r7, #16]
  return result;
 c00d900:	693b      	ldr	r3, [r7, #16]
 c00d902:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c00d904:	69bb      	ldr	r3, [r7, #24]
 c00d906:	2b00      	cmp	r3, #0
 c00d908:	d101      	bne.n	c00d90e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 c00d90a:	2320      	movs	r3, #32
 c00d90c:	e003      	b.n	c00d916 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 c00d90e:	69bb      	ldr	r3, [r7, #24]
 c00d910:	fab3 f383 	clz	r3, r3
 c00d914:	b2db      	uxtb	r3, r3
 c00d916:	005b      	lsls	r3, r3, #1
 c00d918:	2103      	movs	r1, #3
 c00d91a:	fa01 f303 	lsl.w	r3, r1, r3
 c00d91e:	43db      	mvns	r3, r3
 c00d920:	401a      	ands	r2, r3
 c00d922:	68bb      	ldr	r3, [r7, #8]
 c00d924:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00d926:	6a3b      	ldr	r3, [r7, #32]
 c00d928:	fa93 f3a3 	rbit	r3, r3
 c00d92c:	61fb      	str	r3, [r7, #28]
  return result;
 c00d92e:	69fb      	ldr	r3, [r7, #28]
 c00d930:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c00d932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d934:	2b00      	cmp	r3, #0
 c00d936:	d101      	bne.n	c00d93c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 c00d938:	2320      	movs	r3, #32
 c00d93a:	e003      	b.n	c00d944 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 c00d93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d93e:	fab3 f383 	clz	r3, r3
 c00d942:	b2db      	uxtb	r3, r3
 c00d944:	005b      	lsls	r3, r3, #1
 c00d946:	6879      	ldr	r1, [r7, #4]
 c00d948:	fa01 f303 	lsl.w	r3, r1, r3
 c00d94c:	431a      	orrs	r2, r3
 c00d94e:	68fb      	ldr	r3, [r7, #12]
 c00d950:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 c00d952:	bf00      	nop
 c00d954:	372c      	adds	r7, #44	@ 0x2c
 c00d956:	46bd      	mov	sp, r7
 c00d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d95c:	4770      	bx	lr

0c00d95e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 c00d95e:	b480      	push	{r7}
 c00d960:	b08b      	sub	sp, #44	@ 0x2c
 c00d962:	af00      	add	r7, sp, #0
 c00d964:	60f8      	str	r0, [r7, #12]
 c00d966:	60b9      	str	r1, [r7, #8]
 c00d968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 c00d96a:	68fb      	ldr	r3, [r7, #12]
 c00d96c:	68da      	ldr	r2, [r3, #12]
 c00d96e:	68bb      	ldr	r3, [r7, #8]
 c00d970:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00d972:	697b      	ldr	r3, [r7, #20]
 c00d974:	fa93 f3a3 	rbit	r3, r3
 c00d978:	613b      	str	r3, [r7, #16]
  return result;
 c00d97a:	693b      	ldr	r3, [r7, #16]
 c00d97c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c00d97e:	69bb      	ldr	r3, [r7, #24]
 c00d980:	2b00      	cmp	r3, #0
 c00d982:	d101      	bne.n	c00d988 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 c00d984:	2320      	movs	r3, #32
 c00d986:	e003      	b.n	c00d990 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 c00d988:	69bb      	ldr	r3, [r7, #24]
 c00d98a:	fab3 f383 	clz	r3, r3
 c00d98e:	b2db      	uxtb	r3, r3
 c00d990:	005b      	lsls	r3, r3, #1
 c00d992:	2103      	movs	r1, #3
 c00d994:	fa01 f303 	lsl.w	r3, r1, r3
 c00d998:	43db      	mvns	r3, r3
 c00d99a:	401a      	ands	r2, r3
 c00d99c:	68bb      	ldr	r3, [r7, #8]
 c00d99e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00d9a0:	6a3b      	ldr	r3, [r7, #32]
 c00d9a2:	fa93 f3a3 	rbit	r3, r3
 c00d9a6:	61fb      	str	r3, [r7, #28]
  return result;
 c00d9a8:	69fb      	ldr	r3, [r7, #28]
 c00d9aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c00d9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d9ae:	2b00      	cmp	r3, #0
 c00d9b0:	d101      	bne.n	c00d9b6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 c00d9b2:	2320      	movs	r3, #32
 c00d9b4:	e003      	b.n	c00d9be <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 c00d9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00d9b8:	fab3 f383 	clz	r3, r3
 c00d9bc:	b2db      	uxtb	r3, r3
 c00d9be:	005b      	lsls	r3, r3, #1
 c00d9c0:	6879      	ldr	r1, [r7, #4]
 c00d9c2:	fa01 f303 	lsl.w	r3, r1, r3
 c00d9c6:	431a      	orrs	r2, r3
 c00d9c8:	68fb      	ldr	r3, [r7, #12]
 c00d9ca:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 c00d9cc:	bf00      	nop
 c00d9ce:	372c      	adds	r7, #44	@ 0x2c
 c00d9d0:	46bd      	mov	sp, r7
 c00d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00d9d6:	4770      	bx	lr

0c00d9d8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 c00d9d8:	b480      	push	{r7}
 c00d9da:	b08b      	sub	sp, #44	@ 0x2c
 c00d9dc:	af00      	add	r7, sp, #0
 c00d9de:	60f8      	str	r0, [r7, #12]
 c00d9e0:	60b9      	str	r1, [r7, #8]
 c00d9e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 c00d9e4:	68fb      	ldr	r3, [r7, #12]
 c00d9e6:	6a1a      	ldr	r2, [r3, #32]
 c00d9e8:	68bb      	ldr	r3, [r7, #8]
 c00d9ea:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00d9ec:	697b      	ldr	r3, [r7, #20]
 c00d9ee:	fa93 f3a3 	rbit	r3, r3
 c00d9f2:	613b      	str	r3, [r7, #16]
  return result;
 c00d9f4:	693b      	ldr	r3, [r7, #16]
 c00d9f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c00d9f8:	69bb      	ldr	r3, [r7, #24]
 c00d9fa:	2b00      	cmp	r3, #0
 c00d9fc:	d101      	bne.n	c00da02 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 c00d9fe:	2320      	movs	r3, #32
 c00da00:	e003      	b.n	c00da0a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 c00da02:	69bb      	ldr	r3, [r7, #24]
 c00da04:	fab3 f383 	clz	r3, r3
 c00da08:	b2db      	uxtb	r3, r3
 c00da0a:	009b      	lsls	r3, r3, #2
 c00da0c:	210f      	movs	r1, #15
 c00da0e:	fa01 f303 	lsl.w	r3, r1, r3
 c00da12:	43db      	mvns	r3, r3
 c00da14:	401a      	ands	r2, r3
 c00da16:	68bb      	ldr	r3, [r7, #8]
 c00da18:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00da1a:	6a3b      	ldr	r3, [r7, #32]
 c00da1c:	fa93 f3a3 	rbit	r3, r3
 c00da20:	61fb      	str	r3, [r7, #28]
  return result;
 c00da22:	69fb      	ldr	r3, [r7, #28]
 c00da24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c00da26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00da28:	2b00      	cmp	r3, #0
 c00da2a:	d101      	bne.n	c00da30 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 c00da2c:	2320      	movs	r3, #32
 c00da2e:	e003      	b.n	c00da38 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 c00da30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00da32:	fab3 f383 	clz	r3, r3
 c00da36:	b2db      	uxtb	r3, r3
 c00da38:	009b      	lsls	r3, r3, #2
 c00da3a:	6879      	ldr	r1, [r7, #4]
 c00da3c:	fa01 f303 	lsl.w	r3, r1, r3
 c00da40:	431a      	orrs	r2, r3
 c00da42:	68fb      	ldr	r3, [r7, #12]
 c00da44:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 c00da46:	bf00      	nop
 c00da48:	372c      	adds	r7, #44	@ 0x2c
 c00da4a:	46bd      	mov	sp, r7
 c00da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00da50:	4770      	bx	lr

0c00da52 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 c00da52:	b480      	push	{r7}
 c00da54:	b08b      	sub	sp, #44	@ 0x2c
 c00da56:	af00      	add	r7, sp, #0
 c00da58:	60f8      	str	r0, [r7, #12]
 c00da5a:	60b9      	str	r1, [r7, #8]
 c00da5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 c00da5e:	68fb      	ldr	r3, [r7, #12]
 c00da60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c00da62:	68bb      	ldr	r3, [r7, #8]
 c00da64:	0a1b      	lsrs	r3, r3, #8
 c00da66:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00da68:	697b      	ldr	r3, [r7, #20]
 c00da6a:	fa93 f3a3 	rbit	r3, r3
 c00da6e:	613b      	str	r3, [r7, #16]
  return result;
 c00da70:	693b      	ldr	r3, [r7, #16]
 c00da72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 c00da74:	69bb      	ldr	r3, [r7, #24]
 c00da76:	2b00      	cmp	r3, #0
 c00da78:	d101      	bne.n	c00da7e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 c00da7a:	2320      	movs	r3, #32
 c00da7c:	e003      	b.n	c00da86 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 c00da7e:	69bb      	ldr	r3, [r7, #24]
 c00da80:	fab3 f383 	clz	r3, r3
 c00da84:	b2db      	uxtb	r3, r3
 c00da86:	009b      	lsls	r3, r3, #2
 c00da88:	210f      	movs	r1, #15
 c00da8a:	fa01 f303 	lsl.w	r3, r1, r3
 c00da8e:	43db      	mvns	r3, r3
 c00da90:	401a      	ands	r2, r3
 c00da92:	68bb      	ldr	r3, [r7, #8]
 c00da94:	0a1b      	lsrs	r3, r3, #8
 c00da96:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00da98:	6a3b      	ldr	r3, [r7, #32]
 c00da9a:	fa93 f3a3 	rbit	r3, r3
 c00da9e:	61fb      	str	r3, [r7, #28]
  return result;
 c00daa0:	69fb      	ldr	r3, [r7, #28]
 c00daa2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 c00daa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00daa6:	2b00      	cmp	r3, #0
 c00daa8:	d101      	bne.n	c00daae <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 c00daaa:	2320      	movs	r3, #32
 c00daac:	e003      	b.n	c00dab6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 c00daae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00dab0:	fab3 f383 	clz	r3, r3
 c00dab4:	b2db      	uxtb	r3, r3
 c00dab6:	009b      	lsls	r3, r3, #2
 c00dab8:	6879      	ldr	r1, [r7, #4]
 c00daba:	fa01 f303 	lsl.w	r3, r1, r3
 c00dabe:	431a      	orrs	r2, r3
 c00dac0:	68fb      	ldr	r3, [r7, #12]
 c00dac2:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 c00dac4:	bf00      	nop
 c00dac6:	372c      	adds	r7, #44	@ 0x2c
 c00dac8:	46bd      	mov	sp, r7
 c00daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00dace:	4770      	bx	lr

0c00dad0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 c00dad0:	b580      	push	{r7, lr}
 c00dad2:	b08a      	sub	sp, #40	@ 0x28
 c00dad4:	af00      	add	r7, sp, #0
 c00dad6:	6078      	str	r0, [r7, #4]
 c00dad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 c00dada:	683b      	ldr	r3, [r7, #0]
 c00dadc:	681b      	ldr	r3, [r3, #0]
 c00dade:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00dae0:	69bb      	ldr	r3, [r7, #24]
 c00dae2:	fa93 f3a3 	rbit	r3, r3
 c00dae6:	617b      	str	r3, [r7, #20]
  return result;
 c00dae8:	697b      	ldr	r3, [r7, #20]
 c00daea:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 c00daec:	69fb      	ldr	r3, [r7, #28]
 c00daee:	2b00      	cmp	r3, #0
 c00daf0:	d101      	bne.n	c00daf6 <LL_GPIO_Init+0x26>
    return 32U;
 c00daf2:	2320      	movs	r3, #32
 c00daf4:	e003      	b.n	c00dafe <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 c00daf6:	69fb      	ldr	r3, [r7, #28]
 c00daf8:	fab3 f383 	clz	r3, r3
 c00dafc:	b2db      	uxtb	r3, r3
 c00dafe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 c00db00:	e058      	b.n	c00dbb4 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 c00db02:	683b      	ldr	r3, [r7, #0]
 c00db04:	681a      	ldr	r2, [r3, #0]
 c00db06:	2101      	movs	r1, #1
 c00db08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00db0a:	fa01 f303 	lsl.w	r3, r1, r3
 c00db0e:	4013      	ands	r3, r2
 c00db10:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 c00db12:	6a3b      	ldr	r3, [r7, #32]
 c00db14:	2b00      	cmp	r3, #0
 c00db16:	d04a      	beq.n	c00dbae <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 c00db18:	683b      	ldr	r3, [r7, #0]
 c00db1a:	685b      	ldr	r3, [r3, #4]
 c00db1c:	2b01      	cmp	r3, #1
 c00db1e:	d003      	beq.n	c00db28 <LL_GPIO_Init+0x58>
 c00db20:	683b      	ldr	r3, [r7, #0]
 c00db22:	685b      	ldr	r3, [r3, #4]
 c00db24:	2b02      	cmp	r3, #2
 c00db26:	d10e      	bne.n	c00db46 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 c00db28:	683b      	ldr	r3, [r7, #0]
 c00db2a:	689b      	ldr	r3, [r3, #8]
 c00db2c:	461a      	mov	r2, r3
 c00db2e:	6a39      	ldr	r1, [r7, #32]
 c00db30:	6878      	ldr	r0, [r7, #4]
 c00db32:	f7ff fed7 	bl	c00d8e4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 c00db36:	683b      	ldr	r3, [r7, #0]
 c00db38:	6819      	ldr	r1, [r3, #0]
 c00db3a:	683b      	ldr	r3, [r7, #0]
 c00db3c:	68db      	ldr	r3, [r3, #12]
 c00db3e:	461a      	mov	r2, r3
 c00db40:	6878      	ldr	r0, [r7, #4]
 c00db42:	f7ff feb7 	bl	c00d8b4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 c00db46:	683b      	ldr	r3, [r7, #0]
 c00db48:	691b      	ldr	r3, [r3, #16]
 c00db4a:	461a      	mov	r2, r3
 c00db4c:	6a39      	ldr	r1, [r7, #32]
 c00db4e:	6878      	ldr	r0, [r7, #4]
 c00db50:	f7ff ff05 	bl	c00d95e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 c00db54:	683b      	ldr	r3, [r7, #0]
 c00db56:	685b      	ldr	r3, [r3, #4]
 c00db58:	2b02      	cmp	r3, #2
 c00db5a:	d121      	bne.n	c00dba0 <LL_GPIO_Init+0xd0>
 c00db5c:	6a3b      	ldr	r3, [r7, #32]
 c00db5e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 c00db60:	68fb      	ldr	r3, [r7, #12]
 c00db62:	fa93 f3a3 	rbit	r3, r3
 c00db66:	60bb      	str	r3, [r7, #8]
  return result;
 c00db68:	68bb      	ldr	r3, [r7, #8]
 c00db6a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 c00db6c:	693b      	ldr	r3, [r7, #16]
 c00db6e:	2b00      	cmp	r3, #0
 c00db70:	d101      	bne.n	c00db76 <LL_GPIO_Init+0xa6>
    return 32U;
 c00db72:	2320      	movs	r3, #32
 c00db74:	e003      	b.n	c00db7e <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 c00db76:	693b      	ldr	r3, [r7, #16]
 c00db78:	fab3 f383 	clz	r3, r3
 c00db7c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 c00db7e:	2b07      	cmp	r3, #7
 c00db80:	d807      	bhi.n	c00db92 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 c00db82:	683b      	ldr	r3, [r7, #0]
 c00db84:	695b      	ldr	r3, [r3, #20]
 c00db86:	461a      	mov	r2, r3
 c00db88:	6a39      	ldr	r1, [r7, #32]
 c00db8a:	6878      	ldr	r0, [r7, #4]
 c00db8c:	f7ff ff24 	bl	c00d9d8 <LL_GPIO_SetAFPin_0_7>
 c00db90:	e006      	b.n	c00dba0 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 c00db92:	683b      	ldr	r3, [r7, #0]
 c00db94:	695b      	ldr	r3, [r3, #20]
 c00db96:	461a      	mov	r2, r3
 c00db98:	6a39      	ldr	r1, [r7, #32]
 c00db9a:	6878      	ldr	r0, [r7, #4]
 c00db9c:	f7ff ff59 	bl	c00da52 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 c00dba0:	683b      	ldr	r3, [r7, #0]
 c00dba2:	685b      	ldr	r3, [r3, #4]
 c00dba4:	461a      	mov	r2, r3
 c00dba6:	6a39      	ldr	r1, [r7, #32]
 c00dba8:	6878      	ldr	r0, [r7, #4]
 c00dbaa:	f7ff fe46 	bl	c00d83a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 c00dbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00dbb0:	3301      	adds	r3, #1
 c00dbb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 c00dbb4:	683b      	ldr	r3, [r7, #0]
 c00dbb6:	681a      	ldr	r2, [r3, #0]
 c00dbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00dbba:	fa22 f303 	lsr.w	r3, r2, r3
 c00dbbe:	2b00      	cmp	r3, #0
 c00dbc0:	d19f      	bne.n	c00db02 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 c00dbc2:	2300      	movs	r3, #0
}
 c00dbc4:	4618      	mov	r0, r3
 c00dbc6:	3728      	adds	r7, #40	@ 0x28
 c00dbc8:	46bd      	mov	sp, r7
 c00dbca:	bd80      	pop	{r7, pc}

0c00dbcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 c00dbcc:	b084      	sub	sp, #16
 c00dbce:	b580      	push	{r7, lr}
 c00dbd0:	b084      	sub	sp, #16
 c00dbd2:	af00      	add	r7, sp, #0
 c00dbd4:	6078      	str	r0, [r7, #4]
 c00dbd6:	f107 001c 	add.w	r0, r7, #28
 c00dbda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 c00dbde:	687b      	ldr	r3, [r7, #4]
 c00dbe0:	68db      	ldr	r3, [r3, #12]
 c00dbe2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 c00dbe6:	687b      	ldr	r3, [r7, #4]
 c00dbe8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 c00dbea:	6878      	ldr	r0, [r7, #4]
 c00dbec:	f000 fa6c 	bl	c00e0c8 <USB_CoreReset>
 c00dbf0:	4603      	mov	r3, r0
 c00dbf2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 c00dbf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 c00dbf8:	2b00      	cmp	r3, #0
 c00dbfa:	d106      	bne.n	c00dc0a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 c00dbfc:	687b      	ldr	r3, [r7, #4]
 c00dbfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00dc00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 c00dc04:	687b      	ldr	r3, [r7, #4]
 c00dc06:	639a      	str	r2, [r3, #56]	@ 0x38
 c00dc08:	e005      	b.n	c00dc16 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 c00dc0a:	687b      	ldr	r3, [r7, #4]
 c00dc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00dc0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 c00dc12:	687b      	ldr	r3, [r7, #4]
 c00dc14:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 c00dc16:	7bfb      	ldrb	r3, [r7, #15]
}
 c00dc18:	4618      	mov	r0, r3
 c00dc1a:	3710      	adds	r7, #16
 c00dc1c:	46bd      	mov	sp, r7
 c00dc1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00dc22:	b004      	add	sp, #16
 c00dc24:	4770      	bx	lr

0c00dc26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 c00dc26:	b480      	push	{r7}
 c00dc28:	b083      	sub	sp, #12
 c00dc2a:	af00      	add	r7, sp, #0
 c00dc2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 c00dc2e:	687b      	ldr	r3, [r7, #4]
 c00dc30:	689b      	ldr	r3, [r3, #8]
 c00dc32:	f023 0201 	bic.w	r2, r3, #1
 c00dc36:	687b      	ldr	r3, [r7, #4]
 c00dc38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 c00dc3a:	2300      	movs	r3, #0
}
 c00dc3c:	4618      	mov	r0, r3
 c00dc3e:	370c      	adds	r7, #12
 c00dc40:	46bd      	mov	sp, r7
 c00dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00dc46:	4770      	bx	lr

0c00dc48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 c00dc48:	b580      	push	{r7, lr}
 c00dc4a:	b084      	sub	sp, #16
 c00dc4c:	af00      	add	r7, sp, #0
 c00dc4e:	6078      	str	r0, [r7, #4]
 c00dc50:	460b      	mov	r3, r1
 c00dc52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 c00dc54:	2300      	movs	r3, #0
 c00dc56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 c00dc58:	687b      	ldr	r3, [r7, #4]
 c00dc5a:	68db      	ldr	r3, [r3, #12]
 c00dc5c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 c00dc60:	687b      	ldr	r3, [r7, #4]
 c00dc62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 c00dc64:	78fb      	ldrb	r3, [r7, #3]
 c00dc66:	2b01      	cmp	r3, #1
 c00dc68:	d115      	bne.n	c00dc96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 c00dc6a:	687b      	ldr	r3, [r7, #4]
 c00dc6c:	68db      	ldr	r3, [r3, #12]
 c00dc6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 c00dc72:	687b      	ldr	r3, [r7, #4]
 c00dc74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 c00dc76:	200a      	movs	r0, #10
 c00dc78:	f7f8 fcd0 	bl	c00661c <HAL_Delay>
      ms += 10U;
 c00dc7c:	68fb      	ldr	r3, [r7, #12]
 c00dc7e:	330a      	adds	r3, #10
 c00dc80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 c00dc82:	6878      	ldr	r0, [r7, #4]
 c00dc84:	f000 fa12 	bl	c00e0ac <USB_GetMode>
 c00dc88:	4603      	mov	r3, r0
 c00dc8a:	2b01      	cmp	r3, #1
 c00dc8c:	d01e      	beq.n	c00dccc <USB_SetCurrentMode+0x84>
 c00dc8e:	68fb      	ldr	r3, [r7, #12]
 c00dc90:	2bc7      	cmp	r3, #199	@ 0xc7
 c00dc92:	d9f0      	bls.n	c00dc76 <USB_SetCurrentMode+0x2e>
 c00dc94:	e01a      	b.n	c00dccc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 c00dc96:	78fb      	ldrb	r3, [r7, #3]
 c00dc98:	2b00      	cmp	r3, #0
 c00dc9a:	d115      	bne.n	c00dcc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 c00dc9c:	687b      	ldr	r3, [r7, #4]
 c00dc9e:	68db      	ldr	r3, [r3, #12]
 c00dca0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 c00dca4:	687b      	ldr	r3, [r7, #4]
 c00dca6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 c00dca8:	200a      	movs	r0, #10
 c00dcaa:	f7f8 fcb7 	bl	c00661c <HAL_Delay>
      ms += 10U;
 c00dcae:	68fb      	ldr	r3, [r7, #12]
 c00dcb0:	330a      	adds	r3, #10
 c00dcb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 c00dcb4:	6878      	ldr	r0, [r7, #4]
 c00dcb6:	f000 f9f9 	bl	c00e0ac <USB_GetMode>
 c00dcba:	4603      	mov	r3, r0
 c00dcbc:	2b00      	cmp	r3, #0
 c00dcbe:	d005      	beq.n	c00dccc <USB_SetCurrentMode+0x84>
 c00dcc0:	68fb      	ldr	r3, [r7, #12]
 c00dcc2:	2bc7      	cmp	r3, #199	@ 0xc7
 c00dcc4:	d9f0      	bls.n	c00dca8 <USB_SetCurrentMode+0x60>
 c00dcc6:	e001      	b.n	c00dccc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 c00dcc8:	2301      	movs	r3, #1
 c00dcca:	e005      	b.n	c00dcd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 c00dccc:	68fb      	ldr	r3, [r7, #12]
 c00dcce:	2bc8      	cmp	r3, #200	@ 0xc8
 c00dcd0:	d101      	bne.n	c00dcd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 c00dcd2:	2301      	movs	r3, #1
 c00dcd4:	e000      	b.n	c00dcd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 c00dcd6:	2300      	movs	r3, #0
}
 c00dcd8:	4618      	mov	r0, r3
 c00dcda:	3710      	adds	r7, #16
 c00dcdc:	46bd      	mov	sp, r7
 c00dcde:	bd80      	pop	{r7, pc}

0c00dce0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 c00dce0:	b084      	sub	sp, #16
 c00dce2:	b580      	push	{r7, lr}
 c00dce4:	b086      	sub	sp, #24
 c00dce6:	af00      	add	r7, sp, #0
 c00dce8:	6078      	str	r0, [r7, #4]
 c00dcea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 c00dcee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 c00dcf2:	2300      	movs	r3, #0
 c00dcf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 c00dcf6:	687b      	ldr	r3, [r7, #4]
 c00dcf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 c00dcfa:	2300      	movs	r3, #0
 c00dcfc:	613b      	str	r3, [r7, #16]
 c00dcfe:	e009      	b.n	c00dd14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 c00dd00:	687a      	ldr	r2, [r7, #4]
 c00dd02:	693b      	ldr	r3, [r7, #16]
 c00dd04:	3340      	adds	r3, #64	@ 0x40
 c00dd06:	009b      	lsls	r3, r3, #2
 c00dd08:	4413      	add	r3, r2
 c00dd0a:	2200      	movs	r2, #0
 c00dd0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 c00dd0e:	693b      	ldr	r3, [r7, #16]
 c00dd10:	3301      	adds	r3, #1
 c00dd12:	613b      	str	r3, [r7, #16]
 c00dd14:	693b      	ldr	r3, [r7, #16]
 c00dd16:	2b0e      	cmp	r3, #14
 c00dd18:	d9f2      	bls.n	c00dd00 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 c00dd1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 c00dd1e:	2b00      	cmp	r3, #0
 c00dd20:	d11c      	bne.n	c00dd5c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 c00dd22:	68fb      	ldr	r3, [r7, #12]
 c00dd24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00dd28:	685b      	ldr	r3, [r3, #4]
 c00dd2a:	68fa      	ldr	r2, [r7, #12]
 c00dd2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 c00dd30:	f043 0302 	orr.w	r3, r3, #2
 c00dd34:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 c00dd36:	687b      	ldr	r3, [r7, #4]
 c00dd38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00dd3a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 c00dd3e:	687b      	ldr	r3, [r7, #4]
 c00dd40:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 c00dd42:	687b      	ldr	r3, [r7, #4]
 c00dd44:	681b      	ldr	r3, [r3, #0]
 c00dd46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 c00dd4a:	687b      	ldr	r3, [r7, #4]
 c00dd4c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 c00dd4e:	687b      	ldr	r3, [r7, #4]
 c00dd50:	681b      	ldr	r3, [r3, #0]
 c00dd52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 c00dd56:	687b      	ldr	r3, [r7, #4]
 c00dd58:	601a      	str	r2, [r3, #0]
 c00dd5a:	e005      	b.n	c00dd68 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 c00dd5c:	687b      	ldr	r3, [r7, #4]
 c00dd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c00dd60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 c00dd64:	687b      	ldr	r3, [r7, #4]
 c00dd66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 c00dd68:	68fb      	ldr	r3, [r7, #12]
 c00dd6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 c00dd6e:	461a      	mov	r2, r3
 c00dd70:	2300      	movs	r3, #0
 c00dd72:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 c00dd74:	2103      	movs	r1, #3
 c00dd76:	6878      	ldr	r0, [r7, #4]
 c00dd78:	f000 f95e 	bl	c00e038 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 c00dd7c:	2110      	movs	r1, #16
 c00dd7e:	6878      	ldr	r0, [r7, #4]
 c00dd80:	f000 f8fa 	bl	c00df78 <USB_FlushTxFifo>
 c00dd84:	4603      	mov	r3, r0
 c00dd86:	2b00      	cmp	r3, #0
 c00dd88:	d001      	beq.n	c00dd8e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 c00dd8a:	2301      	movs	r3, #1
 c00dd8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 c00dd8e:	6878      	ldr	r0, [r7, #4]
 c00dd90:	f000 f924 	bl	c00dfdc <USB_FlushRxFifo>
 c00dd94:	4603      	mov	r3, r0
 c00dd96:	2b00      	cmp	r3, #0
 c00dd98:	d001      	beq.n	c00dd9e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 c00dd9a:	2301      	movs	r3, #1
 c00dd9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 c00dd9e:	68fb      	ldr	r3, [r7, #12]
 c00dda0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00dda4:	461a      	mov	r2, r3
 c00dda6:	2300      	movs	r3, #0
 c00dda8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 c00ddaa:	68fb      	ldr	r3, [r7, #12]
 c00ddac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00ddb0:	461a      	mov	r2, r3
 c00ddb2:	2300      	movs	r3, #0
 c00ddb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 c00ddb6:	68fb      	ldr	r3, [r7, #12]
 c00ddb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00ddbc:	461a      	mov	r2, r3
 c00ddbe:	2300      	movs	r3, #0
 c00ddc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 c00ddc2:	2300      	movs	r3, #0
 c00ddc4:	613b      	str	r3, [r7, #16]
 c00ddc6:	e043      	b.n	c00de50 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 c00ddc8:	693b      	ldr	r3, [r7, #16]
 c00ddca:	015a      	lsls	r2, r3, #5
 c00ddcc:	68fb      	ldr	r3, [r7, #12]
 c00ddce:	4413      	add	r3, r2
 c00ddd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c00ddd4:	681b      	ldr	r3, [r3, #0]
 c00ddd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 c00ddda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c00ddde:	d118      	bne.n	c00de12 <USB_DevInit+0x132>
    {
      if (i == 0U)
 c00dde0:	693b      	ldr	r3, [r7, #16]
 c00dde2:	2b00      	cmp	r3, #0
 c00dde4:	d10a      	bne.n	c00ddfc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 c00dde6:	693b      	ldr	r3, [r7, #16]
 c00dde8:	015a      	lsls	r2, r3, #5
 c00ddea:	68fb      	ldr	r3, [r7, #12]
 c00ddec:	4413      	add	r3, r2
 c00ddee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c00ddf2:	461a      	mov	r2, r3
 c00ddf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 c00ddf8:	6013      	str	r3, [r2, #0]
 c00ddfa:	e013      	b.n	c00de24 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 c00ddfc:	693b      	ldr	r3, [r7, #16]
 c00ddfe:	015a      	lsls	r2, r3, #5
 c00de00:	68fb      	ldr	r3, [r7, #12]
 c00de02:	4413      	add	r3, r2
 c00de04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c00de08:	461a      	mov	r2, r3
 c00de0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 c00de0e:	6013      	str	r3, [r2, #0]
 c00de10:	e008      	b.n	c00de24 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 c00de12:	693b      	ldr	r3, [r7, #16]
 c00de14:	015a      	lsls	r2, r3, #5
 c00de16:	68fb      	ldr	r3, [r7, #12]
 c00de18:	4413      	add	r3, r2
 c00de1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c00de1e:	461a      	mov	r2, r3
 c00de20:	2300      	movs	r3, #0
 c00de22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 c00de24:	693b      	ldr	r3, [r7, #16]
 c00de26:	015a      	lsls	r2, r3, #5
 c00de28:	68fb      	ldr	r3, [r7, #12]
 c00de2a:	4413      	add	r3, r2
 c00de2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c00de30:	461a      	mov	r2, r3
 c00de32:	2300      	movs	r3, #0
 c00de34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 c00de36:	693b      	ldr	r3, [r7, #16]
 c00de38:	015a      	lsls	r2, r3, #5
 c00de3a:	68fb      	ldr	r3, [r7, #12]
 c00de3c:	4413      	add	r3, r2
 c00de3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 c00de42:	461a      	mov	r2, r3
 c00de44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 c00de48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 c00de4a:	693b      	ldr	r3, [r7, #16]
 c00de4c:	3301      	adds	r3, #1
 c00de4e:	613b      	str	r3, [r7, #16]
 c00de50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 c00de54:	461a      	mov	r2, r3
 c00de56:	693b      	ldr	r3, [r7, #16]
 c00de58:	4293      	cmp	r3, r2
 c00de5a:	d3b5      	bcc.n	c00ddc8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 c00de5c:	2300      	movs	r3, #0
 c00de5e:	613b      	str	r3, [r7, #16]
 c00de60:	e043      	b.n	c00deea <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 c00de62:	693b      	ldr	r3, [r7, #16]
 c00de64:	015a      	lsls	r2, r3, #5
 c00de66:	68fb      	ldr	r3, [r7, #12]
 c00de68:	4413      	add	r3, r2
 c00de6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00de6e:	681b      	ldr	r3, [r3, #0]
 c00de70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 c00de74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c00de78:	d118      	bne.n	c00deac <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 c00de7a:	693b      	ldr	r3, [r7, #16]
 c00de7c:	2b00      	cmp	r3, #0
 c00de7e:	d10a      	bne.n	c00de96 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 c00de80:	693b      	ldr	r3, [r7, #16]
 c00de82:	015a      	lsls	r2, r3, #5
 c00de84:	68fb      	ldr	r3, [r7, #12]
 c00de86:	4413      	add	r3, r2
 c00de88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00de8c:	461a      	mov	r2, r3
 c00de8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 c00de92:	6013      	str	r3, [r2, #0]
 c00de94:	e013      	b.n	c00debe <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 c00de96:	693b      	ldr	r3, [r7, #16]
 c00de98:	015a      	lsls	r2, r3, #5
 c00de9a:	68fb      	ldr	r3, [r7, #12]
 c00de9c:	4413      	add	r3, r2
 c00de9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00dea2:	461a      	mov	r2, r3
 c00dea4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 c00dea8:	6013      	str	r3, [r2, #0]
 c00deaa:	e008      	b.n	c00debe <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 c00deac:	693b      	ldr	r3, [r7, #16]
 c00deae:	015a      	lsls	r2, r3, #5
 c00deb0:	68fb      	ldr	r3, [r7, #12]
 c00deb2:	4413      	add	r3, r2
 c00deb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00deb8:	461a      	mov	r2, r3
 c00deba:	2300      	movs	r3, #0
 c00debc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 c00debe:	693b      	ldr	r3, [r7, #16]
 c00dec0:	015a      	lsls	r2, r3, #5
 c00dec2:	68fb      	ldr	r3, [r7, #12]
 c00dec4:	4413      	add	r3, r2
 c00dec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00deca:	461a      	mov	r2, r3
 c00decc:	2300      	movs	r3, #0
 c00dece:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 c00ded0:	693b      	ldr	r3, [r7, #16]
 c00ded2:	015a      	lsls	r2, r3, #5
 c00ded4:	68fb      	ldr	r3, [r7, #12]
 c00ded6:	4413      	add	r3, r2
 c00ded8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 c00dedc:	461a      	mov	r2, r3
 c00dede:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 c00dee2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 c00dee4:	693b      	ldr	r3, [r7, #16]
 c00dee6:	3301      	adds	r3, #1
 c00dee8:	613b      	str	r3, [r7, #16]
 c00deea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 c00deee:	461a      	mov	r2, r3
 c00def0:	693b      	ldr	r3, [r7, #16]
 c00def2:	4293      	cmp	r3, r2
 c00def4:	d3b5      	bcc.n	c00de62 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 c00def6:	68fb      	ldr	r3, [r7, #12]
 c00def8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00defc:	691b      	ldr	r3, [r3, #16]
 c00defe:	68fa      	ldr	r2, [r7, #12]
 c00df00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 c00df04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c00df08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 c00df0a:	687b      	ldr	r3, [r7, #4]
 c00df0c:	2200      	movs	r2, #0
 c00df0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 c00df10:	687b      	ldr	r3, [r7, #4]
 c00df12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 c00df16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 c00df18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 c00df1c:	2b00      	cmp	r3, #0
 c00df1e:	d105      	bne.n	c00df2c <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 c00df20:	687b      	ldr	r3, [r7, #4]
 c00df22:	699b      	ldr	r3, [r3, #24]
 c00df24:	f043 0210 	orr.w	r2, r3, #16
 c00df28:	687b      	ldr	r3, [r7, #4]
 c00df2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 c00df2c:	687b      	ldr	r3, [r7, #4]
 c00df2e:	699a      	ldr	r2, [r3, #24]
 c00df30:	4b10      	ldr	r3, [pc, #64]	@ (c00df74 <USB_DevInit+0x294>)
 c00df32:	4313      	orrs	r3, r2
 c00df34:	687a      	ldr	r2, [r7, #4]
 c00df36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 c00df38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 c00df3c:	2b00      	cmp	r3, #0
 c00df3e:	d005      	beq.n	c00df4c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 c00df40:	687b      	ldr	r3, [r7, #4]
 c00df42:	699b      	ldr	r3, [r3, #24]
 c00df44:	f043 0208 	orr.w	r2, r3, #8
 c00df48:	687b      	ldr	r3, [r7, #4]
 c00df4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 c00df4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 c00df50:	2b01      	cmp	r3, #1
 c00df52:	d107      	bne.n	c00df64 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 c00df54:	687b      	ldr	r3, [r7, #4]
 c00df56:	699b      	ldr	r3, [r3, #24]
 c00df58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 c00df5c:	f043 0304 	orr.w	r3, r3, #4
 c00df60:	687a      	ldr	r2, [r7, #4]
 c00df62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 c00df64:	7dfb      	ldrb	r3, [r7, #23]
}
 c00df66:	4618      	mov	r0, r3
 c00df68:	3718      	adds	r7, #24
 c00df6a:	46bd      	mov	sp, r7
 c00df6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00df70:	b004      	add	sp, #16
 c00df72:	4770      	bx	lr
 c00df74:	803c3800 	.word	0x803c3800

0c00df78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 c00df78:	b480      	push	{r7}
 c00df7a:	b085      	sub	sp, #20
 c00df7c:	af00      	add	r7, sp, #0
 c00df7e:	6078      	str	r0, [r7, #4]
 c00df80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 c00df82:	2300      	movs	r3, #0
 c00df84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 c00df86:	68fb      	ldr	r3, [r7, #12]
 c00df88:	3301      	adds	r3, #1
 c00df8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c00df8c:	68fb      	ldr	r3, [r7, #12]
 c00df8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c00df92:	d901      	bls.n	c00df98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 c00df94:	2303      	movs	r3, #3
 c00df96:	e01b      	b.n	c00dfd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 c00df98:	687b      	ldr	r3, [r7, #4]
 c00df9a:	691b      	ldr	r3, [r3, #16]
 c00df9c:	2b00      	cmp	r3, #0
 c00df9e:	daf2      	bge.n	c00df86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 c00dfa0:	2300      	movs	r3, #0
 c00dfa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 c00dfa4:	683b      	ldr	r3, [r7, #0]
 c00dfa6:	019b      	lsls	r3, r3, #6
 c00dfa8:	f043 0220 	orr.w	r2, r3, #32
 c00dfac:	687b      	ldr	r3, [r7, #4]
 c00dfae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 c00dfb0:	68fb      	ldr	r3, [r7, #12]
 c00dfb2:	3301      	adds	r3, #1
 c00dfb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c00dfb6:	68fb      	ldr	r3, [r7, #12]
 c00dfb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c00dfbc:	d901      	bls.n	c00dfc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 c00dfbe:	2303      	movs	r3, #3
 c00dfc0:	e006      	b.n	c00dfd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 c00dfc2:	687b      	ldr	r3, [r7, #4]
 c00dfc4:	691b      	ldr	r3, [r3, #16]
 c00dfc6:	f003 0320 	and.w	r3, r3, #32
 c00dfca:	2b20      	cmp	r3, #32
 c00dfcc:	d0f0      	beq.n	c00dfb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 c00dfce:	2300      	movs	r3, #0
}
 c00dfd0:	4618      	mov	r0, r3
 c00dfd2:	3714      	adds	r7, #20
 c00dfd4:	46bd      	mov	sp, r7
 c00dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00dfda:	4770      	bx	lr

0c00dfdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 c00dfdc:	b480      	push	{r7}
 c00dfde:	b085      	sub	sp, #20
 c00dfe0:	af00      	add	r7, sp, #0
 c00dfe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 c00dfe4:	2300      	movs	r3, #0
 c00dfe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 c00dfe8:	68fb      	ldr	r3, [r7, #12]
 c00dfea:	3301      	adds	r3, #1
 c00dfec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c00dfee:	68fb      	ldr	r3, [r7, #12]
 c00dff0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c00dff4:	d901      	bls.n	c00dffa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 c00dff6:	2303      	movs	r3, #3
 c00dff8:	e018      	b.n	c00e02c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 c00dffa:	687b      	ldr	r3, [r7, #4]
 c00dffc:	691b      	ldr	r3, [r3, #16]
 c00dffe:	2b00      	cmp	r3, #0
 c00e000:	daf2      	bge.n	c00dfe8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 c00e002:	2300      	movs	r3, #0
 c00e004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 c00e006:	687b      	ldr	r3, [r7, #4]
 c00e008:	2210      	movs	r2, #16
 c00e00a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 c00e00c:	68fb      	ldr	r3, [r7, #12]
 c00e00e:	3301      	adds	r3, #1
 c00e010:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c00e012:	68fb      	ldr	r3, [r7, #12]
 c00e014:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c00e018:	d901      	bls.n	c00e01e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 c00e01a:	2303      	movs	r3, #3
 c00e01c:	e006      	b.n	c00e02c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 c00e01e:	687b      	ldr	r3, [r7, #4]
 c00e020:	691b      	ldr	r3, [r3, #16]
 c00e022:	f003 0310 	and.w	r3, r3, #16
 c00e026:	2b10      	cmp	r3, #16
 c00e028:	d0f0      	beq.n	c00e00c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 c00e02a:	2300      	movs	r3, #0
}
 c00e02c:	4618      	mov	r0, r3
 c00e02e:	3714      	adds	r7, #20
 c00e030:	46bd      	mov	sp, r7
 c00e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00e036:	4770      	bx	lr

0c00e038 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 c00e038:	b480      	push	{r7}
 c00e03a:	b085      	sub	sp, #20
 c00e03c:	af00      	add	r7, sp, #0
 c00e03e:	6078      	str	r0, [r7, #4]
 c00e040:	460b      	mov	r3, r1
 c00e042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 c00e044:	687b      	ldr	r3, [r7, #4]
 c00e046:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 c00e048:	68fb      	ldr	r3, [r7, #12]
 c00e04a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00e04e:	681a      	ldr	r2, [r3, #0]
 c00e050:	78fb      	ldrb	r3, [r7, #3]
 c00e052:	68f9      	ldr	r1, [r7, #12]
 c00e054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 c00e058:	4313      	orrs	r3, r2
 c00e05a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 c00e05c:	2300      	movs	r3, #0
}
 c00e05e:	4618      	mov	r0, r3
 c00e060:	3714      	adds	r7, #20
 c00e062:	46bd      	mov	sp, r7
 c00e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00e068:	4770      	bx	lr

0c00e06a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 c00e06a:	b480      	push	{r7}
 c00e06c:	b085      	sub	sp, #20
 c00e06e:	af00      	add	r7, sp, #0
 c00e070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 c00e072:	687b      	ldr	r3, [r7, #4]
 c00e074:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 c00e076:	68fb      	ldr	r3, [r7, #12]
 c00e078:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 c00e07c:	681b      	ldr	r3, [r3, #0]
 c00e07e:	68fa      	ldr	r2, [r7, #12]
 c00e080:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 c00e084:	f023 0303 	bic.w	r3, r3, #3
 c00e088:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 c00e08a:	68fb      	ldr	r3, [r7, #12]
 c00e08c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 c00e090:	685b      	ldr	r3, [r3, #4]
 c00e092:	68fa      	ldr	r2, [r7, #12]
 c00e094:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 c00e098:	f043 0302 	orr.w	r3, r3, #2
 c00e09c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 c00e09e:	2300      	movs	r3, #0
}
 c00e0a0:	4618      	mov	r0, r3
 c00e0a2:	3714      	adds	r7, #20
 c00e0a4:	46bd      	mov	sp, r7
 c00e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00e0aa:	4770      	bx	lr

0c00e0ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 c00e0ac:	b480      	push	{r7}
 c00e0ae:	b083      	sub	sp, #12
 c00e0b0:	af00      	add	r7, sp, #0
 c00e0b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 c00e0b4:	687b      	ldr	r3, [r7, #4]
 c00e0b6:	695b      	ldr	r3, [r3, #20]
 c00e0b8:	f003 0301 	and.w	r3, r3, #1
}
 c00e0bc:	4618      	mov	r0, r3
 c00e0be:	370c      	adds	r7, #12
 c00e0c0:	46bd      	mov	sp, r7
 c00e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00e0c6:	4770      	bx	lr

0c00e0c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 c00e0c8:	b480      	push	{r7}
 c00e0ca:	b085      	sub	sp, #20
 c00e0cc:	af00      	add	r7, sp, #0
 c00e0ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 c00e0d0:	2300      	movs	r3, #0
 c00e0d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 c00e0d4:	68fb      	ldr	r3, [r7, #12]
 c00e0d6:	3301      	adds	r3, #1
 c00e0d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c00e0da:	68fb      	ldr	r3, [r7, #12]
 c00e0dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c00e0e0:	d901      	bls.n	c00e0e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 c00e0e2:	2303      	movs	r3, #3
 c00e0e4:	e022      	b.n	c00e12c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 c00e0e6:	687b      	ldr	r3, [r7, #4]
 c00e0e8:	691b      	ldr	r3, [r3, #16]
 c00e0ea:	2b00      	cmp	r3, #0
 c00e0ec:	daf2      	bge.n	c00e0d4 <USB_CoreReset+0xc>

  count = 10U;
 c00e0ee:	230a      	movs	r3, #10
 c00e0f0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 c00e0f2:	e002      	b.n	c00e0fa <USB_CoreReset+0x32>
  {
    count--;
 c00e0f4:	68fb      	ldr	r3, [r7, #12]
 c00e0f6:	3b01      	subs	r3, #1
 c00e0f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 c00e0fa:	68fb      	ldr	r3, [r7, #12]
 c00e0fc:	2b00      	cmp	r3, #0
 c00e0fe:	d1f9      	bne.n	c00e0f4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 c00e100:	687b      	ldr	r3, [r7, #4]
 c00e102:	691b      	ldr	r3, [r3, #16]
 c00e104:	f043 0201 	orr.w	r2, r3, #1
 c00e108:	687b      	ldr	r3, [r7, #4]
 c00e10a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 c00e10c:	68fb      	ldr	r3, [r7, #12]
 c00e10e:	3301      	adds	r3, #1
 c00e110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 c00e112:	68fb      	ldr	r3, [r7, #12]
 c00e114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 c00e118:	d901      	bls.n	c00e11e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 c00e11a:	2303      	movs	r3, #3
 c00e11c:	e006      	b.n	c00e12c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 c00e11e:	687b      	ldr	r3, [r7, #4]
 c00e120:	691b      	ldr	r3, [r3, #16]
 c00e122:	f003 0301 	and.w	r3, r3, #1
 c00e126:	2b01      	cmp	r3, #1
 c00e128:	d0f0      	beq.n	c00e10c <USB_CoreReset+0x44>

  return HAL_OK;
 c00e12a:	2300      	movs	r3, #0
}
 c00e12c:	4618      	mov	r0, r3
 c00e12e:	3714      	adds	r7, #20
 c00e130:	46bd      	mov	sp, r7
 c00e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00e136:	4770      	bx	lr

0c00e138 <memset>:
 c00e138:	4402      	add	r2, r0
 c00e13a:	4603      	mov	r3, r0
 c00e13c:	4293      	cmp	r3, r2
 c00e13e:	d100      	bne.n	c00e142 <memset+0xa>
 c00e140:	4770      	bx	lr
 c00e142:	f803 1b01 	strb.w	r1, [r3], #1
 c00e146:	e7f9      	b.n	c00e13c <memset+0x4>

0c00e148 <__libc_init_array>:
 c00e148:	b570      	push	{r4, r5, r6, lr}
 c00e14a:	4d0d      	ldr	r5, [pc, #52]	@ (c00e180 <__libc_init_array+0x38>)
 c00e14c:	2600      	movs	r6, #0
 c00e14e:	4c0d      	ldr	r4, [pc, #52]	@ (c00e184 <__libc_init_array+0x3c>)
 c00e150:	1b64      	subs	r4, r4, r5
 c00e152:	10a4      	asrs	r4, r4, #2
 c00e154:	42a6      	cmp	r6, r4
 c00e156:	d109      	bne.n	c00e16c <__libc_init_array+0x24>
 c00e158:	4d0b      	ldr	r5, [pc, #44]	@ (c00e188 <__libc_init_array+0x40>)
 c00e15a:	2600      	movs	r6, #0
 c00e15c:	4c0b      	ldr	r4, [pc, #44]	@ (c00e18c <__libc_init_array+0x44>)
 c00e15e:	f000 f81b 	bl	c00e198 <_init>
 c00e162:	1b64      	subs	r4, r4, r5
 c00e164:	10a4      	asrs	r4, r4, #2
 c00e166:	42a6      	cmp	r6, r4
 c00e168:	d105      	bne.n	c00e176 <__libc_init_array+0x2e>
 c00e16a:	bd70      	pop	{r4, r5, r6, pc}
 c00e16c:	f855 3b04 	ldr.w	r3, [r5], #4
 c00e170:	3601      	adds	r6, #1
 c00e172:	4798      	blx	r3
 c00e174:	e7ee      	b.n	c00e154 <__libc_init_array+0xc>
 c00e176:	f855 3b04 	ldr.w	r3, [r5], #4
 c00e17a:	3601      	adds	r6, #1
 c00e17c:	4798      	blx	r3
 c00e17e:	e7f2      	b.n	c00e166 <__libc_init_array+0x1e>
 c00e180:	0c00e93c 	.word	0x0c00e93c
 c00e184:	0c00e93c 	.word	0x0c00e93c
 c00e188:	0c00e93c 	.word	0x0c00e93c
 c00e18c:	0c00e940 	.word	0x0c00e940

0c00e190 <__aeabi_memclr>:
 c00e190:	2200      	movs	r2, #0
 c00e192:	f7f5 bed3 	b.w	c003f3c <__aeabi_memset>
	...

0c00e198 <_init>:
 c00e198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00e19a:	bf00      	nop
 c00e19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00e19e:	bc08      	pop	{r3}
 c00e1a0:	469e      	mov	lr, r3
 c00e1a2:	4770      	bx	lr

0c00e1a4 <_fini>:
 c00e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00e1a6:	bf00      	nop
 c00e1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00e1aa:	bc08      	pop	{r3}
 c00e1ac:	469e      	mov	lr, r3
 c00e1ae:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c0fe000 <SECURE_SystemCoreClockUpdate>:
 c0fe000:	e97f e97f 	sg
 c0fe004:	f708 b9da 	b.w	c0063bc <__acle_se_SECURE_SystemCoreClockUpdate>

0c0fe008 <SECURE_ECC_Sign_NSC>:
 c0fe008:	e97f e97f 	sg
 c0fe00c:	f707 b9fe 	b.w	c00540c <__acle_se_SECURE_ECC_Sign_NSC>

0c0fe010 <SECURE_RegisterCallback>:
 c0fe010:	e97f e97f 	sg
 c0fe014:	f707 b9a4 	b.w	c005360 <__acle_se_SECURE_RegisterCallback>
	...
